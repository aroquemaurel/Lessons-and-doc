-- construit une liste vide
procedure creerListe(sortie l <Liste[T]>)
debut
	l.nbElements <- 0;
fin

-- calcule la longueure d'une liste l
fonction longueur(entree l <Liste[T]>)
	retourne <Entier>
debut	
	retourner(l.nbElements);
fin

--retourne l'élémnet de rang i d'une liste l
-- nécessite 1 <= i <= longueur(l)
fonction ieme(entree l <Liste[T]>, entree i <Entier>)
	retourne <T>
	declenche listeVide, rangInvalide
debut
	si l.nbElements = 0 alors
		declencher listeVide;
	fin si;
	si i < 1 ou i > l.nbElements alors
		declencher rangInvalide;
	fin si;
	retourner (l.tab[i]);
fin

-- insère un élément e dans une liste l au rang i
procedure inserer(maj l <Liste[T]>, entree i <Entier>, entree e<T>)
debut
	si i < 1 ou i > longueur(l) + 1 alors
		declencher(rangInvalide);
	fin si;
	si l.nbElements = LG_MAX alors
		declencher(listePleine);
	fin si;
	k <- l.nbElements;
	tantque k >= i faire
		l.tab[k+1] <- l.tab[k];
		k <- k - 1;
	fin tantque;
	l.tab[i] <- e;
fin
	
procedure supprimer (maj l <Liste[T]>, entree i <Entier>) 
	declenche listeVide, rangInvalide	
glossaire
	j <Entier>;
debut
	si l.nbElements = 0 alors
		declencher (listeVide);
	fin si;
	si i < 1 ou i > l.nbElements alors
		declencher (rangInvalide);
	fin si;

	j <- i;
	tantque j <= l.nbElements - 1 faire
		l.element[j] <- l.element[j+1];
		j <- j + 1;
	fin tantque;
	l.nbElements <- l.nbElements - 1;
fin

