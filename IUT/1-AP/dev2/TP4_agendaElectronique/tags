!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Agenda	agenda.h	/^struct Agenda$/;"	s
Agenda::nbEvenement	agenda.h	/^	int nbEvenement;$/;"	m	struct:Agenda	access:public
Agenda::sem	agenda.h	/^	Semaine sem;$/;"	m	struct:Agenda	access:public
CFLAGS	makefile	/^CFLAGS = $/;"	m
CP	makefile	/^CP=g++$/;"	m
DIMANCHE	evenement.h	12;"	d
EXEC	makefile	/^EXEC = agendaCli$/;"	m
EXT	makefile	/^EXT=cpp$/;"	m
Evenement	evenement.h	/^struct Evenement {$/;"	s
Evenement::descAb	evenement.h	/^	std::string descAb;$/;"	m	struct:Evenement	access:public
Evenement::descEt	evenement.h	/^	std::string descEt;$/;"	m	struct:Evenement	access:public
Evenement::hDeb	evenement.h	/^	float hDeb;$/;"	m	struct:Evenement	access:public
Evenement::hFin	evenement.h	/^	float hFin;$/;"	m	struct:Evenement	access:public
Evenement::jour	evenement.h	/^	int jour;$/;"	m	struct:Evenement	access:public
F2	makefile	/^F2 = evenement$/;"	m
F3	makefile	/^F3 = agenda$/;"	m
JEUDI	evenement.h	9;"	d
LDFLAGS	makefile	/^LDFLAGS =$/;"	m
LUNDI	evenement.h	6;"	d
MARDI	evenement.h	7;"	d
MERCREDI	evenement.h	8;"	d
NB_EVENEMENTS	agenda.h	1;"	d
PP	makefile	/^PP = clientAgenda$/;"	m
SAMEDI	evenement.h	11;"	d
Semaine	agenda.h	/^typedef Evenement Semaine[NB_EVENEMENTS];$/;"	t
VENDREDI	evenement.h	10;"	d
afficherAgendaDetail	agenda.cpp	/^void afficherAgendaDetail(const Agenda a)$/;"	f	signature:(const Agenda a)
afficherAgendaDetail	agenda.h	/^void afficherAgendaDetail(const Agenda a);$/;"	p	signature:(const Agenda a)
afficherAgendaGlobal	agenda.cpp	/^void afficherAgendaGlobal(const Agenda a)$/;"	f	signature:(const Agenda a)
afficherAgendaGlobal	agenda.h	/^void afficherAgendaGlobal(const Agenda a);$/;"	p	signature:(const Agenda a)
afficherDebutJourSemaine	evenement.cpp	/^void afficherDebutJourSemaine(const int j)$/;"	f	signature:(const int j)
afficherDebutJourSemaine	evenement.h	/^void afficherDebutJourSemaine(const int j); $/;"	p	signature:(const int j)
afficherEvenement	evenement.cpp	/^void afficherEvenement(const Evenement e)$/;"	f	signature:(const Evenement e)
afficherEvenement	evenement.h	/^void afficherEvenement(const Evenement e);$/;"	p	signature:(const Evenement e)
afficherJourSemaine	evenement.cpp	/^void afficherJourSemaine(const int j)$/;"	f	signature:(const int j)
afficherJourSemaine	evenement.h	/^void afficherJourSemaine(const int j);$/;"	p	signature:(const int j)
descAb	evenement.h	/^	std::string descAb;$/;"	m	struct:Evenement	access:public
descEt	evenement.h	/^	std::string descEt;$/;"	m	struct:Evenement	access:public
estAnterieur	evenement.cpp	/^bool estAnterieur(const Evenement e1, const Evenement e2)$/;"	f	signature:(const Evenement e1, const Evenement e2)
estAnterieur	evenement.h	/^bool estAnterieur(const Evenement e1, $/;"	p	signature:(const Evenement e1, const Evenement e2)
hDeb	evenement.h	/^	float hDeb;$/;"	m	struct:Evenement	access:public
hFin	evenement.h	/^	float hFin;$/;"	m	struct:Evenement	access:public
heureValide	evenement.cpp	/^bool heureValide(const float h )$/;"	f	signature:(const float h )
heureValide	evenement.h	/^bool heureValide(const float h );$/;"	p	signature:(const float h )
initialiserAgenda	agenda.cpp	/^void initialiserAgenda(Agenda &a)$/;"	f	signature:(Agenda &a)
initialiserAgenda	agenda.h	/^void initialiserAgenda(Agenda &a);$/;"	p	signature:(Agenda &a)
initialiserEvenement	evenement.cpp	/^void initialiserEvenement(const int j, const float hD, const float hF, string a,$/;"	f	signature:(const int j, const float hD, const float hF, string a, string d, Evenement &e)
initialiserEvenement	evenement.h	/^void initialiserEvenement(const int j, $/;"	p	signature:(const int j, const float hD, const float hF, std::string a, std::string d, Evenement &e)
jour	evenement.h	/^	int jour;$/;"	m	struct:Evenement	access:public
main	clientAgenda.cpp	/^int main(void)$/;"	f	signature:(void)
nbEvenement	agenda.h	/^	int nbEvenement;$/;"	m	struct:Agenda	access:public
placerEvenement	agenda.cpp	/^void placerEvenement(Agenda &a, const Evenement e) throw (string)$/;"	f	signature:(Agenda &a, const Evenement e)
placerEvenement	agenda.h	/^void placerEvenement(Agenda &a, const Evenement e) throw (std::string);$/;"	p	signature:(Agenda &a, const Evenement e)
saisirEvenement	evenement.cpp	/^void saisirEvenement(Evenement &e)$/;"	f	signature:(Evenement &e)
saisirEvenement	evenement.h	/^void saisirEvenement(Evenement &e);$/;"	p	signature:(Evenement &e)
sem	agenda.h	/^	Semaine sem;$/;"	m	struct:Agenda	access:public
validerEvenement	evenement.cpp	/^void validerEvenement(const Evenement e)$/;"	f	signature:(const Evenement e)
validerEvenement	evenement.h	/^void validerEvenement(const Evenement e);$/;"	p	signature:(const Evenement e)
