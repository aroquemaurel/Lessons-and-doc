fonction estValide (entree h <Entier>, entree m <Entier>, entree s <Entier>) retourne <Booleen>
debut
	retourner h < 0 ou m < 0 ou s < 0 ou m > 59 ou s > 59 ; 
fin

fonction uneDuree(entree h <Entier>, entree m <Entier>, entree s <Entier>)
	retourne Duree
	declenche dureeInvalide
glossaire
	d <Duree>;
debut
	si non dureeValide(h, m, s) alors
		declencher dureeInvalide;
	fin si;
	d.s = h*3600 + m * 60 + s
	retourner d;
fin

fonction heures (entree d <Duree>)
	retourne <Entier>
debut
	retourner (d.s div 3600);
fin

fonction minutes(entree d <Duree>)
	retourne <Entier>
debut
	retourner (d.s - heures(d)*3600 div 60) ;
fin

fonction secondes(entree d <Duree>)
	retourne <Entier>
debut
	retourner d.s mod 60;
fin

fonction inf(entree d1 <Duree>, entree d2 <Duree>)
	retourne <Booleen>
debut
	retourner d1.s < d2.s; 
fin

-- exportation de l'egalite
-- deja realise par le compilo => comparaison de deux enregistrement!
fonction "="(entree d1 <Duree>, entree d2 <Duree>)
	retourne <Booleen>;

--exportation de l'affectation
-- deja realise par le compilo => affectation de deux enregistrement!
procedure "<-"(maj d1 <Duree> entree d2 <Duree>);

procedure ajouterUneSeconde (maj d <Duree>) 
debut
	d.s <- d.s + 1;
fin

