package exo1;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

public class DrawPanel extends javax.swing.JPanel {
       private List<Point> points;
       protected Point origin;
       protected Point destination;
       protected boolean isMoving;     
        
        /**
         * Creates new form DrawPanel
         */
        public DrawPanel() {
                initComponents();
                init();
        }
       
        public void init() {
                points = new ArrayList<>();
                origin = new Point();
                destination = new Point();
                isMoving = false;
        }
        
        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);   
            // DRAW RED LINES
            //if (isMoving) {
            drawRedLines(g);
            //}  
            // DRAW  GHOST 
            drawGhostLine(g);
        }
             
        public void drawRedLines(Graphics g) {
                g.setColor(Color.RED);
                for (int i = 0; i < points.size(); i+=2) {
                        g.drawLine(
                            (int)points.get(i).getX(), 
                            (int)points.get(i).getY(),
                            (int)points.get(i+1).getX(), 
                            (int)points.get(i+1).getY());
                }
                
        }
        
        public void drawGhostLine(Graphics g) {
               g.setColor(Color.DARK_GRAY);
               g.drawLine(
                   (int)origin.getX(), 
                   (int)origin.getY(),
                   (int)destination.getX(), 
                   (int)destination.getY());
        }

        public void treatmentMousePressed(Point p) {
                clean();
                origin = p;
                destination = p;
                //isMoving = isMoving;
        }
        
        public void treatmentMouseReleased(Point p) {
                if (isMoving) {
                        //origin = origin;
                        destination = p;
                        storePoint();
                        isMoving = false;
                        clean();
                } 
                /*else {
                        origin = origin;
                        destination = destination;
                        isMoving = false;         
                        clean();
                }
                */
        }
        
        public void treatmentMouseMovePressing(Point p) {                
            //origin = origin;
            destination = p;
            isMoving = true;
            clean();
        }
        
         public void treatmentMouseMoveReleasing() {                 
/*            origin = origin;
            destination = destination;
            isMoving = isMoving;*/
        }
        
       public void clean() {
            this.repaint();
       }
        
       public void storePoint() {
             points.add(origin);
             points.add(destination);
       }
       
        public List<Point> getPoints() {
                return points;
        }

        public void setPoints(List<Point> points) {
                this.points = points;
        }

        public Point getOrigin() {
                return origin;
        }

        public void setOrigin(Point origin) {
                this.origin = origin;
        }

        public Point getDestination() {
                return destination;
        }

        public void setDestination(Point destination) {
                this.destination = destination;
        }

        public boolean IsMoving() {
                return isMoving;
        }

        public void setIsMoving(boolean isMoving) {
                this.isMoving = isMoving;
        }
        
        
       

        /**
         * This method is called from within the constructor to initialize the
         * form. WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
