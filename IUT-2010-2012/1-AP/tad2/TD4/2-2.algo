fonction estValide (entree d <Duree>) retourne <Booleen>
debut
	retourner d.h < 0 ou d.m < 0 ou d.s < 0 ou d.m > 59 ou d.s > 59 ; 
fin

-- Necessite $h \leq 0$ et $0 \leq m \leq 59$ et $0 \leq s \leq 59$ 
fonction uneDuree (entree h <Entier>, entree m <Entier>, entree s <Entier>) 
		retourne <Duree>
		declenche dureeInvalide
glossaire
	d <Duree>;
debut
	si non estValide(d) alors
		declencher dureeInvalide;
	fin si;

	d.h <- h;
	d.m <- m;
	d.s <- s;

	retourner d;
fin	

fonction heures (entree d <Duree>)
	retourne <Entier>
debut
	retourner d.h ;
fin

fonction minutes(entree d <Duree>)
	retourne <Entier>
debut
	retourner d.m ;
fin

fonction secondes(entree d <Duree>)
	retourne <Entier>
debut
	retourner d.s ;
fin

fonction inf(entree d1 <Duree>, entree d2 <Duree>)
	retourne <Booleen>
debut
	retourner d1.h * 3600 + d1.m * 60 + d1.s < d2.h * 3600 + d2.m * 60 + d2.s;
	-- ou sinon 
		--retourner ((d1.h<d2.h) ou (d1.h=d2.h et d1.m < d2.m) 
		-- ou (d1.h = d2.h et d1.m = d2.m et d1.s < d2.s));
fin

-- exportation de l'egalite
-- deja realise par le compilo => comparaison de deux enregistrement!
fonction "="(entree d1 <Duree>, entree d2 <Duree>)
	retourne <Booleen>;

--exportation de l'affectation
-- deja realise par le compilo => affectation de deux enregistrement!
procedure "<-"(maj d1 <Duree> entree d2 <Duree>)
debut
fin

procedure ajouterUneSeconde (maj d <Duree>) 
debut
	si d.s < 59 alors 
		d.s <- d.s + 1;
	sinon
		si d.m < 59 alors
			d.m <- d.m + 1;
			d.s <- 0;
		sinon
			d.h <- d.h + 1;
			d.m <- 0;
			d.s <- 0;
		fin si;
	fin si;
fin

