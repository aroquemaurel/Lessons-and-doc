!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
C	convRomainEntier.h	22;"	d
CFLAGS	makefile	/^CFLAGS = $/;"	m
CP	makefile	/^CP=g++$/;"	m
D	convRomainEntier.h	23;"	d
EXEC	makefile	/^EXEC = nbRomains$/;"	m
EXT	makefile	/^EXT=cpp$/;"	m
F2	makefile	/^F2 = convEntierRomain$/;"	m
F3	makefile	/^F3 = convRomainEntier$/;"	m
I	convRomainEntier.h	18;"	d
L	convRomainEntier.h	21;"	d
LDFLAGS	makefile	/^LDFLAGS =$/;"	m
M	convRomainEntier.h	24;"	d
PP	makefile	/^PP = main$/;"	m
V	convRomainEntier.h	19;"	d
X	convRomainEntier.h	20;"	d
__convEntierRomain	convEntierRomain.h	15;"	d
__convRomainEntier	convRomainEntier.h	15;"	d
conv	convEntierRomain.h	/^const std::string conv[10][4] = {"", "", "", "", $/;"	v
conversionStringEntier	convEntierRomain.cpp	/^int conversionStringEntier(std::string chaine) throw (std::string)$/;"	f	signature:(std::string chaine)
convertirEntierRomain	convEntierRomain.cpp	/^std::string convertirEntierRomain(int entier) throw (std::string)$/;"	f	signature:(int entier)
convertirEntierRomain	convEntierRomain.h	/^std::string convertirEntierRomain(int entier) throw (std::string);$/;"	p	signature:(int entier)
convertirRomainEntier	convRomainEntier.cpp	/^int convertirRomainEntier(std::string romain)$/;"	f	signature:(std::string romain)
convertirRomainEntier	convRomainEntier.h	/^int convertirRomainEntier(std::string romain) throw (std::string);$/;"	p	signature:(std::string romain)
except_nbRepet	convRomainEntier.cpp	/^void except_nbRepet(std::string nbRomain, $/;"	f	signature:(std::string nbRomain, bool &moins3M, bool &moins3C, bool &moins3X, bool &moins3I, int &nbD, int &nbL, int &nbV)
except_nbRepet	convRomainEntier.h	/^void except_nbRepet(std::string nbRomain, $/;"	p	signature:(std::string nbRomain, bool &moins3M, bool &moins3C, bool &moins3X, bool &moins3I, int &nbD, int &nbL, int &nbV)
except_prefix	convRomainEntier.cpp	/^void except_prefix(const std::string nbRomain, $/;"	f	signature:(const std::string nbRomain, const char prefix, const char suffix1, const char suffix2, const int valMaxApres, bool &suffix1Ok, bool &suffix2Ok, bool &valApresSuf1, bool &valApresSuf2)
except_prefix	convRomainEntier.h	/^void except_prefix(const std::string nbRomain, $/;"	p	signature:(const std::string nbRomain, const char prefix, const char suffix1, const char suffix2, const int valMaxApres, bool &prefix1, bool &prefix2, bool &valApresOk)
extraireChiffre	convEntierRomain.cpp	/^void extraireChiffre(const int nombre, int chiffre[]) $/;"	f	signature:(const int nombre, int chiffre[])
extraireChiffre	convEntierRomain.h	/^void extraireChiffre(const int nombre, int chiffre[]) throw (std::string);$/;"	p	signature:(const int nombre, int chiffre[])
main	main.cpp	/^int main(void)$/;"	f	signature:(void)
menu_ConvEntierRomain	main.cpp	/^void menu_ConvEntierRomain()$/;"	f	signature:()
menu_ConvEntierRomain	main.cpp	/^void menu_ConvEntierRomain()$/;"	p	file:	signature:()
menu_ConvRomainEntier	main.cpp	/^void menu_ConvRomainEntier()$/;"	f	signature:()
menu_ConvRomainEntier	main.cpp	/^void menu_ConvRomainEntier();$/;"	p	file:	signature:()
nbChiffreNb	convEntierRomain.cpp	/^int nbChiffreNb(const int nombre[])$/;"	f	signature:(const int nombre[])
nbChiffreNb	convEntierRomain.h	/^int nbChiffreNb(const int nombre[]) throw (std::string);$/;"	p	signature:(const int nombre[])
testerNbRomain	convRomainEntier.cpp	/^void testerNbRomain(std::string nbRomain)$/;"	f	signature:(std::string nbRomain)
testerNbRomain	convRomainEntier.h	/^void testerNbRomain(std::string nbRomain);$/;"	p	signature:(std::string nbRomain)
testerNombre	convEntierRomain.cpp	/^void testerNombre(std::string nombre) throw (std::string)$/;"	f	signature:(std::string nombre)
testerNombre	convEntierRomain.h	/^void testerNombre(std::string nombre) throw (std::string);$/;"	p	signature:(std::string nombre)
valeur	convRomainEntier.cpp	/^int valeur(char romain)$/;"	f	signature:(char romain)
valeur	convRomainEntier.h	/^int valeur(char romain) throw (std::string);$/;"	p	signature:(char romain)
