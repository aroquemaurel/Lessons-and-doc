!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Cell	listeDoublementChaine.h	/^} Cell;$/;"	t	typeref:struct:etCell
Element	element.h	/^} Element;$/;"	t	typeref:struct:elt
Iterateur	iterateur.h	/^typedef struct etIte* Iterateur;$/;"	t	typeref:struct:etIte
LDC	listeDoublementChaine.h	/^typedef struct LDCInterne* LDC;$/;"	t	typeref:struct:LDCInterne
LDCInterne	listeDoublementChaine.h	/^typedef struct LDCInterne {$/;"	s
LDCInterne	listeDoublementChaine.h	/^} LDCInterne;$/;"	t	typeref:struct:LDCInterne
LDCInterne::dernier	listeDoublementChaine.h	/^	Cell* dernier;$/;"	m	struct:LDCInterne	access:public
LDCInterne::premier	listeDoublementChaine.h	/^	Cell* premier;$/;"	m	struct:LDCInterne	access:public
__ELEMENT	element.h	2;"	d
__LISTEDOUBLEMENTCHAINE	listeDoublementChaine.h	2;"	d
affichageCroisant	listeDoublementChaine.c	/^void affichageCroisant(LDC liste) {$/;"	f	signature:(LDC liste)
affichageCroisant	listeDoublementChaine.h	/^void affichageCroisant(LDC);$/;"	p	signature:(LDC)
affichageDecroissant	listeDoublementChaine.c	/^void affichageDecroissant(LDC liste) {$/;"	f	signature:(LDC liste)
affichageDecroissant	listeDoublementChaine.h	/^void affichageDecroissant(LDC liste);$/;"	p	signature:(LDC liste)
afficherElement	element.c	/^void afficherElement(const Element pElem) {$/;"	f	signature:(const Element pElem)
afficherElement	element.h	/^void afficherElement(const Element pElem);$/;"	p	signature:(const Element pElem)
ajouter	listeDoublementChaine.c	/^LDC ajouter(LDC liste, Element pElement) {$/;"	f	signature:(LDC liste, Element pElement)
ajouter	listeDoublementChaine.h	/^LDC ajouter(LDC, Element);$/;"	p	signature:(LDC, Element)
begin	iterateur.c	/^void begin(Iterateur iterateur) {$/;"	f	signature:(Iterateur iterateur)
begin	iterateur.h	/^void begin(Iterateur);$/;"	p	signature:(Iterateur)
compare	element.c	/^int compare(const Element pElem1, const Element pElem2) {$/;"	f	signature:(const Element pElem1, const Element pElem2)
compare	element.h	/^int compare(Element pElem1, Element pElement2);$/;"	p	signature:(Element pElem1, Element pElement2)
cour	iterateur.c	/^	struct etCell* cour;$/;"	m	struct:etIte	typeref:struct:etIte::etCell	file:	access:public
creer	listeDoublementChaine.c	/^LDC creer(void) {$/;"	f	signature:(void)
creer	listeDoublementChaine.h	/^LDC creer(void);$/;"	p	signature:(void)
creerIterateur	iterateur.c	/^Iterateur creerIterateur(LDC liste) {$/;"	f	signature:(LDC liste)
creerIterateur	iterateur.h	/^Iterateur creerIterateur(LDC);$/;"	p	signature:(LDC)
dernier	listeDoublementChaine.h	/^	Cell* dernier;$/;"	m	struct:LDCInterne	access:public
elt	element.h	/^typedef struct elt{$/;"	s
elt::nom	element.h	/^	char* nom;$/;"	m	struct:elt	access:public
elt::val	element.h	/^	int val;$/;"	m	struct:elt	access:public
end	iterateur.c	/^void end(Iterateur iterateur) {$/;"	f	signature:(Iterateur iterateur)
end	iterateur.h	/^void end(Iterateur);$/;"	p	signature:(Iterateur)
estVide	listeDoublementChaine.c	/^int estVide(LDC l) {$/;"	f	signature:(LDC l)
etCell	listeDoublementChaine.h	/^typedef struct etCell {$/;"	s
etCell::prec	listeDoublementChaine.h	/^	struct etCell* prec;$/;"	m	struct:etCell	typeref:struct:etCell::etCell	access:public
etCell::suiv	listeDoublementChaine.h	/^	struct etCell* suiv;$/;"	m	struct:etCell	typeref:struct:etCell::etCell	access:public
etCell::val	listeDoublementChaine.h	/^	Element val;$/;"	m	struct:etCell	access:public
etIte	iterateur.c	/^typedef struct etIte {$/;"	s	file:
etIte::cour	iterateur.c	/^	struct etCell* cour;$/;"	m	struct:etIte	typeref:struct:etIte::etCell	file:	access:public
etIte::l	iterateur.c	/^	LDC l;$/;"	m	struct:etIte	file:	access:public
etIterateur	iterateur.c	/^} etIterateur;$/;"	t	typeref:struct:etIte	file:
hasNext	iterateur.c	/^int hasNext(Iterateur iterateur) {$/;"	f	signature:(Iterateur iterateur)
hasNext	iterateur.h	/^int hasNext(Iterateur);$/;"	p	signature:(Iterateur)
hasPrevious	iterateur.c	/^int hasPrevious(Iterateur iterateur) {$/;"	f	signature:(Iterateur iterateur)
hasPrevious	iterateur.h	/^int hasPrevious(Iterateur);$/;"	p	signature:(Iterateur)
l	iterateur.c	/^	LDC l;$/;"	m	struct:etIte	file:	access:public
main	main.c	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
map	main.c	/^LDC map(ptrFctMap fct, LDC liste) {  $/;"	f	signature:(ptrFctMap fct, LDC liste)
next	iterateur.c	/^Element next(Iterateur iterateur) {$/;"	f	signature:(Iterateur iterateur)
next	iterateur.h	/^Element next(Iterateur);$/;"	p	signature:(Iterateur)
nom	element.h	/^	char* nom;$/;"	m	struct:elt	access:public
prec	listeDoublementChaine.h	/^	struct etCell* prec;$/;"	m	struct:etCell	typeref:struct:etCell::etCell	access:public
premier	listeDoublementChaine.h	/^	Cell* premier;$/;"	m	struct:LDCInterne	access:public
previous	iterateur.c	/^Element previous(Iterateur iterateur) {$/;"	f	signature:(Iterateur iterateur)
previous	iterateur.h	/^Element previous(Iterateur);$/;"	p	signature:(Iterateur)
ptrFctMap	main.c	/^typedef Element (*ptrFctMap)(Element);$/;"	t	file:
suiv	listeDoublementChaine.h	/^	struct etCell* suiv;$/;"	m	struct:etCell	typeref:struct:etCell::etCell	access:public
supprimer	listeDoublementChaine.c	/^LDC supprimer(LDC liste, Element pElement) {$/;"	f	signature:(LDC liste, Element pElement)
supprimer	listeDoublementChaine.h	/^LDC supprimer(LDC, Element);$/;"	p	signature:(LDC, Element)
trouverPlace	listeDoublementChaine.c	/^void trouverPlace(LDC l, Element e, Cell** prec, Cell** suiv) {$/;"	f	signature:(LDC l, Element e, Cell** prec, Cell** suiv)
val	element.h	/^	int val;$/;"	m	struct:elt	access:public
val	listeDoublementChaine.h	/^	Element val;$/;"	m	struct:etCell	access:public
