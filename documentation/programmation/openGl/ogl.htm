<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0091)http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1 -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link rel="stylesheet" type="text/css" href="./ogl_files/widget53.css" media="all">

        


        
        <meta name="keywords" content="tutoriels, concernant, l&#39;api, opengl">
        <meta name="description" content="Tutoriels concernant l&#39;API OpenGL">
        <meta name="robots" content="index,follow">
        <meta name="verify-v1" content="UL/4+QUCNTv1xBkNcC4sv4EjPUAoVj1yE+fMZClqLsc=">

        <title>
            Créez des programmes en 3D avec OpenGL
        </title>

        <link rel="shortcut icon" type="image/x-icon" href="http://www.siteduzero.com/Templates/images/designs/2/favicon.ico">
        <link rel="alternate" type="application/rss+xml" title="News du Site du Zéro" href="http://www.siteduzero.com/Templates/xml/news_fr.xml">
        
        <link rel="alternate" type="application/rss+xml" title="Derniers tutoriels du Site du Zéro" href="http://www.siteduzero.com/Templates/xml/tutoriels_fr.xml">
        

        <link rel="index" href="http://www.siteduzero.com/plan.html">
        <link rel="start" title="Accueil" href="http://www.siteduzero.com/">
        <link rel="search" type="application/opensearchdescription+xml" title="Site Du Zero" href="http://www.siteduzero.com/Templates/xml/xpi/fr/siteduzero.xpi">
        <link rel="search" href="http://www.siteduzero.com/recherche.html" title="Rechercher">
        <link rel="help" title="Accessibilité" href="http://www.siteduzero.com/accessibilite.html">
        <link rel="accesskeys" title="Raccourcis et Accesskeys" href="http://www.siteduzero.com/accessibilite.html">


        <link href="./ogl_files/design.min.css" rel="stylesheet" type="text/css" media="screen, handheld, tv, projection">
        <link href="./ogl_files/zcode.min.css" rel="stylesheet" type="text/css" media="screen, handheld, tv, projection">
        <link href="./ogl_files/impression.min.css" rel="stylesheet" type="text/css" media="print">


        

        

        <!--[if lt IE 8]>
            <link href="/css/ie_old.min.css?1299748133" rel="stylesheet" type="text/css" media="screen" />
        <![endif]-->

        
            <script type="text/javascript" async="" src="./ogl_files/ga.js"></script><script type="text/javascript">
                document.write('<style type="text/css">');
                document.write('.spoiler3{visibility: hidden;}');           // cache le contenu
                document.write('.spoiler3_hidden{display: none;}');         // ferme le cadre "secret"

                document.write('.spoiler_hidden a{visibility: visible;}');  // montre le lien pour afficher le contenu
                document.write('.spoiler a{visibility: visible;');          // montre le lien pour afficher le contenu
                document.write('</style>');
            </script><style type="text/css">.spoiler3{visibility: hidden;}.spoiler3_hidden{display: none;}.spoiler_hidden a{visibility: visible;}.spoiler a{visibility: visible;</style>
        
        <!--
        
            <style type="text/css">
                .spoiler3
                {
                        visibility: hidden;
                }
                .spoiler3_hidden
                {
                        display: none;
                }
            </style>
        
        -->
        
        <script type="text/javascript" src="./ogl_files/jquery.min.js"></script>
        <script type="text/javascript" src="./ogl_files/jqueryui.min.js"></script>
    </head>

    <body><div style="visibility: hidden; height: 1px; width: 1px; position: absolute; z-index: 100000; " id="_atssh"><iframe id="_atssh801" style="height: 1px; width: 1px; position: absolute; z-index: 100000; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; left: 0px; top: 0px; " src="./ogl_files/sh33.htm"></iframe></div>
		
            <div id="acces_rapide">
                <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#menu">Aller au menu</a> - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#corps">Aller au contenu</a>
            </div>

            <div id="top">
                <ul class="intersites">
                    
                    <li class="selected"><a href="http://www.siteduzero.com/">Informatique</a></li>
                    <li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" id="bientot_lien">Bientôt...</a></li>
                </ul>

		<ul class="stats_sites">
                    
                    <li class="last_items"><a href="http://www.siteduzero.com/connectes.html">3 274 Zéros connectés</a> - </li>
                    <li class="last_items"><a href="http://www.siteduzero.com/membres-292.html">231 087 Membres inscrits</a></li>
		</ul>
            </div>

            <div id="header">
                <div class="header_gauche">
                    <a href="http://www.siteduzero.com/"><img src="./ogl_files/logo_sdz_fr.png" alt=""></a>
                </div>

                <div class="header_droit">
                    <div class="fr">
                        <div id="logbox">
                            
                                <div class="bloc_inscription">
                                    <a href="http://www.siteduzero.com/membres-315.html">
                                        <strong class="liens_invites">Inscription</strong><br>
                                        Inscription rapide en 2 minutes
                                    </a>
                                </div>
                                <div class="bloc_connexion">
                                    <a href="http://www.siteduzero.com/connexion.html">
                                        <strong class="liens_invites">Connexion</strong><br>
                                        Utilisez votre compte
                                    </a>
                                    <a class="rpxnow" onclick="return false;" href="https://site-du-zero.rpxnow.com/openid/v2/signin?token_url=http%3A%2F%2Fwww.siteduzero.com%2Fmembres-348-1.html%3Freferer%3Dtutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html%3Fall%3D1"><img src="./ogl_files/rpx_icons.png" alt="connexion_rpx"></a>
                                    <script type="text/javascript">
                                        var rpxJsHost = (("https:" == document.location.protocol) ? "https://" : "http://static.");
                                        document.write(unescape("%3Cscript src='" + rpxJsHost +
                                        "rpxnow.com/js/lib/rpx.js' type='text/javascript'%3E%3C/script%3E"));
                                    </script><script src="./ogl_files/rpx.js" type="text/javascript"></script>
                                    <script type="text/javascript">
                                        RPXNOW.overlay = true;
                                        RPXNOW.language_preference = 'fr';
                                    </script>
                                </div>
                            
                        </div>

                        
                    </div>

                    <div id="publicite_header">
                        <div id="publicite_banniere" class="publicite">
                            <script type="text/javascript">
                                <!--
                                ord=Math.random();
                                ord=ord*10000000000000000000;
                                document.write('<scr'+'ipt type="text/javascript" src="pub.js.php?cb='+ord+'&amp;l=468&amp;h=60&amp;age=0&amp;pays=0&amp;cid=346"><\/scr'+'ipt>');
                                -->
                            </script><script type="text/javascript" src="./ogl_files/pub.js.php"></script>
                        </div>

                    </div>
                    </div>
                </div>

                    <div id="speedbarre">
                            <ul class="smenu">
                                <li id="speed_accueil" class="home">
                                    <a href="http://www.siteduzero.com/" accesskey="1" class="">
                                        <span title="Accueil">Accueil</span>
                                    </a>
                                </li>
                                
                                <li id="speed_cours" class="">
                                    <a href="http://www.siteduzero.com/tutoriel.html" class="">
                                        <span>Cours</span>
                                    </a>
                                    <span class="speedbarre_arrow"></span>
                                </li>
                                <li id="speed_forum" class="">
                                    <a href="http://www.siteduzero.com/forum.html" class="">
                                        <span>Forums</span>
                                    </a>
                                    <span class="speedbarre_arrow"></span>
                                </li>
                                
                                    <li id="speed_concours" class="">
                                        <a href="http://www.siteduzero.com/participez.html" class="">
                                            <span>Participez</span>
                                        </a>
                                        <span class="speedbarre_arrow"></span>
                                    </li>
                                    <li id="speed_etudes" class="">
                                        <a href="http://www.siteduzero.com/etudes.html" class="last_item">
                                            <span>Études</span>
                                        </a>
                                        <span class="speedbarre_arrow"></span>
                                    </li>
                                    <li id="speed_job" class="">
                                        <a href="http://www.siteduzero.com/emploi.html" class="last_item">
                                            <span>Emploi</span>
                                        </a>
                                        <span class="speedbarre_arrow"></span>
                                    </li>

                                    <li id="speed_boutique" class="">
                                    <a href="http://www.siteduzero.com/boutique.html" class="last_item">
                                            <span>Boutique</span>
                                        </a>
                                        <span class="speedbarre_arrow"></span>
                                    </li>
                                
                            </ul>

                            <div id="speedbar_expand" class="menuh" style="display:none;">
                                <div class="menuh_content">
                                    <div id="menuh_tutorials" style="display: none; ">
                                        

                                        <div id="menu_tutorials">
                                            <div class="menu_prim">
                                                <h5>Les cours phares</h5>
                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><img src="./ogl_files/67.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><strong>Site Web</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-13666-apprenez-a-creer-votre-site-web.html"><span style="display:block">XHTML / CSS</span></a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-309961-dynamisez-vos-sites-web-avec-javascript.html">Javascript</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-14668-concevez-votre-site-web-avec-php-et-mysql.html">PHP / MySQL</a>
                                                            <a href="http://www.siteduzero.com/boutique-614-107-concevez-votre-site-web-avec-php-et-mysql.html">
                                                                <span class="in_book"><img src="./ogl_files/ico_livre.png" alt=""></span>
                                                                <span style="display:none">Ce cours existe en livre :<br>Concevez votre site web avec PHP et MySQL</span>
                                                            </a>
                                                        </li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-112219-apprenez-a-creer-des-applications-web-dynamiques-avec-jee.html">Java EE (J2EE)</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html"><img src="./ogl_files/57.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html"><strong>Programmation</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-14189-apprenez-a-programmer-en-c.html">Langage C</a>
                                                            <a href="http://www.siteduzero.com/boutique-614-65-apprenez-a-programmer-en-c.html">
                                                                <span class="in_book"><img src="./ogl_files/ico_livre.png" alt=""></span>
                                                                <span style="display:none">Ce cours existe en livre :<br>Apprenez à programmer en C</span>
                                                            </a>
                                                        </li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-11406-apprenez-a-programmer-en-c.html">Langage C++</a></li>
                                                        <li>
                                                            <a href="http://www.siteduzero.com/tutoriel-3-10601-programmation-en-java.html">
                                                                Java
                                                            </a>
                                                            <a href="http://server1.evonia.fr/tracking/ads_stats2-32325f35385f323533__77c00fc1a6__2748__2-0/http://www.siteduzero.com/boutique-614-430-apprenez-a-programmer-en-java.html">
                                                                <span class="in_book"><img src="./ogl_files/ico_livre_preco.png" alt=""></span>
                                                                <span style="display:none">Ce livre est en précommande :<br>Apprenez à programmer en Java</span>
                                                            </a>
                                                        </li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-119239-programmation-en-java-api.html">Java (API)</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html">Python</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-134798-visual_basic_net.html">VB .NET </a></li>
                                                    </ul>
                                                </div>


                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><img src="./ogl_files/60.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><strong>Systèmes d'exploitation</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-12827-reprenez-le-controle-a-l-aide-de-linux.html">Linux</a>
                                                            <a href="http://www.siteduzero.com/boutique-614-171-reprenez-le-controle-a-l-aide-de-linux.html">
                                                                <span class="in_book"><img src="./ogl_files/ico_livre.png" alt=""></span>
                                                                <span style="display:none">Ce cours existe en livre :<br>Reprenez le contrôle a l'aide de Linux</span>
                                                            </a>
                                                        </li>                                                    
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-273305-freebsd-et-l-envers-du-decor.html">FreeBSD</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html"><img src="./ogl_files/56.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html"><strong>Graphisme</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-351765-debuter-sur-adobe-photoshop.html">Photoshop</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html"><img src="./ogl_files/58.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html"><strong>Infographie 3D</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-11714-debutez-dans-la-3d-avec-blender.html">Blender</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-228998-apprenez-a-modeliser-en-3d-avec-autodesk-maya.html">Maya </a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><img src="./ogl_files/55.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><strong>Bureautique</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-258577-redigez-des-documents-de-qualite-professionnelle-avec-latex.html">LaTeX</a>
                                                            <a href="http://www.siteduzero.com/boutique-614-207-redigez-des-documents-de-qualite-professionnelle-avec-latex.html">
                                                                <span class="in_book"><img src="./ogl_files/ico_livre.png" alt=""></span>
                                                                <span style="display:none">Ce cours existe en livre :<br>Rédigez des documents de qualité avec LaTeX</span>
                                                            </a>
                                                        </li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-417000-redigez-facilement-des-documents-avec-word.html">Word<img style="margin-left: 10px;" alt="" src="./ogl_files/iconouveau.png"></a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                            
                                            <div class="menu_princi menuhcattuto ">
                                                <h5>Tous les cours par catégories</h5>
                                                <div class="menuh_princi_col">
                                                    
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><img src="./ogl_files/67.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html">Site Web <span style="font-weight:normal;">(206 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-69-xhtml-css.html">XHTML / CSS</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-210-php.html">PHP</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-71-divers.html">Divers</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-73-forums.html">Forums</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-77-hebergement.html">Hébergement</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-70-javascript.html">Javascript</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-74-serveur.html">Serveur</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-309-ide.html">IDE</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><img src="./ogl_files/60.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html">Systèmes d'exploitation <span style="font-weight:normal;">(96 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-96-linux.html">Linux</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-147-macos.html">MacOS</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-97-windows.html">Windows</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-408-bsd.html">BSD</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-54-mapping.html"><img src="./ogl_files/54.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-54-mapping.html">Mapping <span style="font-weight:normal;">(31 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-63-half-life.html">Half-Life</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-66-half-life.html">Half-Life²</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-173-warcraft.html">Warcraft</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-188-autres.html">Autres</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><img src="./ogl_files/55.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html">Bureautique <span style="font-weight:normal;">(29 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-290-microsoft-office.html">Microsoft Office</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-291-openoffice-org.html">OpenOffice.org</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-87-firefox.html">Firefox</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-195-irc.html">IRC</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-192-divers.html">Divers</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-59-jeux-video.html"><img src="./ogl_files/59.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-59-jeux-video.html">Jeux Vidéo <span style="font-weight:normal;">(22 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-102-hl-ses-mods.html">HL &amp; ses mods</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-185-autres-jeux.html">Autres jeux</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-61-materiel.html"><img src="./ogl_files/61.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-61-materiel.html">Matériel <span style="font-weight:normal;">(11 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-101-general.html">Général</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        

                                                    <div class="menuh_list_category">
                                                        <div class="ico"><img src="./ogl_files/tuto_cat_thb.png" alt=""></div>
                                                        <h6>Autres</h6>
                                                        <ul>
                                                            
                                                                <li>
                                                                    <a style="display:block" href="http://www.siteduzero.com/tutoriel-2-404-bases-de-donnees.html">Bases de données</a>
                                                                </li>
                                                            
                                                                <li>
                                                                    <a style="display:block" href="http://www.siteduzero.com/tutoriel-2-403-mobiles.html">Mobiles</a>
                                                                </li>
                                                            
                                                                <li>
                                                                    <a style="display:block" href="http://www.siteduzero.com/tutoriel-2-141-site-du-zero.html">Site du Zéro</a>
                                                                </li>
                                                            
                                                        </ul>
                                                    </div>
                                                </div>

                                                <div class="menuh_princi_col">
                                                    
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html">
                                                                    <img src="./ogl_files/57.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html">Programmation</a> <span style="font-weight:normal;">(244 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-91-as-flash-flex.html">AS / Flash / Flex</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-217-algorithmique.html">Algorithmique</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-254-basic-et-derives.html">Basic et dérivés</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-344-bibliotheques.html">Bibliothèques</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-262-c.html">C</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-261-c.html">C++</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-201-c-net.html">C# / .NET</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-258-calculatrices.html">Calculatrices</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-242-ide.html">IDE</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-336-erlang.html">Erlang</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-227-general.html">Général</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-178-java.html">Java</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-93-mirc.html">mIRC</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-196-python.html">Python</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-355-caml-ocaml.html">Caml / OCaml</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-386-cocoa-objective-c.html">Cocoa / Objective-C</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-253-autres-langages.html">Autres langages</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html">
                                                                    <img src="./ogl_files/56.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html">Graphisme</a> <span style="font-weight:normal;">(27 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-176-dessin.html">Dessin</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-177-divers.html">Divers</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-79-flash.html">Flash</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-157-gimp.html">Gimp</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-153-dessin-vectoriel.html">Dessin vectoriel</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-190-photofiltre.html">PhotoFiltre</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-78-photoshop.html">Photoshop</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-197-pov-ray.html">POV-Ray</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html">
                                                                    <img src="./ogl_files/58.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html">Infographie 3D</a> <span style="font-weight:normal;">(25 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-95-3d-studio-max.html">3D Studio Max</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-152-blender.html">Blender</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-296-maya.html">Maya</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-62-multimedia.html">
                                                                    <img src="./ogl_files/62.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-62-multimedia.html">Multimédia</a> <span style="font-weight:normal;">(24 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-99-audio.html">Audio</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-100-video.html">Vidéo</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-382-after-effects.html">After Effects</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-182-reseaux.html">
                                                                    <img src="./ogl_files/182.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-182-reseaux.html">Réseaux</a> <span style="font-weight:normal;">(18 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-183-general.html">Général</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-189-securite.html">Sécurité</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        

                                                    <div class="menuh_list_category">
                                                        <div id="create_tutorials_button">
                                                            
                                                                <div><a href="http://www.siteduzero.com/connexion.html"><img src="./ogl_files/redigercours.png" alt=""></a></div>
                                                            
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="clear"></div>
                                            </div>
                                            <div class="clear"></div>
                                        </div>
                                    </div>
                                    
                                    <div id="menuh_forum" style="display: none; ">
                                        <div class="menu_princi">
                                            <a class="button_all_forums" href="http://www.siteduzero.com/forum.html">Accueil des forums</a>
                                            <div class="menuh_princi_col">
                                                
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-121-site-web.html"><img src="./ogl_files/121.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-121-site-web.html">Site Web</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-122-xhtml-css.html">XHTML / CSS</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-338-javascript.html">Javascript</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-123-php.html">PHP</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-128-mapping.html"><img src="./ogl_files/128.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-128-mapping.html">Mapping</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-129-goldsource-hl1.html">GoldSource (HL1)</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-130-source-hl2.html">Source (HL2)</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-24-communaute-des-zeros.html"><img src="./ogl_files/24.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-24-communaute-des-zeros.html">Communauté des zéros</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-28-discussions-generales.html">Discussions générales</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-278-vos-etudes.html">Vos études</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-239-presentation-de-vos-projets.html">Présentation de vos projets</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-200-recrutements-pour-vos-projets.html">Recrutements pour vos projets</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-440-sciences.html"><img src="./ogl_files/440.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-440-sciences.html">Sciences</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-441-mathematiques.html">Mathématiques</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-442-physique-chimie.html">Physique - Chimie</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-443-biologie-et-geologie.html">Biologie et Géologie</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-444-autres-sciences.html">Autres sciences</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                            </div>

                                            <div class="menuh_princi_col">
                                                
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-125-programmation.html"><img src="./ogl_files/125.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-125-programmation.html">Programmation</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-126-langage-c.html">Langage C</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-237-langage-c.html">Langage C++</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-305-langage-java.html">Langage Java</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-407-langage-python.html">Langage Python</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-406-bases-de-donnees.html">Bases de données</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-127-autres-langages-outils-et-approches.html">Autres langages, outils et approches</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-219-materiel-et-logiciels.html"><img src="./ogl_files/219.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-219-materiel-et-logiciels.html">Matériel et logiciels</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-339-discussions-informatiques.html">Discussions informatiques</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-220-linux-mac-et-bsd.html">Linux, Mac et *BSD</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-221-windows.html">Windows</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-116-jeux-video.html">Jeux vidéo</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-117-graphisme.html">Graphisme</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-223-materiel.html">Matériel</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-310-concours.html"><img src="./ogl_files/310.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-310-concours.html">Concours</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-435-innov-game-2011-a-la-gloire-de.html">Innov'Game 2011 : A la gloire de</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-447-atelier-de-noel-faites-votre-jeu.html">Atelier de noël : "Faites votre jeu"</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-143-le-site-du-zero.html"><img src="./ogl_files/143.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-143-le-site-du-zero.html">Le Site du Zéro</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-144-suggestions-et-commentaires.html">Suggestions et Commentaires</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-145-designs-du-site-du-zero.html">Designs du Site du Zéro</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-429-tutoriels-du-site-du-zero.html">Tutoriels du Site du Zéro</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                            </div>
                                        </div>

                                        
                                    <div class="clear"></div>
                                    </div>
                                    <div id="menuh_collaborate" style="display: none; ">
                                        <div class="menuh_list_category">
                                            
                                                <div class="ico"><a href="http://www.siteduzero.com/membres-315.html"><img src="./ogl_files/tuto_cat_thb.png" alt=""></a></div>
                                                <h6><a href="http://www.siteduzero.com/membres-315.html">Cours</a></h6>
                                                <ul>
                                                    <li style="font-style:italic;">Pour rédiger et participer à la rédaction d'un tutoriel, <a style="display:inline; font-style:normal" href="http://www.siteduzero.com/membres-315.html">rejoignez-nous !</a></li>
                                                </ul>
                                            
                                        </div>

                                        <div class="menuh_list_category">
                                            
                                                <div class="ico"><a href="http://www.siteduzero.com/membres-315.html"><img src="./ogl_files/defaut_thb.png" alt=""></a></div>
                                                <h6><a href="http://www.siteduzero.com/membres-315.html">News</a></h6>
                                                <ul>
                                                    <li style="font-style:italic;">Pour partager ou participer à la rédaction d'une news, <a style="display:inline; font-style:normal" href="http://www.siteduzero.com/membres-315.html"> rejoignez-nous !</a></li>
                                                </ul>
                                            
                                        </div>

                                        <div class="menuh_list_category">
                                            <div class="ico"><a href="http://www.siteduzero.com/concours.html"><img src="./ogl_files/cup_thb.png" alt=""></a></div>
                                            <h6><a href="http://www.siteduzero.com/concours.html">Concours</a></h6>
                                            <ul>
                                                
                                                        <li><a href="http://www.siteduzero.com/concours-654-122-innov-game-2011-a-la-gloire-de.html">Innov'Game 2011 : A la gloire de</a></li>
                                                    
                                            </ul>
                                        </div>
                                        <div class="clear"></div>
                                    </div>


                                    <div id="menuh_job" style="display: none; ">
                                        <div class="menu_princi">
                                            <div class="menuh_princi_col">
                                                <div class="menuh_list_category">
                                                    <h6>Dernières annonces</h6>
                                                    <div class="menuh_list_category_job">
                                                        
                                                            <a title="Consulter le poste : Développeur C/C++ (H/F)" href="http://www.siteduzero.com/emploi/78/developpeur-c-c" class="corpsmenu">
                                                                <span class="last_jobs">
                                                                    <span title="CDD" class="job_type jobtypes2">CDD</span>
                                                                </span>
                                                                <span>
                                                                    <span class="job_title">Développeur C/C++ (H/F)</span>
                                                                    <span style="color:#000000;">AYOTLE</span>
                                                                </span>
                                                            </a>
                                                        
                                                            <a title="Consulter le poste : Développeur web asp.net/aja…" href="http://www.siteduzero.com/emploi/77/developpeur-web-asp-net-ajax-xhtml" class="corpsmenu">
                                                                <span class="last_jobs">
                                                                    <span title="Stage" class="job_type jobtypes3">Stage</span>
                                                                </span>
                                                                <span>
                                                                    <span class="job_title">Développeur web asp.net/aja…</span>
                                                                    <span style="color:#000000;">Citizenside.com</span>
                                                                </span>
                                                            </a>
                                                        
                                                            <a title="Consulter le poste : Ingénieur logiciel C++ (H/F…" href="http://www.siteduzero.com/emploi/3/ingenieur-logiciel-c" class="corpsmenu">
                                                                <span class="last_jobs">
                                                                    <span title="Stage" class="job_type jobtypes3">Stage</span> <span title="CDI" class="job_type jobtypes1">CDI</span>
                                                                </span>
                                                                <span>
                                                                    <span class="job_title">Ingénieur logiciel C++ (H/F…</span>
                                                                    <span style="color:#000000;">FACTSET JCF</span>
                                                                </span>
                                                            </a>
                                                        
                                                    </div>
                                                </div>
                                            </div>
                                                
                                                <div class="menuh_princi_col">
                                                    
                                                        <div class="menuh_list_category">
                                                            <h6>Annonces à la une</h6>
                                                            <div class="menuh_list_category_job">
                                                                
                                                                    <a title="Consulter le poste : 5 Développeurs Java (H/F)" href="http://www.siteduzero.com/emploi/63/5-developpeurs-java" class="corpsmenu">

                                                                        <span class="last_jobs">
                                                                            <span title="CDI" class="job_type jobtypes1">CDI</span>
                                                                        </span>
                                                                        <span>
                                                                            <span class="job_title">5 Développeurs Java (H/F)</span>
                                                                            <span style="color:#000000;">Small iz beautiful pour AIRP…</span>
                                                                        </span>
                                                                    </a>
                                                                
                                                                    <a title="Consulter le poste : Développeur PHP Symfony (H/…" href="http://www.siteduzero.com/emploi/58/developpeur-php-symfony" class="corpsmenu">

                                                                        <span class="last_jobs">
                                                                            <span title="CDI" class="job_type jobtypes1">CDI</span>
                                                                        </span>
                                                                        <span>
                                                                            <span class="job_title">Développeur PHP Symfony (H/…</span>
                                                                            <span style="color:#000000;">Externis Resourcing</span>
                                                                        </span>
                                                                    </a>
                                                                
                                                            </div>
                                                        </div>
                                                      
                                                    <div class="menuh_list_category">
                                                        <div>
                                                            <div><a href="http://www.siteduzero.com/emploi.html"><img src="./ogl_files/speed_barre_btn_recherche_emploi.png" alt=""></a></div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="menuh_more2">
                                                        <a href="http://www.siteduzero.com/emploi/liste.html">Toutes les annonces<img src="./ogl_files/fleche_droite.png" alt="►"></a>
                                                </div>
                                            </div>
                                        <div class="clear"></div>
                                    </div>

                                    <div id="menuh_study" style="padding-left: 15px; display: none; ">
                                        <div class="menu_princi">
                                            <div class="ico_study"><img src="./ogl_files/ico_etude.png" width="50" alt="icon etude"></div>
                                            <div class="menuh_princi_col">
                                                <div class="menuh_list_category">
                                                    <h6>Recrutement à Bac / Bac +1</h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-280-bts.html">BTS</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-269-ecoles-d-ing%C3%A9nieurs-en-informatique.html">Ecoles d'ingénieurs en informatique</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-274-ecoles-d-ing%C3%A9nieurs-generalistes.html">Ecoles d'ingénieurs généralistes</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-283-iut.html">IUT</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-300-universites.html">Universités</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-287-autre-formation-diplomantes.html">Autres formations diplômantes</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-448-cpge.html">CPGE</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <h6>Recrutement à Bac +2</h6>
                                                    <ul>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-270-ecoles-d-ing%C3%A9nieurs-en-informatique.html">Ecoles d'ingénieurs en informatique</a></li>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-273-ecoles-d-ing%C3%A9nieurs-generalistes.html">Ecoles d'ingénieurs généralistes</a></li>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-289-autre-formation-diplomantes.html">Autres formations diplômantes</a></li>
                                                    </ul>
                                                </div>
                                            </div>

                                            <div class="menuh_princi_col">
                                                <div class="menuh_list_category">
                                                    <h6>Recrutement à Bac +3 / Bac +4</h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-388-ecoles-d-ing%C3%A9nieurs-en-informatique.html">Ecoles d'ingénieurs en informatique</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-389-ecoles-d-ing%C3%A9nieurs-generalistes.html">Ecoles d'ingénieurs généralistes</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-390-autre-formation-diplomantes.html">Autres formations diplômantes</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <h6>Recrutement à Bac +5</h6>
                                                    <ul>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-299-doctorats.html">Doctorats</a></li>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-391-autre-formation-diplomantes.html">Autres formations diplômantes</a></li>
                                                    </ul>
                                                    <div class="menuh_list_category">
                                                        <div id="find_training">
                                                            <div><a href="http://www.siteduzero.com/etudes.html"><img src="./ogl_files/ico_recherche_cours.png" alt=""><strong>Trouvez une formation</strong></a></div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="clear"></div>
                                    </div>

                                    <div id="menuh_shop" style="display: none; ">
                                        <div class="flagship_products headband_preorder">
                                            <a style="display:block;height:144px;" href="http://www.siteduzero.com/boutique-614-430-apprenez-a-programmer-en-java.html"><img src="./ogl_files/livre_cours_java_2d.png" alt="Apprenez à programmer en Java"></a>
                                            <h5>Apprenez à programmer en Java</h5>
                                            <div class="price" style="margin-top : 16px;">
                                                <span class="min_price">Prix de précommande</span><br>
                                                25 €
                                            </div>
                                            <span><a class="bouton_action fl" href="http://www.siteduzero.com/boutique-614-430-apprenez-a-programmer-en-java.html">Acheter</a></span>
                                        </div>
                                        <div class="flagship_products">
                                            <a href="http://www.siteduzero.com/boutique-614-188-cle-usb-du-site-du-zero-8-go.html"><img src="./ogl_files/image_usb_speedbarre.jpg" alt="cle usb"></a>
                                            <h5>Clé USB du site du Zéro</h5>
                                            <a href="http://www.siteduzero.com/boutique-614-184-cle-usb-du-site-du-zero-4-go.html">4 Go</a>
                                            - <a href="http://www.siteduzero.com/boutique-614-188-cle-usb-du-site-du-zero-8-go.html">8 Go</a>
                                            - <a href="http://www.siteduzero.com/boutique-614-191-cle-usb-du-site-du-zero-16-go.html">16 Go</a><br>
                                            <div class="price">
                                                <span class="min_price">À partir de</span><br>
                                                15,20 €
                                            </div>
                                            <span><a class="bouton_action fl" href="http://www.siteduzero.com/boutique-614-188-cle-usb-du-site-du-zero-8-go.html">Acheter</a></span>
                                        </div>

                                    <div class="other_products">
                                        <span>Concevez votre site web avec PHP et MySQL<br>
                                        <a href="http://www.siteduzero.com/boutique-614-107-concevez-votre-site-web-avec-php-et-mysql.html">En savoir plus ►</a></span>
                                        <a href="http://www.siteduzero.com/boutique-614-107-concevez-votre-site-web-avec-php-et-mysql.html">
                                        <img style="margin:13px 0 0 22px" alt="Concevez votre site web avec php et mysql" src="./ogl_files/livre_cours_php_2d.png"></a>
                                    </div>

                                    <div class="other_products">
                                        <span>Apprenez à programmer en C <br>
                                        <a href="http://www.siteduzero.com/boutique-614-65-apprenez-a-programmer-en-c.html">En savoir plus ►</a></span>
                                        <a href="http://www.siteduzero.com/boutique-614-65-apprenez-a-programmer-en-c.html">
                                        <img style="margin:13px 0 0 22px" alt="Apprenez à programmer en C" src="./ogl_files/livre_cours_c_2d.png"></a>
                                    </div>
                                    <div class="other_products">
                                        <span>Reprenez le contrôle à l'aide de Linux <br>
                                        <a href="http://www.siteduzero.com/boutique-614-171-reprenez-le-controle-a-l-aide-de-linux.html">En savoir plus ►</a></span>
                                        <a href="http://www.siteduzero.com/boutique-614-171-reprenez-le-controle-a-l-aide-de-linux.html">
                                        <img style="margin:13px 0 0 22px" alt="Reprenez le contrôle à l&#39;aide de Linux" src="./ogl_files/livre_cours_linux_2d.png"></a>
                                    </div>

                                    <div class="other_products">
                                        <span>Rédigez des documents de qualité avec LaTeX<br>
                                        <a href="http://www.siteduzero.com/boutique-614-207-redigez-des-documents-de-qualite-avec-latex.html">En savoir plus ►</a></span>
                                        <a href="http://www.siteduzero.com/boutique-614-207-redigez-des-documents-de-qualite-avec-latex.html">
                                        <img style="margin:13px 0 0 22px" alt="Rédigez des documents de qualité avec LaTeX" src="./ogl_files/livre_cours_latex_2d.png"></a>
                                    </div>
                                      
                                    <div class="menuh_more">
                                        <a href="http://www.siteduzero.com/boutique.html">Tous les produits <img src="./ogl_files/fleche_droite(1).png" alt="►"></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="search_bar">
                        <div class="ard"></div>
                        <form method="get" action="http://www.siteduzero.com/recherche.html" id="recherche">
                            <p>
                                <input type="text" name="src" id="champ_recherche" accesskey="4" value="Rechercher">
                                <select name="c" id="section_recherche">
                                    <option value="3" selected="selected">Cours</option>
                                    <option value="6">Forums</option>
                                    <option value="4">News</option>
                                    <option value="mbr">Membres</option>
                                    <option value="formation">Études</option>
                                    <option value="codeweb">Code web</option>
                                    <option value="mp">MP</option>
                                </select>
                                <input class="button_go_search" value="Go" type="submit">
                                <a class="button_more_search" href="http://www.siteduzero.com/recherche.html">+</a>
                            </p>
                        </form>
                        </div>

                    </div>

<script type="text/javascript">

    
        //On Hover

    var keyCodeEscape = 27;
    $(document).keyup(function(f) {
        if (f.keyCode == keyCodeEscape)
        {
            hideBlocMenu();
        }
    });


    /* Var for speedbar*/
    showDelay = 300;
    hiddenDelay = 367;
    fadeInDelay = 100
    fadeOutDelay = 100
    timer = null;
    hideTimeOut = null
    // speedbar function
    function speedShowDelay(){
        if($('.menuh_content > div').is(':visible'))
        {
            showDelay = null;
        }
        else
        {
            showDelay = 300;
        }
    }
    
    $("body").mouseleave(function(){
        $('.menuh_content > div').hide();
        $('#speedbarre .smenu>li a').removeClass("smenu_hover");
    });
    
    function showMenu(id, id2){

        $(id2).click(function(){
            clearInterval(timer);
            hideBlocMenu();
            return;
        });

        speedShowDelay();

        $("body").unbind('click');

        clearInterval(timer);
        if(!$(id).is(':visible'))
        {
            $('.menuh_content > div').hide();

            $('#speedbarre .smenu>li a').removeClass("smenu_hover");
            $('#speedbarre .smenu > li > .speedbarre_arrow').hide();

            timer=setInterval(function(){
                $(id+' ,#speedbar_expand').fadeIn(fadeInDelay);
                $(id2+' a').addClass('smenu_hover')
                clearInterval(timer);

                },showDelay);
        }
    }

    function hideMenu(id, id2){

        clearInterval(timer);
        clearTimeout(hideTimeOut);

        $("body").bind('click',function(){
            hideBlocMenu();
        });

        timer=setInterval(function(){
            $(id).fadeOut(fadeOutDelay,function(){
                $('#speedbar_expand').hide();
                $(id2+' a').removeClass("smenu_hover");
            });
            clearInterval(timer);
        },hiddenDelay)
    }

    function hideBlocMenu(){
        $('.menuh_content > div').fadeOut(fadeOutDelay, function(){
            $('#speedbar_expand').hide();
            $('#speedbarre .smenu>li a').removeClass("smenu_hover");})
    }

        /* speedbar */


    $("#speed_cours").addClass('hideOnLoad');
    $("#speed_forum").addClass('hideOnLoad');
    $("#speed_concours").addClass('hideOnLoad');
    $("#speed_job").addClass('hideOnLoad');
    $("#speed_etudes").addClass('hideOnLoad');
    $("#speed_boutique").addClass('hideOnLoad');



    $(document).mousemove(function(){
        $("#speed_cours").removeClass('hideOnLoad');
        $("#speed_forum").removeClass('hideOnLoad');
        $("#speed_concours").removeClass('hideOnLoad');
        $("#speed_job").removeClass('hideOnLoad');
        $("#speed_etudes").removeClass('hideOnLoad');
        $("#speed_boutique").removeClass('hideOnLoad');
    })


    //TUTORIALS
    $("#speed_cours, #menuh_tutorials").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_tutorials';
        id2 = '#speed_cours';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_tutorials';
        id2 = '#speed_cours';
        hideMenu(id, id2);
    });
    //FORUMS
    $("#speed_forum, #menuh_forum").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_forum';
        id2 = '#speed_forum';

        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_forum';
        id2 = '#speed_forum';
        hideMenu(id, id2);
    });

    //COLLABORATE
    $("#speed_concours, #menuh_collaborate").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_collaborate';
        id2 = '#speed_concours';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_collaborate';
        id2 = '#speed_concours';
        hideMenu(id, id2);
    });

    //JOB
    $("#speed_job, #menuh_job").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_job';
        id2 = '#speed_job';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_job';
        id2 = '#speed_job';
        hideMenu(id, id2);
    });

    //STUDY
    $("#speed_etudes, #menuh_study").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_study';
        id2 = '#speed_etudes';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_study';
        id2 = '#speed_etudes';
        hideMenu(id, id2);
    });

    //SHOP
    $("#speed_boutique, #menuh_shop").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_shop';
        id2 = '#speed_boutique';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_shop';
        id2 = '#speed_boutique';
        hideMenu(id, id2);
    });

    

</script>
            
            <div class="contenu">
                <div id="menu">
                    

                    <div class="box_menu">
                        <h5>Cours</h5>

                        <div class="corpsmenu">
                            <ul>
                                
                                    <li style="border-bottom: 0 none; padding: 0 0 2px 0; background-color: #e2f0ff">
                                        <a href="http://www.siteduzero.com/tutoriel-3-361996-par-ou-commencer.html"><img style="padding-left:5px;" src="./ogl_files/compass.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu" style="margin-left: 43px;">
                                            <a href="http://www.siteduzero.com/tutoriel-3-361996-par-ou-commencer.html"><strong class="menu_cours_section">Nouveau ?</strong></a>
                                            <ul>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-361996-par-ou-commencer.html">Suivez le guide !</a></li>
                                            </ul>
                                        </div>
                                    </li>
                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><img src="./ogl_files/67.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><strong class="menu_cours_section">Site Web</strong></a>
                                            <ul>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-13666-apprenez-a-creer-votre-site-web.html">XHTML / CSS</a></li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-309961-dynamisez-vos-sites-web-avec-javascript.html">Javascript</a></li>
                                                <li>
                                                    <a href="http://www.siteduzero.com/tutoriel-3-14668-concevez-votre-site-web-avec-php-et-mysql.html">
                                                        PHP / MySQL
                                                    </a>
                                                    <a href="http://www.siteduzero.com/boutique-614-107-concevez-votre-site-web-avec-php-et-mysql.html">
                                                        <span class="in_book"><img src="./ogl_files/ico_livre.png" alt=""></span>
                                                        <span style="display:none">Ce cours existe en livre :<br>Concevez votre site web avec PHP et MySQL</span>
                                                    </a>
                                                </li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-112219-apprenez-a-creer-des-applications-web-dynamiques-avec-jee.html">Java EE (J2EE)</a></li>
                                            </ul>
                                        </div>
                                    </li>
                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html"><img src="./ogl_files/57.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html"><strong class="menu_cours_section">Programmation</strong></a>
                                            <ul>
                                                <li>
                                                    <a href="http://www.siteduzero.com/tutoriel-3-14189-apprenez-a-programmer-en-c.html">
                                                        Langage C
                                                    </a>
                                                    <a href="http://www.siteduzero.com/boutique-614-65-apprenez-a-programmer-en-c.html">
                                                        <span class="in_book"><img src="./ogl_files/ico_livre.png" alt=""></span>
                                                        <span style="display:none">Ce cours existe en livre :<br>Apprenez à programmer en C</span>
                                                    </a>
                                                </li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-11406-apprenez-a-programmer-en-c.html">Langage C++</a></li>
                                                <li>
                                                    <a href="http://www.siteduzero.com/tutoriel-3-10601-programmation-en-Java.html">
                                                        Java
                                                    </a>
                                                        <a href="http://server1.evonia.fr/tracking/ads_stats2-32325f35385f323533__77c00fc1a6__2748__2-0/http://www.siteduzero.com/boutique-614-430-apprenez-a-programmer-en-java.html">
                                                        <span class="in_book"><img src="./ogl_files/ico_livre_preco.png" alt=""></span>
                                                        <span style="display:none">Ce livre est en précommande :<br>Apprenez à programmer en Java</span>
                                                    </a>
                                                </li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-119239-programmation-en-java-api.html">Java (API)</a></li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html">Python </a></li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-134798-visual_basic_net.html">VB .NET</a></li>
                                            </ul>
                                        </div>
                                    </li>
                                    <li>                                        
                                        <a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><img src="./ogl_files/60.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><strong class="menu_cours_section">Systèmes d'exploitation</strong></a>
                                            <ul>
                                                <li>
                                                    <a href="http://www.siteduzero.com/tutoriel-3-12827-reprenez-le-controle-a-l-aide-de-linux.html">
                                                        Linux
                                                    </a>
                                                    <a href="http://www.siteduzero.com/boutique-614-171-reprenez-le-controle-a-l-aide-de-linux.html">
                                                        <span class="in_book"><img src="./ogl_files/ico_livre.png" alt=""></span>
                                                        <span style="display:none">Ce cours existe en livre :<br>Reprenez le contrôle a l'aide de Linux</span>
                                                    </a>
                                                </li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-273305-freebsd-et-l-envers-du-decor.html">FreeBSD</a></li>
                                            </ul>
                                        </div>
                                    </li>
                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html"><img src="./ogl_files/56.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html"><strong class="menu_cours_section">Graphisme</strong></a>
                                            <ul>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-351765-debuter-sur-adobe-photoshop.html">Photoshop</a></li>
                                            </ul>
                                        </div>
                                    </li>
                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html"><img src="./ogl_files/58.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html"><strong class="menu_cours_section">Infographie 3D</strong></a>
                                            <ul>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-11714-debutez-dans-la-3d-avec-blender.html">Blender</a></li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-228998-apprenez-a-modeliser-en-3d-avec-autodesk-maya.html">Maya</a></li>
                                            </ul>
                                        </div>
                                    </li>

                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><img src="./ogl_files/55.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><strong class="menu_cours_section">Bureautique</strong></a>
                                            <ul>
                                                <li>
                                                    <a href="http://www.siteduzero.com/tutoriel-3-258577-redigez-des-documents-de-qualite-professionnelle-avec-latex.html">
                                                        LaTeX
                                                    </a>
                                                    <a href="http://www.siteduzero.com/boutique-614-207-redigez-des-documents-de-qualite-professionnelle-avec-latex.html">
                                                        <span class="in_book"><img src="./ogl_files/ico_livre.png" alt=""></span>
                                                        <span style="display:none">Ce cours existe en livre :<br>Rédigez des documents de qualité avec LaTeX</span>
                                                    </a>
                                                </li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-417000-redigez-facilement-des-documents-avec-word.html">Word<img style="margin-left: 10px;" alt="" src="./ogl_files/iconouveau.png"></a></li>
                                            </ul>
                                        </div>
                                    </li>
                                    
                                    
                                    <li>
                                        <img src="./ogl_files/die.png" class="fl" alt="">
                                        <div class="liste_cours_menu">
                                            <strong class="menu_cours_section">Tutoriel du jour</strong><br>
                                            <ul>
                                                <li>
                                                    <a href="http://www.siteduzero.com/tutoriel-3-33156-faire-un-menu-similaire-a-celui-du-design-popup.html">Faire un menu similaire à celui du design PopUp</a>
                                                </li>
                                            </ul>
                                        </div>
                                    </li>
                                
                                <li class="last_idem_liste">
                                    <div id="menu_ajout_cours">
                                        <ul>
                                            <li>
                                                
                                                    <a href="http://www.siteduzero.com/tutoriel-3-256867-devenez-auteur-de-cours-sur-le-site-du-zero-et-le-livre-du-zero.html">
                                                
                                                Rédigez un cours <img src="./ogl_files/add.png" alt="">&nbsp;</a>
                                             </li>
                                             <li>
                                                 <a href="http://www.siteduzero.com/tutoriel.html" title="Tous les cours">Tous les cours  <img src="./ogl_files/fleche_droite.png" alt="">&nbsp;</a>
                                             </li>
                                         </ul>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div id="corps">
                    <div id="zozor_position">
                        <div id="zozor">
                            <div class="centre"><img src="./ogl_files/zozor6.png" alt=" Zozor" title=" Zozor"></div>
                       </div>
                    </div>

                    <div id="container_bulle_zozor">
                        
                    </div>

                    <div id="arbre">
                        
			&gt;  <a href="http://www.siteduzero.com/">Le Site du Zéro</a>
		
			&gt;  <a href="http://www.siteduzero.com/tutoriel.html">Cours</a>
			 &gt;  <a href="http://www.siteduzero.com/tutoriel-1-352-tutoriels.html">Tutoriels</a>
		 &gt;  <a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html">Programmation</a>
		 &gt;  <a href="http://www.siteduzero.com/tutoriel-1-344-bibliotheques.html">Bibliothèques</a>
		 &gt;  <a href="http://www.siteduzero.com/tutoriel-2-346-opengl.html">OpenGL</a>
		&gt;  <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html">Créez des programmes en 3D avec OpenGL</a> 

&gt; Lecture du tutoriel

                    </div>

                    


<h1>Créez des programmes en 3D avec OpenGL</h1>


<div id="onglets_tutos" class="onglets_tutos">
  <ul>
    
      <li class="selected">
      <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html">Tutoriel</a></li>
    
      <li>
      <a href="http://www.siteduzero.com/tutoriel-50-5014-p2-creez-des-programmes-en-3d-avec-opengl.html#r66736">60 commentaires</a></li>
    
      <li>
      <a href="http://www.siteduzero.com/tutoriel-21-5014-creez-des-programmes-en-3d-avec-opengl.html">Historique</a></li>
    
  </ul>
</div>
<hr class="bas_onglets">





<div class="cadre_auteur_date">
  <form action="http://www.siteduzero.com/tutoriel-54-5014.html" method="post">
    <div class="dnone"><input type="hidden" value="4bca73605591512818aaf350fccd8ca9b6e9bf3c" name="challenge"></div>

    <div class="infobox">
<h3 class="special">Informations sur le tutoriel</h3>
<div class="conteneur_infobox">
<table>
  <tbody><tr>
    <td>
    <div class="boite_avatar_100px">
        
     </div>
    </td>
    <td>
     
      <strong>Auteur</strong> :
      
    
	    <a class="auteur_tut" href="http://www.siteduzero.com/membres-294-5.html">Kayl</a>
    
      <br>
    
      <br>
      <br>
      <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#tuto_details" onclick="return false;" id="tuto_details_plus">Plus d'informations <img src="./ogl_files/fleche_bas.png" alt="Plus d&#39;informations" title="Plus d&#39;informations" id="image_detail"></a>
      <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#onglets_tutos" onclick="return false;" id="tuto_details_moins" style="display : none;">Moins d'informations <img src="./ogl_files/fleche_haut.png" alt="Plus d&#39;informations" title="Plus d&#39;informations" id="image_detail_moins"></a>
      <script type="text/javascript">
          var lien_plus = document.getElementById('tuto_details_plus');
          var lien_moins = document.getElementById('tuto_details_moins');

          var toggleDetails = function()
          {
              toggle('infos_detaillees');
              toggle('tuto_details_plus');
              toggle('tuto_details_moins');
              return false;
          };

          if(lien_plus.addEventListener)
          {
              lien_plus.addEventListener('click', toggleDetails , false);
          } else
          {
              lien_plus.attachEvent('onclick', toggleDetails);
          }

          if(lien_moins.addEventListener)
          {
              lien_moins.addEventListener('click', toggleDetails , false);
          } else
          {
              lien_moins.attachEvent('onclick', toggleDetails);
          }
          
      </script>

      <div style="display: none;" id="infos_detaillees">
	<br>			
<strong>Créé</strong> : Le 24/10/2007 à 18:42:30<br>
<strong>Modifié</strong> : Le 10/05/2009 à 15:48:59<br>

<strong>Avancement</strong> : 100%<br>

<strong>Licence</strong> : Copie non autorisée<br><br>


  <a href="http://www.zcorrecteurs.fr/"><img src="./ogl_files/zcorrige.png" alt="L&#39;orthographe, la grammaire et la présentation de ce tutoriel ont été vérifiées par les zCorrecteurs." title="L&#39;orthographe, la grammaire et la présentation de ce tutoriel ont été vérifiées par les zCorrecteurs."></a><br>

<a href="http://www.siteduzero.com/tutoriel-50-5014-66736-creez-des-programmes-en-3d-avec-opengl.html#r66736">60 commentaires</a><br>

  <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html">Revenir au sommaire du tutoriel</a><br>


      </div>

    </td>
  </tr>
</tbody></table>
</div>
</div>


    <div class="infobox">
        <h3 class="special">Popularité</h3>
        <div class="conteneur_infobox">
            <strong>Visualisations</strong> : 7&nbsp;928&nbsp;172<br><br>
            <div style="padding-top: 1px; float: left;"><strong>Appréciation<br>des lecteurs</strong> : </div>
            <div class="tut_appreciation">
                <div class="tut_appreciation_smiley" id="smiley-1-54--593526" style="background-position: -19px 50%;"><img src="./ogl_files/empty.gif" alt=""></div>
                <span id="eval_nb-1">9</span>
            </div>
            <div class="tut_appreciation">
                <div class="tut_appreciation_smiley" id="smiley-2-54--593526" style="background-position: -57px 50%;"><img src="./ogl_files/empty.gif" alt=""></div>
                <span id="eval_nb-2">7</span>
            </div>
            <div class="tut_appreciation">
                <div class="tut_appreciation_smiley eval_always_color" id="smiley-3-54--593526" style="background-position: -76px 50%;"><img src="./ogl_files/empty.gif" alt=""></div>
                <span id="eval_nb-3">14</span>
            </div>
            <div class="tut_appreciation">
                <div class="tut_appreciation_smiley" id="smiley-4-54--593526" style="background-position: -133px 50%;"><img src="./ogl_files/empty.gif" alt=""></div>
                <span id="eval_nb-4">52</span>
            </div>
            
            <div style="clear: both;"></div>
                
                    <p id="tut_vot_ldz" style="text-align:center;"><img src="./ogl_files/thb_livre_cours_c.png" id="tut_vot_ldz_img" alt="">
                    
                                <b>122 personnes</b> souhaitent voir ce tutoriel publié en livre ! <br> <a href="http://www.siteduzero.com/vote/ldz/54.html" id="tut_vot_ldz_link">Vous aussi ?</a>
                            
            </p>
        </div>
    </div>


<div class="infobox" id="pave_pub_tuto" style="display: none;">
<h3 class="special">Publicité</h3>
<div class="conteneur_infobox">
<table style="width: 100%;">
  <tbody><tr>
    <td colspan="2" id="menu_pub_tuto">


        
            <script type="text/javascript">
                <!--
                ord=Math.random();
                ord=ord*10000000000000000000;
                var test = true;
                document.write('<scr'+'ipt type="text/javascript" src="pub.js.php?cb='+ord+'&amp;l=300&amp;h=250&amp;age=0&amp;afficher_bloc_pub=pave_pub_tuto&amp;cid=346&amp;pays=0"><\/scr'+'ipt>');
                -->
            </script><script type="text/javascript" src="./ogl_files/pub.js(1).php"></script>
        
    </td>
  </tr>
</tbody></table>
</div>
</div>

    
	<div class="infobox">
		<h3 class="special">Historique des mises à jour</h3>
		<div class="conteneur_infobox">
			<ul>
				
					<li>
						<em>Hier à 01:56:57</em><br>
						Correction d'une erreur de syntaxe suite au report #4087
					</li>
			  
					<li>
						<em>Le 13/12/2010 à 13:00:49</em><br>
						Correction sur l'affichage d'une image.
					</li>
			  
					<li>
						<em>Le 20/07/2010 à 09:52:15</em><br>
						Re-parsage d'un tableau. (ticket 2523)
					</li>
			  
			</ul>
		</div>
	</div>


    
  </form>
</div>

<div id="btuto_intro">
	L'envie vous prend soudainement d'ajouter une nouvelle dimension à votre vie mais vous avez peur de vous lancer car vous pensez que faire des programmes en <strong>3D</strong> est réservé à l'élite ?<br>
Rassurez-vous l'apprentissage de la programmation 3D <span class="italique">via</span> <strong>OpenGL</strong> est relativement simple et par le biais de ce tutoriel vous connaîtrez les bases d'OpenGL ainsi que de multiples techniques utilisées dans les <strong>jeux vidéo</strong>.<br>
<br>
Bonne lecture et surtout bonne création !  <img src="./ogl_files/soleil.png" alt=":soleil:" class="smilies"><br>
<br>
<div class="rmq information">Ce cours nécessite la lecture préalable du cours de <a href="http://www.siteduzero.com/tuto-3-8-0-apprenez-a-programmer-en-c.html">C / C++</a> rédigé par M@teo21. Il faut avoir lu au moins les trois premières parties (partie sur la SDL incluse).<br>
</div>
</div>

<hr>



<div id="pre_liste_parties">
	Ce cours est composé des parties suivantes :
</div>

<ul id="liste_parties">
	
		<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#part_5013">Les bases d'OpenGL</a></li>
	
		<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#part_5012">Annexes</a></li>
	
</ul>
		<ul class="liste_parties_btut">
		
		<li>
		<hr class="separateur_parties">
		<h2 id="part_5013">Partie 1 : Les bases d'OpenGL</h2>
		<div>
			
		</div>
			
				<ul class="liste_chapitres_btut">
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#chap_4915">1) Introduction à OpenGL</a>
						<div class="icone_chap">
							
								<img src="./ogl_files/23953.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4914">Qu'est-ce qu'OpenGL ?</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4913">Que dois-je installer ?</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4916">Première application OpenGL avec SDL</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#chap_4923">2) Notions de base</a>
						<div class="icone_chap">
							
								<img src="./ogl_files/23955.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4924">Couleur et interpolation</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4921">Vertices et polygones</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4922">Fonctions et types</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#chap_4932">3) Les transformations</a>
						<div class="icone_chap">
							
								<img src="./ogl_files/23957.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4931">Un brin de folie mathématique</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4930">Les matrices OpenGL</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4934">Les transformations</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4933">Exercice : une grue</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#chap_4939">4) Enfin de la 3D (Partie 1/2)</a>
						<div class="icone_chap">
							
								<img src="./ogl_files/23959.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4942">Du réel à l'écran</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4941">La perspective</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4940">Placer la caméra</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#chap_4947">5) Enfin de la 3D (Partie 2/2)</a>
						<div class="icone_chap">
							
								<img src="./ogl_files/23961.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4950">Un cube</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4949">Le Z-Buffer</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4948">Animation</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#chap_4956">6) Les textures</a>
						<div class="icone_chap">
							
								<img src="./ogl_files/23963.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4960">Charger une texture</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4959">Plaquage de texture</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4958">Texture répétitive</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4957">Les couleurs</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#chap_4968">7) Les quadriques</a>
						<div class="icone_chap">
							
								<img src="./ogl_files/23965.jpg" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4967">Principe d'utilisation</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4966">Les quadriques</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4965">Exercice : une roquette</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#chap_4978">8) Contrôle avancé de la caméra (Partie 1/2)</a>
						<div class="icone_chap">
							
								<img src="./ogl_files/23967.jpg" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4977">Principe d'une caméra TrackBall</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4976">Quelques bases de C++</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4975">Implémentation de la caméra</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4974">Scène de test</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#chap_4988">9) Contrôle avancé de la caméra (Partie 2/2)</a>
						<div class="icone_chap">
							
								<img src="./ogl_files/23969.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4987">Principe d'une caméra FreeFly</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4986">Gestion fluide du mouvement</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4985">Implémentation de la caméra</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4984">Scène de test</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
				</ul>
				<div>
					<br>
					
				</div>
			
		</li>
		
		<li>
		<hr class="separateur_parties">
		<h2 id="part_5012">Partie 2 : Annexes</h2>
		<div>
			
		</div>
			
				<ul class="liste_chapitres_btut">
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#chap_5011">1) La trigonométrie</a>
						<div class="icone_chap">
							
								<img src="./ogl_files/23979.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_5010">Trigo dans un triangle rectangle</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_5009">Le cercle trigonométrique</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_5008">Systèmes de coordonnées</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#chap_5003">2) Les matrices</a>
						<div class="icone_chap">
							
								<img src="./ogl_files/23977.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_5002">L'outil matrice</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_5001">Transformations</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_5000">Combinaison de transformations</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#chap_4994">3) Créer une vidéo de votre programme</a>
						<div class="icone_chap">
							
								<img src="./ogl_files/23975.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4993">Enregistrer la vidéo</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#ss_part_4995">Encoder la vidéo</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
				</ul>
				<div>
					<br>
					
				</div>
			
		</li>
		
		</ul>

<hr>
<h2>Partie 1 : Les bases d'OpenGL</h2>
<div>

</div>
	
	<hr>
	<h1 id="chap_4915">Introduction à OpenGL</h1>
	<div id="chap_intro">
	Dans ce chapitre nous découvrirons brièvement les possiblités d'OpenGL et réaliserons notre première application OpenGL grâce à SDL.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4914">Qu'est-ce qu'OpenGL ?</h2>
		<div class="ss_part_texte">
		<div class="flot_gauche"><img src="./ogl_files/4009.png" alt="Image utilisateur"></div><strong>OpenGL</strong> (Open Graphics Library) est une blibliothèque graphique très complète qui permet aux programmeurs de développer des applications 2D, 3D assez facilement.<br>
Vous avez déjà dû l'utiliser ou en entendre parler, car de nombreux jeux, comme Quake III, proposent l'OpenGL comme mode d'affichage.<br>
<br>
<br>
<div class="centre"><br>
<img src="./ogl_files/10143.jpg" alt="Image utilisateur"><br>
<span class="italique">Quake III Arena</span><br>
</div><br>
<br>
Bon d'accord, je dois vous l'avouer après avoir lu ce tuto vous ne saurez pas encore faire des jeux comme ça (notamment à cause du moteur physique pour gérer les collisions, déplacements et projectiles) mais il est beau de rêver. <img src="./ogl_files/langue.png" alt=":p" class="smilies"><br>
<br>
OpenGL s'utilise principalement en C++, c'est pourquoi il est conseillé de connaître ce langage. Mais rassurez-vous ! Même sans base vous arriverez parfaitement à comprendre tous les exemples du cours, cependant les applications que vous serez amenés à développer par vous-mêmes seront peut-être moins poussées. La lecture du <a href="http://www.siteduzero.com/tuto-3-8-0-apprenez-a-programmer-en-c.html">tuto C/C++</a> est <strong>fortement recommandée</strong>.<br>
<br>
<div class="rmq information">Il est possible d'utiliser OpenGL en Python, Delphi, Java, et les commandes y sont similaires. Ici nous utiliserons le C/C++ pour profiter du cours déjà présent sur le site.</div><br>
<br>
<h3>Une multitude de fonctionnalités</h3><br>
<br>
OpenGL dispose de nombreuses fonctions que vous pourrez « facilement » utiliser, notamment la gestion de :<br>
<br>
<div class="flot_droite"><img src="./ogl_files/10144.png" alt="Image utilisateur"></div><br>
<br>
<ul>
<li>la caméra ;</li>
<li>la rotation 3D des objets ;</li>
<li>le remplissage des faces ;</li>
<li>les textures ;</li>
<li>la lumière ;</li>
<li>et bien plus encore...</li>
</ul><br>
<br>
<br>
Dans ce tuto je compte vous montrer un maximum de techniques telles que la génération d'un <strong>terrain</strong> 3D, un moteur de <strong>particules</strong>, le <strong>bump-mapping</strong>, le <strong>cell-shading</strong>, etc. Comment alors ne pas saliver devant toutes ces possibilités qui s'ouvrent à vous ? D'autant que la plupart sont très accessibles d'un point de vue difficulté de programmation.<br>
<br>
<div class="rmq information">D'un point de vue pédagogique, nous ne verrons la 3D qu'à partir du 4<sup>e</sup> chapitre, car des connaissances de base sont nécessaires afin de se lancer correctement.</div><br>
<br>
<h3>Fenêtrage et événements</h3><br>
<br>
OpenGL ne fournit que des fonctions 3D qui doivent être exécutées dans un contexte graphique déjà créé. Il nous faut donc choisir un système pour créer les fenêtres et gérer les événements pour donner une interactivité aux applications. OpenGL étant implémenté sur de nombreuses plates-formes, j'ai choisi de vous faire utiliser la <strong>SDL</strong> (d'autant que son installation/utilisation vous est enseignée dans <a href="http://www.siteduzero.com/tuto-3-8-0-apprenez-a-programmer-en-c.html">le cours de M@teo</a>).<br>
<br>
La SDL nous permettra ainsi :<br>
<ul>
<li>de créer une fenêtre ;</li>
<li>de charger très facilement des textures grâce à <span class="italique">SDL_image</span> ;</li>
<li>d'utiliser le clavier et la souris ;</li>
<li>d'animer nos scènes.</li>
</ul><br>
<br>
Ainsi nous combinerons la facilité d'utilisation de la SDL avec la puissance d'OpenGL tout en gardant le coté multi plate-formes.<br>
<br>
<h3>Et les moteurs 3D ?</h3><br>
<br>
Je reviendrai en détail plus tard dans ce tutoriel sur ce qui diffère OpenGL des moteurs 3D et sur comment créer son moteur 3D basé sur OpenGL. Quoi qu'il en soit ce que vous apprendrez ici est souvent applicable ailleurs et vous fournit des explications générales sur la programmation 3D. Se plonger dans un moteur tel <strong>Irrlicht</strong> ou <strong>Ogre</strong> sera d'autant plus facile que vous saurez ce qu'ils utilisent derrière.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4913">Que dois-je installer ?</h2>
		<div class="ss_part_texte">
		Vous êtes enfin décidés à vous lancer ? <img src="./ogl_files/hihi.png" alt="^^" class="smilies"> Parfait !<br>
<br>
<h3>Les fichiers nécessaires pour développer</h3><br>
<br>
Si vous avez téléchargé <strong>Code::Block</strong> ou <strong>DevC++</strong>pour suivre le tuto de C/C++ ne changez rien, vous avez déjà les headers et les .a nécessaires. Vous devez donc avoir :<br>
<br>
<table class="tab_user">



<thead><tr><th>OS</th><th>include</th><th>lib</th></tr></thead><tbody><tr>
<td>Windows</td>
<td rowspan="2"><span class="courrier">GL/gl.h<br>
GL/glu.h</span></td>
<td><span class="courrier">libopengl32.a*<br>
libglu32.a</span></td>
</tr><tr>
<td>Unix**</td>
<td><span class="courrier">libopengl.a<br>
libglu.a</span></td>
</tr></tbody></table><br>
<br>
<span class="tpetit">* Si vous utilisez Visual Studio, vous devez déjà avoir l'équivalent en .lib.</span><br>
<span class="tpetit">** Nous verrons lors de la création de notre premier programme quoi rajouter exactement sous Linux.</span><br>
<br>
<h3>Les fichiers nécessaires pour exécuter</h3><br>
<br>
<ul>
<li>Sous <strong>Windows</strong> sauf cas rare très exceptionnel vous avez déjà les .dll nécessaires soit : <span class="courrier">opengl32.dll</span> et <span class="courrier">glu32.dll</span>. Vous n'aurez pas à les fournir avec votre exécutable, car ils sont présents par défaut sous Windows.<br>
<div class="rmq attention">Vous devrez continuer à fournir les .dll de la SDL.</div></li>
<li>Sous <strong>Linux</strong> il vous faut les .so associés au .a.</li>
</ul><br>
<br>
<h3>Vérifier que l'accélération 3D est activée</h3><br>
<br>
Avoir les bons fichiers ne signifie pas forcément que les applications 3D tourneront parfaitement. Si l'accélération matérielle n'est pas activée, les performances en seront très fortement diminuées.<br>
Vérifiez donc que vous avez bien installé les derniers drivers de votre carte graphique. Sous Windows si vous avez l'habitude de jouer à des jeux vidéos sans problèmes c'est que c'est bon !  <img src="./ogl_files/heureux.png" alt=":D" class="smilies"><br>
Sous Linux utilisez le fameux programme <span class="courrier">glxgears</span> pour tester. Les instructions étant trop dépendantes de votre distribution et de votre carte, reportez-vous aux nombreuses ressources disponibles sur Internet.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4916">Première application OpenGL avec SDL</h2>
		<div class="ss_part_texte">
		Je vous l'ai dit plus haut nous allons utiliser OpenGL dans un contexte SDL. La première chose à faire est donc de créer un projet SDL de base (comme expliqué dans le tuto de M@teo). Nous viendrons y remplacer tout le code et compléter les options de compilation pour rajouter OpenGL lors de la phase d'édition des liens.<br>
<br>
<div class="rmq attention">Si vous utilisez un IDE qui fournit des templates de projet (comme Code::Blocks), ne choisissez pas un projet OpenGL mais bien SDL. Nous le compléterons pour avoir un projet SDL/OpenGL.</div><br>
<br>
Je fournirai d'ailleurs <span class="italique">en fin de chapitre</span> le projet final utilisé et vous pourrez vous en servir comme point de départ pour vos applications OpenGL créées en suivant ce tutoriel.<br>
<br>
<h3>Code de départ</h3><br>
<br>
Souvenez-vous du code minimal pour ouvrir une fenêtre SDL :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;SDL/SDL.h&gt;</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">SDL_Init</span><span class="p">(</span><span class="n">SDL_INIT_VIDEO</span><span class="p">);</span>

    <span class="n">SDL_Surface</span><span class="o">*</span> <span class="n">ecran</span> <span class="o">=</span> <span class="n">SDL_SetVideoMode</span><span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">SDL_HWSURFACE</span><span class="p">);</span>

    <span class="n">SDL_Flip</span><span class="p">(</span><span class="n">ecran</span><span class="p">);</span>

    <span class="kt">bool</span> <span class="n">continuer</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="n">SDL_Event</span> <span class="n">event</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">continuer</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">SDL_WaitEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event</span><span class="p">);</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="nl">SDL_QUIT:</span>
                <span class="n">continuer</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">SDL_Quit</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Je ne respecte volontairement pas les règles du C car je compile en C++ et vous inviterai à en faire autant <span class="souligne">dans le futur</span> pour suivre ce tutoriel. En effet les concepts que nous verrons plus tard seront beaucoup plus facilement implémentables en C++. Si vous ne connaissez que le C pour l'instant, rassurez-vous, nous introduirons le concept « objet » de manière simple et intuitive.</div><br>
<br>
<h3>Initialiser SDL en mode OpenGL</h3><br>
<br>
La première chose à changer est au niveau de l'initialisation de mode vidéo. Nous allons utiliser <span class="courrier">SDL_OPENGL</span> au lieu de <span class="courrier">SDL_HWSURFACE</span> :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">SDL_SetVideoMode</span><span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">SDL_OPENGL</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Que devient le <span class="courrier">SDL_DOUBLEBUF</span> utilisé avec la SDL normalement pour activer le double-buffering (cf. <a href="http://www.siteduzero.com/tuto-3-5790-1-la-gestion-des-evenements-clavier-et-souris.html#ss_part_3">Travailler avec le double buffer</a>) ?</div><br>
<br>
L'équivalent avec OpenGL <span class="italique">reviendrait</span> à appeler <span class="courrier">SDL_GL_SetAttribute( SDL_GL_DOUBLEBUFFER, 1 );</span> mais il s'avère qu'il est <strong>déjà activé par défaut</strong> pour OpenGL. Rien de spécial à faire donc.<br>
<br>
<h3>Le premier dessin</h3><br>
<br>
Ensuite nous allons faire nos premiers appels OpenGL pour dessiner un simple triangle.<br>
Nous rajoutons donc les headers nécessaires :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;GL/gl.h&gt;</span>
<span class="cp">#include &lt;GL/glu.h&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">Avec <strong>Visual Studio</strong> (uniquement), il faut rajouter #include &lt;windows.h&gt; avant d'inclure les headers OpenGL.</div><br>
<br>
Voici le code du triangle qui vous sera expliqué dans le prochaine chapitre :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span><span class="p">);</span>

    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">);</span>
        <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>    <span class="n">glVertex2d</span><span class="p">(</span><span class="o">-</span><span class="mf">0.75</span><span class="p">,</span><span class="o">-</span><span class="mf">0.75</span><span class="p">);</span>
        <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>    <span class="n">glVertex2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.75</span><span class="p">);</span>
        <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>    <span class="n">glVertex2d</span><span class="p">(</span><span class="mf">0.75</span><span class="p">,</span><span class="o">-</span><span class="mf">0.75</span><span class="p">);</span>
    <span class="n">glEnd</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<span class="courrier">SDL_Flip(ecran);</span> disparaît au profit de l'appel suivant :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">glFlush</span><span class="p">();</span>
    <span class="n">SDL_GL_SwapBuffers</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La première commande, <span class="courrier">glFlush</span>, vient s'assurer que toutes les commandes OpenGL ont été exécutées, et <span class="courrier">SDL_GL_SwapBuffers</span> est l'équivalent de l'ancien SDL_Flip.<br>
<br>
<h3>Le code complet</h3><br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;SDL/SDL.h&gt;</span>
<span class="cp">#include &lt;GL/gl.h&gt;</span>
<span class="cp">#include &lt;GL/glu.h&gt;</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">SDL_Init</span><span class="p">(</span><span class="n">SDL_INIT_VIDEO</span><span class="p">);</span>
    <span class="n">SDL_WM_SetCaption</span><span class="p">(</span><span class="s">"Mon premier programme OpenGL !"</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">SDL_SetVideoMode</span><span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">SDL_OPENGL</span><span class="p">);</span>

    <span class="kt">bool</span> <span class="n">continuer</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="n">SDL_Event</span> <span class="n">event</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">continuer</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">SDL_WaitEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event</span><span class="p">);</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="nl">SDL_QUIT:</span>
                <span class="n">continuer</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

         <span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span><span class="p">);</span>

        <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">);</span>
            <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>    <span class="n">glVertex2d</span><span class="p">(</span><span class="o">-</span><span class="mf">0.75</span><span class="p">,</span><span class="o">-</span><span class="mf">0.75</span><span class="p">);</span>
            <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>    <span class="n">glVertex2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.75</span><span class="p">);</span>
            <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>    <span class="n">glVertex2d</span><span class="p">(</span><span class="mf">0.75</span><span class="p">,</span><span class="o">-</span><span class="mf">0.75</span><span class="p">);</span>
        <span class="n">glEnd</span><span class="p">();</span>

        <span class="n">glFlush</span><span class="p">();</span>
        <span class="n">SDL_GL_SwapBuffers</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">SDL_Quit</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Compilation</h3><br>
<br>
Pour compiler il nous faut <span class="souligne">rajouter</span> les fichiers cités plus haut. Dans nos options de projet nous rajoutons donc :<br>
<br>
<table class="tab_user">






<thead><tr><th>IDE / Compilateur</th><th>lib</th></tr></thead><tbody><tr>
<td>Code::Blocks Windows</td>
<td>opengl32<br>
glu32</td>
</tr><tr>
<td>DevC++ Windows</td>
<td>-lopengl32<br>
-lglu32</td>
</tr><tr>
<td>Visual Studio Windows</td>
<td>opengl32.lib<br>
glu32.lib</td>
</tr><tr>
<td>Code::Blocks Linux</td>
<td>GL<br>
GLU</td>
</tr><tr>
<td>gcc / g++ Linux</td>
<td>-lGL -lGLU</td>
</tr></tbody></table><br>
<br>
<h3>Résultat</h3><br>
<br>
<div class="centre"><img src="./ogl_files/10174.png" alt="Image utilisateur"></div><br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/sdz_01_intro.zip">Téléchargez le projet Code::Blocks final, l'exécutable Windows et le Makefile Unix (116 Ko)</a></span></div><br>
<br>
<div class="rmq information">Pour les utilisateurs de Code::Blocks, vous pouvez ouvrir le projet fourni et faire <span class="courrier">Project &gt; Save project as user-template</span> pour créer un projet de départ pour toutes vos applications SDL/OpenGL. Ainsi plus tard vous n'aurez qu'à faire <span class="courrier">File &gt; New Project... &gt; (Onglet) User templates &gt; Votre template</span> pour créer un projet opérationnel immédiatement.</div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Et voilà ce n'était pas sorcier !  <img src="./ogl_files/langue.png" alt=":p" class="smilies">  Direction le prochain chapitre pour comprendre le code OpenGL que nous avons utilisé et pour dessiner plein de jolies choses.
	</div>
	
	<hr>
	<h1 id="chap_4923">Notions de base</h1>
	<div id="chap_intro">
	Nous allons voir dans ce chapitre quelques concepts de base en OpenGL.<br>
Bien que les exemples donnés soient en 2D vous verrez qu'ils seront toujours applicables quand nous passerons à la vraie 3D.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4924">Couleur et interpolation</h2>
		<div class="ss_part_texte">
		Dans le screenshot final du chapitre précédent (le triangle coloré) vous avez pu admirer la pureté et la beauté des couleurs en OpenGL.<br>
<br>
Pour définir la couleur d'un vertex on utilise :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">glColor3ub</span><span class="p">(</span><span class="n">rouge</span><span class="p">,</span> <span class="n">vert</span><span class="p">,</span> <span class="n">bleu</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Les valeurs de rouge, vert et bleu sont des entiers entre 0 et 255.<br>
Nous aurions pu aussi bien utiliser <span class="courrier">glColor3f</span> (avec donc des composantes de couleurs entre 0 et 1) mais la plage de valeur [0..255] est plus facile à comprendre car fortement utilisée dans les logiciels de dessins.<br>
<br>
À partir d'une couleur précise, pour connaître ses composantes RVB (ou RGB en anglais) il suffit d'utiliser la palette de couleurs de Windows (par exemple en utilisant Paint).<br>
<br>
<div class="centre"><img src="./ogl_files/10202.png" alt="Image utilisateur"></div><br>
<br>
Un appel à <span class="courrier">glColor</span> affecte la couleur courante, celle qui sera utilisée pour les vertices qui seront définis après. On peut ainsi changer de couleur à chaque vertex ou juste de temps en temps.<br>
<br>
<div class="rmq question">Et pour les points qui ne sont pas des sommets, comment la couleur est-elle définie ?</div><br>
Les couleurs des points qui constituent une face sont calculées par <strong>interpolation</strong> des couleurs des sommets.<br>
<br>
<span class="citation">Citation : Dictionnaire</span><div class="citation2">Interpolation : évaluation de la valeur d'une fonction entre deux points de valeurs connues.</div><br>
<br>
Cela donne donc lieu à de jolis dégradés entre les sommets.<br>
<br>
<h3>Exercice</h3><br>
<br>
Modifier le code du chapitre précédent pour dessiner un rectangle avec un dégradé bleu/rouge.<br>
<br>
<h3>Corrigé</h3><br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;SDL/SDL.h&gt;</span>
<span class="cp">#include &lt;GL/gl.h&gt;</span>
<span class="cp">#include &lt;GL/glu.h&gt;</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">SDL_Init</span><span class="p">(</span><span class="n">SDL_INIT_VIDEO</span><span class="p">);</span>
    <span class="n">SDL_WM_SetCaption</span><span class="p">(</span><span class="s">"Un joli </span><span class="se">\"</span><span class="s">carr\u00E9</span><span class="se">\"</span><span class="s">"</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">SDL_SetVideoMode</span><span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">SDL_OPENGL</span><span class="p">);</span>
 
    <span class="kt">bool</span> <span class="n">continuer</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="n">SDL_Event</span> <span class="n">event</span><span class="p">;</span>
 
    <span class="k">while</span> <span class="p">(</span><span class="n">continuer</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">SDL_WaitEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event</span><span class="p">);</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="nl">SDL_QUIT:</span>
                <span class="n">continuer</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
 
         <span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span><span class="p">);</span>
 
        <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>
            <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>
            <span class="n">glVertex2d</span><span class="p">(</span><span class="o">-</span><span class="mf">0.75</span><span class="p">,</span><span class="o">-</span><span class="mf">0.75</span><span class="p">);</span>
            <span class="n">glVertex2d</span><span class="p">(</span><span class="o">-</span><span class="mf">0.75</span><span class="p">,</span><span class="mf">0.75</span><span class="p">);</span>
            <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
            <span class="n">glVertex2d</span><span class="p">(</span><span class="mf">0.75</span><span class="p">,</span><span class="mf">0.75</span><span class="p">);</span>
            <span class="n">glVertex2d</span><span class="p">(</span><span class="mf">0.75</span><span class="p">,</span><span class="o">-</span><span class="mf">0.75</span><span class="p">);</span>
        <span class="n">glEnd</span><span class="p">();</span>
 
        <span class="n">glFlush</span><span class="p">();</span>
        <span class="n">SDL_GL_SwapBuffers</span><span class="p">();</span>
    <span class="p">}</span>
 
    <span class="n">SDL_Quit</span><span class="p">();</span>
 
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="centre"><img src="./ogl_files/10204.png" alt="Image utilisateur"><br>
Un dégradé très facilement avec OpenGL</div><br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/sdlgl_02_carre.zip">Téléchargez le projet Code::Blocks, l'exécutable Windows et le Makefile Unix (116 Ko)</a></span></div><br>
<br>
<div class="rmq question">Euh oui mais ton carré n'est pas vraiment carré là !?</div><br>
<br>
En effet par défaut les coordonnées vont de -1 à 1 à la fois sur X et sur Y quel que soit le ratio (rapport largeur/hauteur) de la fenêtre. Nous verrons plus tard comment tenir compte du ratio de la fenêtre et changer les coordonnées min/max.<br>
<br>
Vous pouvez dès à présent vous amuser à dessiner des formes en 2D dans cet intervalle de coordonnées. Jouez avec les couleurs, les formes, les dégradés.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4921">Vertices et polygones</h2>
		<div class="ss_part_texte">
		En OpenGL tout est à base de polygones, le polygone de base le plus utilisé étant le triangle.<br>
Même un model 3D se représente avec des polygones qui en composent les faces.<br>
<br>
<div class="centre"><img src="./ogl_files/10200.png" alt="Image utilisateur"><br>
Terrain en mode filaire*</div><br>
<br>
<span class="tpetit">* Nous verrons dans la partie II de ce tuto comment générer un terrain en OpenGL.</span><br>
<br>
Pour dessiner un polygone il faut :<br>
<ul>
<li>définir tous les sommets qui le composent ;</li>
<li>indiquer à OpenGL comment il doit utiliser ses sommets.</li>
</ul><br>
<br>
<div class="rmq information"><span class="italique">Sommet</span> se dit <strong>vertex</strong> en anglais, vertices au pluriel. Pour rester proches du langage OpenGl et du monde de la 3D, nous garderons l'appellation anglaise. Ça fait plus pro, isn't it ?  <img src="./ogl_files/soleil.png" alt=":soleil:" class="smilies"></div><br>
<br>
Regardons la 1<sup>re</sup> ligne du code barbare du chapitre précedent :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">glBegin</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Avec <span class="courrier">GL_TRIANGLES</span> on indique à OpenGL qu'il doit faire des triangles avec les vertices qui seront déclarés.<br>
<br>
Voici la liste des modes que nous pouvons utiliser :<br>
<br>
<table class="tab_user">











<thead><tr><th>mode</th><th>détail</th></tr></thead><tbody><tr>
<td><span class="courrier">GL_POINTS</span></td>
<td>chaque vertex sera représenté comme un point</td>
</tr><tr>
<td><span class="courrier">GL_LINES</span></td>
<td>les vertices seront reliés <strong>2 à 2</strong> pour faire des lignes. Si on définit 4 vertices, le 1<sup>er</sup> sera relié avec le 2<sup>nd</sup>, le 3<sup>e</sup> avec le 4<sup>e</sup>, mais en aucun cas le 2<sup>e</sup> ne sera relié au 3<sup>e</sup></td>
</tr><tr>
<td><span class="courrier">GL_LINE_STRIP</span></td>
<td>les vertices sont connectés par des lignes du 1<sup>er</sup> au dernier. Si on définit 3 vertices, le 1<sup>er</sup> sera relié avec le 2<sup>nd</sup> et le 2<sup>nd</sup> avec le 3<sup>e</sup></td>
</tr><tr>
<td><span class="courrier">GL_LINE_LOOP</span></td>
<td>identique à <span class="courrier">GL_LINE_STRIP</span>, mais le dernier vertex est aussi relié au 1<sup>er</sup> (on réalise une boucle : loop)</td>
</tr><tr>
<td><span class="courrier">GL_TRIANGLES</span></td>
<td>les triplets de vertices sont utilisés pour former des triangles pleins. Ce mode sera le plus utilisé lorsque nous représenterons des objets complexes à base de faces triangulaires</td>
</tr><tr>
<td><span class="courrier">GL_TRIANGLE_STRIP</span></td>
<td>Les triangles se touchent, c'est-à-dire qu'il faut 3 vertices pour faire un premier triangle, et un 4<sup>e</sup> vertex suffit pour en définir un autre car les 2 derniers vertices seront aussi utilisés</td>
</tr><tr>
<td><span class="courrier">GL_TRIANGLE_FAN</span></td>
<td>les triangles se touchent et ont en commun le 1<sup>er</sup> vertex défini. Si on définit 4 vertices, le 1<sup>er</sup> le 2<sup>e</sup> et le 3<sup>e</sup> forment un triangle, le 1<sup>er</sup> le 3<sup>e</sup> et le 4<sup>e</sup> forment un deuxième triangle.</td>
</tr><tr>
<td><span class="courrier">GL_QUADS</span></td>
<td>les quadruplets de vertices forment des quadrilatères pleins</td>
</tr><tr>
<td><span class="courrier">GL_QUAD_STRIP</span></td>
<td>tout comme précédemment, les quadrilatères sont connectés, il suffit de 2 nouveaux vertices pour en définir un nouveau, les 2 derniers vertices du quadrilatère précédents étant utilisés</td>
</tr><tr>
<td><span class="courrier">GL_POLYGON</span></td>
<td>tous les vertices forment un polygone convexe (comme un pentagone ou tout autre polygone ayant plus de 4 sommets)</td>
</tr></tbody></table><br>
<br>
Une fois le mode de dessin défini, il faut déclarer les vertices avec <span class="courrier">glVertex</span> :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3</pre></td><td class="code"><div class="syntax"><pre><span class="n">glVertex2d</span><span class="p">(</span><span class="o">-</span><span class="mf">0.75</span><span class="p">,</span><span class="o">-</span><span class="mf">0.75</span><span class="p">);</span>
<span class="n">glVertex2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.75</span><span class="p">);</span>
<span class="n">glVertex2d</span><span class="p">(</span><span class="mf">0.75</span><span class="p">,</span><span class="o">-</span><span class="mf">0.75</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous l'avons plus haut, une même fonction OpenGL, ici <span class="courrier">glVertex</span>, peut être appelée avec un nombre variable d'arguments. Ici nous en utilisons 2 (d'où le 2d) donc nous définissions le X et le Y du sommet en question et le Z est automatiquement mis à 0.<br>
<br>
Il va sans dire que l'ordre de définition des vertices est important. Il faut suivre le contour du polygone si on ne veut pas se retrouver avec des aberrations.<br>
<br>
Pour finir il faut fermer le bloc ouvert par <span class="courrier">glBegin</span> avec <span class="courrier">glEnd</span> :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">glEnd</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">Oublier de fermer un bloc ouvert avec <span class="courrier">glBegin</span> par <span class="courrier">glEnd</span> rendra le bloc invalide et rien ne sera dessiné.</div><br>
<br>
<h4>Quelques options</h4><br>
<br>
Si vous êtes amenés à travailler avec des points ou des lignes, vous aurez sûrement envie d'en changer la taille... OpenGL a pensé à vous :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="n">glPointSize</span><span class="p">(</span> <span class="n">taille</span> <span class="p">);</span>
<span class="n">glLineWidth</span><span class="p">(</span> <span class="n">largeur</span> <span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<span class="courrier">taille</span> et <span class="courrier">largeur</span> sont des réels qui valent 1.0 par défaut.<br>
<br>
<h4>Comparatif</h4><br>
<br>
Pour comprendre l'influence du mode sur le rendu, voici une animation du rendu de 6 vertices avec des modes différents :<br>
<br>
<div class="centre"><img src="./ogl_files/10201.gif" alt="Image utilisateur"></div><br>
<br>
Certains modes n'ont pas été utilisés car ils n'avaient que peu d'intérêt dans cet exemple.<br>
<div class="rmq information">Dans le mode <span class="courrier">GL_QUADS</span>, comme nous avons 6 vertices, les 4 premiers forment un rectangle, mais les 2 autres sont inutilisés. </div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4922">Fonctions et types</h2>
		<div class="ss_part_texte">
		Dans le chapitre précédent nous avons rencontré nos premières fonctions OpenGL.<br>
Par exemple nous avions :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="n">glBegin</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">);</span>
<span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>    <span class="n">glVertex2d</span><span class="p">(</span><span class="o">-</span><span class="mf">0.75</span><span class="p">,</span><span class="o">-</span><span class="mf">0.75</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour pouvoir les différencier des autres fonctions, les fonctions OpenGL ont une syntaxe particulière dans leur nom :<br>
<br>
<div class="centre"><span class="courrier"><span class="gros">glNom[NbType] ( [ Paramètres ] );</span></span></div><br>
<br>
J'imagine qu'une petite explication de la formule barbare du dessus n'est pas de refus.  <img src="./ogl_files/clin.png" alt=";)" class="smilies"><br>
<br>
<ul>
<li><strong>gl</strong> ou <strong>glu</strong> : préfixes communs à toutes les fonctions OpenGL ;</li>
<li><strong>Nom</strong> : il s'agit du nom de la fonction comme <span class="courrier">Begin</span> ou encore <span class="courrier">Vertex</span> ;</li>
<li><strong>Nb</strong> : pour les fonctions à nombre de paramètres variables définit le nombre de paramètres qui vont suivre (ex : pour <span class="courrier">Begin</span> aucun, pour <span class="courrier">Vertex</span> 2) ;</li>
<li><strong>Type</strong> : pour les fonctions à type variable définit le type des paramètres utilisés. Nous utiliserons notamment :<br>
<ul>
<li><span class="courrier">i</span> pour integer (entier) ;</li>
<li><span class="courrier">f</span> pour float (réel) ;</li>
<li><span class="courrier">d</span> pour double (réel plus précis) ;</li>
<li><span class="courrier">ub</span> pour unsigned byte (entier entre 0 et 255).</li>
</ul></li>
<li><strong>Paramètres</strong> : pour finir si la fonction a besoin de paramètres il faut les rentrer.</li>
</ul><br>
<br>
Avec ce formalisme vous comprenez maintenant que <span class="courrier">glVertex2i</span> est une fonction qui a besoin de deux paramètres de type entier.<br>
<br>
Dans nos codes nous serons amenés à rencontrer des constantes OpenGL. On les reconnaît facilement car leur nom est intégralement en majuscules.<br>
Ex : <span class="courrier">GL_TRUE</span>, <span class="courrier">GL_FALSE</span> qui sont les équivalents de true, et false (vrai et faux).<br>
Si vous vous rappelez bien, nous sommes déjà passés devant une constante sans nous en rendre compte :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous disions ici à OpenGL d'effacer le tampon d'affichage en passant en paramètre de <span class="courrier">glClear</span> une constante qui lui permet de savoir quel tampon effacer.<br>
<br>
À tout moment, n'hésitez pas à consulter la documentation pour avoir plus de détails sur l'utilisation d'une fonction.<br>
La documention est disponible sur le site d'OpenGL :<br>
<br>
<div class="centre"><span class="tgros"><a href="http://www.opengl.org/documentation/specs/man_pages/hardcopy/GL/html/">Documentation OpenGL</a></span>*</div><br>
<br>
<span class="tpetit">* par exemple pour avoir le détail sur <span class="courrier">glVertex</span> nous cliquons sur <a href="http://www.opengl.org/documentation/specs/man_pages/hardcopy/GL/html/gl/">gl</a> puis cherchons <a href="http://www.opengl.org/documentation/specs/man_pages/hardcopy/GL/html/gl/vertex.html">Vertex</a>.</span>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Vous voyez l'OpenGL ce n'est pas si compliqué !<br>
Dans le prochain chapitre nous restons en 2D pour nous attaquer aux transformations.
	</div>
	
	<hr>
	<h1 id="chap_4932">Les transformations</h1>
	<div id="chap_intro">
	J'imagine votre impatience de  débuter réellement la 3D. Mon but est de vous y emmener au plus vite mais avec un petit bagage technique nécessaire pour que vous puissiez tout de suite vous amuser et surtout comprendre ce que vous faites.<br>
Ce chapitre vient introduire la notion de <strong>transformation</strong>, notion que nous pourrons dès à présent appliquer en 2D.<br>
<br>
Si vous avez la tête qui tourne lors de la lecture de ce chapitre, c'est normal ! Ce sont les effets de la rotation que nous allons découvrir.  <img src="./ogl_files/clin.png" alt=";)" class="smilies">
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4931">Un brin de folie mathématique</h2>
		<div class="ss_part_texte">
		Les transformations... un bien grand mot. En prenant notre bon vieux bouquin de Maths de 4<sup>e</sup> ou 3<sup>e</sup> nous trouvons comme transformations élémentaires :<br>
<ul>
<li>la translation ;</li>
<li>la rotation ;</li>
<li>la symétrie* ;</li>
<li>le changement d'échelle.</li>
</ul><br>
<br>
<span class="tpetit">* la symétrie centrale équivaut à une rotation de 180° et certaines symétries axiales sont définissables <span class="italique">via</span> des changements d'échelle (nous y reviendrons lorsque nous verrons comment réaliser un miroir en OpenGL)</span><br>
<br>
Je ne vais pas m'étaler sur l'explication des actions de ces transformations sur les angles, les longueurs... c'était le boulot de votre prof de collège !  <img src="./ogl_files/diable.png" alt=":diable:" class="smilies"><br>
Pour ma part je vais vous parler des matrices, car c'est sous cette forme que sont utilisées les transformations en OpenGL (et dans la géométrie spatiale en général).<br>
Les matrices vous connaissez ? Oui euh... non, pas <span class="italique"><strong>la</strong> matrice</span> ok... c'est pas gagné...  <img src="./ogl_files/pinch.png" alt="Image utilisateur"><br>
<br>
Une matrice se représente sous la forme d'un tableau de nombres... mais attention son sens et son utilisation vont au-delà de sa représentation. <strong><span class="rouge">Ce n'est pas qu'un « tableau ».</span></strong><br>
D'une manière générale une matrice représente une transformation. La matrice définit la manière d'évoluer d'un système.<br>
Ici ce qui nous intéresse c'est l'<span class="italique">utilisation géométrique des matrices</span> pour prédire <strong>numériquement</strong> le résultat d'une transformation.<br>
<br>
Je prendrai l'exemple de la rotation 2D car il est facilement compréhensible et représentable. Le principe est le même pour la 3D, avec une dimension en plus bien évidemment.<br>
<br>
<div class="centre"><img src="./ogl_files/10378.png" alt="Image utilisateur"></div><br>
<br>
La rotation d'angle thêta sur le plan (voir dessin ci-dessus), s'écrit matriciellement :  <br>
<br>
<div class="centre"><img src="./ogl_files/10379.png" alt="Image utilisateur"></div><br>
<br>
En prenant le cas particulier de la rotation d'angle thêta = 90°, le matrice devient :<br>
<br>
<div class="centre"><img src="./ogl_files/10380.png" alt="Image utilisateur"></div><br>
<br>
Maintenant prenons un vecteur de base, disons le vecteur <span class="courrier">V</span> de coordonnées <span class="courrier">V=(1,1)</span>.<br>
<br>
<div class="centre"><img src="./ogl_files/10381.png" alt="Image utilisateur"></div><br>
<br>
Appliquons-lui la « transformation » décrite par la matrice. Pour ce faire calculons simplement le produit* matrice x vecteur : <span class="courrier">V' = M x V</span><br>
<br>
<span class="tpetit">* Un produit matrice x vecteur est assez simple, le dessin ci-dessous l'explique en couleur.</span><br>
<br>
<div class="centre"><img src="./ogl_files/10382.png" alt="Image utilisateur"><br>
<br>
<img src="./ogl_files/10383.png" alt="Image utilisateur"></div><br>
<br>
On obtient comme vous le voyez le vecteur <span class="courrier">V'=(-1,1)</span>.<br>
<br>
<div class="centre"><img src="./ogl_files/10384.png" alt="Image utilisateur"></div><br>
<br>
Et en effet en vérifiant graphiquement, le vecteur rouge est bien obtenu par rotation de 90° du vecteur noir comme nous l'avions prévu par le calcul.<br>
<br>
<div class="centre"><img src="./ogl_files/10385.png" alt="Image utilisateur"></div><br>
<br>
Ici nous avons vu comment une matrice pouvait être utilisée pour réaliser une rotation.<br>
En réalité les matrices utilisées sont des matrices <span class="courrier">4x4</span> qui peuvent représenter à la fois une rotation, une translation et une « mise à l'échelle ». Je ne détaillerai pas ici les mathématiques des matrices 3D, mon but étant juste pour l'instant de vous faire comprendre qu'une matrice peut être (et sera) utilisée pour faire des transformations géométriques.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4930">Les matrices OpenGL</h2>
		<div class="ss_part_texte">
		La plupart du temps, avec OpenGL, nous ne manipulerons pas directement ces matrices mais vous devez savoir qu'il existe trois matrices que nous serons amenés à utiliser <span class="italique">via</span> des appels de fonctions simples :<br>
<br>
<table class="tab_user">



<tbody><tr>
<td><span class="courrier">GL_PROJECTION</span></td>
<td>dans laquelle nous définissons le mode de projection (orthogonale, perspective)</td>
</tr><tr>
<td><span class="courrier">GL_MODELVIEW</span></td>
<td>pour positionner les objets dans la scène (caméra, vertices, lumières et autres effets). C'est celle que nous manipulerons le plus.</td>
</tr><tr>
<td><span class="courrier">GL_TEXTURE</span></td>
<td>pour les textures. Nous verrons lors du chapitre sur les textures comment le fait de définir une translation grâce à cette matrice nous permettra de faire des textures animées.</td>
</tr></tbody></table><br>
<br>
<h3>Transformations cumulatives</h3><br>
<br>
Comme je vous l'ai dit tout à l'heure en OpenGL on modifie rarement la matrice directement (en affectant des valeurs). On vient plutôt modifier la matrice existante grâce à un appel de fonction. Par exemple si la transformation actuellement stockée dans la matrice est <span class="courrier"><span class="marine">rotation de 90°</span></span> et qu'on vient demander à faire une <span class="courrier"><span class="marine">rotation de -10°</span></span>, la matrice contiendra en fait la transformation cumulée c'est-à-dire <span class="courrier"><span class="rouge">rotation de 80°</span></span>.<br>
<br>
Pour éviter de cumuler des transformations et repartir à zéro en quelque sorte il faut réinitialiser la matrice (toute analogie avec un film est purement fortuite...).<br>
<br>
<h3>Réinitialiser une matrice</h3><br>
<br>
Avant de faire des modifications sur la matrice de transformation, il faut être sûr de son état de départ. Pour cela on la réinitialise avec la <strong>matrice d'identité</strong>.*<br>
<br>
<span class="tpetit">* La transformée d'un point par la matrice d'identité est lui-même, en gros elle ne transforme rien.</span><br>
<br>
Pour ce faire on utilise la fonction :<br>
<div class="centre"><span class="gros"><span class="courrier">glLoadIdentity();</span></span></div><br>
<br>
Ainsi nous rajouterons ce morceau de code avant de faire un quelconque dessin :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_MODELVIEW</span> <span class="p">);</span>
<span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Pile de matrices</h3><br>
<br>
Vous l'avez compris maintenant, appliquer une transformation en OpenGL revient à multiplier la matrice actuelle par la matrice de notre nouvelle transformation.<br>
Avant d'effectuer une transformation, il faut savoir si nous allons l'appliquer uniquement à un objet, ou à tous ceux qui seront définis par la suite.<br>
En effet si on applique une rotation à un triangle, et qu'on dessine un carré juste après il subira aussi cette transformation.<br>
Deux fonctions permettent d'éviter ça :<br>
<ul>
<li><span class="courrier">glPushMatrix( )</span> : sauvegarde la matrice actuelle ;</li>
<li><span class="courrier">glPopMatrix( )</span> : restitue la matrice sauvegardée.</li>
</ul><br>
<br>
Après un <span class="courrier">glPushMatrix</span>, on continue à travailler avec l'état actuel de la matrice, on a juste rajouté la possibilité de revenir en arrière.<br>
On peut toujours, à tout moment, recommencer à zéro et réinitialiser la matrice de transformation à la matrice identité : <span class="courrier">glLoadIdentity();</span><br>
<br>
Quand une matrice est sauvegardée, elle est mise en tête de la pile (de sauvegarde) des matrices.<br>
Un appel à <span class="courrier">glPopMatrix</span> prend la matrice en tête, l'enlève de la pile et l'utilise comme matrice de transformation actuelle.<br>
<br>
La profondeur de cette pile est de 32 matrices pour <span class="courrier">GL_MODELVIEW</span>, on peut donc faire 32 appels consécutifs à <span class="courrier">glPushMatrix</span>.<br>
<br>
Maintenant que nous savons comment préserver notre matrice, voyons tout de même ce qui nous intéresse ici... la modifier pour appliquer des transformations.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4934">Les transformations</h2>
		<div class="ss_part_texte">
		Transformation = changement de repère.<br>
<span class="gros">Transformation = changement de repère.</span><br>
<span class="tgros">Transformation = changement de repère.</span><br>
Ah oui au fait, saviez-vous que : <span class="ttgros">transformation = changement de repère</span>  ? <img src="./ogl_files/langue.png" alt=":p" class="smilies"><br>
<br>
Je me permets d'insister (lourdement), car c'est ce qu'il faut assimiler pour devenir le roi des transformations.<br>
Dans la vraie vie pour appliquer une transformation à un objet nous le placerions d'abord dans le monde puis nous le ferions tourner par exemple. Ici il faut réfléchir en terme de repère : par des modifications successives de la matrice <span class="courrier">GL_MODELVIEW</span> nous plaçons, tournons, dimensionnons le repère dans lequel sera <span class="souligne">ensuite</span> dessiné notre objet.<br>
Ainsi nous appliquons d'abord les transformations que nous voulons, puis au dernier moment nous dessinons notre objet.<br>
<br>
J'illustrerai donc les transformations sur la modification apportée au repère. Et pour marquer les esprits sur le fait que les transformations sont accumulées tant que la matrice n'est pas réinitialisée, j'effectuerai les transformations les unes à la suite des autres.<br>
<br>
Partons donc du repère de base, ici représenté uniquement dans le plan <span class="courrier">(X,Y)</span> par souci de simplicité.<br>
<br>
<div class="centre"><img src="./ogl_files/10386.png" alt="Image utilisateur"><br>
Repère de base</div><br>
<br>
<h3>Translation</h3><br>
<br>
La translation permet de déplacer le repère actuel selon un vecteur <span class="courrier">V = (x,y,z)</span> ou x, y, et z sont réels. Même si on ne veut déplacer que selon une composante, il faut définir les autres (en les mettant à <span class="courrier">0</span>).<br>
<br>
<div class="centre"><span class="gros"><span class="courrier">glTranslatef ( x , y, z ); </span></span></div><br>
<br>
Exemple ici :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">glTranslated</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
Donne :<br>
<br>
<div class="centre"><img src="./ogl_files/10387.png" alt="Image utilisateur"><br>
Repère après translation</div><br>
<br>
<h3>Rotation</h3><br>
<br>
La rotation fait tourner le repère actuel d'un angle thêta (exprimé <strong>en degré</strong>) selon l'axe défini par le vecteur <span class="courrier">V = (x,y,z)</span> ou x, y, et z sont des réels :<br>
<br>
<div class="centre"><span class="gros"><span class="courrier">glRotated ( thêta, x , y, z );</span></span></div><br>
<br>
Généralement on ne fait tourner qu'autour <strong>d'un des axes principaux</strong> (X Y ou Z) <strong>à la fois</strong>.<br>
Les rotations sur le plan (X,Y) se font autour de l'axe Z, donc pour faire tourner notre repère de 45° il faut faire :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">glRotated</span><span class="p">(</span><span class="mi">45</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="centre"><img src="./ogl_files/10388.png" alt="Image utilisateur"><br>
Repère après rotation</div><br>
<br>
<div class="rmq information">Je vous l'ai dit tout à l'heure, chaque transformation modifie la matrice. Si on ne revient pas en arrière (remise à zéro, ou restitution d'une matrice sauvegardée), les transformations se combinent. C'est pour ça qu'ici le repère a tourné à partir de la position qui lui avait été donnée après la translation.</div><br>
<br>
<h3>Changement d'échelle</h3><br>
<br>
Ce n'est pas vraiment une homothétie car on peut changer d'échelle différemment selon les axes.<br>
Elle permet de transformer les axes du repère afin de grossir, diminuer, étirer les objets qui y seront dessinés (« scale » en anglais).<br>
Ainsi si l'on appelle<br>
<div class="centre"><span class="gros"><span class="courrier">glScalef ( i, j, k );</span></span></div><br>
le nouveau repère sera tel que <span class="courrier">x' = i * x, y' = j * y, z' = k * z</span>.<br>
<br>
Si l'on souhaite ne pas modifier un axe en particulier (par exemple Z quand on fait de la 2D) il faut mettre 1 et non 0.<br>
Généralement on applique le même facteur à tous les axes pour ne pas déformer, mais rien ne nous empêche de transformer différemment les axes :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">glScalef</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="centre"><img src="./ogl_files/10389.png" alt="Image utilisateur"><br>
Repère après changement d'échelle</div><br>
<br>
<h3>Importance de l'ordre des transformations</h3><br>
<br>
Il est important que vous réfléchissiez à l'ordre dans lequel vous appliquez vos transformations. Par exemple faire une translation suivie d'une rotation n'a pas forcément le même résultat que de faire la rotation puis la translation.<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="syntax"><pre><span class="n">glPushMatrix</span><span class="p">();</span>
<span class="n">glTranslated</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
<span class="n">glRotated</span><span class="p">(</span><span class="mi">45</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">dessin1</span><span class="p">();</span> <span class="c">//triangle rouge</span>
<span class="n">glPopMatrix</span><span class="p">();</span>

<span class="n">glRotated</span><span class="p">(</span><span class="mi">45</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">glTranslated</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
<span class="n">dessin2</span><span class="p">();</span> <span class="c">//triangle bleu</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="centre"><img src="./ogl_files/10390.png" alt="Image utilisateur"><br>
Ordre des transformations</div><br>
<br>
<div class="rmq information">Remarquez au passage l'utilisation qui a été faite de <span class="courrier">glPushMatrix( )</span> et <span class="courrier">glPopMatrix( )</span>, qui nous ont permis, après avoir dessiné le triangle rouge, de revenir au repère de base afin d'entamer les transformations pour le triangle bleu.</div><br>
<br>
Pour être sûr que vous ayez bien saisi les finesses des transformations, rien de tel qu'un exercice pratique et rigolo !
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4933">Exercice : une grue</h2>
		<div class="ss_part_texte">
		Je vous propose de vous familiariser avec les transformations par l'intermédiaire d'un petit exercice simple : la construction d'une grue 2D contrôlée par le clavier.<br>
<br>
<div class="flot_droite"><img src="./ogl_files/10393.png" alt="Image utilisateur"></div><br>
<br>
La grue est assez simple et est composée :<br>
<ul>
<li>d'une base ;</li>
<li>d'un grand bras ;</li>
<li>d'un petit bras ;</li>
<li>d'un fil ;</li>
<li>d'une caisse.</li>
</ul><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<div class="flot_droite"><img src="./ogl_files/10394.png" alt="Image utilisateur"></div><br>
<br>
Je vous conseille de contrôler la grue au <a href="http://www.siteduzero.com/tuto-3-5790-1-la-gestion-des-evenements-clavier-et-souris.html#ss_part_2">clavier</a> et ainsi de pouvoir modifier :<br>
<ul>
<li>l'angle entre le bras et la base ;</li>
<li>l'angle entre le petit bras et le grand bras ;</li>
<li>la longueur du fil (pour faire monter et descendre la caisse).</li>
</ul><br>
<br>
<h3>Gestion du clavier</h3><br>
<br>
Je vous laisse libres du choix des touches. Pour ma part j'ai utilisé les flèches directionnelles : haut/bas pour le fil, gauche/droite pour les bras (shift enfoncé pour le grand bras).<br>
<br>
Une réception des événements avec <span class="courrier">SDL_WaitEvent</span> suffit car on veut ne faire bouger la grue que lors de l'appui sur une touche.<br>
Pensez toutefois à activer la répétition des touches au préalable* :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">SDL_EnableKeyRepeat</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<span class="tpetit">* les valeurs proposées par SDL (<span class="courrier">SDL_DEFAULT_REPEAT_DELAY</span> et <span class="courrier">SDL_DEFAULT_REPEAT_INTERVAL</span>) sont trop lentes. Avec 10, 10 vous aurez un mouvement plus fluide.</span><br>
<br>
Pour avoir quelque chose d'un chouilla réaliste, je vous conseille de limiter la plage de valeurs que peuvent prendre vos variables (angles et longueur). J'utilise :<br>
<ul>
<li>angle grand bras/base entre 10° et 90° ;</li>
<li>angle petit bras/grand bras entre -90° et 90° ;</li>
<li>longueur entre 10 et 100.</li>
</ul><br>
<br>
<h3>Dessin de la grue</h3><br>
<br>
Nous restons encore en 2D mais pour faciliter les choses il serait bien de pouvoir avoir des coordonnées de l'ordre des pixels. Pour ce faire nous allons modifier la matrice de projection pour faire de la projection 2D dont nous spécifierons cette fois les dimensions (alors qu'elles étaient par défaut entre -1 et 1 au préalable).<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="n">SDL_WM_SetCaption</span><span class="p">(</span><span class="s">"Exercice : une grue"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
<span class="n">SDL_SetVideoMode</span><span class="p">(</span><span class="n">LARGEUR_ECRAN</span><span class="p">,</span> <span class="n">HAUTEUR_ECRAN</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">SDL_OPENGL</span><span class="p">);</span>

<span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_PROJECTION</span> <span class="p">);</span>
<span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>
<span class="n">gluOrtho2D</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">LARGEUR_ECRAN</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">HAUTEUR_ECRAN</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
De cette manière nous aurons l'espace de coordonnées suivant :<br>
<br>
<div class="centre"><img src="./ogl_files/10395.png" alt="Image utilisateur"></div><br>
<br>
Enfin dernier conseil avant de vous lâcher dans la nature, il peut être utile à tout moment de savoir où est le repère actuel et comment il est orienté. Pour ce faire voici une petite fonction que vous pouvez appeler n'importe quand dans votre dessin pour « déboguer » et mieux visualiser vos transformations.<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><div class="syntax"><pre><span class="c">/*</span>
<span class="c">    Dessine le repère actuel pour faciliter</span>
<span class="c">    la compréhension des transformations.</span>
<span class="c">    Utiliser « echelle » pour avoir un repère bien orienté et positionné</span>
<span class="c">    mais avec une échelle différente.</span>
<span class="c">*/</span>
<span class="kt">void</span> <span class="n">dessinerRepere</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">echelle</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">glPushMatrix</span><span class="p">();</span>
    <span class="n">glScalef</span><span class="p">(</span><span class="n">echelle</span><span class="p">,</span><span class="n">echelle</span><span class="p">,</span><span class="n">echelle</span><span class="p">);</span>
    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_LINES</span><span class="p">);</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>
    <span class="n">glVertex2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">glVertex2i</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">glVertex2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">glVertex2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glEnd</span><span class="p">();</span>
    <span class="n">glPopMatrix</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Par exemple, après avoir dessiné ma base si j'appelle<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">dessinerRepere</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div> j'obtiens :<br>
<br>
<div class="centre"><img src="./ogl_files/10396.png" alt="Image utilisateur"></div><br>
<br>
Je vois donc ici que je suis prêt à faire la première rotation et dessiner le grand bras.<br>
<br>
<div class="rmq attention">En ce qui concerne le fil, il doit toujours être à la verticale. Il faut donc que vous trouviez, une fois au bout du petit bras, un moyen d'annuler les rotations pour remettre le repère « à l'endroit ».</div><br>
<br>
<div class="centre"><span class="gros"><span class="rouge">Bon courage !</span></span></div><br>
<br>
<h3>Correction</h3><br>
<br>
Je vous donne ma version de la grue. Ce n'est qu'un guide rien ne vous oblige à faire « exactement » pareil.<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;SDL/SDL.h&gt;</span>
<span class="cp">#include &lt;GL/gl.h&gt;</span>
<span class="cp">#include &lt;GL/glu.h&gt;</span>
<span class="cp">#include &lt;cstdlib&gt;</span>

<span class="cp">#define LARGEUR_BASE 50</span>
<span class="cp">#define HAUTEUR_BASE 20</span>

<span class="cp">#define LARGEUR_BRAS_1 150</span>
<span class="cp">#define HAUTEUR_BRAS_1 15</span>

<span class="cp">#define LARGEUR_BRAS_2 50</span>
<span class="cp">#define HAUTEUR_BRAS_2 10</span>

<span class="cp">#define TAILLE_CAISSE 10</span>

<span class="cp">#define LARGEUR_ECRAN (LARGEUR_BASE + LARGEUR_BRAS_1 + HAUTEUR_BRAS_2 + 50)</span>
<span class="cp">#define HAUTEUR_ECRAN (HAUTEUR_BASE + LARGEUR_BRAS_1 + HAUTEUR_BRAS_2 + 50)</span>

<span class="kt">int</span> <span class="n">angle1</span> <span class="o">=</span> <span class="mi">45</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">angle2</span> <span class="o">=</span> <span class="o">-</span><span class="mi">20</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">longueur</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">Dessiner</span><span class="p">();</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">SDL_Event</span> <span class="n">event</span><span class="p">;</span>

    <span class="n">SDL_Init</span><span class="p">(</span><span class="n">SDL_INIT_VIDEO</span><span class="p">);</span>
    <span class="n">atexit</span><span class="p">(</span><span class="n">SDL_Quit</span><span class="p">);</span>

    <span class="n">SDL_WM_SetCaption</span><span class="p">(</span><span class="s">"Exercice : une grue"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">SDL_SetVideoMode</span><span class="p">(</span><span class="n">LARGEUR_ECRAN</span><span class="p">,</span> <span class="n">HAUTEUR_ECRAN</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">SDL_OPENGL</span><span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_PROJECTION</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>
    <span class="n">gluOrtho2D</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">LARGEUR_ECRAN</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">HAUTEUR_ECRAN</span><span class="p">);</span>

    <span class="n">SDL_EnableKeyRepeat</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>

    <span class="n">Dessiner</span><span class="p">();</span>

    <span class="k">while</span><span class="p">(</span><span class="n">SDL_WaitEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">event</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="nl">SDL_QUIT:</span>
            <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="nl">SDL_KEYDOWN:</span>
            <span class="k">switch</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">key</span><span class="p">.</span><span class="n">keysym</span><span class="p">.</span><span class="n">sym</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="nl">SDLK_UP:</span>
                <span class="n">longueur</span> <span class="o">--</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">longueur</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span>
                    <span class="n">longueur</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="nl">SDLK_DOWN:</span>
                <span class="n">longueur</span> <span class="o">++</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">longueur</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">)</span>
                    <span class="n">longueur</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="nl">SDLK_LEFT:</span>
                <span class="k">if</span> <span class="p">((</span><span class="n">event</span><span class="p">.</span><span class="n">key</span><span class="p">.</span><span class="n">keysym</span><span class="p">.</span><span class="n">mod</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">KMOD_LSHIFT</span><span class="p">)</span> <span class="o">==</span> <span class="n">KMOD_LSHIFT</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">angle1</span><span class="o">++</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">angle1</span> <span class="o">&gt;</span> <span class="mi">90</span><span class="p">)</span>
                        <span class="n">angle1</span> <span class="o">=</span> <span class="mi">90</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="n">angle2</span><span class="o">++</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">angle2</span> <span class="o">&gt;</span> <span class="mi">90</span><span class="p">)</span>
                        <span class="n">angle2</span> <span class="o">=</span> <span class="mi">90</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="nl">SDLK_RIGHT:</span>
                <span class="k">if</span> <span class="p">((</span><span class="n">event</span><span class="p">.</span><span class="n">key</span><span class="p">.</span><span class="n">keysym</span><span class="p">.</span><span class="n">mod</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">KMOD_LSHIFT</span><span class="p">)</span> <span class="o">==</span> <span class="n">KMOD_LSHIFT</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">angle1</span><span class="o">--</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">angle1</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span>
                        <span class="n">angle1</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="n">angle2</span><span class="o">--</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">angle2</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">90</span><span class="p">)</span>
                        <span class="n">angle2</span> <span class="o">=</span> <span class="o">-</span><span class="mi">90</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">Dessiner</span><span class="p">();</span>
    <span class="p">}</span>



    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/*</span>
<span class="c">    Dessine un rectangle avec comme point de référence</span>
<span class="c">    le milieu du côté gauche</span>
<span class="c">*/</span>
<span class="kt">void</span> <span class="n">dessineRectangle</span><span class="p">(</span><span class="kt">double</span> <span class="n">largeur</span><span class="p">,</span><span class="kt">double</span> <span class="n">hauteur</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>
    <span class="n">glVertex2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="n">hauteur</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
    <span class="n">glVertex2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">hauteur</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
    <span class="n">glVertex2d</span><span class="p">(</span><span class="n">largeur</span><span class="p">,</span><span class="n">hauteur</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
    <span class="n">glVertex2d</span><span class="p">(</span><span class="n">largeur</span><span class="p">,</span><span class="o">-</span><span class="n">hauteur</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
    <span class="n">glEnd</span><span class="p">();</span>
<span class="p">}</span>

<span class="c">/*</span>
<span class="c">    Dessine le repère actuel pour faciliter</span>
<span class="c">    la compréhension des transformations.</span>
<span class="c">    Utiliser "echelle" pour avoir un repère bien orienté et positionné</span>
<span class="c">    mais avec une échelle différente.</span>
<span class="c">*/</span>
<span class="kt">void</span> <span class="n">dessinerRepere</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">echelle</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">glPushMatrix</span><span class="p">();</span>
    <span class="n">glScalef</span><span class="p">(</span><span class="n">echelle</span><span class="p">,</span><span class="n">echelle</span><span class="p">,</span><span class="n">echelle</span><span class="p">);</span>
    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_LINES</span><span class="p">);</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>
    <span class="n">glVertex2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">glVertex2i</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">glVertex2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">glVertex2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glEnd</span><span class="p">();</span>
    <span class="n">glPopMatrix</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">Dessiner</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">glClear</span><span class="p">(</span> <span class="n">GL_COLOR_BUFFER_BIT</span> <span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_MODELVIEW</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>

    <span class="c">/* Je déplace mon répère initial (actuellement</span>
<span class="c">    en bas à gauche de l'écran) */</span>
    <span class="n">glTranslated</span><span class="p">(</span><span class="n">LARGEUR_BASE</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">HAUTEUR_BASE</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>

    <span class="c">// La base</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">254</span><span class="p">,</span><span class="mi">128</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">dessineRectangle</span><span class="p">(</span><span class="n">LARGEUR_BASE</span><span class="p">,</span><span class="n">HAUTEUR_BASE</span><span class="p">);</span>

    <span class="c">//Je me place en haut au milieu de la base</span>
    <span class="n">glTranslated</span><span class="p">(</span><span class="n">LARGEUR_BASE</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">HAUTEUR_BASE</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>

    <span class="c">// Le grand bras</span>
    <span class="n">glRotated</span><span class="p">(</span><span class="n">angle1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">248</span><span class="p">,</span><span class="mi">230</span><span class="p">,</span><span class="mi">7</span><span class="p">);</span>
    <span class="n">dessineRectangle</span><span class="p">(</span><span class="n">LARGEUR_BRAS_1</span><span class="p">,</span><span class="n">HAUTEUR_BRAS_1</span><span class="p">);</span>

    <span class="c">// Je me place au bout du grand bras</span>
    <span class="n">glTranslated</span><span class="p">(</span><span class="n">LARGEUR_BRAS_1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>

    <span class="c">// Puis m'occupe du petit bras</span>
    <span class="n">glRotated</span><span class="p">(</span><span class="n">angle2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">186</span><span class="p">,</span><span class="mi">234</span><span class="p">,</span><span class="mi">21</span><span class="p">);</span>
    <span class="n">dessineRectangle</span><span class="p">(</span><span class="n">LARGEUR_BRAS_2</span><span class="p">,</span><span class="n">HAUTEUR_BRAS_2</span><span class="p">);</span>

    <span class="c">// Je me place au bout du petit bras</span>
    <span class="n">glTranslated</span><span class="p">(</span><span class="n">LARGEUR_BRAS_2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="c">/* J'annule les rotations pour avoir mon repère aligné</span>
<span class="c">    avec le repère d'origine */</span>
    <span class="n">glRotated</span><span class="p">(</span><span class="o">-</span><span class="n">angle1</span><span class="o">-</span><span class="n">angle2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="c">// Je dessine le fil</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>
    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_LINES</span><span class="p">);</span>
    <span class="n">glVertex2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">glVertex2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="n">longueur</span><span class="p">);</span>
    <span class="n">glEnd</span><span class="p">();</span>

    <span class="c">/* Je descends en bas du fil (avec un petit décalage</span>
<span class="c">    sur X pour anticiper le dessin de la caisse */</span>
    <span class="n">glTranslated</span><span class="p">(</span><span class="o">-</span><span class="n">TAILLE_CAISSE</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="n">longueur</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>

    <span class="c">// Et je dessine enfin la caisse</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">175</span><span class="p">,</span><span class="mi">175</span><span class="p">,</span><span class="mi">85</span><span class="p">);</span>
    <span class="n">dessineRectangle</span><span class="p">(</span><span class="n">TAILLE_CAISSE</span><span class="p">,</span><span class="n">TAILLE_CAISSE</span><span class="p">);</span>

    <span class="n">glFlush</span><span class="p">();</span>
    <span class="n">SDL_GL_SwapBuffers</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/sdlgl_03_grue.zip">Téléchargez le projet Code::Blocks, l'exécutable Windows et le Makefile Unix (118 Ko)</a></span></div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Voilà, si vous avez fait l'exercice proposé vous êtes maintenant les rois des transformations OpenGL.<br>
Nous allons enfin pouvoir nous attaquer à ce que nous attendons tant : <strong>la 3D</strong>.<br>
Direction le prochain chapitre pour voir comment paramétrer et utiliser la caméra.
	</div>
	
	<hr>
	<h1 id="chap_4939">Enfin de la 3D (Partie 1/2)</h1>
	<div id="chap_intro">
	Enfin on y est ! On va pouvoir passer à la 3D !<br>
Pour faire ce passage en douceur je scinde ce chapitre en deux parties.<br>
Nous commencerons donc par <span class="italique">comprendre comment il est possible de faire de la 3D</span> sur un écran 2D, ce qu'il nous faut préparer pour « dessiner » en 3D, et dans la seconde partie <span class="italique">nous dessinerons un cube</span> et verrons les problèmes que cela pose.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4942">Du réel à l'écran</h2>
		<div class="ss_part_texte">
		Quand vous décrivez votre scène 3D en OpenGL (à coup de <span class="courrier">glVertex</span>), vous décrivez le monde tel qu'il est dans l'absolu, dans son propre repère.<br>
Pour passer du monde réel à l'écran, il faut donner quelques indications à OpenGL :<br>
<ul>
<li>définir quelle zone de la fenêtre servira pour le rendu* ;</li>
<li>définir le mode de projection (perspective par exemple) ;</li>
<li>placer la caméra dans le monde réel.</li>
</ul><br>
<br>
<span class="tpetit">* Cette phase est automatiquement réalisée à la création de la fenêtre. Nous verrons dans la partie II comment la changer pour faire du split-screen (plusieurs écrans de rendu sur la même fenêtre).</span><br>
<br>
Grâce à ces informations, OpenGL pourra déterminer les transformations à faire subir aux objets du monde réel à 3 dimensions pour les dessiner sur l'écran à 2 dimensions.<br>
<br>
<div class="centre"><img src="./ogl_files/10414.png" alt="Image utilisateur"></div><br>
<br>
Dans le monde réel on travaille au niveau des vertices, et sur l'écran au niveau des pixels. Sur le dessin du haut vous avez peut-être remarqué que je n'ai pas fait apparaître de Z écran. C'était juste pour ne pas vous embrouiller car l'écran est bien à 2 dimensions. Mais le Z écran sert tout de même à donner une information de profondeur des pixels.<br>
<br>
<div class="flot_droite"><img src="./ogl_files/10415.png" alt="Image utilisateur"></div><br>
<br>
<br>
<div class="rmq information">Le repère X,Y,Z de l'écran n'est pas direct : si on applique la règle de la main droite. L'axe Z devrait aller de l'écran vers nous. Cependant la convention a été prise en synthèse d'image que l'axe Z s'enfonce dans l'écran.</div><br>
<br>
<br>
<br>
<br>
<br>
<div class="rmq question">Quelle est l'unité de distance en OpenGL ?</div><br>
<br>
Réponse : <strong><span class="vertf">celle que vous voulez</span></strong> ! En effet quand nous y pensons qu'est-ce qui fait que quelque chose est grand ou petit en réalité ? Sans référentiel il nous est difficile de déterminer visuellement la taille d'un objet. Nous savons qu'il est petit car il y a un autre objet à côté dont nous connaissons la taille. Nous savons <span class="souligne">comparer</span>.<br>
Comment savoir que quelque chose est loin ? Parce que quand nous bougeons, sa taille ne varie pas beaucoup et  parce que nous mettons du temps à nous en approcher.<br>
<br>
Ainsi en OpenGL se dire que « 1 » est 1 mètre comme 1 millimètre ou comme 1 kilomètre <strong>revient au même</strong> du moment que les proportions sont gardées et que les vitesses des mouvements sont adaptées. En effet si on fait face à un cube de « 1 » de largeur et qu'appuyer une fois sur la touche « avancer » nous fait bouger de 10000 on se dira : soit je vais très vite, soit l'objet était (car on vient de le perdre) très très petit en fait.<br>
<br>
Cependant il est parfois utile de se rapporter à des unités connues. Si 1 unité OpenGL est 1 mètre, alors il sera facile d'utiliser un moteur physique qui utilise des vraies unités.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4941">La perspective</h2>
		<div class="ss_part_texte">
		Le passage le plus important dans la 3D est la <strong>projection</strong>. Pour passer d'un monde décrit en 3D à une fenêtre avec des pixels 2D il nous faut <span class="vertf">perdre une dimension</span> et donc projeter.<br>
<br>
La méthode de projection que nous utiliserons en 3D est la perspective. La perspective est définie par la pyramide ci-dessous :<br>
<br>
<div class="centre"><img src="./ogl_files/10416.png" alt="Image utilisateur"><br>
<span class="italique">pyramide de clipping</span></div><br>
<br>
Cette pyramide s'appelle la <strong>pyramide de clipping</strong>. C'est-à-dire que tout objet ne se trouvant pas à l'intérieur de la zone bleue ne sera pas dessiné. De plus sa forme permet de définir comment projeter les objets sur l'écran en faisant un parallèle avec la pyramide réelle qui a pour sommet l'<strong>oeil</strong> de l'utilisateur et coupe son <strong>écran</strong> :<br>
<br>
<div class="centre"><img src="./ogl_files/10417.png" alt="Image utilisateur"><br>
<span class="italique">pyramide réelle (ici vue du dessus)</span></div><br>
<br>
Le <strong>ratio</strong> (vu dans le schéma plus haut) est un rapport entre la largeur et la hauteur. Pour une télévision ce ratio vaut 4/3, des fois 16/9. Pour les tailles informatiques standards (1024x768, 800x600, 640x480) il est aussi de 4/3. Mais votre fenêtre n'est pas obligée d'utiliser tout l'écran et peut donc avoir ses propres proportions et il existe aussi de plus en plus d'écrans avec des ratios spéciaux. Il est donc important de ne pas le prendre comme acquis dans vos applications et toujours le définir en fonction de la taille de la fenêtre que vous créez (je ferai une annexe SDL sur comment détecter les modes disponibles pour le plein écran).<br>
<br>
Les paramètres <strong>near</strong> et <strong>far</strong> déterminent les distances minimales et maximales des objets. En dehors de cet intervalle les objets ne seront pas affichés. Cela posera parfois problème si la valeur de far est trop petite, l'utilisateur risque de voir disparaître des objets quand il s'éloigne, ou pire voir la scène apparaître subitement. Nous verrons dans la partie II comment utiliser le <strong><span class="italique">brouillard</span></strong> pour parer à ce problème. Pour l'instant une valeur grande (vis-à-vis de la taille de votre scène) suffira amplement.<br>
<br>
Le seul paramètre qui peut vous échapper ici est l'<strong>angle</strong>. Il s'agit de l'angle de vision entre les plans haut et bas de la pyramide (souvent dénoté <strong>fovy</strong> pour <span class="italique">field of view</span> sur l'axe y). Généralement on utilise une valeur aux alentours de <strong>70</strong>°. Lors de la sortie d' <span class="vertf">Half-Life 2</span> il y a eu toute une polémique sur l'angle de vue mal choisi (90°) qui rendait certaines personnes mal à l'aise.<br>
Pour voir l'influence de cet angle, je vous ai fait 3 rendus d'une même scène avec des angles différents :<br>
<br>
<div class="centre"><img src="./ogl_files/10418.jpg" alt="Image utilisateur"><br>
<img src="./ogl_files/10420.jpg" alt="Image utilisateur"><br>
<img src="./ogl_files/10421.jpg" alt="Image utilisateur"></div><br>
<br>
<div class="rmq information">On constate que si l'on donne un <span class="italique">angle petit</span>, ça donne un effet de <span class="italique">zoom</span>. Et je ne vous cacherai pas que c'est <strong>exactement</strong> ce qui est utilisé dans les jeux pour faire un zoom (jumelles ou sniper).</div><br>
<br>
<h3>Application en OpenGL</h3><br>
<br>
Pour définir la perspective comme mode de projection il suffit d'appeler la fonction<br>
<br>
<div class="centre"><span class="gros"><span class="courrier">gluPerspective( fovy, ratio, near, far );</span></span></div><br>
<br>
Par exemple pour une fenêtre de 640x480 :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">gluPerspective</span><span class="p">(</span><span class="mi">70</span><span class="p">,(</span><span class="kt">double</span><span class="p">)</span><span class="mi">640</span><span class="o">/</span><span class="mi">480</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1000</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">Cet appel modifie la matrice courante, même s'il ne s'agit pas de la matrice de projection. Il faut donc bien veiller à sélectionner la matrice <span class="courrier">GL_PROJECTION</span>, l'initialiser et ensuite appeler <span class="courrier">gluPerspective</span>.</div><br>
Voici donc notre nouveau code d'initialisation de notre application OpenGL :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="n">SDL_Init</span><span class="p">(</span><span class="n">SDL_INIT_VIDEO</span><span class="p">);</span>
<span class="n">SDL_WM_SetCaption</span><span class="p">(</span><span class="s">"SDL GL Application"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
<span class="n">SDL_SetVideoMode</span><span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">SDL_OPENGL</span><span class="p">);</span>
<span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_PROJECTION</span> <span class="p">);</span>
<span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>
<span class="n">gluPerspective</span><span class="p">(</span><span class="mi">70</span><span class="p">,(</span><span class="kt">double</span><span class="p">)</span><span class="mi">640</span><span class="o">/</span><span class="mi">480</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1000</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Comme la définition de la perspective ne concerne que la matrice <span class="courrier">GL_PROJECTION</span> nous pouvons nous contenter de l'initialiser une seule fois et non pas à chaque image. Bien sûr si le ratio de la fenêtre venait à changer dynamiquement il faudrait redéfinir la perspective au risque de voir tous les objets déformés.</div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4940">Placer la caméra</h2>
		<div class="ss_part_texte">
		Maintenant que nous savons comment projeter, il serait bien de pouvoir placer le point de vue n'importe où dans la scène. Pour cela nous utilisons une sorte de <strong>caméra</strong> virtuelle avec l'appel de :<br>
<br>
<div class="centre"><span class="gros"><span class="courrier">gluLookAt(  camX, camY, camZ, cibleX, cibleY, cibleZ, vertX, vertY, vertZ );</span></span></div><br>
<br>
<strong>camX</strong>, <strong>camY</strong> et <strong>camZ</strong> définissent la position de la caméra ;<br>
<strong>cibleX</strong>, <strong>cibleY</strong> et <strong>cibleZ</strong> définissent la position du point que fixe la caméra (le point correspondant se trouvera au centre de la fenêtre d'affichage) ;<br>
<strong>vertX</strong>, <strong>vertY</strong> et <strong>vertZ</strong> définissent le vecteur vertical.<br>
<br>
Voici 3 images prises avec des paramètres différents de la caméra pour que vous compreniez l'utilité de chaque paramètre :<br>
<br>
<div class="centre"><img src="./ogl_files/10424.png" alt="Image utilisateur"><br>
<br>
<span class="courrier">gluLookAt(1.5, 1.5, 5, 0, 0, 0, 0, 1, 0);</span><br>
La caméra est en (1.5,1.5,5) et regarde en (0,0,0).<br>
<br>
<img src="./ogl_files/10427.png" alt="Image utilisateur"><br>
<br>
<span class="courrier">gluLookAt(1.5, 1.5, 5, 1.5, 1.5, 0, 0, 1, 0);</span><br>
La caméra est en (1.5,1.5,5) et regarde en (1.5,1.5,0) c'est-à-dire droit devant elle (contrairement à l'image précédente).<br>
<br>
<img src="./ogl_files/10428.png" alt="Image utilisateur"><br>
<br>
<span class="courrier">gluLookAt(1.5, 1.5, 5, 0, 0, 0, 1, 1, 0);</span><br>
Même position et regard que précédemment mais son vecteur vertical est (1,1,0), or la scène a été pensée avec une verticale de (0,1,0), l'image est donc « penchée » sur le côté.</div><br>
<br>
<h3>L'importance de la verticale</h3><br>
<br>
Vous l'avez vu, l'appel à <span class="courrier">gluLookAt</span> vous permet de définir la verticale que vous voulez pour votre scène. Le tout est d'être cohérent et de concevoir votre scène en conséquence.<br>
Il est néanmoins <strong>beaucoup plus pratique</strong> de choisir comme verticale un vecteur du repère de base <span class="courrier">X (1,0,0)</span>, <span class="courrier">Y (0,1,0)</span> ou <span class="courrier">Z (0,0,1)</span>.<br>
<br>
<div class="rmq question">Entre <strong>Y</strong> et <strong>Z</strong> lequel est le meilleur choix ?</div><br>
<br>
Bonne question. L'un ou l'autre sont des choix valables : on peut imaginer le passage à la 3<sup>e</sup> dimension comme l'ajout de la <strong>profondeur</strong> tout comme l'ajout de la <strong>hauteur</strong>. Dans le monde de la synthèse d'image <span class="souligne">il n'est pas rare de voir l'un ou l'autre</span>.<br>
<br>
<strong><span class="vertf">À l'avenir</span></strong>, j'essayerai de respecter le choix <strong>verticale = Z</strong> car il a été fait dans de nombreux jeux et OpenGL semble l'avoir favorisé (nous le verrons lors du chapitre sur les <strong>quadriques</strong>...).<br>
<br>
<div class="centre"><img src="./ogl_files/10429.jpg" alt="Image utilisateur"><br>
Éditeur de <span class="vertf">FarCry</span>, Z est la verticale</div><br>
<br>
<h3>Quand l'appeler ?</h3><br>
<br>
Placer la caméra revient à déplacer tout le monde pour qu'il soit centré sur la caméra et orienté selon l'axe du regard. Cela influe donc logiquement sur la matrice <span class="courrier">GL_MODELVIEW</span> et vous ne serez pas étonnés donc que l'appel de la caméra soit <strong>juste après</strong> la réinitialisation de <span class="courrier">GL_MODELVIEW</span>.<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">Dessiner</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">glClear</span><span class="p">(</span> <span class="n">GL_COLOR_BUFFER_BIT</span> <span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_MODELVIEW</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>

    <span class="n">gluLookAt</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="c">//exemple</span>

    <span class="c">/* Dessin 3D ici */</span>

    <span class="n">glFlush</span><span class="p">();</span>
    <span class="n">SDL_GL_SwapBuffers</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Voilà vous savez maintenant comment il est possible de passer d'un monde 3D à un écran 2D et savez placer la caméra.<br>
Pour récapituler, notre nouveau squelette de programme pour dessiner de la 3D :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;SDL/SDL.h&gt;</span>
<span class="cp">#include &lt;GL/gl.h&gt;</span>
<span class="cp">#include &lt;GL/glu.h&gt;</span>
<span class="cp">#include &lt;cstdlib&gt;</span>

<span class="kt">void</span> <span class="n">Dessiner</span><span class="p">();</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">SDL_Event</span> <span class="n">event</span><span class="p">;</span>

    <span class="n">SDL_Init</span><span class="p">(</span><span class="n">SDL_INIT_VIDEO</span><span class="p">);</span>
    <span class="n">atexit</span><span class="p">(</span><span class="n">SDL_Quit</span><span class="p">);</span>
    <span class="n">SDL_WM_SetCaption</span><span class="p">(</span><span class="s">"SDL GL Application"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">SDL_SetVideoMode</span><span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">SDL_OPENGL</span><span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_PROJECTION</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">();</span>
    <span class="n">gluPerspective</span><span class="p">(</span><span class="mi">70</span><span class="p">,(</span><span class="kt">double</span><span class="p">)</span><span class="mi">640</span><span class="o">/</span><span class="mi">480</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1000</span><span class="p">);</span>

    <span class="n">Dessiner</span><span class="p">();</span>

    <span class="k">for</span> <span class="p">(;;)</span>
    <span class="p">{</span>
        <span class="n">SDL_WaitEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">event</span><span class="p">);</span>

        <span class="k">switch</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="nl">SDL_QUIT:</span>
            <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">Dessiner</span><span class="p">();</span>

    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">Dessiner</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">glClear</span><span class="p">(</span> <span class="n">GL_COLOR_BUFFER_BIT</span> <span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_MODELVIEW</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>

    <span class="n">gluLookAt</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="c">/* Dessin 3D */</span>

    <span class="n">glFlush</span><span class="p">();</span>
    <span class="n">SDL_GL_SwapBuffers</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Maintenant il ne reste plus qu'à remplir la partie dessin. Et pour ça direction le chapitre suivant avec notre premier dessin 3D : <strong>un cube</strong> !
	</div>
	
	<hr>
	<h1 id="chap_4947">Enfin de la 3D (Partie 2/2)</h1>
	<div id="chap_intro">
	Dans le dernier chapitre nous nous sommes préparés à passer à la 3D, il est donc temps de s'y mettre et d'entamer notre premier dessin : un cube ! En dessinant notre cube et en l'animant, nous rencontrerons des problèmes, prévus d'avance rassurez-vous <img src="./ogl_files/hihi.png" alt="^^" class="smilies"> , et nous verrons comment les résoudre.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4950">Un cube</h2>
		<div class="ss_part_texte">
		L'exemple du cube est assez simple et nous continuerons avec lors de la création de notre première scène texturée.<br>
<br>
Voyons tout d'abord comment est constitué un cube :<br>
<br>
<div class="centre"><img src="./ogl_files/10431.png" alt="Image utilisateur"><br>
<span class="italique">Coordonnées des sommets du cube</span></div><br>
<br>
Un cube est composé de 8 sommets et 6 faces, chaque face faisant intervenir 4 sommets.<br>
Nous n'allons pas nous contenter de dessiner chacun des 8 sommets, nous n'aurions pas de faces pleines. Il nous faut donc décrire les faces une par une, en indiquant les sommets qu'elles font intervenir.<br>
<br>
<h3>Décrire des sommets en 3D</h3><br>
<br>
Ici nous devons définir 3 coordonnées pour chaque sommet : X, Y et Z. Nous ne pouvons donc plus utiliser le basique <span class="courrier">glVertex2d</span> que nous utilisions auparavant. Il va falloir donc utiliser la version avec 3 arguments soit <span class="courrier">glVertex3d</span>.<br>
<br>
Exemple :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">Le 3d de <span class="courrier">glVertex3d</span> ne veut pas dire « <span class="italique">ouais je fais de la 3D !</span> ». Rappelez-vous le chapitre <a href="http://www.siteduzero.com/tuto-3-6094-1-notions-de-base.html#ss_part_1">Notions de base</a>, <span class="courrier">3</span> spécifie le nombre d'arguments et <span class="courrier">d</span> le fait que les arguments donnés soient des <span class="courrier">double</span> (réels).</div><br>
<br>
<h3>Décrire le cube</h3><br>
<br>
Les faces étant des carrés, nous allons utiliser le mode <span class="courrier">GL_QUADS</span> pour décrire les vertices.<br>
Pour différencier les faces nous leur attribuerons une couleur différente ; nous ferons la première (celle avec les flèches) en rouge. En ce qui concerne la caméra, j'ai choisi de la placer en <span class="courrier">(3,4,2)</span> pour regarder le cube centré en <span class="courrier">(0,0,0)</span>, car cela donnera un bon angle de vue (c'est la position utilisée pour le schéma plus haut).<br>
<br>
Ce qui donne donc :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">Dessiner</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">glClear</span><span class="p">(</span> <span class="n">GL_COLOR_BUFFER_BIT</span> <span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_MODELVIEW</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>

    <span class="n">gluLookAt</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//face rouge</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glEnd</span><span class="p">();</span>

    <span class="n">glFlush</span><span class="p">();</span>
    <span class="n">SDL_GL_SwapBuffers</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Facile ! Il suffit de choisir un point de départ et de suivre le contour de la face pour décrire les sommets un par un.<br>
<div class="rmq information">Je vous conseille, pour les décrire, de vous imaginer faisant face à la face (hum...  <img src="./ogl_files/pinch.png" alt="Image utilisateur"> ) et de les énumérer un à un dans le <span class="souligne">sens inverse des aiguilles d'une montre</span>. En effet nous verrons plus tard que cela nous sera utile quand nous voudrons éviter de dessiner les faces cachées. Encore une fois quelque soit le sens que vous décidez d'utiliser, le tout est d'être <strong>cohérents</strong> et de garder le même sens.</div><br>
<br>
Continuons donc avec la 2<sup>e</sup> face, disons celle à gauche de la première (quand on regarde le schéma) et faisons-la en vert.<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5</pre></td><td class="code"><div class="syntax"><pre><span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//face verte</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce qui me donne le résultat suivant :<br>
<div class="centre"><img src="./ogl_files/10432.png" alt="Image utilisateur"></div><br>
<br>
Bon maintenant parce que je veux vous montrer un problème important, attaquons-nous à la face de derrière que nous ferons... devinez... en bleu !  <img src="./ogl_files/clin.png" alt=";)" class="smilies"><br>
<br>
Rien de compliqué, il suffit de suivre le schéma de tout à l'heure pour avoir rapidement les coordonnées et écrire le code approprié.<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5</pre></td><td class="code"><div class="syntax"><pre><span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span> <span class="c">//face bleue</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et voilà le résultat :<br>
<div class="centre"><img src="./ogl_files/10433.png" alt="Image utilisateur"><br>
<br>
<img src="./ogl_files/blink.gif" alt="o_O" class="smilies">  <img src="./ogl_files/blink.gif" alt="o_O" class="smilies">  <img src="./ogl_files/blink.gif" alt="o_O" class="smilies"> </div><br>
<br>
En effet vous ne rêvez pas, la face bleue qui était censée être derrière, donc en majeure partie cachée par la rouge et la verte vient se dessiner par-dessus ces dernières.<br>
Et c'est tout à fait logique, OpenGL dessine les carrés <span class="italique">dans l'ordre dans lequel on les définit</span>. Il ne se soucie pour l'instant pas de savoir s'il y a déjà quelque chose là où il dessine et vient donc écraser les faces précédentes.<br>
<br>
La solution ? <strong>Le Z-Buffer</strong> !
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4949">Le Z-Buffer</h2>
		<div class="ss_part_texte">
		Le Z-Buffer ou <strong>Depth-Buffer</strong> (pour tampon de profondeur) sert à éviter le problème que nous venons de rencontrer.<br>
<br>
<h3>Principe du Z-Buffer</h3><br>
<br>
Le Z-Buffer est un tampon (buffer) qui stocke la profondeur (d'où le Z, X et Y sur l'écran étant la position en pixel) de chaque pixel affiché à l'écran.<br>
Ensuite quand OpenGL demande à dessiner un pixel à un endroit, il compare la profondeur du point à afficher et celle présente dans le buffer. Si le nouveau pixel est situé devant l'ancien, alors il est dessiné et la valeur de la profondeur dans le buffer est mise à jour. Sinon, le pixel était alors <strong>situé derrière</strong> et n'a donc <strong>pas</strong> lieu d'être <strong>affiché</strong>.<br>
<br>
Pour bien comprendre, suivons le cheminement qui est fait.<br>
<ul>
<li>Au départ le buffer (ici de taille 3x3 pour l'exemple) est initialisé à des distances infinies (le plus loin possible vers le fond de votre écran).<br>
<br>
<div class="centre"><img src="./ogl_files/10436.png" alt="Image utilisateur"></div><br>
</li>
<li>OpenGL demande à dessiner un pixel en <span class="courrier">(2,2,5)</span>.<br>
Valeur demandée : 5.<br>
Valeur présente : infini.<br>
5 &lt; infini =&gt; <span class="vertf">OK pour dessin</span><br>
Dessin du pixel + Mise à jour du Z-buffer avec la valeur 5.<br>
<br>
<div class="centre"><img src="./ogl_files/10437.png" alt="Image utilisateur"></div><br>
</li>
<li>Demande de dessin d'un pixel en <span class="courrier">(2,2,10)</span>.<br>
Valeur demandée : 10.<br>
Valeur présente : 5.<br>
10 &gt; 5 =&gt; <span class="rouge">Dessin refusé</span></li>
</ul><br>
<br>
<h3>Application dans OpenGL</h3><br>
<br>
Heureusement pour nous <span class="italique">OpenGL gère très bien cette technique</span>, il nous faut juste modifier notre programme pour l'activer et bien l'utiliser !<br>
<br>
Pour cela il nous faut :<br>
<ul>
<li>activer son utilisation : <span class="souligne">après</span> la création de la fenêtre OpenGL il faut simplement appeler :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">glEnable</span><span class="p">(</span><span class="n">GL_DEPTH_TEST</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div></li>
<li>le réinitialiser <span class="souligne">à chaque nouvelle image</span>, en même temps que le buffer des pixels :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span><span class="p">)</span> <span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div></li>
</ul><br>
<br>
Ce qui nous donne un code complet (avec le début de notre cube) :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;SDL/SDL.h&gt;</span>
<span class="cp">#include &lt;GL/gl.h&gt;</span>
<span class="cp">#include &lt;GL/glu.h&gt;</span>
<span class="cp">#include &lt;cstdlib&gt;</span>

<span class="kt">void</span> <span class="n">Dessiner</span><span class="p">();</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">SDL_Event</span> <span class="n">event</span><span class="p">;</span>

    <span class="n">SDL_Init</span><span class="p">(</span><span class="n">SDL_INIT_VIDEO</span><span class="p">);</span>
    <span class="n">atexit</span><span class="p">(</span><span class="n">SDL_Quit</span><span class="p">);</span>
    <span class="n">SDL_WM_SetCaption</span><span class="p">(</span><span class="s">"SDL GL Application"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">SDL_SetVideoMode</span><span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">SDL_OPENGL</span><span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_PROJECTION</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">();</span>
    <span class="n">gluPerspective</span><span class="p">(</span><span class="mi">70</span><span class="p">,(</span><span class="kt">double</span><span class="p">)</span><span class="mi">640</span><span class="o">/</span><span class="mi">480</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1000</span><span class="p">);</span>
    <span class="n">glEnable</span><span class="p">(</span><span class="n">GL_DEPTH_TEST</span><span class="p">);</span>

    <span class="n">Dessiner</span><span class="p">();</span>

    <span class="k">for</span> <span class="p">(;;)</span>
    <span class="p">{</span>
        <span class="n">SDL_WaitEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">event</span><span class="p">);</span>

        <span class="k">switch</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="nl">SDL_QUIT:</span>
            <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">Dessiner</span><span class="p">();</span>

    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">Dessiner</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">glClear</span><span class="p">(</span> <span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span> <span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_MODELVIEW</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>

    <span class="n">gluLookAt</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//face rouge</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//face verte</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span> <span class="c">//face bleue</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glEnd</span><span class="p">();</span>

    <span class="n">glFlush</span><span class="p">();</span>
    <span class="n">SDL_GL_SwapBuffers</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et en effet en exécutant notre nouveau code nous obtenons ceci :<br>
<br>
<div class="centre"><img src="./ogl_files/10438.png" alt="Image utilisateur"></div><br>
<br>
Ouf ! Nous avons enfin ce que nous désirions. Bien pratique ce z-buffer !<br>
<br>
<h3>Finir le cube</h3><br>
<br>
À ce stade il ne vous reste plus qu'à compléter le code avec les 3 faces restantes et leur choisir de belles couleurs.<br>
N'oubliez pas que vous pouvez utiliser le schéma du début pour facilement trouver les coordonnées des sommets de la face en cours.<br>
<br>
Voici mon code pour ceux qui ne veulent pas essayer eux-mêmes, ou simplement pour comparer :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="syntax"><pre><span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//face rouge</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//face verte</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span> <span class="c">//face bleue</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//face jaune</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span> <span class="c">//face cyan</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span> <span class="c">//face magenta</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glEnd</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et le résultat graphique correspondant :<br>
<div class="centre"><img src="./ogl_files/10439.png" alt="Image utilisateur"></div><br>
<br>
<div class="flot_droite"><img src="./ogl_files/10440.png" alt="Image utilisateur"></div><br>
Comme vous avez le code sous les yeux vous savez que vous n'avez pas triché et que le code fait bien un cube 3D. Mais personnellement je vois 3 quadrilatères de couleur, <span class="souligne">je peux faire pareil sous Paint en 30 secondes</span>, la preuve :<br>
Ok c'est moche et mal fait mais avec un peu de soin j'aurais pu avoir pareil !  <img src="./ogl_files/rouge.png" alt=":honte:" class="smilies"><br>
<br>
Il est donc temps de profiter de la puissance de la 3D temps réel et d'animer notre cube pour le voir sous toutes les coutures !
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4948">Animation</h2>
		<div class="ss_part_texte">
		Pour animer notre cube nous allons simplement le faire tourner en utilisant ce que vous connaissez déjà par coeur : <strong>la rotation</strong> !<br>
<br>
Au niveau du dessin nous n'avons vraiment pas grand chose à changer, juste à faire tourner le repère <span class="souligne">avant</span> de dessiner le cube. Nous allons le faire tourner à la fois sur Z (la verticale) et X donc nous avons besoin de 2 variables globales* pour chacun des angles à contrôler.<br>
<br>
<div class="centre"><img src="./ogl_files/10441.png" alt="Image utilisateur"></div><br>
<br>
<span class="tpetit">* En général en programmation on essaye d'éviter les variables globales mais ici nous faisons en quelque sorte du prototypage pour apprendre et tester les concepts OpenGL, ce n'est donc vraiment pas bien grave.</span><br>
<br>
Le code, simplifié, du programme devient alors :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;SDL/SDL.h&gt;</span>
<span class="cp">#include &lt;GL/gl.h&gt;</span>
<span class="cp">#include &lt;GL/glu.h&gt;</span>
<span class="cp">#include &lt;cstdlib&gt;</span>

<span class="kt">void</span> <span class="n">Dessiner</span><span class="p">();</span>

<span class="kt">double</span> <span class="n">angleZ</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">angleX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
   <span class="c">//le code du main</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">Dessiner</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">glClear</span><span class="p">(</span> <span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span> <span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_MODELVIEW</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>

    <span class="n">gluLookAt</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glRotated</span><span class="p">(</span><span class="n">angleZ</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glRotated</span><span class="p">(</span><span class="n">angleX</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>

    <span class="c">//dessin du cube</span>

    <span class="n">glFlush</span><span class="p">();</span>
    <span class="n">SDL_GL_SwapBuffers</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
En terme de code SDL nous voulons que ces angles soient modifiés automatiquement avec le temps. On ne peut donc plus se permettre d'<span class="italique">attendre</span> les événements avec <span class="courrier">SDL_WaitEvent</span> et nous allons en conséquence utiliser <span class="courrier">SDL_PollEvent</span> pour récupérer les événements s'il y en a puis animer notre cube.<br>
<br>
Nous modifions donc le code de notre boucle d'affichage pour incrémenter nos angles à chaque image :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></td><td class="code"><div class="syntax"><pre><span class="k">for</span> <span class="p">(;;)</span>
    <span class="p">{</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">SDL_PollEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">event</span><span class="p">))</span>
        <span class="p">{</span>

            <span class="k">switch</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="nl">SDL_QUIT:</span>
                <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">angleZ</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">angleX</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>

        <span class="n">Dessiner</span><span class="p">();</span>

    <span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Gérer la vitesse d'animation</h3><br>
En testant le code actuel vous voyez que le cube tourne beaucoup trop vite, nous n'avons franchement rien le temps de voir.<br>
Il faut donc introduire des vitesses de rotation. Ces vitesses ne doivent pas dépendre de l'ordinateur sur lequel le programme est lancé et donc doivent prendre en compte le temps réel.<br>
Pour ce faire, à chaque image (chaque passage dans la boucle donne lieu à une image), il faut déterminer combien de temps il s'est passé depuis la dernière image et faire bouger le cube en conséquence.<br>
<br>
Nous avons donc besoin de 3 variables :<br>
<ul>
<li>une pour garder en mémoire le temps qu'il était lors de la dernière image : <span class="courrier">last_time</span> ;</li>
<li>une pour avoir le temps de l'image actuelle : <span class="courrier">current_time</span> ;</li>
<li>une (par commodité) pour le temps écoulé : <span class="courrier">ellapsed_time</span>.</li>
</ul><br>
<br>
<div class="rmq information">Pour connaître le temps écoulé, en millisecondes, depuis le lancement de l'application nous utiliserons l'instruction <span class="courrier">SDL_GetTicks();</span></div><br>
<br>
Le principe est alors le suivant.<br>
<ol class="liste_1">
<li>On initialise <span class="italique">une première fois</span>, avant de rentrer dans notre boucle d'affichage <span class="courrier">last_time</span> avec le temps actuel.</li>
<li>À chaque image on récupère le temps actuel dans <span class="courrier">current_time</span>.</li>
<li>On utilise la différence entre le temps actuel et le temps qu'il était lors de l'ancien passage pour savoir combien de temps s'est écoulé. On stocke le résultat dans <span class="courrier">ellapsed_time</span>.</li>
<li>On réalise nos mouvements en fonction du temps écoulé.</li>
<li>On finit par affecter à <span class="courrier">last_time</span> la valeur de <span class="courrier">current_time</span> car nous passons à une nouvelle image et donc le présent devient du passé ( <img src="./ogl_files/pleure.png" alt=":&#39;(" class="smilies"> c'est beau !)</li>.</ol><br>
<br>
En ce qui concerne l'unité de mesure des <strong><span class="vertf">vitesses</span></strong>, comme le temps écoulé est donné en <span class="italique">millisecondes</span> et que les angles utilisés dans <span class="courrier">glRotate</span> sont en <span class="italique">degrés</span>, il s'agit tout simplement de <strong>degrés par milliseconde</strong>.<br>
<br>
Dans notre cas j'utiliserai <span class="vertf">0.05 °/ms</span>.<br>
<br>
La traduction en code du principe tout juste évoqué est la suivante :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="syntax"><pre><span class="n">Uint32</span> <span class="n">last_time</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">();</span>
    <span class="n">Uint32</span> <span class="n">current_time</span><span class="p">,</span><span class="n">ellapsed_time</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(;;)</span>
    <span class="p">{</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">SDL_PollEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">event</span><span class="p">))</span>
        <span class="p">{</span>

            <span class="k">switch</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="nl">SDL_QUIT:</span>
                <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">current_time</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">();</span>
        <span class="n">ellapsed_time</span> <span class="o">=</span> <span class="n">current_time</span> <span class="o">-</span> <span class="n">last_time</span><span class="p">;</span>
        <span class="n">last_time</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">;</span>

        <span class="n">angleZ</span> <span class="o">+=</span> <span class="mf">0.05</span> <span class="o">*</span> <span class="n">ellapsed_time</span><span class="p">;</span>
        <span class="n">angleX</span> <span class="o">+=</span> <span class="mf">0.05</span> <span class="o">*</span> <span class="n">ellapsed_time</span><span class="p">;</span>

        <span class="n">Dessiner</span><span class="p">();</span>

    <span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="centre"><img src="./ogl_files/10442.png" alt="Image utilisateur"></div><br>
<br>
<h3>Ne pas monopoliser le CPU</h3><br>
<br>
<div class="rmq question">Ça rame ! Le programme prend 100% du CPU rien que pour faire tourner un simple cube, je ne vais jamais pouvoir faire un jeu !</div><br>
<br>
En effet si on regarde la charge du processeur imposée par notre application on voit qu'il est totalement occupé à gérer notre programme :<br>
<br>
<div class="centre"><img src="./ogl_files/10443.png" alt="Image utilisateur"></div><br>
<br>
Cela ne veut pas dire que votre programme est lent c'est juste que nous bouclons en permanence et que nous ne prenons jamais de pause. En réalité nous n'avons pas vraiment besoin de boucler tout le temps. Nous allons utiliser <strong><span class="souligne">une</span></strong> technique possible (celle que je préfère et donc souhaite vous expliquer) : <strong>limiter les FPS</strong> (frames per second - images par seconde).<br>
En effet pour avoir une animation très fluide il nous suffit de 50 images par seconde.<br>
<br>
En fixant le nombre d'images par secondes désirées par votre application, il est alors possible de la faire s'endormir un certain temps si elle va plus vite que nécessaire, ce qui soulagera (même s'il ne s'en plaint pas) le processeur.<br>
Pour ce faire nous allons calculer à chaque image combien de temps nous avons mis pour la dessiner, si nous avons été plus rapides que le temps moyen nécessaire, nous stopperons l'exécution pour un certain temps.<br>
<br>
<span class="vertf">Par exemple</span>, autoriser 50 images par seconde donne à chaque image 20 millisecondes pour s'afficher. Imaginons qu'une image mette 5 ms à s'afficher réellement, il reste alors 15 ms à tuer. Plutôt que de passer directement à l'image suivante, nous allons <strong>endormir l'application</strong> pendant ces 15 ms.<br>
<br>
En terme de code nous allons utiliser <span class="courrier">SDL_GetTicks</span> comme auparavant pour déterminer le temps écoulé entre le début et la fin de la création de l'image. Nous utiliserons <span class="courrier">SDL_Delay</span> pour suspendre temporairement l'application.<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38</pre></td><td class="code"><div class="syntax"><pre><span class="n">Uint32</span> <span class="n">start_time</span><span class="p">;</span> <span class="c">//nouvelle variable</span>

    <span class="k">for</span> <span class="p">(;;)</span>
    <span class="p">{</span>
        <span class="n">start_time</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">();</span> 
        <span class="k">while</span> <span class="p">(</span><span class="n">SDL_PollEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">event</span><span class="p">))</span>
        <span class="p">{</span>

            <span class="k">switch</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="nl">SDL_QUIT:</span>
                <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="nl">SDL_KEYDOWN:</span>
                <span class="n">animation</span> <span class="o">=</span> <span class="o">!</span><span class="n">animation</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">current_time</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">();</span>
        <span class="n">ellapsed_time</span> <span class="o">=</span> <span class="n">current_time</span> <span class="o">-</span> <span class="n">last_time</span><span class="p">;</span>
        <span class="n">last_time</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">;</span>

        <span class="n">angleZ</span> <span class="o">+=</span> <span class="mf">0.05</span> <span class="o">*</span> <span class="n">ellapsed_time</span><span class="p">;</span>
        <span class="n">angleX</span> <span class="o">+=</span> <span class="mf">0.05</span> <span class="o">*</span> <span class="n">ellapsed_time</span><span class="p">;</span>

        <span class="n">Dessiner</span><span class="p">();</span>

        <span class="n">ellapsed_time</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ellapsed_time</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">SDL_Delay</span><span class="p">(</span><span class="mi">10</span> <span class="o">-</span> <span class="n">ellapsed_time</span><span class="p">);</span>
        <span class="p">}</span>

    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Notez qu'ici nous ne voulons pas savoir combien de temps il s'est passé depuis la dernière fois mais combien de temps notre image a pris à se dessiner (j'y ai inclus la gestion des événements). Il y a donc un appel à <span class="courrier">SDL_GetTicks</span> au début de notre boucle et un appel à la toute fin. Je réutilise <span class="courrier">ellapsed_time</span> par commodité mais pas les autres variables pour ne pas mélanger les 2 concepts : limitation des FPS et gestion du temps dans les animations.<br>
<br>
<strong>Code final :</strong><br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;SDL/SDL.h&gt;</span>
<span class="cp">#include &lt;GL/gl.h&gt;</span>
<span class="cp">#include &lt;GL/glu.h&gt;</span>
<span class="cp">#include &lt;cstdlib&gt;</span>

<span class="kt">void</span> <span class="n">Dessiner</span><span class="p">();</span>

<span class="kt">double</span> <span class="n">angleZ</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">angleX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">SDL_Event</span> <span class="n">event</span><span class="p">;</span>

    <span class="n">SDL_Init</span><span class="p">(</span><span class="n">SDL_INIT_VIDEO</span><span class="p">);</span>
    <span class="n">atexit</span><span class="p">(</span><span class="n">SDL_Quit</span><span class="p">);</span>
    <span class="n">SDL_WM_SetCaption</span><span class="p">(</span><span class="s">"SDL GL Application"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">SDL_SetVideoMode</span><span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">480</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">SDL_OPENGL</span><span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_PROJECTION</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">();</span>
    <span class="n">gluPerspective</span><span class="p">(</span><span class="mi">70</span><span class="p">,(</span><span class="kt">double</span><span class="p">)</span><span class="mi">640</span><span class="o">/</span><span class="mi">480</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1000</span><span class="p">);</span>

    <span class="n">glEnable</span><span class="p">(</span><span class="n">GL_DEPTH_TEST</span><span class="p">);</span>

    <span class="n">Dessiner</span><span class="p">();</span>

    <span class="n">Uint32</span> <span class="n">last_time</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">();</span>
    <span class="n">Uint32</span> <span class="n">current_time</span><span class="p">,</span><span class="n">ellapsed_time</span><span class="p">;</span>
    <span class="n">Uint32</span> <span class="n">start_time</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(;;)</span>
    <span class="p">{</span>
        <span class="n">start_time</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">();</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">SDL_PollEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">event</span><span class="p">))</span>
        <span class="p">{</span>

            <span class="k">switch</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="nl">SDL_QUIT:</span>
                <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">current_time</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">();</span>
        <span class="n">ellapsed_time</span> <span class="o">=</span> <span class="n">current_time</span> <span class="o">-</span> <span class="n">last_time</span><span class="p">;</span>
        <span class="n">last_time</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">;</span>

        <span class="n">angleZ</span> <span class="o">+=</span> <span class="mf">0.05</span> <span class="o">*</span> <span class="n">ellapsed_time</span><span class="p">;</span>
        <span class="n">angleX</span> <span class="o">+=</span> <span class="mf">0.05</span> <span class="o">*</span> <span class="n">ellapsed_time</span><span class="p">;</span>

        <span class="n">Dessiner</span><span class="p">();</span>

        <span class="n">ellapsed_time</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ellapsed_time</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">SDL_Delay</span><span class="p">(</span><span class="mi">10</span> <span class="o">-</span> <span class="n">ellapsed_time</span><span class="p">);</span>
        <span class="p">}</span>

    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">Dessiner</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">glClear</span><span class="p">(</span> <span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span> <span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_MODELVIEW</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>

    <span class="n">gluLookAt</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glRotated</span><span class="p">(</span><span class="n">angleZ</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glRotated</span><span class="p">(</span><span class="n">angleX</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>

    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//face rouge</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//face verte</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span> <span class="c">//face bleue</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//face jaune</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span> <span class="c">//face cyan</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span> <span class="c">//face magenta</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">glEnd</span><span class="p">();</span>

    <span class="n">glFlush</span><span class="p">();</span>
    <span class="n">SDL_GL_SwapBuffers</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
En comparaison, pour une animation de la même fluidité, la charge moyenne du processeur est <strong>négligeable</strong> :<br>
<br>
<div class="centre"><img src="./ogl_files/10444.png" alt="Image utilisateur"></div><br>
<br>
<strong><span class="souligne">Notes diverses :</span></strong><br>
<span class="vertf"><ul>
<li>il est <span class="italique">aussi</span> possible d'utiliser des timers pour limiter les FPS (voir la doc de <a href="http://www.libsdl.org/cgi/docwiki.cgi/SDL_5fAddTimer">SDL_AddTimer</a> ainsi que son exemple). Ce n'est pas la solution retenue ici ;</li>
<li>les adeptes de la doc ne manqueront pas de signaler le problème de la granularité du temps de pause (cf. <a href="http://www.libsdl.org/cgi/docwiki.cgi/SDL_5fDelay">SDL_Delay</a>). Dans les tests effectués pour rédiger ce tutoriel, le temps de pause <strong>réel</strong> n'excédait jamais le temps <strong>demandé</strong> de plus de 1 milliseconde. Le nombre réel d'images par seconde est donc égal (ou très proche) au nombre fixé ;</li>
<li>en terme d'ergonomie cela peut faire peur à certains de faire s'endormir le programme un certain temps. Qu'ils soient rassurés, même dans une application 3D bien plus complexe, la gestion des événements n'est en rien altérée.</li>
</ul></span><br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/sdlgl_05_cube.zip">Téléchargez le projet Code::Blocks, l'exécutable Windows et le Makefile Unix (117 Ko)</a></span></div><br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/rotation_cube.avi">Téléchargez la vidéo au format avi/Xvid (414 Ko)</a></span></div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Voilà le mystère de la 3D en OpenGL est enfin tombé !<br>
Vous savez maintenant créer de toutes pièces un objet 3D et réaliser une animation.<br>
En attendant le prochain chapitre sur <span class="souligne">les textures</span> vous pouvez, si vous le souhaitez, améliorer votre programme pour <span class="italique">créer de multiples</span> objets, en <span class="italique">animer</span> certains grâce <span class="italique">au clavier</span>, et par exemple faire tourner la <span class="italique">caméra autour de votre scène</span>.<br>
Bonne création !
	</div>
	
	<hr>
	<h1 id="chap_4956">Les textures</h1>
	<div id="chap_intro">
	Maintenant que nous savons faire des objets en 3D, en couleur certes mais un peu moches il faut l'avouer  <img src="./ogl_files/rire.gif" alt=":lol:" class="smilies"> , il est temps de les habiller grâce aux textures. Nous verrons donc dans ce chapitre les rudiments du <span class="italique">texturing</span>, comment charger une texture et l'appliquer sur un objet. De quoi nous ouvrir la voie vers des scènes 3D de plus en plus réalistes.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4960">Charger une texture</h2>
		<div class="ss_part_texte">
		Grâce à notre choix d'utiliser OpenGL avec la SDL, vous allez voir que la phase de chargement des textures nous sera hautement simplifiée.<br>
<br>
Mais avant même de pouvoir charger une quelconque texture, encore faut-il en avoir... Pour cela je vous propose de travailler avec ce <a href="http://berneyboy.planetquake.gamespy.com/textures.htm">pack de textures hautes résolutions</a>. Il est assez volumineux (124 Mo) mais assez complet et contient des textures photoréalistes classées dans diverses catégories : sols, caisses, végétaux, métaux, pierres, etc.<br>
<br>
<div class="centre"><img src="./ogl_files/10522.jpg" alt="Image utilisateur"><br>
<span class="italique">Exemples de textures incluses dans le pack</span></div><br>
<br>
<div class="rmq information">Que vous le téléchargiez ou non je fournirai quand même les textures utilisées dans l'exemple en fin de chapitre. Vous pouvez donc vous en contenter.</div><br>
<br>
<h3>Format et taille</h3><br>
<br>
Nous utiliserons principalement deux formats pour les textures :<strong> .jpg et .png</strong>.<br>
Le format <strong>.jpg</strong> est parfait pour les textures, car il donne les plus petites tailles de fichier sur des images complexes (comme les textures photoréalistes).<br>
Le format <strong>.png (24 bits)</strong> quant à lui est utilisé, car il gère très bien la transparence.<br>
<br>
La largeur et la hauteur des textures doivent <strong><span class="rouge">impérativement</span></strong> être des puissances de 2 (<span class="courrier">64,128,512,1024</span>).  En effet si elles ne le sont pas, les textures seront de toute façon redimensionnées en interne pour respecter cette contrainte et vous risquez donc de <strong>perdre</strong> inutilement en <strong>qualité</strong>.<br>
<br>
En terme de <strong>qualité visuelle</strong>, plus la résolution de la texture est grande, meilleur est le résultat. Le pack que je vous fournis contient principalement des textures haute-résolution (512x512) avec lesquelles vous n'aurez pas de mal à avoir des rendus de meilleure qualité que Half-Life premier du nom  <img src="./ogl_files/soleil.png" alt=":soleil:" class="smilies"> (effets de lumière mis à part pour l'instant).<br>
<br>
<h3>Utiliser SDL_Image pour charger une texture</h3><br>
<br>
Le code nécessaire pour créer une texture OpenGL à partir d'un tableau de pixels n'est pas extrêmement compliqué. Cependant la phase la plus pénible est le chargement d'un fichier image (.jpg, .bmp, .tga ou autre).<br>
Heureusement pour nous <strong>SDL_Image</strong> est là ; nous aurons simplement à l'utiliser pour qu'elle nous retourne une SDL_Surface à partir d'un nom de fichier.<br>
<br>
Une fois cette surface créée, elle doit être <strong>retournée verticalement</strong> car SDL et OpenGL n'ont pas les mêmes conventions. Vous avez dû le remarquer lors du chapitre sur les transformations car le (0,0) en OpenGL était <span class="souligne">en bas à gauche</span> alors que celui en SDL (comme indiqué dans le cours de M@teo) est en haut à gauche.<br>
<br>
La dernière chose à faire est de convertir le tableau de pixels contenus dans la surface en texture OpenGL par des appels OpenGL appropriés.<br>
<br>
<div class="rmq question">Oh là là ! Ça a l'air compliqué tout ça...  <img src="./ogl_files/pinch.png" alt="Image utilisateur">  <img src="./ogl_files/triste.png" alt=":(" class="smilies">  Je vais réussir à faire ça moi ?</div><br>
<br>
Savoir coder vous-mêmes cette phase n'est pas nécessaire pour la compréhension de la suite du chapitre. Le plus important est <strong>l'utilisation des textures</strong> créées. Nous reviendrons plus en détail sur les appels en question lorsque nous verrons les textures procédurales mais pour l'instant je vous donne tout ça sur un plateau d'argent, voilà :<br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/sdz_sdlglutils.zip">Téléchargez le code pour charger une texture (3 Ko)</a></span></div><br>
<br>
Dans l'archive, je vous fournis deux fichiers : <span class="courrier">sdlglutils.h</span> et <span class="courrier">sdlglutils.cpp</span>. J'ai choisi ce nom car j'y rajouterai petit à petit des fonctions utiles pour ce tuto qui ne sont là que pour nous simplifier la vie mais que vous auriez pu faire vous-mêmes avec un peu plus de connaissances.<br>
<br>
La fonction qui nous intéresse pour l'instant est <span class="courrier">loadTexture</span> qui s'utilise très simplement :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include "sdlglutils.h"</span>
<span class="n">GLuint</span> <span class="n">identifiant_texture</span> <span class="o">=</span> <span class="n">loadTexture</span><span class="p">(</span><span class="s">"ma_texture.jpg"</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si vous êtes curieux vous pouvez regarder le code derrière mais il n'a rien de compliqué, juste ce que je vous ai expliqué plus haut (chargement de l'image, retournement, et création texture OpenGL).<br>
<br>
Le type renvoyé est <span class="courrier">GLuint</span> soit l'équivalent d'un <span class="courrier">unsigned int</span>. Cependant je n'utiliserai jamais le type <span class="courrier">unsigned int</span> pour les textures pour ne pas être tenté dans mon code de faire des calculs dessus, en effet ce nombre retourné a une signification bien précise : c'est <strong>l'identifiant de la texture</strong> OpenGL créée. À chaque fois que nous voudrons utiliser cette texture, il suffira d'utiliser cet identifiant.<br>
<br>
<h3>Activer le texturing</h3><br>
<br>
Comme nous avons déjà créé des scènes en 3D sans texture nous savons que le texturing n'est pas activé par défaut. Pour l'activer il suffit donc d'appeler :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">glEnable</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Vous pouvez avoir envie dans vos scènes de faire cohabiter des objets texturés avec des objets non texturés (pourquoi pas après tout...). Pour ce faire il suffit de désactiver le texturing temporairement avec : <span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">glDisable</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
</div><br>
<br>
Voilà nous sommes prêts, nous savons charger une texture, nous savons activer le texturing. Maintenant voyons comment, en reprenant notre cube 3D du chapitre précédent, appliquer une texture sur un objet.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4959">Plaquage de texture</h2>
		<div class="ss_part_texte">
		Partons du code que nous avions pour définir la première face de notre cube :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>
<span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">glEnd</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous allons utiliser la texture « <span class="courrier">stainedglass05.jpg</span> » que vous trouverez dans le pack dans la catégorie <span class="courrier">window</span> (ou dans l'archive en fin de chapitre).<br>
<br>
Commençons donc par la charger au lancement de notre application comme expliqué précédemment :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">GLuint</span> <span class="n">texture1</span><span class="p">;</span> <span class="c1">//en variable globale</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="c1">// ... lancement de l'application</span>
    <span class="n">glEnable</span><span class="p">(</span><span class="n">GL_DEPTH_TEST</span><span class="p">);</span>
    <span class="n">glEnable</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">);</span>
    <span class="n">texture1</span> <span class="o">=</span> <span class="n">loadTexture</span><span class="p">(</span><span class="s">"stainedglass05.jpg"</span><span class="p">);</span> <span class="c1">// pendant l'initialisation d'OpenGL, avant la boucle d'affichage</span>
    <span class="c1">//... boucle d'affichage et de gestion des événements</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Dans le code du dessin, avant de définir les vertices de notre première face texturée, il nous faut dire à OpenGL que l'on veut utiliser cette texture en appelant <span class="courrier">glBindTexture</span> avec l'identifiant de notre texture :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture1</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et maintenant nous allons réaliser le <span class="italique">plaquage</span> proprement dit de la texture sur la face en faisant correspondre à chaque vertex composant notre face <strong>une coordonnée sur la texture</strong> comme représenté sur le schéma ci-dessous :<br>
<br>
<div class="centre"><img src="./ogl_files/6034.jpg" alt="Image utilisateur"><br>
<span class="italique">Correspondance coordonnées texture / coordonnées réelles</span></div><br>
<br>
Pour définir les coordonnées du vertex nous savons utiliser glVertex, eh bien pour définir les coordonnées de texture nous utiliserons :<br>
<br>
<div class="centre"><span class="gros"><span class="courrier">glTexCoord2d (double x_texture, double y_texture);</span></span></div><br>
<br>
L'espace de coordonnées sur la texture est en 2D, le coin en bas à gauche a les coordonnées (0,0) et le coin en haut à  droite est en (1,1), quelque soit la taille en pixels de l'image.<br>
<br>
Ici je vais commencer par définir le vertex (1,1,1) auquel je veux plaquer le coin haut gauche de la texture soit (0,1).<br>
Je fais donc :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>
    <span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>  <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information"><span class="courrier">glTexCoord2d</span>, comme <span class="courrier">glColor3ub</span>, s'applique à tous les vertices définis par la suite. Il ne faut donc pas oublier d'y faire à nouveau appel avant chaque vertex.</div><br>
<br>
En continuant avec les autres sommets de la face cela donne donc le code complet suivant :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture1</span><span class="p">);</span>
    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>
    <span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>  <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>  <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>  <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>  <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glEnd</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">Il n'est pas possible de changer de texture en cours de définition d'une face. Pour appliquer une texture différente à la  face suivante il faut donc terminer le bloc de vertices par un appel à <span class="courrier">glEnd()</span>, changer la texture puis définir la prochaine face :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture1</span><span class="p">);</span>
    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span> <span class="c1">//première face</span>
    <span class="c1">//définition des vertices</span>
    <span class="n">glEnd</span><span class="p">();</span>
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture2</span><span class="p">);</span> <span class="c1">//changement de texture</span>
    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span> <span class="c1">//deuxième face</span>
    <span class="c1">//définition des vertices</span>
    <span class="n">glEnd</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
Ce n'est bien sûr pas nécessaire si vous souhaitez garder la même texture.<br>
</div><br>
<br>
<h3>Erreurs fréquentes</h3><br>
<br>
Une mauvaise utilisation de<span class="courrier"> glTexCoord2d</span> (mauvaises coordonnées, oublié de redéfinir <span class="courrier">glTexCoord2d</span> pour le vertex suivant) donne lieu à de drôles de résultats :<br>
<br>
<div class="centre"><img src="./ogl_files/10524.jpg" alt="Image utilisateur"><br>
<span class="italique">Erreur en oubliant de redéfinir </span><span class="courrier">glTexCoord2d</span><span class="italique"> pour le dernier vertex</span></div><br>
<br>
<img src="./ogl_files/waw.png" alt=":waw:" class="smilies">  <img src="./ogl_files/langue.png" alt=":p" class="smilies">  Ne rigolez pas ces erreurs sont fréquentes au début et je suis prêt à parier que ça vous arrivera au moins une fois <img src="./ogl_files/rire.gif" alt=":lol:" class="smilies"> . Vous saurez au moins d'où vient le problème...<br>
<br>
<h3>Cas d'un triangle</h3><br>
<br>
Dans les jeux vidéos, la primitive de base la plus utilisée est le triangle (nous verrons pourquoi quand nous importerons des models 3D). Le plaquage de texture fonctionne de la même manière en ne choisissant que <strong>3 points sur la texture</strong>, points qui ne sont donc pas forcément des coins de l'image.<br>
<br>
<table class="tab_user">

<tbody><tr>
<td><span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture2</span><span class="p">);</span>
    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">);</span>
    <span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>      <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2d</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glEnd</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div></td>
<td><img src="./ogl_files/10525.jpg" alt="Image utilisateur"></td>
</tr></tbody></table><br>
<br>
<h3>Utilisation d'une partie de la texture</h3><br>
<br>
Nous venons de le voir dans le cas du triangle, il n'est pas obligatoire d'utiliser toute la texture. C'est une pratique souvent utilisée pour regrouper toutes les textures pour un seul objet dans un seul fichier, comme par exemple ici la skin de Tommy Vercetti dans GTA:Vice City :<br>
<br>
<div class="centre"><img src="./ogl_files/10526.jpg" alt="Image utilisateur"><br>
<span class="italique">Texture du héros (une des skins possibles) de <strong>GTA:Vice City</strong></span></div><br>
<br>
Il suffit alors, à coup de <span class="courrier">glTexCoord2d</span> bien pensés, de délimiter la zone de la texture que l'on souhaite utiliser pour la face courante :<br>
<br>
<table class="tab_user">

<tbody><tr>
<td><span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture3</span><span class="p">);</span>
    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>
    <span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>  <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>  <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2d</span><span class="p">(</span><span class="mf">0.33</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>  <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2d</span><span class="p">(</span><span class="mf">0.33</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>  <span class="n">glVertex3d</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glEnd</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div></td>
<td><img src="./ogl_files/10527.jpg" alt="Image utilisateur"></td>
</tr></tbody></table><br>
<br>
<div class="rmq information">Comme vous le voyez, la texture utilisée ici n'est pas un carré (384x128) et pourtant le coin en haut à droite a toujours les coordonnées (1,1). Les coordonnées d'un point sur la texture donnent donc une information relative à la taille totale de l'image. Ici on a voulu découper une partie de 128 pixels de large sur les 384 totaux soit un rapport de 1/3 (0.33).</div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4958">Texture répétitive</h2>
		<div class="ss_part_texte">
		Jusqu'à présent nous appliquions tout ou une partie de la texture sur nos objets. Mais si on essaye de créer un sol (un simple carré de 20x20) dans la scène avec la même technique on obtient le résultat suivant :<br>
<br>
<table class="tab_user">

<tbody><tr>
<td><span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="syntax"><pre><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture4</span><span class="p">);</span>
    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>
    <span class="n">glTexCoord2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>      <span class="n">glVertex3i</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2i</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>     <span class="n">glVertex3i</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2i</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>    <span class="n">glVertex3i</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>     <span class="n">glVertex3i</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glEnd</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div></td>
<td><img src="./ogl_files/10528.jpg" alt="Image utilisateur"></td>
</tr></tbody></table><br>
<br>
Comme vous le voyez la texture n'est pas faite pour être étalée sur une si grande surface. Nous devons donc faire en sorte qu'elle se répète !<br>
Dans les exemples que nous avons vus nous n'utilisions que des coordonnées entre 0 et 1. Mais en réalité l'espace de coordonnées de la texture n'a pas de limite :<br>
<br>
<div class="centre"><img src="./ogl_files/6035.jpg" alt="Image utilisateur"><br>
<span class="italique">Espace des coordonnées de texture</span></div><br>
<br>
Quand nous considérions l'image d'origine, nous nous restreignions à une partie de cet espace. Mais ici nous voulons faire répéter la texture 10 fois par exemple donc nous allons prendre des coordonnées entre 0 et 10 tout simplement !<br>
<br>
Et en effet en modifiant le code en conséquence :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="syntax"><pre><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture4</span><span class="p">);</span>
    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>
    <span class="n">glTexCoord2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>      <span class="n">glVertex3i</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2i</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>     <span class="n">glVertex3i</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2i</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>    <span class="n">glVertex3i</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glTexCoord2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>     <span class="n">glVertex3i</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glEnd</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous obtenons un bien meilleur résultat visuel :<br>
<br>
<div class="centre"><img src="./ogl_files/10529.jpg" alt="Image utilisateur"><br>
<span class="italique">Texture du sol répétée 10 fois</span></div><br>
<br>
<div class="rmq attention">Toutes les textures ne sont pas faites pour être répétées. Il faut en effet qu'elles soient conçues spécialement pour les bords correspondent quand plusieurs répétitions de l'image sont mises bout à bout. Dans le pack de textures, vous pouvez être quasiment sûrs que toutes les textures de sol, de mur, de plafond, d'herbe, de rocher sont susceptibles d'être répétées.</div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4957">Les couleurs</h2>
		<div class="ss_part_texte">
		Je n'ai volontairement pas mentionné les couleurs depuis le début de ce chapitre pour rester concentré sur la nouveauté du moment : les textures. Mais nos bonnes vielles couleurs ne sont pas mortes pour autant.<br>
<br>
<h3>Combiner texture et couleur</h3><br>
<br>
Nous savons depuis le début de ce tuto définir la couleur des vertices à venir avec <span class="courrier">glColor3ub</span>. Rien ne nous interdit de continuer à l'utiliser en plus de ce que nous venons d'apprendre sur les textures. La définition complète d'un vertex peut donc maintenant contenir jusqu'à 3 lignes :<br>
<ul>
<li>définition de la couleur avec <span class="courrier">glColor3ub</span> <span class="italique">(facultatif)</span> ;</li>
<li>définition des coordonnées sur la texture avec <span class="courrier">glTexCoord2d</span> <span class="italique">(obligatoire sur utilisation d'une texture)</span> ;</li>
<li>définition des coordonnées spatiales du vertex avec <span class="courrier">glVertex3d</span>.</li>
</ul><br>
<br>
Il n'est bien sûr pas obligatoire de redéfinir <span class="courrier">glColor3ub</span> à chaque fois si l'on ne souhaite pas changer de couleur.<br>
Appliqué au sol vu précédemment, en affectant des couleurs à chaque sommet on obtient donc :<br>
<br>
<table class="tab_user">

<tbody><tr>
<td><span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></td><td class="code"><div class="syntax"><pre><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture4</span><span class="p">);</span>
    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//Nouveau</span>
    <span class="n">glTexCoord2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">glVertex3i</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//Nouveau</span>
    <span class="n">glTexCoord2i</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">glVertex3i</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//Nouveau</span>
    <span class="n">glTexCoord2i</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
    <span class="n">glVertex3i</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span> <span class="c">//Nouveau</span>
    <span class="n">glTexCoord2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
    <span class="n">glVertex3i</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glEnd</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div></td>
<td><img src="./ogl_files/10532.jpg" alt="Image utilisateur"></td>
</tr></tbody></table><br>
<br>
Comme vous le voyez, la couleur agit comme un filtre et vient donner une teinte locale à la texture.<br>
Tout semble aller très bien jusqu'à ce que l'on décide d'afficher autre chose <span class="italique">juste après</span> avoir défini notre sol, un cube texturé par exemple :<br>
<br>
<div class="centre"><img src="./ogl_files/10533.jpg" alt="Image utilisateur"></div><br>
<br>
Comme vous le voyez le cube est lui aussi affecté par la dernière couleur utilisée. C'est tout à fait logique car <span class="courrier">glColor3ub</span> par définition est utilisé pour <strong>tous</strong> les vertex définis à la suite (jusqu'au prochain appel à <span class="courrier">glColor3ub</span>).<br>
<br>
Il faut donc utiliser une <strong>couleur neutre</strong> qui, appliquée comme filtre, ne viendra pas modifier la couleur de la texture. Et cette couleur n'est autre que... le <strong>blanc</strong> !<br>
<br>
Ainsi, pour en quelque sorte « <span class="italique">annuler l'effet des couleurs</span> », il suffit d'utiliser le blanc comme prochaine couleur avec un appel à :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et en effet en interposant un appel à <span class="courrier">glColor3ub(255,255,255);</span> entre la définition du sol et celle du cube, on obtient bien un cube vierge de tout effet de couleur :<br>
<br>
<table class="tab_user">

<tbody><tr>
<td><span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></td><td class="code"><div class="syntax"><pre><span class="c">//... début du sol</span>
    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span>
    <span class="n">glTexCoord2i</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
    <span class="n">glVertex3i</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glEnd</span><span class="p">();</span> <span class="c">//fin du sol</span>

    <span class="n">glColor3ub</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">);</span> <span class="c">//on enlève la couleur</span>

    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_QUADS</span><span class="p">);</span> <span class="c">//début du cube</span>
    <span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="c">//... fin du cube</span>
</pre></div>
</td></tr></tbody></table></div></td>
<td><img src="./ogl_files/10534.jpg" alt="Image utilisateur"></td>
</tr></tbody></table><br>
<br>
Voilà vous savez maintenant les précautions qu'il faut prendre lorsque l'on souhaite combiner dans un même code les couleurs et les textures. Rassurez-vous, il ne vous sera pas rare d'oublier de repasser en blanc de temps en temps et vous créerez souvent de jolis effets de couleur involontairement.  <img src="./ogl_files/clin.png" alt=";)" class="smilies">
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Qui aurait cru que nous passerions aussi rapidement d'objets moches mais joliment colorés à de somptueux objets texturés ?!<br>
Comme vous avez pu le voir il n'y a vraiment rien de sorcier dans l'application des textures, il suffit de bien savoir affecter à chaque vertex les bonnes coordonnées sur la texture et le tour est joué.<br>
Le meilleur moyen de  vous assurer que vous avez bien compris est de vous entraîner à réaliser une petite scène en 3D avec des textures, notamment une caisse de <span class="courrier">4x2x2</span> avec la texture de caisse (voir <span class="courrier">caisse.jpg</span> dans zip plus bas) utilisée dans ce chapitre.<br>
<br>
Je vous en ai fait une <span class="souligne">rapidement</span> dont vous pouvez télécharger le code plus bas :<br>
<br>
<div class="centre"><img src="./ogl_files/5427.jpg" alt="Image utilisateur"></div><br>
<br>
Laissez libre cours à votre imagination et n'hésitez pas à poster vos créations dans les commentaires du chapitre ou sur le forum.<br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/sdlgl_06_textures.zip">Téléchargez les textures utilisées et un exemple de scène texturée (482 Ko)</a></span></div><br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/scene_texture.avi">Téléchargez la vidéo au format avi/Xvid (1.10 Mo)</a></span></div><br>
<br>
Dans le prochain chapitre nous verrons comment créer des formes un peu plus complexes qu'un simple cube ou une pyramide, toujours dans le but d'enrichir le contenu de nos scènes.
	</div>
	
	<hr>
	<h1 id="chap_4968">Les quadriques</h1>
	<div id="chap_intro">
	Le mot quadrique, équivalent de « surface quadratique », a une connotation mathématique qui peut faire peur au premier abord.  <img src="./ogl_files/unsure.gif" alt=":euh:" class="smilies"><br>
Mais ce n'est rien d'autre qu'une surface non-linéaire (pas plane), et derrière ce nouveau mot encore plus barbare, OpenGL regroupe en fait la <strong>sphère</strong>, le <strong>cône</strong>, le <strong>cylindre</strong>, et le <strong>disque</strong>.<br>
Nous verrons donc dans ce court chapitre comment enrichir un peu plus vos scènes avec ces quelques formes prédéfinies qui nous éviteront bien des efforts.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4967">Principe d'utilisation</h2>
		<div class="ss_part_texte">
		Nous le verrons juste après, il existe dans OpenGL des fonctions toutes faites pour dessiner une sphère, un cylindre, etc.<br>
Cependant ces fonctions ont besoin d'informations sur les intentions du codeur : faut-il texturer l'objet à créer, faut-il l'afficher uniquement avec des traits ?<br>
Pour cela nous utiliserons un champ (<a href="http://www.siteduzero.com/tuto-3-4350-1-creez-vos-propres-types-de-variables.html#ss_part_1">struct</a>) de <strong>paramètres</strong>. Ces paramètres sont stockés dans une variable de type <span class="courrier">GLUquadric</span> que l'on se doit d'utiliser d'une manière un peu particulière.<br>
<br>
<h3>Création d'une variable de type <span class="courrier">GLUquadric</span></h3><br>
<br>
Ce n'est pas à nous directement de créer une variable de ce type. On doit utiliser un appel OpenGL qui nous renverra un <a href="http://www.siteduzero.com/tuto-3-3828-1-a-l-assaut-des-pointeurs.html">pointeur</a> sur le <span class="courrier">GLUquadric</span> créé par OpenGL :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">GLUquadric</span><span class="o">*</span> <span class="n">params</span><span class="p">;</span>
<span class="n">params</span> <span class="o">=</span> <span class="n">gluNewQuadric</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous pouvons donc maintenant utiliser la variable <span class="courrier">params</span> créée pour paramétrer nos objets et les dessiner.<br>
<br>
<h3>Paramétrage du <span class="courrier">GLUquadric</span></h3><br>
<br>
Ce champ n'est pas manipulable directement mais seulement par l'intermédiaire de fonctions. Une fois paramétré il sera utilisé pour tous les appels de dessin de quadriques définis après.<br>
<br>
<h4>Style d'affichage</h4><br>
<br>
Les fonctions pour définir des quadriques utilisent tout comme nous des appels à <span class="courrier">glVertex</span> pour définir les vertices des objets. Cependant comme nous n'avons pas accès directement au code, et donc au <span class="courrier">glBegin</span>, nous ne pouvons pas spécifier par exemple par un <span class="courrier">glBegin(GL_LINES);</span> que nous voulons que l'affichage soit fait avec des lignes.<br>
<br>
Pour ce faire nous devons utiliser la fonction :<br>
<br>
<div class="centre"><span class="gros"><span class="courrier">gluQuadricDrawStyle(params,style);</span></span></div><br>
qui permet de définir quel sera le style d'affichage. <span class="courrier">style</span> peut valoir :<br>
<br>
<table class="tab_user">




<thead><tr><th>Style</th><th>Explication</th><th>Exemple</th></tr></thead><tbody><tr>
<td><span class="courrier">GLU_POINT</span></td>
<td>L'objet sera dessiné avec des points.</td>
<td><img src="./ogl_files/10926.png" alt="Image utilisateur"></td>
</tr><tr>
<td><span class="courrier">GLU_LINE</span></td>
<td>L'objet sera dessiné avec des lignes.</td>
<td><img src="./ogl_files/10927.png" alt="Image utilisateur"></td>
</tr><tr>
<td><span class="courrier">GLU_FILL</span></td>
<td>L'objet sera dessiné avec des faces pleines.</td>
<td><img src="./ogl_files/10928.png" alt="Image utilisateur"></td>
</tr></tbody></table><br>
<br>
<div class="rmq information">La valeur par défaut est <span class="courrier">GLU_FILL</span>. Pour utiliser des faces pleines il n'est donc pas nécessaire d'appeler <span class="courrier">gluQuadricDrawStyle</span> si aucun style n'a été précédemment défini.</div><br>
<br>
<h4>Coordonnées de texture</h4><br>
<br>
Nous l'avons vu dans le précédent chapitre, pour utiliser des textures il faut définir des coordonnées de texture avec <span class="courrier">glTexCoord2d</span>. Si nous souhaitons utiliser des textures avec nos quadriques, il faut indiquer à OpenGL qu'il doit lui aussi incorporer les appels à <span class="courrier">glTexCoord2d</span> lorsqu'on demandera de dessiner un quadrique. Nous utilisons donc la fonction :<br>
<br>
<div class="centre"><span class="gros"><span class="courrier">gluQuadricTexture(params,texture);</span></span></div><br>
<br>
où texture peut valoir <span class="courrier">GL_TRUE</span> (vrai : pour activer les coordonnées de texture) ou <span class="courrier">GL_FALSE</span> (faux : pour ne pas utiliser les coordonnées de texture).<br>
<br>
<div class="rmq information">La valeur par défaut étant <span class="courrier">GL_FALSE</span>, il n'est nécessaire d'appeler initialement <span class="courrier">gluQuadricTexture</span> que si nous souhaitons utiliser les textures sur nos quadriques.</div><br>
<br>
<table class="tab_user">


<tbody><tr>
<td><span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span><span class="n">texture1</span><span class="p">);</span>
    <span class="n">GLUquadric</span><span class="o">*</span> <span class="n">params</span> <span class="o">=</span> <span class="n">gluNewQuadric</span><span class="p">();</span>
    <span class="c1">//dessin de la sphere... (à venir)</span>
    <span class="n">gluDeleteQuadric</span><span class="p">(</span><span class="n">params</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div></td>
<td><img src="./ogl_files/10929.png" alt="Image utilisateur"></td>
</tr><tr>
<td><span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span><span class="n">texture1</span><span class="p">);</span>
    <span class="n">GLUquadric</span><span class="o">*</span> <span class="n">params</span> <span class="o">=</span> <span class="n">gluNewQuadric</span><span class="p">();</span>
    <span class="n">gluQuadricTexture</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="n">GL_TRUE</span><span class="p">);</span>
    <span class="c1">//dessin de la sphere... (à venir)</span>
    <span class="n">gluDeleteQuadric</span><span class="p">(</span><span class="n">params</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div></td>
<td><img src="./ogl_files/10930.jpg" alt="Image utilisateur"></td>
</tr></tbody></table><br>
<br>
<div class="rmq question">Sur la première image c'était pas censé être une sphère ? On dirait un simple disque...</div><br>
<br>
Sans texture et <strong>sans lumière</strong>, on ne peut pas comprendre que c'est une sphère. C'est un principe d'optique : la compréhension de la forme d'un objet sur une image 2D utilise pour beaucoup les différences de couleurs dues à l'éclairage (<a href="http://www.google.com/search?hl=fr&amp%3Bq=shape%2Bfrom%2Bshading">Shape from Shading</a>). Nous réglerons donc ce problème dans quelques chapitres lorsque nous verrons la <span class="italique">lumière</span>. En attendant, avec les <strong>textures</strong> et le <strong>mouvement</strong> nous n'aurons vraiment pas de mal à discerner la forme de nos objets rassurez-vous.<br>
<br>
<h3>Suppression du <span class="courrier">GLUquadric</span></h3><br>
<br>
Même si nous n'avons pas nous-mêmes utilisé de <span class="courrier">malloc</span> (ou <span class="courrier">new</span> en C++) pour créer le <span class="courrier">GLUquadric</span>, il faut libérer la mémoire quand on ne souhaite plus l'utiliser par le biais de la fonction (entraperçue dans les exemples de code plus haut) :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">gluDeleteQuadric</span><span class="p">(</span><span class="n">params</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Maintenant nous savons créer un champ de paramètres pour nos quadriques, le paramétrer et le supprimer. Il est temps de voir ce qui nous intéresse réellement, les quadriques et leurs fonctions de dessin !
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4966">Les quadriques</h2>
		<div class="ss_part_texte">
		Pour bien comprendre quelles sont les faces et vertices générés par les appels suivants, tous les quadriques seront représentés en filaire. J'inclus aussi une version 3D du repère pour montrer que l'axe Z (bleu) est l'axe principal utilisé par les quadriques.<br>
<br>
<h3>La sphère</h3><br>
<br>
<div class="centre"><img src="./ogl_files/10931.png" alt="Image utilisateur"></div><br>
<br>
<div class="centre"><span class="gros"><span class="courrier">gluSphere(GLUquadric* params,radius,slices,stacks);</span></span></div><br>
<br>
<ul>
<li>Le premier paramètre est le champ de type <span class="courrier">GLUquadric</span> que nous avons paramétré précédemment.</li>
<li>Le deuxième, <strong><span class="courrier">radius</span></strong>, est le plus simple : c'est le <strong>rayon</strong> de la sphère.</li>
<li><strong><span class="courrier">slices</span></strong> est le nombre de tranches verticales qui composeront la sphère.</li>
<li><strong><span class="courrier">stacks</span></strong> est aussi un nombre de tranches mais pour les tranches horizontales.</li>
</ul><br>
L'influence des ces deux paramètres est résumée par l'image ci-dessous :<br>
<br>
<div class="centre"><img src="./ogl_files/10932.png" alt="Image utilisateur"></div><br>
<br>
Plus ces deux nombres sont grands, plus la sphère est précise et ressemble en effet à une sphère. La valeur choisie (20x20) donne un résultat satisfaisant.<br>
<br>
<h3>Le cylindre et le cône</h3><br>
<br>
<div class="centre"><img src="./ogl_files/10933.png" alt="Image utilisateur"></div><br>
<br>
<div class="centre"><span class="gros"><span class="courrier">gluCylinder(GLUquadric* params,base,top,height,slices,stacks);</span></span></div><br>
<br>
<ul>
<li>Le premier paramètre est toujours le même champ de type <span class="courrier">GLUquadric</span>.</li>
<li><strong>Base</strong> est le rayon du cylindre en bas, <strong><span class="courrier">top</span></strong> est le rayon du cylindre en haut. Pour avoir un vrai cylindre il faut donc utiliser la même valeur pour les 2, mais en utilisant des valeurs différentes pour <span class="courrier">base</span> et <span class="courrier">top</span>, nous aurons un cône ! (voir dessin ci-dessous)</li>
<li><strong><span class="courrier">slices</span></strong> est, comme pour la sphère, le nombre de divisions autour de l'axe Z et nous choisirons une valeur de l'ordre de 20 pour la même raison.</li>
<li><strong><span class="courrier">stacks</span></strong> ici ne sert pas à grand chose. Mettre une valeur différente de 1 ne changerait rien au niveau de la précision du cylindre/cône (à part quand on le regarde en filaire).</li>
</ul><br>
<br>
<div class="centre"><img src="./ogl_files/10934.png" alt="Image utilisateur"><br>
<span class="courrier">gluCylinder(params,1,0,2,20,1);</span></div><br>
<br>
<h3>Le disque</h3><br>
<br>
<div class="centre"><img src="./ogl_files/10935.png" alt="Image utilisateur"></div><br>
<br>
<div class="centre"><span class="gros"><span class="courrier">gluDisk(GLUquadric* params,inner,outer,slices,loops);</span></span></div><br>
<br>
<ul>
<li>Le premier paramètre est toujours le même champ de type <span class="courrier">GLUquadric</span>.</li>
<li><strong>inner</strong> est le rayon interne du disque, <span class="rouge">souvent à 0</span> mais peut (comme sur l'image) avoir une valeur différente.</li>
<li><strong><span class="courrier">outer</span></strong> est le rayon externe du disque.</li>
<li><strong><span class="courrier">slices</span></strong> est, comme précédemment, le nombre de divisions autour de l'axe Z.</li>
<li><strong><span class="courrier">loops</span></strong> ici ne sert pas à grand chose. Mettre une valeur différente de 1 rajouterait des faces à l'intérieur du disque mais ne rajoute pas de précision visible (à part en filaire).</li>
</ul><br>
<br>
<h4>Le disque partiel</h4><br>
<br>
<div class="centre"><img src="./ogl_files/10936.png" alt="Image utilisateur"></div><br>
<br>
<div class="centre"><span class="gros"><span class="courrier">gluPartialDisk(GLUquadric* params,inner,outer,slices,loops,start,sweep);</span></span></div><br>
<br>
Le disque partiel est comme le disque normal sauf qu'il ne fait pas nécessairement 360°.<br>
<br>
<ul>
<li><span class="courrier"><strong>start</strong></span> est l'angle de départ du disque partiel. Malheureusement pour nous, les concepteurs d'OpenGL n'ont pas suivi la logique mathématique qui voudrait que les angles soient exprimés dans le sens trigonométrique (sens inverse des aiguilles d'une montre) avec 0° sur l'axe X. Ici 0° pour <span class="courrier">start</span> place le début du disque sur l'axe Y (vert), 90° sur l'axe X (rouge).</li>
<li><span class="courrier"><strong>sweep</strong></span> est la distance angulaire entre le début et la fin du disque partiel (180° sur le dessin plus haut).</li>
</ul><br>
<br>
<div class="rmq information">La précision donnée par <span class="courrier">slices</span> s'applique ici au disque partiel uniquement. Cela ne sert donc à rien de mettre une grande valeur (20) si on utilise un disque partiel de 90° seulement. Une précision de 5 peut suffire à avoir le même résultat de qualité sur un angle de 90° (par rapport à une précision de 20 pour un angle de 360°).</div><br>
<br>
<h3>Un même <span class="courrier">GLUquadric</span> pour dessiner plusieurs quadriques</h3><br>
<br>
Vous l'avez compris maintenant, l'objet GLUquadric n'est pas un quadrique mais simplement un champ de paramètres utilisé lors de l'appel d'une fonction de dessin de quadrique pour spécifier le mode d'affichage. On peut donc tout à fait utiliser <span class="italique">le même GLUquadric</span> pour faire dessiner des quadriques tout en changeant, si on le souhaite, les paramètres en cours de route :<br>
<br>
<table class="tab_user">

<tbody><tr>
<td><span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="syntax"><pre><span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span><span class="n">texture1</span><span class="p">);</span>

    <span class="n">GLUquadric</span><span class="o">*</span> <span class="n">params</span> <span class="o">=</span> <span class="n">gluNewQuadric</span><span class="p">();</span>

    <span class="n">gluQuadricDrawStyle</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="n">GLU_LINE</span><span class="p">);</span>
    <span class="n">gluCylinder</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">gluQuadricDrawStyle</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="n">GLU_FILL</span><span class="p">);</span>
    <span class="n">gluQuadricTexture</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="n">GL_TRUE</span><span class="p">);</span>
    <span class="n">glTranslated</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">gluSphere</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="mf">0.75</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">);</span>

    <span class="n">gluDeleteQuadric</span><span class="p">(</span><span class="n">params</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div></td>
<td><img src="./ogl_files/10937.png" alt="Image utilisateur"></td>
</tr></tbody></table>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4965">Exercice : une roquette</h2>
		<div class="ss_part_texte">
		Ce chapitre n'a rien de compliqué mais jusqu'à présent j'ai fait tout le boulot en vous détaillant les fonctions pour utiliser les quadriques. Maintenant à vous !  <img src="./ogl_files/diable.png" alt=":diable:" class="smilies"><br>
Pour vous faire la main sur ces nouvelles fonctions je vous propose de créer <strong>une roquette</strong>, basée sur celles que l'on trouve dans le jeu Half-Life premier du nom. Mon but n'est pas de faire de vous des apprentis terroristes mais juste des pros des quadriques !  <img src="./ogl_files/ange.png" alt=":ange:" class="smilies"><br>
<br>
<div class="centre"><img src="./ogl_files/10940.jpg" alt="Image utilisateur"><br>
<span class="italique">Une roquette inspirée d'Half-Life</span></div><br>
<br>
<h3>Les textures</h3><br>
<br>
Les textures sont elles aussi tirées d'Half-Life et légèrement modifiées par mes soins. Vous les trouverez dans le pack ci-dessous (et dans le zip final).<br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/rocket_textures.zip">Téléchargez les textures pour la roquette (4.53 Ko)</a></span></div><br>
<br>
<h3>Schéma de la roquette</h3><br>
<br>
<div class="centre"><img src="./ogl_files/10941.png" alt="Image utilisateur"></div><br>
<br>
Comme vous pouvez le voir, la roquette est constituée de quatre éléments :<br>
<ol class="liste_1">
<li>un cône supérieur (texture <span class="courrier">rocket_top.jpg</span>) ;</li>
<li>un cône intermédiaire (texture <span class="courrier">rocket_middle.jpg</span>) ;</li>
<li>un cône inférieur (texture <span class="courrier">rocket_bottom.jpg</span>) ;</li>
<li>et enfin, ça ne se voit pas trop sur le schéma, un disque (texture <span class="courrier">rocket_motor.jpg</span>).</li></ol><br>
<br>
<h3>Méthode pour la coder</h3><br>
<br>
Pour coder la roquette il nous faut donc procéder en deux étapes :<br>
<ul>
<li>au lancement du programme il faut : charger toutes les textures utilisées ;</li>
<li>au moment de dessiner il faut :<br>
       <ol class="liste_1">
<li>créer un <span class="courrier">GLUquadric</span> ;</li>
<li>paramétrer le quadrique pour qu'il génère les coordonnées de texture automatiquement ;</li>
<li>dessiner le premier objet ;</li>
<li>se translater à la base du deuxième objet ;</li>
<li>dessiner le deuxième objet ;</li>
<li>etc.</li>
<li>détruire le GLUquadric.</li></ol><br>
   </li>
</ul><br>
<br>
<div class="rmq attention">La phase <span class="italique">se translater</span> est importante. Comme nous l'avons vu sur les schémas des différents types de quadriques, ils sont toujours dessinés à partir de (0,0,0) dans le <strong>repère local</strong>. En utilisant intelligemment les transformations, il est donc possible de placer chaque quadrique où on le souhaite. </div><br>
<br>
N'oubliez pas non plus de changer de texture entre chaque quadrique pour ne pas vous retrouver avec une roquette uniformément... moche.  <img src="./ogl_files/clin.png" alt=";)" class="smilies"><br>
<br>
Voilà vous avez tous les outils pour dessiner cette roquette. Référez-vous bien au schéma que je vous donne pour respecter les proportions. Toute roquette déformée ne sera pas acceptée pour une utilisation sur le terrain ! (Hum...)<br>
<br>
<span class="gros"><strong><span class="rouge">À vous donc !</span></strong></span><br>
<br>
<h3>Correction</h3><br>
<br>
Je ne vous mets ici que le code intéressant. Je pars du principe que vous savez parfaitement charger les textures et initialiser l'application. Je fournis bien entendu le code complet dans l'archive finale.<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48</pre></td><td class="code"><div class="syntax"><pre><span class="c">/* J'ai choisi de faire une fonction Dessiner Rocket.</span>
<span class="c">Je pourrai ainsi l'appeler plusieurs fois, et dans n'importe quelle</span>
<span class="c">position initiale du repère initial */</span>
<span class="kt">void</span> <span class="n">DrawRocket</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">glPushMatrix</span><span class="p">();</span> <span class="c">//pour que les transformations soient réversibles</span>

    <span class="n">GLUquadric</span><span class="o">*</span> <span class="n">params</span> <span class="o">=</span> <span class="n">gluNewQuadric</span><span class="p">();</span> <span class="c">//création du quadrique</span>
    <span class="n">gluQuadricTexture</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="n">GL_TRUE</span><span class="p">);</span> <span class="c">//activation des coordonnées de texture</span>

    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span><span class="n">top</span><span class="p">);</span> <span class="c">//texture du haut</span>
    <span class="n">gluCylinder</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">1.6</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="c">//cône 1</span>

    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span><span class="n">middle</span><span class="p">);</span>
    <span class="n">glTranslated</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mf">1.05</span><span class="p">);</span> <span class="c">//je descends pour faire le 2ème cône</span>
    <span class="n">gluCylinder</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="mf">0.15</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">1.05</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="c">//cône 2</span>

    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span><span class="n">bottom</span><span class="p">);</span>
    <span class="n">glTranslated</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mf">0.25</span><span class="p">);</span> <span class="c">//je descends enfin tout en bas (sur le schéma)</span>
    <span class="n">gluCylinder</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="mf">0.3</span><span class="p">,</span><span class="mf">0.15</span><span class="p">,</span><span class="mf">0.25</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="c">//cône 3</span>

    <span class="c">//et à la même position je dessine le disque de sortie des flammes</span>
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span><span class="n">motor</span><span class="p">);</span>
    <span class="n">gluDisk</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.3</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="c">//disque 4</span>

    <span class="n">gluDeleteQuadric</span><span class="p">(</span><span class="n">params</span><span class="p">);</span> <span class="c">//je supprime le quadrique</span>

    <span class="n">glPopMatrix</span><span class="p">();</span> <span class="c">//hop je remets tout comme je l'ai trouvé</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">DrawGL</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">glClear</span><span class="p">(</span> <span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span> <span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_MODELVIEW</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>
    <span class="n">gluLookAt</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="c">//je place la caméra à un endroit idéal</span>

    <span class="n">DrawRocket</span><span class="p">();</span> <span class="c">//je dessine la 1ère roquette</span>

    <span class="n">glTranslated</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//je me déplace pour la 2ème roquette</span>
    <span class="n">glRotated</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">/*je vais tourner celle-là pour que son axe principal</span>
<span class="c">    soit horizontal */</span>
    <span class="n">DrawRocket</span><span class="p">();</span> <span class="c">//et je la dessine</span>

    <span class="n">glFlush</span><span class="p">();</span>
    <span class="n">SDL_GL_SwapBuffers</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez j'ai décidé personnellement de faire une <a href="http://www.siteduzero.com/tuto-3-2842-1-les-fonctions.html">fonction</a> pour dessiner la roquette. Je peux ainsi dessiner autant de roquettes que je veux sans alourdir le code.<br>
<br>
<h4>Améliorations</h4><br>
<br>
Vous pouvez, si vous le souhaitez, créer une sphère représentant la Terre (avec la texture <span class="courrier">EarthLow.jpg</span> du pack final) autour de laquelle la roquette tournerait.<br>
<span class="souligne">Conseil</span> : pour faire tourner la roquette autour de la Terre il suffit de bien réfléchir à l'ordre des transformations à faire. Comme ce n'est pas le but de cet exercice, qui se veut simple et rapide, je vous laisse imaginer la solution adéquate.<br>
<br>
<div class="centre"><img src="./ogl_files/10942.jpg" alt="Image utilisateur"></div><br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/sdlgl_07_roquette.zip">Téléchargez le projet Code::Blocks, l'exécutable Windows et le Makefile Unix (391 Ko)</a></span></div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Les quadriques, c'est fantastique et c'est magique ! Loin d'être mystiques elles sont quand même vachement pratiques !  <img src="./ogl_files/soleil.png" alt=":soleil:" class="smilies"><br>
C'est une solution très simple pour ajouter des objets un peu complexes dans vos scènes en attendant de savoir charger de vrais modèles 3D créés dans des logiciels 3D externes (Blender, 3dSmax...).<br>
Dans le prochain chapitre nous verrons comment contrôler la caméra de manière plus poussée, et réaliserons entre autres un dérivé de Google Earth sans prétention qui utilisera justement la sphère. Que de bonheur en perspective !
	</div>
	
	<hr>
	<h1 id="chap_4978">Contrôle avancé de la caméra (Partie 1/2)</h1>
	<div id="chap_intro">
	Ce chapitre en deux parties vient présenter comment créer des caméras contrôlables dans vos applications OpenGL. Fini donc le calvaire de prévoir précisément dans le code la position/orientation de la caméra.<br>
Nous commencerons dans ce chapitre par une caméra <strong>Trackball</strong>, assez simple à implémenter et qui nous permettra d'introduire le concept de classes en C++.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4977">Principe d'une caméra TrackBall</h2>
		<div class="ss_part_texte">
		Le nom <strong>TrackBall</strong> vient de ce périphérique bizarre qui remplace la souris où l'on tourne directement une boule. Ici j'ai librement tiré le terme du logiciel multiplate-forme Google Earth :<br>
<br>
<div class="centre"><img src="./ogl_files/12031.jpg" alt="Image utilisateur"><br>
<span class="italique">Google Earth</span></div><br>
<br>
Dans Google Earth en effet on utilise la souris pour tourner autour de la Terre. Nous allons donc reproduire ce principe qui nous permettra d'avoir une caméra permettant de regarder un objet / une partie d'une scène sous tous les angles.<br>
<br>
<h3>Rotation à la souris</h3><br>
<br>
En maintenant le bouton gauche de la souris enfoncé, les mouvements de la souris feront tourner la scène :<br>
<ul>
<li>un mouvement horizontal de la souris donne une rotation horizontale de la scène (donc autour de sa verticale).</li>
<li>un mouvement vertical de la souris donne une rotation verticale de la scène.</li>
</ul><br>
Ces mouvements sont illustrés par les schémas ci-dessous :<br>
<br>
<div class="centre"><img src="./ogl_files/12032.png" alt="Image utilisateur"><br>
<span class="italique">Mouvement horizontal de la souris</span></div><br>
<br>
<div class="centre"><img src="./ogl_files/12033.png" alt="Image utilisateur"><br>
<span class="italique">Mouvement vertical de la souris</span></div><br>
<br>
<div class="rmq information">Notez au passage, et nous verrons l'équivalent dans le code, que ce n'est pas vraiment la caméra qui <strong>tourne</strong> mais la <strong>scène</strong>, même si cela revient plus ou moins au même. Ce n'est le cas que pour ce type de caméra. Pour la caméra <strong>FreeFly</strong> que nous verrons après c'est bel et bien  la caméra et non la scène qui bougera.</div><br>
<br>
<h3>Zoom à la molette</h3><br>
<br>
Pour prendre du recul ou au contraire nous rapprocher de l'objet / scène que nous souhaitons visualiser, nous allons tout simplement utiliser la molette. Un coup de molette en avant pour zoomer, un coup de molette en arrière pour dézoomer, rien de plus intuitif :<br>
<br>
<div class="centre"><img src="./ogl_files/12034.png" alt="Image utilisateur"><br>
<span class="italique">Rotation de la roulette de la souris</span></div><br>
<br>
<div class="rmq information">Ici c'est bien la caméra qui bouge, nous verrons une fois encore comment cela se répercute sur le code.</div><br>
<br>
<h3>Et le clavier ?</h3><br>
<br>
Il est possible d'arguer que toutes les souris ne possèdent pas de molette. Dans ce cas-là rien ne vous empêche d'utiliser le clavier pour dézoomer.<br>
Ici nous n'utiliserons le clavier que pour une chose : réintialiser la rotation de la scène avec la touche  <img src="./ogl_files/12035.png" alt="Image utilisateur">(<span class="courrier">SDLK_HOME</span> avec SDL).
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4976">Quelques bases de C++</h2>
		<div class="ss_part_texte">
		Maintenant que nous savons ce que nous voulons faire avec notre caméra, il faut faire un petit intermède apprentissage du C++.<br>
Nous allons en effet utiliser et regrouper toutes les fonctionnalités de notre caméra dans une <strong>classe</strong> : TrackBallCamera.<br>
<br>
Le cours de M@teo expliquera le concept des classes en détail. Voyons pour l'instant ça comme une extension d'une <strong><a href="http://www.siteduzero.com/tuto-3-4350-1-creez-vos-propres-types-de-variables.html">structure</a></strong>.<br>
<br>
Rappelez-vous en C un struct permettait de stocker plusieurs champs dans un même type :<br>
<br>
<span class="code">Code : C - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 c"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="syntax"><pre><span class="k">struct</span> <span class="n">NomDeVotreStructure</span>
<span class="p">{</span>
    <span class="kt">long</span> <span class="n">variable1</span><span class="p">;</span>
    <span class="kt">long</span> <span class="n">variable2</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">autreVariable</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">nombreDecimal</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Une classe possède, en plus des <strong>attributs</strong>, des <strong>méthodes</strong>. Ces méthodes sont comme des <strong>fonctions</strong> qui s'appliquent aux <strong>instances</strong> de cette classe.<br>
<br>
<br>
<div class="rmq question">Ouh là là beaucoup de mots nouveaux ! Instances par exemple c'est quoi ?</div><br>
Imaginons une classe nommée Chaise. Une chaise a certains attributs : hauteur, nombre de pieds, matière.<br>
On écrira donc :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Chaise</span>
<span class="p">{</span>
<span class="k">protected</span><span class="o">:</span>
        <span class="kt">int</span> <span class="n">hauteur</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">nombre_de_pieds</span><span class="p">;</span>
        <span class="n">string</span> <span class="n">matiere</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Une fois la classe déclarée, dans le c%u0153ur du programme on veut pouvoir en utiliser (des chaises). On crée donc des « instances » de la classe « Chaise » en déclarant simplement une variable de type Chaise.<br>
Exemple :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">Chaise</span> <span class="n">machaise</span><span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Notez qu'en C++ les structures et les classes sont automatiquement des types. Nul besoin donc d'écrire un <span class="courrier">typedef Class Chaise Chaise;</span> par exemple.</div><br>
<br>
Vous avez pu voir un mot bizarre dans mon exemple : <strong>protected</strong>. Sans rentrer dans le détail, cela veut dire que les attributs déclarés protected ne sont pas accessibles de l'extérieur de la classe mais uniquement par ses méthodes.<br>
<br>
<div class="rmq question">Les méthodes justement c'est quoi ?</div><br>
<br>
Une méthode est comme une fonction mais elle s'applique à une instance précise de la classe.<br>
Reprenons notre exemple de la chaise. Imaginons que nous voulions enlever un pied à notre chaise.<br>
En C nous aurions dû utiliser une fonction <span class="courrier">enleverPied</span> en passant en paramètre quelle chaise modifier.<br>
<br>
En C++ on appelle directement une méthode sur une instance de la classe.<br>
Exemple :<br>
<br>
<strong><span class="italique">La déclaration de la classe Chaise <span class="rouge">dans Chaise.h</span></span></strong><br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Chaise</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
        <span class="kt">void</span> <span class="n">enleverPied</span><span class="p">();</span>
<span class="k">protected</span><span class="o">:</span>
        <span class="kt">int</span> <span class="n">hauteur</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">nombre_de_pieds</span><span class="p">;</span>
        <span class="n">string</span> <span class="n">matiere</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<strong><span class="italique">L'implémentation des méthodes de la classe Chaise <span class="rouge">dans Chaise.cpp</span></span></strong><br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include "chaise.h"</span>

<span class="kt">void</span> <span class="n">Chaise</span><span class="o">::</span><span class="n">enleverPied</span><span class="p">()</span>
<span class="p">{</span>
        <span class="n">nombre_de_pieds</span><span class="o">--</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<strong><span class="italique">Appel dans le corps du programme</span></strong><br>
Et maintenant ce qui nous intéresse, l'appel de la méthode <span class="courrier">enleverPied</span> sur une instance :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="n">Chaise</span> <span class="n">machaise</span><span class="p">;</span>
<span class="n">machaise</span><span class="p">.</span><span class="n">enleverPied</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez on appelle une méthode comme on utiliserait un attribut : instance<span class="gros">.</span>laméthode();<br>
Quand le programme entre dans le code de la méthode il l'applique donc à l'instance souhaitée, et utilise donc les attributs propres à l'instance en question.<br>
<br>
<div class="rmq information">Notez qu'ici je mets la méthode en public et non protected pour pouvoir l'appeler de l'extérieur de la classe (c'est-à-dire à partir du corps du programme).</div><br>
<br>
<h4>Deux méthodes particulières</h4><br>
<br>
Il existe deux méthodes particulières qui ne sont pas appelées directement par l'utilisateur : le constructeur et le destructeur.<br>
<br>
Le <strong>constructeur </strong>est appelé lorsque l'objet est initialisé, généralement à sa déclaration.<br>
C'est une méthode sans type de retour, qui porte le nom de la classe, et qui permet d'initialiser les attributs à des valeurs initiales :<br>
<br>
Exemple :<br>
<br>
<strong><span class="italique">Déclaration du constructeur dans <span class="rouge">Chaise.h</span></span></strong><br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></td><td class="code"><div class="syntax"><pre><span class="n">Class</span> <span class="n">Chaise</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
        <span class="n">Chaise</span><span class="p">();</span> <span class="c">//un constructeur ne renvoit rien mais peut éventuellement avoir des paramètres</span>
        <span class="kt">void</span> <span class="n">enleverPied</span><span class="p">();</span>
<span class="k">protected</span><span class="o">:</span>
        <span class="kt">int</span> <span class="n">hauteur</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">nombre_de_pieds</span><span class="p">;</span>
        <span class="n">string</span> <span class="n">matiere</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<strong><span class="italique">Implémentation du constructeur dans <span class="rouge">Chaise.cpp</span></span></strong><br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="n">Chaise</span><span class="o">::</span><span class="n">Chaise</span><span class="p">()</span>
<span class="p">{</span>
        <span class="n">hauteur</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">nombre_de_pieds</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
        <span class="n">matiere</span> <span class="o">=</span> <span class="s">"bois"</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et donc ce constructeur sera appelé dès qu'on instanciera un objet dans le corps principal du programme :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="n">Chaise</span> <span class="n">machaise</span><span class="p">;</span> <span class="c">//déclenche l'appel du constructeur</span>
<span class="n">machaise</span><span class="p">.</span><span class="n">enleverPied</span><span class="p">();</span> <span class="c">//je sais donc que maintenant elle en a 3 car une chaise a 4 pieds au départ grâce au contructeur</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le <strong>destructeur</strong> quant à lui est appelé automatiquement quand on détruit l'objet. Dans le cas présent je n'ai rien de spécial à faire dans le destructeur, mais si nous avions alloué de la mémoire dynamiquement (attributs dynamiques de la classe), c'est dans le destructeur qu'il faut les détruire pour ne pas faire de fuite de mémoire. Comme le constructeur, le destructeur porte le nom de la classe précédé du symbole « <strong>~</strong> ». Ici je vais me contenter d'afficher un message lors de la destruction :<br>
<br>
<strong><span class="italique">Déclaration du destructeur dans <span class="rouge">Chaise.h</span></span></strong><br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></td><td class="code"><div class="syntax"><pre><span class="n">Class</span> <span class="n">Chaise</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
        <span class="n">Chaise</span><span class="p">();</span> <span class="c">//un constructeur ne renvoie rien mais peut éventuellement avoir des arguments</span>
        <span class="kt">void</span> <span class="n">enleverPied</span><span class="p">();</span>
        <span class="o">~</span><span class="n">Chaise</span><span class="p">();</span> <span class="c">//un destructeur ne renvoie rien, n'a pas d'arguments, et se précède du symbole ~</span>
<span class="k">protected</span><span class="o">:</span>
        <span class="kt">int</span> <span class="n">hauteur</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">nombre_de_pieds</span><span class="p">;</span>
        <span class="n">string</span> <span class="n">matiere</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<strong><span class="italique">Implémentation du destructeur dans <span class="rouge">Chaise.cpp</span></span></strong><br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="p">...</span>
<span class="n">Chaise</span><span class="o">::~</span><span class="n">Chaise</span><span class="p">()</span>
<span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Au revoir petite chaise."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Dans le corps du programme l'appel au destructeur est automatique à la fin du bloc où l'instance est déclarée.<br>
Exemple :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
        <span class="n">Chaise</span> <span class="n">machaise</span><span class="p">;</span> <span class="c">//appel du constructeur</span>
        <span class="n">machaise</span><span class="p">.</span><span class="n">enleverPied</span><span class="p">();</span> <span class="c">//la pauvre ça doit faire mal</span>

        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="c">//on quitte le bloc du main, donc on détruit toutes les variables -&gt; appel automatique du destructeur de Chaise sur l'instance machaise.</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Allocation dynamique</h3><br>
<br>
Si vous en êtes à la lecture du tuto OpenGL c'est que vous connaissez sûrement <a href="http://www.siteduzero.com/tuto-3-4830-1-l-allocation-dynamique.html">l'allocation dynamique</a> en C :<br>
<br>
<span class="code">Code : C - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 c"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="k">struct</span> <span class="n">Chaise</span> <span class="o">*</span> <span class="n">machaise</span><span class="p">;</span>
<span class="n">machaise</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Chaise</span><span class="p">));</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
En C++ on utilise généralement l'opérateur <strong>new</strong> comme ceci :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="n">Chaise</span> <span class="o">*</span> <span class="n">machaise</span><span class="p">;</span>
<span class="n">machaise</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Chaise</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On note ici l'utilisation des ( ) après Chaise qui montre clairement qu'on cherche à construire un objet. Une fois la mémoire allouée, le constructeur de la classe est donc automatiquement appelé.<br>
<br>
Pour la destruction, <strong>delete</strong> remplace le free que vous connaissez :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="syntax"><pre><span class="n">Chaise</span> <span class="o">*</span> <span class="n">machaise</span><span class="p">;</span>
<span class="n">machaise</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Chaise</span><span class="p">();</span>
<span class="n">machaise</span><span class="o">-&gt;</span><span class="n">enleverPied</span><span class="p">();</span>
<span class="k">delete</span> <span class="n">machaise</span><span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Représentation UML</h3><br>
<br>
Je ne vais pas vous faire un cours de modélisation <acronym title="Unified Modeling Language">UML</acronym> mais juste vous présenter une manière graphique de représenter une classe. J'utiliserai ce symbolisme tout au long du tuto pour résumer brièvement les fonctionnalités d'une classe :<br>
<br>
<div class="centre"><img src="./ogl_files/12036.png" alt="Image utilisateur"></div><br>
<br>
Ce qui donne par exemple pour reprendre notre chère chaise :<br>
<br>
<div class="centre"><img src="./ogl_files/12037.png" alt="Image utilisateur"></div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4975">Implémentation de la caméra</h2>
		<div class="ss_part_texte">
		Nous allons implémenter la caméra TrackBall avec le concept de classe que nous venons de voir.<br>
Nous l'avons vu plus haut il nous faut gérer trois types d'événements :<br>
<ul>
<li>l'appui sur le bouton gauche de la souris : nous n'activerons le mouvement à la souris que si ce bouton est enfoncé ;</li>
<li>le mouvement de la souris : pour changer l'orientation de la scène ;</li>
<li>l'appui sur la touche HOME pour remettre l'orientation de la scène à sa valeur initiale.</li>
</ul><br>
<br>
Dans le corps principal de notre programme SDL (partie suivante) nous devrons donc envoyer les événements nécessaires au fonctionnement de la caméra.<br>
<br>
Vous savez comment placer une caméra manuellement avec <span class="courrier">gluLookAt</span>. Ici c'est la méthode <span class="courrier">look</span> de notre classe TrackBallCamera qui s'occupera d'appeler le <span class="courrier">gluLookAt</span> pour nous. Dans le code d'affichage de la scène nous n'aurons donc qu'à appeler cette méthode.<br>
<br>
Nous allons aussi rajouter deux autres méthodes pour configurer la sensibilité de notre caméra :<br>
<ul>
<li>setMotionSensivity : pour déterminer la vitesse de rotation de la scène en fonction du mouvement en pixel du curseur de la souris ;</li>
<li>setScrollSensivity : pour déterminer de combien zoomer/dézoomer lorsque l'on utilise la molette de la souris.</li>
</ul><br>
<br>
Tout cela se traduit donc de la façon suivante en UML et C++ :<br>
<br>
&lt;tableau&gt;<br>
&lt;ligne&gt;<br>
&lt;entete&gt;UML simplifié&lt;/entete&gt;<br>
&lt;entete&gt;Déclaration C++&lt;/entete&gt;<br>
&lt;/ligne&gt;<br>
&lt;ligne&gt;<br>
&lt;cellule&gt;<img src="./ogl_files/12038.png" alt="Image utilisateur">&lt;/cellule&gt;<br>
&lt;cellule&gt;<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</pre></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">TrackBallCamera</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">TrackBallCamera</span><span class="p">();</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">OnMouseMotion</span><span class="p">(</span><span class="k">const</span> <span class="n">SDL_MouseMotionEvent</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">event</span><span class="p">);</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">OnMouseButton</span><span class="p">(</span><span class="k">const</span> <span class="n">SDL_MouseButtonEvent</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">event</span><span class="p">);</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">OnKeyboard</span><span class="p">(</span><span class="k">const</span> <span class="n">SDL_KeyboardEvent</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">event</span><span class="p">);</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">look</span><span class="p">();</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">setMotionSensivity</span><span class="p">(</span><span class="kt">double</span> <span class="n">sensivity</span><span class="p">);</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">setScrollSensivity</span><span class="p">(</span><span class="kt">double</span> <span class="n">sensivity</span><span class="p">);</span>

    <span class="k">virtual</span> <span class="o">~</span><span class="n">TrackBallCamera</span><span class="p">();</span>
<span class="k">protected</span><span class="o">:</span>
    <span class="kt">double</span> <span class="n">_motionSensivity</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">_scrollSensivity</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">_hold</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">_distance</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">_angleY</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">_angleZ</span><span class="p">;</span>
    <span class="n">SDL_Cursor</span> <span class="o">*</span> <span class="n">_hand1</span><span class="p">;</span>
    <span class="n">SDL_Cursor</span> <span class="o">*</span> <span class="n">_hand2</span><span class="p">;</span>
<span class="p">};;</span>
</pre></div>
</td></tr></tbody></table></div>&lt;/cellule&gt;<br>
&lt;/ligne&gt;<br>
&lt;/tableau&gt;<br>
<br>
J'en ai profité pour rajouter tous les attributs que nous allons utiliser. Une petite explication s'impose donc :<br>
<ul>
<li><strong><span class="courrier">double _motionSensivity</span></strong> : utilisé pour stocker la sensibilité de la caméra aux mouvements de la souris ;</li>
<li><span class="courrier"><strong>double _scrollSensivity</strong></span> : sensibilité de la caméra au scroll de la souris (« pas » d'un déplacement) ;</li>
<li><span class="courrier"><strong>bool _hold</strong></span> : est-on actuellement en train de maintenir le bouton gauche de la souris enfoncé ?</li>
<li><span class="courrier"><strong>double _distance</strong></span> : distance entre la caméra et le centre de la scène ;</li>
<li><span class="courrier"><strong>double _angleY</strong></span> : angle de rotation verticale de la scène (en vert sur le schéma plus haut) ;</li>
<li><span class="courrier"><strong>double _angleZ</strong></span> : angle de rotation horizontale de la scène (donc autour de la verticale, en bleu sur le schéma).</li>
</ul><br>
<br>
Les deux derniers attributs sont les deux curseurs de la souris que nous utiliserons :<br>
<div class="centre"><img src="./ogl_files/12039.png" alt="Image utilisateur"></div><br>
<strong><span class="courrier">_hand1</span></strong> en temps normal, <span class="courrier"><strong>_hand2</strong></span> quand le bouton gauche de la souris est enfoncé.<br>
<br>
<div class="rmq information">Vous remarquerez au passage que je précède les attributs de la classe du symbole underscore « _ ». Cela permet dans l'implémentation des méthodes de distinguer plus rapidement variables temporaires (ou paramètres) et attributs. Vous n'êtes bien sûr pas forcés de suivre cette règle.</div><br>
<br>
<h3>Constructeur</h3><br>
<br>
Dans le constructeur nous allons simplement initialiser tous les attributs à des valeurs initiales connues. Il ne faut rien laisser qui puisse être utilisé sans avoir été initialisé.<br>
<br>
La partie la moins évidente est peut-être la création des deux curseurs. Pour faciliter les choses j'ai relégué tout le travail dans une fonction rajoutée à <span class="italique">sdlglutils</span> : <span class="courrier">cursorFromXPM</span> (fournie dans l'archive finale).<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67</pre></td><td class="code"><div class="syntax"><pre><span class="n">TrackBallCamera</span><span class="o">::</span><span class="n">TrackBallCamera</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">hand1</span><span class="p">[]</span> <span class="o">=</span>
        <span class="p">{</span>
            <span class="c">/* width height num_colors chars_per_pixel */</span>
            <span class="s">" 16 16 3 1 "</span><span class="p">,</span>
            <span class="c">/* colors */</span>
            <span class="s">"X c #000000"</span><span class="p">,</span>
            <span class="s">". c #ffffff"</span><span class="p">,</span>
            <span class="s">"  c None"</span><span class="p">,</span>
            <span class="c">/* pixels */</span>
            <span class="s">"       XX       "</span><span class="p">,</span>
            <span class="s">"   XX X..XXX    "</span><span class="p">,</span>
            <span class="s">"  X..XX..X..X   "</span><span class="p">,</span>
            <span class="s">"  X..XX..X..X X "</span><span class="p">,</span>
            <span class="s">"   X..X..X..XX.X"</span><span class="p">,</span>
            <span class="s">"   X..X..X..X..X"</span><span class="p">,</span>
            <span class="s">" XX X.......X..X"</span><span class="p">,</span>
            <span class="s">"X..XX..........X"</span><span class="p">,</span>
            <span class="s">"X...X.........X "</span><span class="p">,</span>
            <span class="s">" X............X "</span><span class="p">,</span>
            <span class="s">"  X...........X "</span><span class="p">,</span>
            <span class="s">"  X..........X  "</span><span class="p">,</span>
            <span class="s">"   X.........X  "</span><span class="p">,</span>
            <span class="s">"    X.......X   "</span><span class="p">,</span>
            <span class="s">"     X......X   "</span><span class="p">,</span>
            <span class="s">"     X......X   "</span><span class="p">,</span>
            <span class="s">"0,0"</span>
        <span class="p">};</span>

    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">hand2</span><span class="p">[]</span> <span class="o">=</span>
        <span class="p">{</span>
            <span class="c">/* width height num_colors chars_per_pixel */</span>
            <span class="s">" 16 16 3 1 "</span><span class="p">,</span>
            <span class="c">/* colors */</span>
            <span class="s">"X c #000000"</span><span class="p">,</span>
            <span class="s">". c #ffffff"</span><span class="p">,</span>
            <span class="s">"  c None"</span><span class="p">,</span>
            <span class="c">/* pixels */</span>
            <span class="s">"                "</span><span class="p">,</span>
            <span class="s">"                "</span><span class="p">,</span>
            <span class="s">"                "</span><span class="p">,</span>
            <span class="s">"                "</span><span class="p">,</span>
            <span class="s">"    XX XX XX    "</span><span class="p">,</span>
            <span class="s">"   X..X..X..XX  "</span><span class="p">,</span>
            <span class="s">"   X........X.X "</span><span class="p">,</span>
            <span class="s">"    X.........X "</span><span class="p">,</span>
            <span class="s">"   XX.........X "</span><span class="p">,</span>
            <span class="s">"  X...........X "</span><span class="p">,</span>
            <span class="s">"  X...........X "</span><span class="p">,</span>
            <span class="s">"  X..........X  "</span><span class="p">,</span>
            <span class="s">"   X.........X  "</span><span class="p">,</span>
            <span class="s">"    X.......X   "</span><span class="p">,</span>
            <span class="s">"     X......X   "</span><span class="p">,</span>
            <span class="s">"     X......X   "</span><span class="p">,</span>
            <span class="s">"0,0"</span>
        <span class="p">};</span>
    <span class="n">_hand1</span> <span class="o">=</span> <span class="n">cursorFromXPM</span><span class="p">(</span><span class="n">hand1</span><span class="p">);</span> <span class="c">//création du curseur normal</span>
    <span class="n">_hand2</span> <span class="o">=</span> <span class="n">cursorFromXPM</span><span class="p">(</span><span class="n">hand2</span><span class="p">);</span> <span class="c">//création du curseur utilisé quand le bouton est enfoncé</span>
    <span class="n">SDL_SetCursor</span><span class="p">(</span><span class="n">_hand1</span><span class="p">);</span> <span class="c">//activation du curseur normal</span>
    <span class="n">_hold</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="c">//au départ on part du principe que le bouton n'est pas maintenu</span>
    <span class="n">_angleY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">_angleZ</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">_distance</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c">//distance initiale de la caméra avec le centre de la scène</span>
    <span class="n">_motionSensivity</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">;</span>
    <span class="n">_scrollSensivity</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">Comme vous pouvez le voir, le constructeur fait appel à une fonction SDL, SDL_SetCursor, qui ne doit pas être exécutée avant la création de votre fenêtre SDL. De ce fait la caméra ne devra être créée qu'après l'initialisation de l'application.</div><br>
<br>
<h3>On Mouse Motion</h3><br>
<br>
Cette méthode est la plus importante de la classe et pourtant l'une des plus courtes. Rappelez-vous le principe de la caméra : lorsque le curseur de la souris est bougé, si le bouton gauche de la souris est maintenu appuyé, alors la scène tourne. Voyons donc comment cela se traduit en code :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">TrackBallCamera</span><span class="o">::</span><span class="n">OnMouseMotion</span><span class="p">(</span><span class="k">const</span> <span class="n">SDL_MouseMotionEvent</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_hold</span><span class="p">)</span> <span class="c">//si nous maintenons le bouton gauche enfoncé</span>
    <span class="p">{</span>
        <span class="n">_angleZ</span> <span class="o">+=</span> <span class="n">event</span><span class="p">.</span><span class="n">xrel</span><span class="o">*</span><span class="n">_motionSensivity</span><span class="p">;</span> <span class="c">//mouvement sur X de la souris -&gt; changement de la rotation horizontale</span>
        <span class="n">_angleY</span> <span class="o">+=</span> <span class="n">event</span><span class="p">.</span><span class="n">yrel</span><span class="o">*</span><span class="n">_motionSensivity</span><span class="p">;</span> <span class="c">//mouvement sur Y de la souris -&gt; changement de la rotation verticale</span>
        <span class="c">//pour éviter certains problèmes, on limite la rotation verticale à des angles entre -90° et 90°</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_angleY</span> <span class="o">&gt;</span> <span class="mi">90</span><span class="p">)</span>
            <span class="n">_angleY</span> <span class="o">=</span> <span class="mi">90</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">_angleY</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">90</span><span class="p">)</span>
            <span class="n">_angleY</span> <span class="o">=</span> <span class="o">-</span><span class="mi">90</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>On Mouse Button</h3><br>
<br>
Cette méthode nous permet de gérer deux choses :<br>
<ul>
<li>l'appui et le relâchement du bouton gauche de la souris ;</li>
<li>le mouvement de la molette de la souris.</li>
</ul><br>
<br>
<div class="rmq information">Lorsque l'on bouge la molette, deux événements successifs sont générés : <span class="courrier">SDL_MOUSEBUTTONDOWN</span> et <span class="courrier">SDL_MOUSEBUTTONUP</span>. Nous n'utiliserons donc que le premier.</div><br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">TrackBallCamera</span><span class="o">::</span><span class="n">OnMouseButton</span><span class="p">(</span><span class="k">const</span> <span class="n">SDL_MouseButtonEvent</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">button</span> <span class="o">==</span> <span class="n">SDL_BUTTON_LEFT</span><span class="p">)</span> <span class="c">//l'événement concerne le bouton gauche</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">_hold</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">SDL_MOUSEBUTTONUP</span><span class="p">))</span> <span class="c">//relâchement alors qu'on était enfoncé</span>
        <span class="p">{</span>
            <span class="n">_hold</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="c">//le mouvement de la souris ne fera plus bouger la scène</span>
            <span class="n">SDL_SetCursor</span><span class="p">(</span><span class="n">_hand1</span><span class="p">);</span> <span class="c">//on met le curseur normal</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="o">!</span><span class="n">_hold</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">SDL_MOUSEBUTTONDOWN</span><span class="p">))</span> <span class="c">//appui alors qu'on était relâché</span>
        <span class="p">{</span>
            <span class="n">_hold</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c">//le mouvement de la souris fera bouger la scène</span>
            <span class="n">SDL_SetCursor</span><span class="p">(</span><span class="n">_hand2</span><span class="p">);</span> <span class="c">//on met le curseur spécial</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">event</span><span class="p">.</span><span class="n">button</span> <span class="o">==</span> <span class="n">SDL_BUTTON_WHEELUP</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">SDL_MOUSEBUTTONDOWN</span><span class="p">))</span> <span class="c">//coup de molette vers le haut</span>
    <span class="p">{</span>
        <span class="n">_distance</span> <span class="o">-=</span> <span class="n">_scrollSensivity</span><span class="p">;</span> <span class="c">//on zoome, donc rapproche la caméra du centre</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_distance</span> <span class="o">&lt;</span> <span class="mf">0.1</span><span class="p">)</span> <span class="c">//distance minimale, à changer si besoin (avec un attribut par exemple)</span>
            <span class="n">_distance</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">event</span><span class="p">.</span><span class="n">button</span> <span class="o">==</span> <span class="n">SDL_BUTTON_WHEELDOWN</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">SDL_MOUSEBUTTONDOWN</span><span class="p">))</span> <span class="c">//coup de molette vers le bas</span>
    <span class="p">{</span>
            <span class="n">_distance</span> <span class="o">+=</span> <span class="n">_scrollSensivity</span><span class="p">;</span> <span class="c">//on dézoome donc éloigne la caméra</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>OnKeyboard</h3><br>
<br>
La dernière méthode qui vient utiliser les événements est la gestion du clavier, pour l'appui sur la touche <span class="courrier">HOME</span>. On se contente d'y remettre la rotation de la scène à zéro :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">TrackBallCamera</span><span class="o">::</span><span class="n">OnKeyboard</span><span class="p">(</span><span class="k">const</span> <span class="n">SDL_KeyboardEvent</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">event</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">SDL_KEYDOWN</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">event</span><span class="p">.</span><span class="n">keysym</span><span class="p">.</span><span class="n">sym</span> <span class="o">==</span> <span class="n">SDLK_HOME</span><span class="p">))</span> <span class="c">//appui sur la touche HOME</span>
    <span class="p">{</span>
        <span class="n">_angleY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c">//remise à zéro des angles</span>
        <span class="n">_angleZ</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Look</h3><br>
<br>
Tout cela est bien beau, nous savons comment changer des variables avec la souris et le clavier mais ça ne fait en rien bouger la caméra dans notre scène. En effet nous n'avons pour l'instant pas vu la moindre commande OpenGL !<br>
Il est donc temps de s'y mettre avec la méthode<span class="courrier"> Look</span> qui viendra remplacer, dans votre fonction d'affichage, l'appel à <span class="courrier">gluLookAt</span>.<br>
<br>
<div class="rmq question">Remplacer <span class="courrier">gluLookAt</span> ? Parce qu'il y a un truc mieux que tu nous as caché !! ?</div><br>
<br>
Non non. La méthode Look appelle elle-même gluLookAt mais avec des paramètres qui dépendent de la position de la caméra, c'est pour ça que vous n'avez plus à l'appeler vous-mêmes.<br>
Si on se réfère aux schémas en début de chapitre qui expliquent le principe de la caméra TrackBall, on remarque plusieurs choses :<br>
<ul>
<li>elle regarde le centre de la scène ;</li>
<li>ce n'est pas la caméra mais la scène qui est tournée autour de Y et Z.</li>
</ul><br>
<br>
Il suffit alors de traduire tout ça en code :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">TrackBallCamera</span><span class="o">::</span><span class="n">look</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">gluLookAt</span><span class="p">(</span><span class="n">_distance</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span>
              <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span>
              <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="c">// la caméra regarde le centre (0,0,0) et est sur l'axe X à une certaine distance du centre donc (_distance,0,0)</span>
    <span class="n">glRotated</span><span class="p">(</span><span class="n">_angleY</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">//la scène est tournée autour de l'axe Y</span>
    <span class="n">glRotated</span><span class="p">(</span><span class="n">_angleZ</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="c">//la scène est tournée autour de l'axe Z</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et voilà ce n'était vraiment pas sorcier.<br>
La dernière chose qu'il nous reste à faire dans le code même de la caméra est une destruction propre de ce qui a été alloué dynamiquement.<br>
<br>
<h3>Destructeur</h3><br>
<br>
Les seules choses allouées dynamiquement sont les curseurs qu'il nous faut détruire quand la caméra est détruite :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="n">TrackBallCamera</span><span class="o">::~</span><span class="n">TrackBallCamera</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">SDL_FreeCursor</span><span class="p">(</span><span class="n">_hand1</span><span class="p">);</span> <span class="c">//destruction du curseur normal</span>
    <span class="n">SDL_FreeCursor</span><span class="p">(</span><span class="n">_hand2</span><span class="p">);</span> <span class="c">//destruction du curseur spécial</span>
    <span class="n">SDL_SetCursor</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span> <span class="c">//on remet le curseur par défaut.</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4974">Scène de test</h2>
		<div class="ss_part_texte">
		Le code de la classe TrackBallCamera est complet et n'a besoin de rien de plus. Cependant un objet camera ne va pas recevoir tout seul les événements, il faut les lui donner. Nous allons donc voir avec une petite scène de test simple comment utiliser la caméra que nous venons de créer. Pour faire original et pas du tout inspiré de Google Earth, nous allons créer une sphère avec la texture de de la Terre. Hum hum ! <img src="./ogl_files/siffle.png" alt=":-°" class="smilies"><br>
<br>
En variables globales nous allons donc utiliser :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="n">GLuint</span> <span class="n">earth</span><span class="p">;</span> <span class="c">//l'identifiant de la texture de la Terre</span>
<span class="n">TrackBallCamera</span> <span class="o">*</span> <span class="n">camera</span><span class="p">;</span> <span class="c">//un pointeur vers notre caméra</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Pourquoi pas directement une caméra ?</div><br>
<br>
Rappelez-vous, le constructeur appelle des fonctions SDL qui nécessitent qu'une fenêtre SDL existe déjà. Il ne faut donc pas que la caméra soit construite dès le lancement du programme (ce qui serait le cas ici si nous n'utilisions pas de pointeur). Nous la créons donc dynamiquement  après la fenêtre :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="syntax"><pre><span class="n">atexit</span><span class="p">(</span><span class="n">stop</span><span class="p">);</span> <span class="c">//stop() sera appelé quand on fera exit(0);</span>
<span class="c">//...</span>
        <span class="n">SDL_SetVideoMode</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">SDL_OPENGL</span><span class="p">);</span>
<span class="c">//...</span>
        <span class="n">earth</span> <span class="o">=</span> <span class="n">loadTexture</span><span class="p">(</span><span class="s">"EarthMap.jpg"</span><span class="p">);</span>
        <span class="n">camera</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TrackBallCamera</span><span class="p">();</span>
        <span class="n">camera</span><span class="o">-&gt;</span><span class="n">setScrollSensivity</span><span class="p">(</span><span class="mf">0.1</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme la caméra a été créée dynamiquement c'est à nous de la détruire proprement à la fin de l'exécution du programme. C'est ce qu'on fait dans la fonction stop, appelée quand on fera exit(0); dans le corps du programme :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">stop</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">delete</span> <span class="n">camera</span><span class="p">;</span> <span class="c">//destruction de la caméra allouée dynamiquement</span>
    <span class="n">SDL_Quit</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme je vous l'ai dit plus haut, la caméra ne recevra pas les événements clavier/souris si on ne les lui donne pas. C'est pourquoi dans notre partie de gestion des événements, il faut donner à la caméra les événements dont on ne se sert pas  :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29</pre></td><td class="code"><div class="syntax"><pre><span class="k">while</span><span class="p">(</span><span class="n">SDL_PollEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">event</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">switch</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="nl">SDL_QUIT:</span>
                <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="nl">SDL_KEYDOWN:</span>
                <span class="k">switch</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">key</span><span class="p">.</span><span class="n">keysym</span><span class="p">.</span><span class="n">sym</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">case</span> <span class="nl">SDLK_p:</span>
                    <span class="n">takeScreenshot</span><span class="p">(</span><span class="s">"test.bmp"</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="nl">SDLK_ESCAPE:</span>
                    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>
                    <span class="k">default</span> <span class="o">:</span> <span class="c">//on a utilisé la touche P et la touche ECHAP, le reste est donné à la caméra</span>
                    <span class="n">camera</span><span class="o">-&gt;</span><span class="n">OnKeyboard</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">key</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="nl">SDL_MOUSEMOTION:</span> <span class="c">//la souris est bougée, ça n'intéresse que la caméra</span>
                <span class="n">camera</span><span class="o">-&gt;</span><span class="n">OnMouseMotion</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">motion</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="nl">SDL_MOUSEBUTTONUP:</span>
                <span class="k">case</span> <span class="nl">SDL_MOUSEBUTTONDOWN:</span>
                <span class="n">camera</span><span class="o">-&gt;</span><span class="n">OnMouseButton</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">button</span><span class="p">);</span> <span class="c">//tous les événements boutons (up ou down) sont donnés à la caméra</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La dernière chose qu'il nous reste à faire est de dessiner la scène, ici très basique.<br>
<br>
<div class="rmq attention">On n'appelle plus <span class="courrier">gluLookAt</span> nous-mêmes mais bien la méthode <span class="courrier">Look</span> de notre objet camera.</div><br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">DrawGL</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">glClear</span><span class="p">(</span> <span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span> <span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_MODELVIEW</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>

    <span class="n">camera</span><span class="o">-&gt;</span><span class="n">look</span><span class="p">();</span>

    <span class="n">GLUquadric</span><span class="o">*</span> <span class="n">params</span> <span class="o">=</span> <span class="n">gluNewQuadric</span><span class="p">();</span>
    <span class="n">gluQuadricTexture</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="n">GL_TRUE</span><span class="p">);</span>
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span><span class="n">earth</span><span class="p">);</span>
    <span class="n">gluSphere</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">);</span>
    <span class="n">gluDeleteQuadric</span><span class="p">(</span><span class="n">params</span><span class="p">);</span>

    <span class="n">glFlush</span><span class="p">();</span>
    <span class="n">SDL_GL_SwapBuffers</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="centre"><img src="./ogl_files/4109.jpg" alt="Image utilisateur"></div><br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/trackball.avi">Téléchargez la vidéo au format avi/Xvid (1.17 Mo)</a></span></div><br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/sdlgl_08_trackball.zip">Téléchargez le projet Code::Blocks, l'exécutable Windows et le Makefile Unix (1.30 Mo)</a></span></div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Et voilà finie la prise de tête de prévoir à l'avance comment placer la caméra pour bien voir votre scène !<br>
<br>
Dans la chapitre suivant nous verrons une caméra encore plus intéressante mais un peu plus dure à implémenter : la caméra <strong>FreeFly</strong> qui nous permettra de voler librement dans notre scène.
	</div>
	
	<hr>
	<h1 id="chap_4988">Contrôle avancé de la caméra (Partie 2/2)</h1>
	<div id="chap_intro">
	Dans cette seconde partie sur le contrôle avancé de la caméra, nous allons voir un autre type de caméra : la caméra <strong>FreeFly</strong>. Nous ne verrons pas de nouveau concept C++ mais cette caméra requiert un peu plus de maths que la précédente.  Heureusement pour vous j'ai créé une annexe mathématique rien que pour ce chapitre mais qui peut vous être utile tout le temps : <a href="http://www.siteduzero.com/tuto-3-8528-1-la-trigonometrie.html">la trigonométrie</a>.<br>
Encore une fois deux lectures sont possibles pour ce chapitre donc ne paniquez pas si les mathématiques utilisées vous dépassent. Il est tout à fait possible de voir la caméra uniquement comme une nouvelle fonctionnalité. Comprendre son principe et son utilisation dans une scène de test est alors amplement suffisant.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4987">Principe d'une caméra FreeFly</h2>
		<div class="ss_part_texte">
		Une caméra <strong>FreeFly</strong>, comme son nom l'indique, permet de se déplacer/voler librement dans une scène. On retrouve parfois ce type de caméra sous des appellations incomplètes comme FreeLook, voire erronée comme FPS (First Person Shooter). FreeLook ne donne pas la même idée de déplacement, caractéristique importante de la caméra FreeFly. Une caméra FPS quant à elle est plus complexe car assujettie à la gravité, à des déplacements contraints (celui du personnage que l'on incarne), etc.<br>
<br>
Quoi qu'il en soit, le principe est exactement le même que dans <strong>Counter Strike</strong>, quand on est mort (certains plus souvent que d'autres  <img src="./ogl_files/clin.png" alt=";)" class="smilies"> ) et qu'on se balade librement dans la map pour regarder la fin de la partie.<br>
<br>
<div class="centre"><img src="./ogl_files/12269.jpg" alt="Image utilisateur"><br>
<span class="italique">Caméra FreeFly (FreeLook) dans Counter Strike</span></div><br>
<br>
<h3>Gestion du regard à la souris</h3><br>
<br>
Pour pouvoir regarder tout autour de nous, nous allons utiliser les mouvements de la souris pour orienter la caméra :<br>
<ul>
<li>un mouvement horizontal de la souris fait tourner la caméra horizontalement autour de la verticale du monde (regard à gauche et à droite) ;</li>
<li>un mouvement vertical de la souris fait tourner la caméra verticalement (le regard se lève ou se baisse).</li>
</ul><br>
<br>
Ces mouvements sont illustrés par les schémas ci-dessous (réutilisation des noms des angles propres aux <a href="http://www.siteduzero.com/tuto-3-8528-1-la-trigonometrie.html#ss_part_3">coordonnées sphériques</a>) :<br>
<br>
<div class="centre"><img src="./ogl_files/12270.png" alt="Image utilisateur"><br>
<span class="italique">Mouvement horizontal de la souris (schéma vu du dessus)</span></div><br>
<br>
<div class="centre"><img src="./ogl_files/12271.png" alt="Image utilisateur"><br>
<span class="italique">Mouvement vertical de la souris (schéma vu de côté)</span></div><br>
<br>
<h3>Gestion du déplacement  au clavier</h3><br>
<br>
La souris nous permet d'orienter la caméra par rapport aux axes X, Y, Z locaux, le clavier quant à lui va nous permettre de déplacer la caméra selon l'orientation actuelle :<br>
<ul>
<li>2 touches nous permettent de faire <strong>avancer/reculer</strong> la caméra ;</li>
<li>2 touches nous permettent de faire <strong>strafer</strong> (déplacement latéral) la caméra.</li>
</ul><br>
<br>
J'ai choisi d'utiliser les touches ZQSD, utilisées de façon presque standard pour ce genre de mouvement sur un clavier AZERTY :<br>
<br>
<div class="centre"><img src="./ogl_files/12272.png" alt="Image utilisateur"><br>
<span class="italique">Mouvement avant/arrière</span></div><br>
<br>
<div class="centre"><img src="./ogl_files/12273.png" alt="Image utilisateur"></div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4986">Gestion fluide du mouvement</h2>
		<div class="ss_part_texte">
		Pour l'instant en suivant mon tutoriel, nous avons utilisé les événements pour :<br>
<ul>
<li>faire bouger notre grue dans le <a href="http://www.siteduzero.com/tuto-3-6304-1-les-transformations.html#ss_part_4">chapitre sur les transformations</a> ;</li>
<li>faire tourner la caméra dans le <a href="http://www.siteduzero.com/tuto-3-9174-1-controle-avance-de-la-camera-partie-1-2.html">chapitre précédent</a> sur la caméra TrackBall.</li>
</ul><br>
<br>
Nous utiliserons le même système de mouvement à la souris, donc l'utilisation des <span class="courrier">SDL_MouseMotionEvent</span> pour orienter la caméra.<br>
Pour notre grue, la ruse de l'animation était basée sur l'activation de la répétition des touches avec <span class="courrier">SDL_EnableKeyRepeat</span>. La vitesse du mouvement était donc dépendante de la vitesse de répétition des touches, ce qui pose trois problèmes :<br>
<ul>
<li>si le taux de répétition des touches est trop faible le mouvement est saccadé ;</li>
<li>utiliser l'événement d'appui sur une touche à son apparition empêche de pouvoir utiliser plusieurs touches en même temps ;</li>
<li>le mouvement n'est pas réellement lié au temps écoulé.</li>
</ul><br>
<br>
Dans le cadre de notre petite grue sans prétention tout cela était tout à fait tolérable, ici nous rentrons dans un domaine différent : le contrôle de la vue 3D. Les personnes habituées aux <acronym title="First Person Shooter">FPS</acronym> ne se rendent peut-être pas compte que la manière avec laquelle ils se déplacent peut vite donner la nausée à un spectateur non habitué. La <strong>fluidité du mouvement</strong> de la caméra est donc primordiale ici.<br>
<br>
<h3>Les KeyStates</h3><br>
<br>
Je vous l'ai dit juste avant, utiliser l'événement clavier juste à son apparition n'est pas la bonne solution pour gérer un déplacement fluide.<br>
Nous allons donc nous contenter de mettre à jour un <strong>tableau</strong> interne de l'<strong>état des touches</strong> qui nous intéressent.<br>
<br>
Par exemple si la touche <span class="courrier">SDLK_z</span> nous intéresse et que l'on reçoit un événement <span class="courrier">SDL_KEYDOWN</span>, nous mettrons la case <span class="courrier">SDLK_z</span> de notre tableau de booléens à <span class="courrier">true</span>, pour indiquer qu'elle est actuellement enfoncée.<br>
De même sur la réception d'un événement <span class="courrier">SDL_KEYUP</span> avec la touche <span class="courrier">SDLK_z</span>, nous mettrons la case correspondante du tableau à <span class="courrier">false</span> pour indiquer qu'elle n'est pas/plus enfoncée.<br>
<br>
<div class="rmq question">Comment faire correspondre un nom de touche avec un indice dans un tableau ?</div><br>
<br>
Nous allons pour cela utiliser ce que l'on appelle, comme en PHP, un tableau associatif. Au lieu de faire mon_tableau[indice_numérique] nous ferons mon_tableau_associatif[clé]. L'outil en C++ qui permet de faire cela est appelé une <strong>map</strong>. On la définit par les deux types qu'elle utilise, le type pour la clé (la clé est ce qui remplace l'indice numérique, bien qu'elle puisse être numérique aussi <img src="./ogl_files/smile.png" alt=":)" class="smilies"> ), et le type de la valeur à stocker.<br>
Dans notre cas, nous souhaitons stocker des booléens (bool) indiquant si une touche (SDLKey) est actuellement enfoncée ou non.<br>
Cela correspond donc à la map suivante :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">SDLKey</span><span class="p">,</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">KeyStates</span><span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On peut l'utiliser ainsi :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="n">Keystates</span> <span class="n">keystates</span><span class="p">;</span> <span class="c">//déclaration d'une variable de type KeyStates</span>
<span class="n">keystates</span><span class="p">[</span><span class="n">SDLK_Z</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c">//association bidon, eh oui je n'ai pas recu d'événement comment je peux savoir ? :p )</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Configuration du clavier</h3><br>
<br>
Dans l'absolu on se fiche pas mal que la touche pour faire avancer soit la touche <span class="courrier">SDLK_z</span>. Ça pourrait être <span class="courrier">SDLK_i</span> qu'on s'en ficherait tout autant.  <img src="./ogl_files/siffle.png" alt=":-°" class="smilies"><br>
Ce que l'on veut savoir à n'importe quel moment c'est si la touche qui sert à faire avancer en avant (forward) est enfoncée ou non, quel que soit le choix du joueur/concepteur en ce qui concerne la configuration des touches.<br>
<br>
Nous allons donc utiliser un deuxième tableau associatif qui associera une <strong>action</strong> et la <strong>touche</strong> utilisée pour effectuer cette action. L'action sera nommée textuellement, comme « forward » pour aller en avant, et la touche sera le code de la SDLKey comme <span class="courrier">SDLK_z</span> (qui est en fait une valeur numérique mais on n'a pas besoin de le savoir).<br>
Cela correspond donc à la map suivante :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span><span class="n">SDLKey</span><span class="o">&gt;</span> <span class="n">KeyConf</span><span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On peut alors l'utiliser ainsi :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="n">KeyConf</span> <span class="n">keyconf</span><span class="p">;</span> <span class="c">//déclaration d'une variable de type KeyConf.</span>
<span class="n">keyconf</span><span class="p">[</span><span class="s">"forward"</span><span class="p">]</span> <span class="o">=</span> <span class="n">SDLK_z</span><span class="p">;</span> <span class="c">//ici je choisis d'utiliser la touche z pour l'action forward.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On peut alors tout à fait imaginer charger la configuration des touches <span class="italique">via</span> un fichier de configuration ou même demander à l'utilisateur quelles touches utiliser. Ces deux techniques ne seront pas enseignées ici car dépassent le cadre du tuto OpenGL. Nous utiliserons juste une affectation action/touche comme dans l'exemple du dessus.<br>
<br>
Grâce à la combinaison de KeyStates et de notre configuration des touches, il est alors facile de définir si la touche pour réaliser une action donnée est enfoncée :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="syntax"><pre><span class="n">Keystates</span> <span class="n">keystates</span><span class="p">;</span>
<span class="n">KeyConf</span> <span class="n">keyconf</span><span class="p">;</span>
<span class="n">keyconf</span><span class="p">[</span><span class="s">"forward"</span><span class="p">]</span> <span class="o">=</span> <span class="n">SDLK_z</span><span class="p">;</span>
<span class="n">keystates</span><span class="p">[</span><span class="n">keyconf</span><span class="p">[</span><span class="s">"forward"</span><span class="p">]]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La partie <span class="courrier">keyconf["forward"]</span> vient récupérer la touche utilisée pour l'action « forward », cette touche sert de clé pour la map touche/booléen <span class="courrier">keystates</span>.<br>
<br>
<h3>Mouvement animé</h3><br>
<br>
Nous avons déjà réalisé un mouvement animé dès notre première scène 3D avec un cube.<br>
La boucle principale de notre programme était la suivante :<br>
<br>
<div class="centre"><img src="./ogl_files/12276.png" alt="Image utilisateur"><br>
<span class="italique">Structure de la boucle principale</span></div><br>
<br>
Ici nous ferons la même chose : un mouvement de la caméra qui dépend du <strong>temps écoulé</strong> mais aussi de l'<strong>état des touches</strong>.<br>
Par exemple nous ne ferons avancer la caméra que si la touche correspondante est enfoncée, ce qui donne en code :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="k">if</span> <span class="p">(</span><span class="n">keystates</span><span class="p">[</span><span class="n">keyconf</span><span class="p">[</span><span class="s">"forward"</span><span class="p">]])</span>
        <span class="n">position</span> <span class="o">+=</span> <span class="n">forward</span> <span class="o">*</span> <span class="p">(</span><span class="n">speed</span> <span class="o">*</span> <span class="n">timestep</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
où <span class="courrier">timestep</span> est le temps écoulé depuis la dernière image, <span class="courrier">speed</span> est la vitesse de déplacement, <span class="courrier">forward</span> est le vecteur d'orientation de la caméra (qui pointe là où elle regarde), et <span class="courrier">position</span> est la position de la caméra.<br>
<br>
<h3>Vector3D</h3><br>
<br>
<div class="rmq question">Mathématiquement je sais ce qu'est un vecteur mais ça existe en C++ ?</div><br>
<br>
À la base non. Mais rien ne nous empêche de le créer. D'ailleurs si vous avez déjà fait un peu de SDL, j'imagine que vous avez pu être amenés à créer des <span class="courrier">struct</span> ayant comme attributs x et y les positions de vos sprites à blitter.<br>
Quoiqu'il en soit ici des attributs (X,Y et Z) ne nous suffisent pas. Comme on l'a vu dans le code juste au-dessus, il nous faut pouvoir multiplier un vecteur par un nombre, additionner deux vecteurs, et un peu plus encore. Pour cela on utilise en C++ <strong>la surcharge d'opérateurs</strong> qui permet de redéfinir les opérations élémentaires comme l'addition, la multiplication pour un type (ici notre classe vecteur) non élémentaire.<br>
<br>
En définissant ainsi l'opérateur + comme méthode de notre classe, il est alors tout à fait possible dans le code, comme on le fait pour des nombres, de faire vecteur1 + vecteur2. Et mine de rien ça simplifiera beaucoup le code de la caméra.<br>
<br>
Voici la déclaration de la classe Vector3D que nous allons utiliser. Je vous la donne pour vous montrer la déclaration des opérateurs. L'implémentation en elle-même est triviale, car purement mathématique et je laisse les curieux aller la lire dans l'archive finale. Pour l'utiliser nous n'avons pas besoin de connaître les détails de l'implémentation.<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Vector3D</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">double</span> <span class="n">X</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">Y</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">Z</span><span class="p">;</span>

    <span class="n">Vector3D</span><span class="p">();</span>
    <span class="n">Vector3D</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="kt">double</span> <span class="n">y</span><span class="p">,</span><span class="kt">double</span> <span class="n">z</span><span class="p">);</span>
    <span class="n">Vector3D</span><span class="p">(</span><span class="k">const</span> <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">v</span><span class="p">);</span>
    <span class="n">Vector3D</span><span class="p">(</span><span class="k">const</span> <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">from</span><span class="p">,</span><span class="k">const</span> <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">to</span><span class="p">);</span>

    <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="k">operator</span><span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">v</span><span class="p">);</span>

    <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="k">operator</span><span class="o">+=</span> <span class="p">(</span><span class="k">const</span> <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">v</span><span class="p">);</span>
    <span class="n">Vector3D</span> <span class="k">operator</span><span class="o">+</span> <span class="p">(</span><span class="k">const</span> <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">v</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

    <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="k">operator</span><span class="o">-=</span> <span class="p">(</span><span class="k">const</span> <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">v</span><span class="p">);</span>
    <span class="n">Vector3D</span> <span class="k">operator</span><span class="o">-</span> <span class="p">(</span><span class="k">const</span> <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">v</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

    <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="k">operator</span><span class="o">*=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">);</span>
    <span class="n">Vector3D</span> <span class="k">operator</span><span class="o">*</span> <span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">)</span><span class="k">const</span><span class="p">;</span>
    <span class="k">friend</span> <span class="n">Vector3D</span> <span class="k">operator</span><span class="o">*</span> <span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">,</span><span class="k">const</span> <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">v</span><span class="p">);</span>

    <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="k">operator</span><span class="o">/=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">);</span>
    <span class="n">Vector3D</span> <span class="k">operator</span><span class="o">/</span> <span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">)</span><span class="k">const</span><span class="p">;</span>

    <span class="n">Vector3D</span> <span class="n">crossProduct</span><span class="p">(</span><span class="k">const</span> <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">v</span><span class="p">)</span><span class="k">const</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">length</span><span class="p">()</span><span class="k">const</span><span class="p">;</span>
    <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">normalize</span><span class="p">();</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Fluidité VS Molette</h3><br>
<br>
Il me reste une dernière chose à couvrir avant d'entrer dans l'implémentation de la caméra et cela concerne la molette. Vous l'avez vu dans la chapitre précédent, la molette se gère comme un bouton et on détecte que la molette a été montée si on reçoit un événement de type <span class="courrier">SDL_MOUSEBUTTONDOWN</span> sur le bouton <span class="courrier">SDL_BUTTON_WHEELUP</span>. Par conséquent si on bougeait sur cet événement on viendrait remettre en cause toute ma super théorie de fluidité quantique à convergence rétroactive !  <img src="./ogl_files/pinch.png" alt="Image utilisateur"><br>
<br>
Nous allons donc faire comme avec le clavier :<br>
<br>
<ul>
<li>sur détection d'un mouvement de la molette on met un booléen à <span class="courrier">true</span> ;</li>
<li>quand nous faisons bouger la caméra, si ce booléen vaut <span class="courrier">true</span> nous déplaçons verticalement la caméra en fonction du temps écoulé.</li>
</ul><br>
<br>
<div class="rmq question">Oui mais quand remet-on ce booléen à <span class="courrier">false</span> ?</div><br>
<br>
On ne peut pas le remettre à <span class="courrier">false</span> quand on détecte que la molette ne bouge plus car les événements <span class="courrier">SDL_MOUSEBUTTONDOWN</span> et <span class="courrier">SDL_MOUSEBUTTONUP</span> pour la molette sont consécutifs, on n'aurait donc aucun mouvement. On utilise donc le <strong>temps</strong> !<br>
<ul>
<li>Sur détection d'un mouvement de la molette on met un booléen à <span class="courrier">true</span> et une variable temps restant à 250 (ms, c'est un exemple).</li>
<li>Quand nous faisons bouger la caméra, si ce booléen vaut <span class="courrier">true</span> :<br>
<ul>
<li>on décrémente le temps restant du temps écoulé ;</li>
<li>si le temps restant est &lt; 0 alors on passe le booléen à <span class="courrier">false</span>.</li>
</ul></li>
</ul><br>
<br>
Nous allons bien sûr voir toutes ces techniques en pratique, appliquées à notre caméra FreeFly.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4985">Implémentation de la caméra</h2>
		<div class="ss_part_texte">
		Tout comme notre caméra TrackBall du chapitre précédent, nous allons implémenter la caméra FreeFly en C++ à l'aide d'une classe.<br>
<br>
Nous devons ici aussi gérer trois types d'événements :<br>
<ul>
<li>le mouvement de la souris : pour changer l'orientation de la caméra ;</li>
<li>le clavier : pour déplacer la caméra ;</li>
<li>la molette (qui se gère comme un clic de bouton) : pour faire monter/descendre la caméra.</li>
</ul><br>
<br>
Nous aurons une méthode <span class="courrier">look</span> dont l'appel viendra remplacer dans nos codes l'utilisation du <span class="courrier">gluLookAt</span> (appelé en interne par la méthode <span class="courrier">look</span> de toute façon).<br>
<br>
Nous allons aussi créer trois méthodes pour paramétrer la caméra :<br>
<ul>
<li>setSpeed : pour définir la vitesse de déplacement de la caméra ;</li>
<li>setSensivity : pour déterminer la vitesse de rotation de la caméra en fonction du mouvement en pixels du curseur de la souris ;</li>
<li>setPosition : pour placer précisément la caméra quand on le souhaite.</li>
</ul><br>
<br>
Nous introduirons aussi une dernière méthode, <span class="courrier">animate</span>, qui viendra gérer le mouvement fluide de la caméra, comme expliqué dans la partie précédente.<br>
<br>
Voici une traduction formelle de ce que je viens de dire rapidement :<br>
<br>
<table class="tab_user">


<thead><tr><th>UML simplifié</th><th>Déclaration C++</th></tr></thead><tbody><tr>
<td><img src="./ogl_files/12277.png" alt="Image utilisateur"></td>
<td><span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41</pre></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">FreeFlyCamera</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">FreeFlyCamera</span><span class="p">(</span><span class="k">const</span> <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">position</span> <span class="o">=</span> <span class="n">Vector3D</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">OnMouseMotion</span><span class="p">(</span><span class="k">const</span> <span class="n">SDL_MouseMotionEvent</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">event</span><span class="p">);</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">OnMouseButton</span><span class="p">(</span><span class="k">const</span> <span class="n">SDL_MouseButtonEvent</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">event</span><span class="p">);</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">OnKeyboard</span><span class="p">(</span><span class="k">const</span> <span class="n">SDL_KeyboardEvent</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">event</span><span class="p">);</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">animate</span><span class="p">(</span><span class="n">Uint32</span> <span class="n">timestep</span><span class="p">);</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">setSpeed</span><span class="p">(</span><span class="kt">double</span> <span class="n">speed</span><span class="p">);</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">setSensivity</span><span class="p">(</span><span class="kt">double</span> <span class="n">sensivity</span><span class="p">);</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">setPosition</span><span class="p">(</span><span class="k">const</span> <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">position</span><span class="p">);</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">look</span><span class="p">();</span>

    <span class="k">virtual</span> <span class="o">~</span><span class="n">FreeFlyCamera</span><span class="p">();</span>

<span class="k">protected</span><span class="o">:</span>
    <span class="kt">double</span> <span class="n">_speed</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">_sensivity</span><span class="p">;</span>

    <span class="n">Uint32</span> <span class="n">_timeBeforeStoppingVerticalMotion</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">_verticalMotionActive</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">_verticalMotionDirection</span><span class="p">;</span>

    <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">SDLKey</span><span class="p">,</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">KeyStates</span><span class="p">;</span>
    <span class="n">KeyStates</span> <span class="n">_keystates</span><span class="p">;</span>
    <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span><span class="n">SDLKey</span><span class="o">&gt;</span> <span class="n">Keyconf</span><span class="p">;</span>
    <span class="n">Keyconf</span> <span class="n">_keyconf</span><span class="p">;</span>

    <span class="n">Vector3D</span> <span class="n">_position</span><span class="p">;</span>
    <span class="n">Vector3D</span> <span class="n">_target</span><span class="p">;</span>
    <span class="n">Vector3D</span> <span class="n">_forward</span><span class="p">;</span>
    <span class="n">Vector3D</span> <span class="n">_left</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">_theta</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">_phi</span>

    <span class="kt">void</span> <span class="n">VectorsFromAngles</span><span class="p">();</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div></td>
</tr></tbody></table><br>
<br>
Décryptons ensemble tous les attributs dont nous allons avoir besoin :<br>
<ul>
<li><strong><span class="courrier">double _speed</span></strong> : vitesse de déplacement de la caméra ;</li>
<li><strong><span class="courrier">double _sensivity</span></strong> : sensibilité de la caméra aux mouvements de la souris ;</li>
<li><strong><span class="courrier">Uint32 _timeBeforeStoppingVerticalMotion</span></strong> : si un mouvement vertical (à la molette) est en cours, combien de temps reste-t-il avant de l'arrêter ?</li>
<li><strong><span class="courrier">bool _verticalMotionActive</span></strong> : y a-t-il un mouvement vertical en cours ?</li>
<li><strong><span class="courrier">int _verticalMotionDirection</span></strong> : sens du mouvement vertical quand il a été déclenché à la molette (+1 vers la haut, -1 vers le bas) ;</li>
<li><strong><span class="courrier">KeyStates _keystates</span></strong> : tableau donnant l'<strong>état</strong> des touches <strong>utilisées</strong> ;</li>
<li><strong><span class="courrier">Keyconf _keyconf</span></strong> : tableau donnant les <strong>touches</strong> à utiliser pour chaque <strong>action</strong> ;</li>
<li><strong><span class="courrier">Vector3D _position</span></strong> : position de la caméra dans l'absolu ;</li>
<li><strong><span class="courrier">Vector3D _target</span></strong> : point regardé par la caméra dans l'absolu ;</li>
<li><strong><span class="courrier">Vector3D _forward</span></strong> : vecteur donnant la direction du regard (et donc du déplacement vers l'avant) ;</li>
<li><strong><span class="courrier">Vector3D _left</span></strong> : vecteur perpendiculaire au regard pour le déplacement latéral ;</li>
<li><strong><span class="courrier">double _theta</span></strong> : angle de rotation horizontale de la caméra (autour de la verticale) ;</li>
<li><strong><span class="courrier">double _phi</span></strong> : angle de rotation verticale de la caméra.</li>
</ul><br>
<br>
On remarque aussi, dans le schéma UML comme dans la déclaration de la classe, une méthode protégée (non publique) : <span class="courrier">VectorsFromAngles</span>. Cette méthode viendra calculer les vecteurs <span class="courrier">_forward</span> et <span class="courrier">_left</span> en fonction des nouvelles valeurs de <span class="courrier">_theta</span> et <span class="courrier">_phi</span>.<br>
<br>
<h3>Constructeur</h3><br>
<br>
Vous l'avez vu dans l'implémentation, le constructeur possède un paramètre facultatif : la position initiale de la caméra. Si on ne la spécifie pas, elle sera en (0,0,0) au départ.<br>
Le code n'est pas passionnant, juste de l'initialisation des attributs :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="syntax"><pre><span class="n">FreeFlyCamera</span><span class="o">::</span><span class="n">FreeFlyCamera</span><span class="p">(</span><span class="k">const</span> <span class="n">Vector3D</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">position</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">_position</span> <span class="o">=</span> <span class="n">position</span><span class="p">;</span> <span class="c">//si aucune position n'est définie on reçoit quand même (0,0,0) en paramètre</span>
    <span class="n">_phi</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">_theta</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">VectorsFromAngles</span><span class="p">();</span> <span class="c">//décrit un peu plus loin</span>

    <span class="n">_speed</span> <span class="o">=</span> <span class="mf">0.01</span><span class="p">;</span>
    <span class="n">_sensivity</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">;</span>
    <span class="n">_verticalMotionActive</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="c">//Initialisation de la configuration des touches</span>
    <span class="n">_keyconf</span><span class="p">[</span><span class="s">"forward"</span><span class="p">]</span> <span class="o">=</span> <span class="n">SDLK_z</span><span class="p">;</span>
    <span class="n">_keyconf</span><span class="p">[</span><span class="s">"backward"</span><span class="p">]</span> <span class="o">=</span> <span class="n">SDLK_s</span><span class="p">;</span>
    <span class="n">_keyconf</span><span class="p">[</span><span class="s">"strafe_left"</span><span class="p">]</span> <span class="o">=</span> <span class="n">SDLK_q</span><span class="p">;</span>
    <span class="n">_keyconf</span><span class="p">[</span><span class="s">"strafe_right"</span><span class="p">]</span> <span class="o">=</span> <span class="n">SDLK_d</span><span class="p">;</span>
    <span class="n">_keyconf</span><span class="p">[</span><span class="s">"boost"</span><span class="p">]</span> <span class="o">=</span> <span class="n">SDLK_LSHIFT</span><span class="p">;</span>
<span class="c">//Initialisation des KeyStates</span>
    <span class="n">_keystates</span><span class="p">[</span><span class="n">_keyconf</span><span class="p">[</span><span class="s">"forward"</span><span class="p">]]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="n">_keystates</span><span class="p">[</span><span class="n">_keyconf</span><span class="p">[</span><span class="s">"backward"</span><span class="p">]]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="n">_keystates</span><span class="p">[</span><span class="n">_keyconf</span><span class="p">[</span><span class="s">"strafe_left"</span><span class="p">]]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="n">_keystates</span><span class="p">[</span><span class="n">_keyconf</span><span class="p">[</span><span class="s">"strafe_right"</span><span class="p">]]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="n">_keystates</span><span class="p">[</span><span class="n">_keyconf</span><span class="p">[</span><span class="s">"boost"</span><span class="p">]]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

    <span class="n">SDL_WM_GrabInput</span><span class="p">(</span><span class="n">SDL_GRAB_ON</span><span class="p">);</span>
    <span class="n">SDL_ShowCursor</span><span class="p">(</span><span class="n">SDL_DISABLE</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Pourquoi ces deux dernières lignes ?</div><br>
<br>
Le but de notre caméra est de bouger le regard avec la souris en permanence. Nous utilisons donc l'information de <strong>déplacement relatif</strong> de la souris pour faire tourner d'autant la caméra. Que se passe-t-il si la souris quitte la fenêtre et re-rentre par un autre endroit ?<br>
<ol class="liste_1">
<li>Tout le temps où la souris sera en dehors de la fenêtre la caméra sera indirigeable, ça peut être pénible quand on est pas loin du bord.</li>
<li>Si la caméra revient dans la fenêtre par un autre côté, le déplacement relatif peut être énorme d'un coup et faire trop tourner la caméra, on ne comprendra plus ce que l'on regarde (changement trop brusque).</li></ol><br>
<br>
Par la <span class="souligne">combinaison</span> des deux lignes :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="n">SDL_WM_GrabInput</span><span class="p">(</span><span class="n">SDL_GRAB_ON</span><span class="p">);</span>
    <span class="n">SDL_ShowCursor</span><span class="p">(</span><span class="n">SDL_DISABLE</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
on vient demander à SDL d'interdire à la souris de quitter la fenêtre, mais en plus, quand le curseur est juste au bord de la fenêtre, de générer quand même des informations de déplacement relatif de la souris.<br>
<br>
<div class="rmq information">Ces deux commandes appelées par le constructeur de notre caméra nécessitent que la SDL soit initialisée. Il ne faut donc pas construire un objet FreeFlyCamera avant. Dans notre scène de test comme nous utiliserons la caméra en variable globale pour l'instant, nous utiliserons l'allocation dynamique (avec un <span class="courrier">new</span>) pour pallier ce problème.</div><br>
<br>
<h3>On Mouse Motion</h3><br>
<br>
Comme notre caméra est assurée de recevoir des événements de mouvement de la souris corrects, la méthode <span class="courrier">OnMouseMotion</span> est très simple :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">FreeFlyCamera</span><span class="o">::</span><span class="n">OnMouseMotion</span><span class="p">(</span><span class="k">const</span> <span class="n">SDL_MouseMotionEvent</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">_theta</span> <span class="o">-=</span> <span class="n">event</span><span class="p">.</span><span class="n">xrel</span><span class="o">*</span><span class="n">_sensivity</span><span class="p">;</span>
    <span class="n">_phi</span> <span class="o">-=</span> <span class="n">event</span><span class="p">.</span><span class="n">yrel</span><span class="o">*</span><span class="n">_sensivity</span><span class="p">;</span>
    <span class="n">VectorsFromAngles</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Pourquoi des signes « - » ?</div><br>
<br>
Les angles s'expriment dans le sens trigonométrique (sens inverse des aiguilles d'une montre). Un changement positif de _theta correspond donc à un mouvement « vers la gauche » de la souris, soit un déplacement négatif sur l'axe des X. Soustraire un nombre négatif revient à additionner son opposé donc nous retombons sur nos pattes.<br>
De même pour _phi, un changement positif correspond à un mouvement « vers le haut » de la souris, soit un déplacement négatif sur l'axe des Y (pour SDL).<br>
<br>
<h3>Vectors From Angles</h3><br>
<br>
À chaque fois que les angles sont changés, il faut recalculer le vecteur d'orientation de la caméra, <span class="courrier">_forward</span>, ainsi que le vecteur latéral <span class="courrier">_left</span>.<br>
Le vecteur <span class="courrier">_forward</span> permet de définir à la fois <strong>où regarder</strong>, <span class="courrier">_target</span>, et dans quelle direction <strong>avancer</strong>. Le vecteur <span class="courrier">_left</span> sert pour le mouvement latéral.<br>
<br>
Comme ce sont des vecteurs, ils donnent des directions et ne sont donc pas localisés à un endroit précis de l'espace. On peut donc réfléchir comme si nous étions en (0,0,0). De deux angles on veut passer aux coordonnées 3D d'un vecteur, hum...  <img src="./ogl_files/siffle.png" alt=":-°" class="smilies"> mais comme c'est bizarre... ça me fait penser étrangement aux coordonnées sphériques de l'<a href="http://www.siteduzero.com/tuto-3-8528-1-la-trigonometrie.html#ss_part_3">annexe de trigonométrie</a>. Comme c'est bizarre et pas du tout intentionnel...  <img src="./ogl_files/soleil.png" alt=":soleil:" class="smilies"><br>
<br>
<div class="centre"><img src="./ogl_files/12278.png" alt="Image utilisateur"><br>
<span class="italique">Rappel de l'utilisation des angles en coordonnées sphériques</span></div><br>
<br>
Nous appliquerons donc le calcul bête et méchant expliqué en annexe pour calculer le vecteur <span class="courrier">_forward</span> (équivalent du vecteur rouge sur le dessin du dessus). Ici nous réfléchissons sur des vecteurs unitaires (de longueur 1) donc le rayon de la « sphère » vaut 1.<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">FreeFlyCamera</span><span class="o">::</span><span class="n">VectorsFromAngles</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">const</span> <span class="n">Vector3D</span> <span class="n">up</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="c">//une constante, le vecteur vertical du monde, utilisé dans les calculs</span>
<span class="c">//On limite les valeurs de _phi, on vole certes, mais on en fait pas de loopings :p</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_phi</span> <span class="o">&gt;</span> <span class="mi">89</span><span class="p">)</span>
        <span class="n">_phi</span> <span class="o">=</span> <span class="mi">89</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">_phi</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">89</span><span class="p">)</span>
        <span class="n">_phi</span> <span class="o">=</span> <span class="o">-</span><span class="mi">89</span><span class="p">;</span>
<span class="c">//passage des coordonnées sphériques aux coordonnées cartésiennes</span>
    <span class="kt">double</span> <span class="n">r_temp</span> <span class="o">=</span> <span class="n">cos</span><span class="p">(</span><span class="n">_phi</span><span class="o">*</span><span class="n">M_PI</span><span class="o">/</span><span class="mi">180</span><span class="p">);</span>
    <span class="n">_forward</span><span class="p">.</span><span class="n">Z</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">_phi</span><span class="o">*</span><span class="n">M_PI</span><span class="o">/</span><span class="mi">180</span><span class="p">);</span>
    <span class="n">_forward</span><span class="p">.</span><span class="n">X</span> <span class="o">=</span> <span class="n">r_temp</span><span class="o">*</span><span class="n">cos</span><span class="p">(</span><span class="n">_theta</span><span class="o">*</span><span class="n">M_PI</span><span class="o">/</span><span class="mi">180</span><span class="p">);</span>
    <span class="n">_forward</span><span class="p">.</span><span class="n">Y</span> <span class="o">=</span> <span class="n">r_temp</span><span class="o">*</span><span class="n">sin</span><span class="p">(</span><span class="n">_theta</span><span class="o">*</span><span class="n">M_PI</span><span class="o">/</span><span class="mi">180</span><span class="p">);</span>
<span class="c">//diantre mais que fait ce passage ?</span>
    <span class="n">_left</span> <span class="o">=</span> <span class="n">up</span><span class="p">.</span><span class="n">crossProduct</span><span class="p">(</span><span class="n">_forward</span><span class="p">);</span>
    <span class="n">_left</span><span class="p">.</span><span class="n">normalize</span><span class="p">();</span>

<span class="c">//avec la position de la caméra et la direction du regard, on calcule facilement ce que regarde la caméra (la cible)</span>
    <span class="n">_target</span> <span class="o">=</span> <span class="n">_position</span> <span class="o">+</span> <span class="n">_forward</span><span class="p">;</span>
<span class="p">}}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le seul point flou qui peut subsister ici est le calcul du vecteur <span class="courrier">_left</span> pour le mouvement latéral.<br>
On utilise ici le produit vectoriel (méthode <span class="courrier">crossProduct </span>de la classe <span class="courrier">Vector3D</span>) pour calculer le vecteur <span class="courrier">_left</span>, <strong>perpendiculaire</strong> au plan formé par le vecteur <span class="courrier">_forward</span> avec la verticale. Ce vecteur doit ensuite être normalisé (on lui donne une longueur de 1) pour pouvoir être utilisé dans nos mouvements.<br>
Tout cela justifie donc les deux lignes :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="n">_left</span> <span class="o">=</span> <span class="n">up</span><span class="p">.</span><span class="n">crossProduct</span><span class="p">(</span><span class="n">_forward</span><span class="p">);</span>
    <span class="n">_left</span><span class="p">.</span><span class="n">normalize</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="centre"><img src="./ogl_files/12279.png" alt="Image utilisateur"><br>
<span class="italique"><span class="courrier">_left</span> est perpendiculaire au plan formé par<span class="courrier">_forward</span> avec la verticale</span></div><br>
<br>
<h3>On Mouse Button</h3><br>
<br>
La gestion de la molette est assez simple. Comme il a été vu dans la partie « Gestion fluide du mouvement », nous ne bougerons pas la caméra directement mais signalerons juste qu'il faut bouger.<br>
J'ai choisi de faire monter/descendre la caméra pendant 250 ms. Ce temps n'est <strong>pas</strong> à changer en fonction de la vitesse de la caméra, c'est le mouvement lui-même qui utilisera l'information de vitesse.<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">FreeFlyCamera</span><span class="o">::</span><span class="n">OnMouseButton</span><span class="p">(</span><span class="k">const</span> <span class="n">SDL_MouseButtonEvent</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">event</span><span class="p">.</span><span class="n">button</span> <span class="o">==</span> <span class="n">SDL_BUTTON_WHEELUP</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">SDL_MOUSEBUTTONDOWN</span><span class="p">))</span> <span class="c">//coup de molette vers le haut</span>
    <span class="p">{</span>
        <span class="n">_verticalMotionActive</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c">//on demande à activer le mouvement vertical</span>
        <span class="n">_timeBeforeStoppingVerticalMotion</span> <span class="o">=</span> <span class="mi">250</span><span class="p">;</span> <span class="c">//pendant 250 ms</span>
        <span class="n">_verticalMotionDirection</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c">//et vers le haut</span>

    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">event</span><span class="p">.</span><span class="n">button</span> <span class="o">==</span> <span class="n">SDL_BUTTON_WHEELDOWN</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">SDL_MOUSEBUTTONDOWN</span><span class="p">))</span> <span class="c">//coup de molette vers le bas</span>
    <span class="p">{</span>
        <span class="n">_verticalMotionActive</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c">//on demande à activer le mouvement vertical</span>
        <span class="n">_timeBeforeStoppingVerticalMotion</span> <span class="o">=</span> <span class="mi">250</span><span class="p">;</span> <span class="c">//pendant 250 ms</span>
        <span class="n">_verticalMotionDirection</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="c">//et vers le bas</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>On Keyboard</h3><br>
<br>
Dans la méthode OnKeyBoard, on va utiliser les KeyStates découverts plus haut et initialisés dans le constructeur. On pourrait utiliser des <span class="courrier">if</span>, ou un <span class="courrier">switch...case</span>, mais il y a plus simple :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">FreeFlyCamera</span><span class="o">::</span><span class="n">OnKeyboard</span><span class="p">(</span><span class="k">const</span> <span class="n">SDL_KeyboardEvent</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">event</span><span class="p">)</span>
<span class="p">{</span>
<span class="c">//on parcourt tous les keystates actuels</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">KeyStates</span><span class="o">::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">_keystates</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span><span class="n">it</span> <span class="o">!=</span> <span class="n">_keystates</span><span class="p">.</span><span class="n">end</span><span class="p">();</span>
            <span class="n">it</span><span class="o">++</span><span class="p">)</span> 
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">keysym</span><span class="p">.</span><span class="n">sym</span> <span class="o">==</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">)</span> <span class="c">//est-ce que la touche responsable de l'événement est celle du keystate ?</span>
        <span class="p">{</span>
            <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">=</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">SDL_KEYDOWN</span><span class="p">);</span> <span class="c">//true si enfoncé, false si relâché</span>
            <span class="k">break</span><span class="p">;</span> <span class="c">//la touche responsable de l'événement a été utilisée, on quitte le for</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La seule difficulté ici est le parcours des KeyStates, le tableau associatif qui donne l'état des touches utilisées.<br>
L'avantage de cette technique : code très court, simple, et je n'ai pas codé en dur quelles touches tester (pas d'informations redondantes).<br>
<br>
<h3>Animate</h3><br>
<br>
Jusqu'à présent nous avons vu des méthodes qui étaient appelées sur des événements souris/clavier. Ces méthodes (à part le MouseMotion) ne venaient que définir des booléens pour une gestion fluide du mouvement. Mouvement qui va réellement s'effectuer ici, dans la méthode <span class="courrier">Animate</span>, appelée à chaque boucle du programme. Le code n'est qu'une simple application des principes vus dans la partie « Gestion fluide du mouvement » :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">FreeFlyCamera</span><span class="o">::</span><span class="n">animate</span><span class="p">(</span><span class="n">Uint32</span> <span class="n">timestep</span><span class="p">)</span>
<span class="p">{</span>
<span class="c">//la vitesse réelle du déplacement est soit la vitesse de croisière, soit 10*la vitesse, en fonction</span>
<span class="c">//de l'état enfoncé ou non de la touche correspondant à l'action "boost"</span>
    <span class="kt">double</span> <span class="n">realspeed</span> <span class="o">=</span> <span class="p">(</span><span class="n">_keystates</span><span class="p">[</span><span class="n">_keyconf</span><span class="p">[</span><span class="s">"boost"</span><span class="p">]])</span><span class="o">?</span><span class="mi">10</span><span class="o">*</span><span class="nl">_speed:</span><span class="n">_speed</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_keystates</span><span class="p">[</span><span class="n">_keyconf</span><span class="p">[</span><span class="s">"forward"</span><span class="p">]])</span> 
        <span class="n">_position</span> <span class="o">+=</span> <span class="n">_forward</span> <span class="o">*</span> <span class="p">(</span><span class="n">realspeed</span> <span class="o">*</span> <span class="n">timestep</span><span class="p">);</span> <span class="c">//on avance</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_keystates</span><span class="p">[</span><span class="n">_keyconf</span><span class="p">[</span><span class="s">"backward"</span><span class="p">]])</span>
        <span class="n">_position</span> <span class="o">-=</span> <span class="n">_forward</span> <span class="o">*</span> <span class="p">(</span><span class="n">realspeed</span> <span class="o">*</span> <span class="n">timestep</span><span class="p">);</span> <span class="c">//on recule</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_keystates</span><span class="p">[</span><span class="n">_keyconf</span><span class="p">[</span><span class="s">"strafe_left"</span><span class="p">]])</span>
        <span class="n">_position</span> <span class="o">+=</span> <span class="n">_left</span> <span class="o">*</span> <span class="p">(</span><span class="n">realspeed</span> <span class="o">*</span> <span class="n">timestep</span><span class="p">);</span> <span class="c">//on se déplace sur la gauche</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_keystates</span><span class="p">[</span><span class="n">_keyconf</span><span class="p">[</span><span class="s">"strafe_right"</span><span class="p">]])</span> 
        <span class="n">_position</span> <span class="o">-=</span> <span class="n">_left</span> <span class="o">*</span> <span class="p">(</span><span class="n">realspeed</span> <span class="o">*</span> <span class="n">timestep</span><span class="p">);</span> <span class="c">//on se déplace sur la droite</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_verticalMotionActive</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">timestep</span> <span class="o">&gt;</span> <span class="n">_timeBeforeStoppingVerticalMotion</span><span class="p">)</span>
            <span class="n">_verticalMotionActive</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">_timeBeforeStoppingVerticalMotion</span> <span class="o">-=</span> <span class="n">timestep</span><span class="p">;</span>
        <span class="n">_position</span> <span class="o">+=</span> <span class="n">Vector3D</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">_verticalMotionDirection</span><span class="o">*</span><span class="n">realspeed</span><span class="o">*</span><span class="n">timestep</span><span class="p">);</span> <span class="c">//on monte ou on descend, en fonction de la valeur de _verticalMotionDirection</span>
    <span class="p">}</span>
    <span class="n">_target</span> <span class="o">=</span> <span class="n">_position</span> <span class="o">+</span> <span class="n">_forward</span><span class="p">;</span> <span class="c">//comme on a bougé, on recalcule la cible fixée par la caméra</span>

<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On remarque que dans certains cas, il est possible lors du même appel à <span class="courrier">Animate</span> d'avancer et reculer en même temps (si les touches « forward » et « backward » sont <strong>pressées simultanément</strong>). De manière tout à fait logique les deux mouvements <strong>s'annulent</strong> et la caméra ne bougera pas (en avant ou en arrière).<br>
<br>
<h3>Look</h3><br>
<br>
La dernière méthode intéressante est bien sûr la méthode <span class="courrier">Look</span>, appelée à chaque image, avant de dessiner la scène. Rien de compliqué ici, les autres méthodes ont calculé pour nous la position de la caméra et la cible qu'elle regarde. Il suffit de faire un appel propre à <span class="courrier">gluLookAt</span> et tout va pour le mieux dans le meilleur des mondes.<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">FreeFlyCamera</span><span class="o">::</span><span class="n">look</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">gluLookAt</span><span class="p">(</span><span class="n">_position</span><span class="p">.</span><span class="n">X</span><span class="p">,</span><span class="n">_position</span><span class="p">.</span><span class="n">Y</span><span class="p">,</span><span class="n">_position</span><span class="p">.</span><span class="n">Z</span><span class="p">,</span>
              <span class="n">_target</span><span class="p">.</span><span class="n">X</span><span class="p">,</span><span class="n">_target</span><span class="p">.</span><span class="n">Y</span><span class="p">,</span><span class="n">_target</span><span class="p">.</span><span class="n">Z</span><span class="p">,</span>
              <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Destructeur</h3><br>
<br>
On finit néanmoins avec le destructeur pour « remettre les choses comme on les a trouvées ». Si l'utilisateur pense qu'il n'a plus besoin de sa caméra, il serait de bon ton quand même de lui rendre son curseur que l'on a masqué pour nos besoins personnels :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5</pre></td><td class="code"><div class="syntax"><pre><span class="n">FreeFlyCamera</span><span class="o">::~</span><span class="n">FreeFlyCamera</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">SDL_WM_GrabInput</span><span class="p">(</span><span class="n">SDL_GRAB_OFF</span><span class="p">);</span>
    <span class="n">SDL_ShowCursor</span><span class="p">(</span><span class="n">SDL_ENABLE</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous trouverez bien sûr l'implémentation complète de la caméra dans l'archive en fin de chapitre.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4984">Scène de test</h2>
		<div class="ss_part_texte">
		Voilà, la caméra est prête mais une fois encore, comme pour la caméra TrackBall, il faut évidemment s'assurer de bien la créer et de lui envoyer tous les événements dont elle a besoin.<br>
<br>
Un dilemme cependant se présentait à moi à la préparation de ce chapitre. Quelle scène minable allais-je encore créer pour montrer l'intérêt d'une caméra FreeFly ?  <img src="./ogl_files/unsure.gif" alt=":euh:" class="smilies"><br>
Pour vous épargner une réapparition de la scène du chapitre des textures (sol + cube + pyramide) j'ai lancé un appel sur les forums.<br>
Deux zéros, qui ont appris l'OpenGL grâce à ce cours, ont répondu présents et nous ont donc préparé une petite scène sympathique qui nous servira même dans les chapitres à venir. Merci donc à <a href="http://www.siteduzero.com/membres-294-1659.html">TheDead Master</a> et à  <a href="http://www.siteduzero.com/membres-294-1498.html">42</a> !<br>
<br>
Leur scène est incluse dans un fichier à part, <span class="courrier">scene.cpp</span>, dont les fonctions seront bien sûr appelées à partir de <span class="courrier">main.cpp</span>.<br>
<br>
Leurs fonctions que l'on doit appeler sont :<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">chargerTextures</span><span class="p">();</span> <span class="c">//pour initialiser les textures que la scène utilise</span>
<span class="kt">void</span> <span class="n">dessinerScene</span><span class="p">();</span> <span class="c">//pour dessiner leur scène</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous pouvons donc nous concentrer sur la création de la caméra.<br>
En variable globale nous aurons donc :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">FreeFlyCamera</span> <span class="o">*</span> <span class="n">camera</span><span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Encore une fois, sous forme de pointeur pour ne pas la créer avant que la SDL ne soit initialisée. Nous allouons la caméra dynamiquement après la création de la fenêtre :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="c">//...</span>
    <span class="n">atexit</span><span class="p">(</span><span class="n">stop</span><span class="p">);</span>
<span class="c">//...</span>
    <span class="n">SDL_SetVideoMode</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">SDL_OPENGL</span><span class="p">);</span>
<span class="c">//...</span>
    <span class="n">chargerTextures</span><span class="p">();</span> <span class="c">//nécessaire pour que les textures de leur scène soient chargées</span>

    <span class="n">camera</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FreeFlyCamera</span><span class="p">(</span><span class="n">Vector3D</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span> <span class="c">//pour les besoins de la scène on surélève la caméra dès le départ</span>
<span class="c">//...</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La caméra sera automatiquement détruite à la fin du programme grâce à la fonction stop :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">stop</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">delete</span> <span class="n">camera</span><span class="p">;</span>
    <span class="n">SDL_Quit</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Une fois la caméra créée, dans notre boucle principale il ne faut pas oublier :<br>
<ul>
<li>d'envoyer les événements que la caméra attend ;</li>
<li>d'appeler la méthode <span class="courrier">FreeFlyCamera::animate</span> pour que la caméra bouge.</li>
</ul><br>
<br>
Cela se traduit donc par le code suivant :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40</pre></td><td class="code"><div class="syntax"><pre><span class="k">while</span><span class="p">(</span><span class="n">SDL_PollEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">event</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">switch</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="nl">SDL_QUIT:</span>
                <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="nl">SDL_KEYDOWN:</span>
                <span class="k">switch</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">key</span><span class="p">.</span><span class="n">keysym</span><span class="p">.</span><span class="n">sym</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">case</span> <span class="nl">SDLK_p:</span>
                    <span class="n">takeScreenshot</span><span class="p">(</span><span class="s">"test.bmp"</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="nl">SDLK_ESCAPE:</span>
                    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>
                    <span class="k">default</span> <span class="o">:</span> <span class="c">//on a utilisé la touche P et la touche ECHAP, le reste (en keydown) est donné à la caméra</span>
                    <span class="n">camera</span><span class="o">-&gt;</span><span class="n">OnKeyboard</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">key</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="nl">SDL_KEYUP:</span> <span class="c">//on n'utilise pas de keyup, on donne donc tout à la caméra</span>
                <span class="n">camera</span><span class="o">-&gt;</span><span class="n">OnKeyboard</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">key</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="nl">SDL_MOUSEMOTION:</span> <span class="c">//la souris est bougée, ça n'intéresse que la caméra</span>
                <span class="n">camera</span><span class="o">-&gt;</span><span class="n">OnMouseMotion</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">motion</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="nl">SDL_MOUSEBUTTONUP:</span>
                <span class="k">case</span> <span class="nl">SDL_MOUSEBUTTONDOWN:</span> <span class="c">//tous les évenements boutons (up ou down) sont donnés à la caméra</span>
                <span class="n">camera</span><span class="o">-&gt;</span><span class="n">OnMouseButton</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">button</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">current_time</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">();</span>
        <span class="n">elapsed_time</span> <span class="o">=</span> <span class="n">current_time</span> <span class="o">-</span> <span class="n">last_time</span><span class="p">;</span> <span class="c">//on calcule le temps écoulé depuis la dernière image</span>
        <span class="n">last_time</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">;</span>

        <span class="n">camera</span><span class="o">-&gt;</span><span class="n">animate</span><span class="p">(</span><span class="n">elapsed_time</span><span class="p">);</span> <span class="c">//et on fait bouger la caméra</span>

        <span class="n">DrawGL</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le détail de la fonction d'affichage ne nous intéresse pas vraiment ici. En effet la majeure partie se fait dans le<span class="courrier"> scene.cpp</span> pour utiliser la scène de The Dead Master et 42. Par contre, il ne faut pas oublier d'appeler la méthode <span class="courrier">look()</span> de notre caméra :<br>
<br>
<span class="code">Code : C++ - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">DrawGL</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">glClear</span><span class="p">(</span> <span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span> <span class="p">);</span>

    <span class="n">glMatrixMode</span><span class="p">(</span> <span class="n">GL_MODELVIEW</span> <span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">(</span> <span class="p">);</span>

    <span class="n">camera</span><span class="o">-&gt;</span><span class="n">look</span><span class="p">();</span> <span class="c">//remplace un appel manuel à gluLookAt</span>

    <span class="n">dessinerScene</span><span class="p">();</span>

    <span class="n">glFlush</span><span class="p">();</span>
    <span class="n">SDL_GL_SwapBuffers</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et voilà le travail !  <img src="./ogl_files/soleil.png" alt=":soleil:" class="smilies"><br>
<br>
<div class="centre"><img src="./ogl_files/12280.jpg" alt="Image utilisateur"></div><br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/freefly.avi">Téléchargez la vidéo au format avi/Xvid (2.11 Mo)</a></span></div><br>
<br>
<div class="centre"><span class="gros"><a href="http://www.siteduzero.com/uploads/fr/ftp/kayl/sdlgl_09_freefly.zip">Téléchargez le projet Code::Blocks, l'exécutable Windows et le Makefile Unix (1.23 Mo)</a></span></div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	On arrive enfin au bout de ce chapitre !  <img src="./ogl_files/pirate.png" alt=":pirate:" class="smilies"><br>
Rappelez-vous que si vous n'avez pas tout compris des détails de l'implémentation de la caméra, comprendre son principe (mouvement) et comment l'utiliser peut suffire.<br>
Maintenant grâce à notre caméra <strong>FreeFly</strong> nous pouvons enfin nous balader librement dans nos scènes et les contempler sous vraiment tous les angles.<br>
<br>
Nous garderons cette scène pour le prochain chapitre, <strong>la transparence</strong>, dans lequel nous verrons comment rendre l'eau et les fenêtres transparentes.  <img src="./ogl_files/magicien.png" alt=":magicien:" class="smilies">  Tout un programme !
	</div>
	
<div>
<br>

</div>

<hr>
<h2>Partie 2 : Annexes</h2>
<div>

</div>
	
	<hr>
	<h1 id="chap_5011">La trigonométrie</h1>
	<div id="chap_intro">
	Dans cette annexe mathématique nous verrons le concept mathématique de trigonométrie, généralement rencontré dès la classe de 3<sup>e</sup> dans le cursus français.<br>
Nous nous contenterons de parcourir le <strong>minimum utile</strong> pour faire de la <strong>3D</strong> et nous verrons que des outils mathématiques faciles d'utilisation peuvent nous être grandement utiles.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_5010">Trigo dans un triangle rectangle</h2>
		<div class="ss_part_texte">
		La trigonométrie (littéralement « mesures » dans le « triangle »), est une branche des maths qui vient donner des relations entre les longueurs des côtés d'un triangle et ses angles.<br>
<br>
La trigonométrie se rencontre généralement dans le cas d'un triangle rectangle :<br>
<br>
<div class="centre"><img src="./ogl_files/11730.png" alt="Image utilisateur"></div><br>
<br>
En considérant l'angle alpha, on définit deux fonctions « cosinus » et « sinus » permettant de donner une relation entre la valeur de cet angle, et les longueurs des côtés du triangle :<br>
<div class="centre"><img src="./ogl_files/11731.png" alt="Image utilisateur"></div><br>
<br>
En utilisant l'inverse de ces fonctions on peut alors trouver la valeur de l'angle en fonction des longueurs des côtés. On peut tout aussi bien, à partir de la valeur de l'angle et de la longueur d'un seul côté du triangle, trouver les longueurs des autres côtés.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_5009">Le cercle trigonométrique</h2>
		<div class="ss_part_texte">
		Le triangle rectangle est la première approche que l'on a de la trigonométrie. On introduit généralement un autre objet mathématique : le cercle trigonométrique. Ce cercle mesure « 1 » (pas d'unité requise) de rayon et nous permet de donner tout leur sens au cosinus et sinus que nous venons de rencontrer :<br>
<br>
<div class="centre"><img src="./ogl_files/11732.png" alt="Image utilisateur"></div><br>
<br>
Dans la figure ci-dessus on retrouve un triangle rectangle et donc nos formules vues plus haut sont toujours applicables :<br>
<br>
<div class="centre"><img src="./ogl_files/11733.png" alt="Image utilisateur"></div><br>
<div class="centre"><img src="./ogl_files/11734.png" alt="Image utilisateur"></div><br>
<br>
Et là tout s'éclaire ! Alors qu'auparavant nous pensions que cos et sin étaient de simples mesures abstraites qui ne servaient pas à grand chose, ici on se rend compte grâce au cercle trigonométrique qu'elles permettent de donner l'abscisse (sur X) et l'ordonnée (sur Y) d'un point quelconque du cercle trigonométrique se trouvant à un angle alpha donné par rapport à l'origine.<br>
On note au passage que les angles se mesurent ici dans le sens trigonométrique (c'est-à-dire le sens inverse des aiguilles d'une montre).
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_5008">Systèmes de coordonnées</h2>
		<div class="ss_part_texte">
		Nous avons vu rapidement dans le cas du cercle trigonométrique que nous pouvions passer d'un angle à une coordonnée (X,Y). Il est donc temps de faire un petit rappel non exhaustif sur les systèmes de coordonnées qui nous intéressent avec OpenGL.<br>
<br>
<h3>Coordonnées cartésiennes</h3><br>
<br>
<div class="centre"><img src="./ogl_files/11735.png" alt="Image utilisateur"></div><br>
<br>
Les coordonnées cartésiennes sont les plus courantes. C'est d'ailleurs dans ce système que l'on exprime les positions de nos vertices avec OpenGL : <span class="courrier">glVertex3d( X, Y, Z);</span><br>
<br>
<h3>Coordonnées polaires</h3><br>
<div class="centre"><img src="./ogl_files/11736.png" alt="Image utilisateur"></div><br>
<br>
Les coordonnées polaires sont un autre système de coordonnées que nous n'utiliserons pas trop mais qui nous sert d'intermédiaire pour bien comprendre la suite.<br>
Un point est repéré par un <strong>angle</strong> (thêta) et un <strong>rayon</strong> (r). On y voit une généralisation du cercle trigonométrique (où r valait 1) et donc nous pouvons très facilement en déduire comment passer des coordonnées polaires aux coordonnées cartésiennes :<br>
<br>
<div class="centre"><img src="./ogl_files/11737.png" alt="Image utilisateur"></div><br>
<br>
<h4>Exemple en OpenGL</h4><br>
<br>
Nous venons de voir qu'il est possible d'exprimer un même point dans des systèmes de coordonnées différents.<br>
Nous pouvons donc envisager deux méthodes identiques en OpenGL pour faire tourner un point autour de l'origine :<br>
<br>
<table class="tab_user">


<thead><tr><th>Coordonnées polaires</th><th>Coordonnées cartésiennes*</th></tr></thead><tbody><tr>
<td><span class="code">Code : C - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 c"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">glRotated</span><span class="p">(</span><span class="n">theta</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">glBegin</span><span class="p">(</span><span class="n">GL_POINTS</span><span class="p">);</span>
<span class="n">glVertex2i</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
<span class="n">glEnd</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div></td>
<td><span class="code">Code : C - <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 c"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;math.h&gt;</span>

<span class="n">x</span><span class="o">=</span><span class="n">r</span><span class="o">*</span><span class="n">cos</span><span class="p">(</span><span class="n">theta</span><span class="o">*</span><span class="n">M_PI</span><span class="o">/</span><span class="mi">180</span><span class="p">);</span>
<span class="n">y</span><span class="o">=</span><span class="n">r</span><span class="o">*</span><span class="n">sin</span><span class="p">(</span><span class="n">theta</span><span class="o">*</span><span class="n">M_PI</span><span class="o">/</span><span class="mi">180</span><span class="p">);</span>
<span class="n">glBegin</span><span class="p">(</span><span class="n">GL_POINTS</span><span class="p">);</span>
<span class="n">glVertex2i</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">);</span>
<span class="n">glEnd</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div></td>
</tr></tbody></table><br>
<br>
<span class="tpetit">* les angles en OpenGL sont exprimés en degrés, cependant cos et sin, les fonctions définies dans &lt;math.h&gt;, attendent des radians. Il faut donc les convertir en multipliant par M_PI/180.<br>
</span><br>
<br>
<h3>Coordonnées sphériques</h3><br>
<br>
Ce système de coordonnées peut être vu comme une généralisation des coordonnées polaires en 3D. Il est très utile et nous servira notamment à contrôler l'orientation de notre caméra à l'aide de la souris.<br>
En coordonnées sphériques, un point est représenté par <strong>un rayon</strong> r, et <strong>deux angles</strong> thêta et phi :<br>
<br>
<div class="centre"><img src="./ogl_files/4111.png" alt="Image utilisateur"></div><br>
<br>
Pour passer des coordonnées sphériques aux coordonnées cartésiennes qui nous sont si chères, il faut y aller en deux étapes et se ramener à des cas 2D très simples.<br>
<br>
Tout d'abord considérons seulement le rayon r et l'angle phi. Nous nous ramenons à un cas de coordonnées polaires sur le plan XZ :<br>
<br>
<div class="centre"><img src="./ogl_files/11738.png" alt="Image utilisateur"></div><br>
<br>
Nous pouvons en déduire directement la coordonnée Z de notre point avec le sinus, et le cosinus nous permet de définir une variable intermédiaire rtemp.<br>
<br>
<div class="centre"><img src="./ogl_files/11739.png" alt="Image utilisateur"></div><br>
<br>
rtemp est le rayon d'un cercle intermédiaire placé à l'altitude Z de notre point :<br>
<br>
<div class="centre"><img src="./ogl_files/11740.png" alt="Image utilisateur"></div><br>
<br>
En regardant notre sphère du dessus et considérant le cercle de rayon rtemp avec le dernier angle thêta, nous sommes à nouveau dans un simple problème de coordonnées polaires. Il est donc aisé de déterminer les coordonnées X et Y finales de notre point :<br>
<div class="centre"><img src="./ogl_files/11741.png" alt="Image utilisateur"></div><br>
<br>
En résumé nous avons donc tout simplement :<br>
<div class="centre"><img src="./ogl_files/11742.png" alt="Image utilisateur"></div><br>
<br>
Comme je l'ai dit plus haut, ce système de coordonnées nous sera très utile car nous pourrons ainsi contrôler l'orientation de la caméra à la souris : l'angle thêta contrôle l'orientation horizontale du regard (comme quand on fait « non » de la tête) et l'angle phi contrôle l'orientation verticale du regard (comme quand on fait « oui » de la tête).
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Ce chapitre, d'un niveau mathématique assez facile (collège), viens trouver tout son sens dans le chapitre : le contrôle avancé de la caméra, où nous contrôlons une caméra de type <span class="italique">free-fly</span> avec la souris et le clavier.
	</div>
	
	<hr>
	<h1 id="chap_5003">Les matrices</h1>
	<div id="chap_intro">
	Cette annexe mathématique est un passage obligé pour tous ceux qui veulent comprendre ce qui se passe réellement derrière les calculs qu'OpenGL fait pour nous.<br>
Bien que l'<span class="italique">objet mathématique</span> matrice ne soit enseigné à l'école que dans le supérieur il n'a rien de mystique et une utilisation basique avec peu de connaissances en est tout à fait possible.<br>
Je ne détaillerai ici que ce que nous avons besoin de savoir pour le cours d'OpenGL et vous verrez que ça n'a vraiment rien de sorcier.<br>
Les novices y découvriront donc un nouvel objet mathématique très pratique, ceux qui les connaissent déjà dans d'autres contextes (trouver le Kernel, le vecteur propre, oui oui je suis passé par là aussi <img src="./ogl_files/clin.png" alt=";)" class="smilies"> ) quant à eux vont enfin voir une application pratique et très simple des matrices.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_5002">L'outil matrice</h2>
		<div class="ss_part_texte">
		<h3>Représentation</h3><br>
<br>
Une matrice (<span class="italique">matrix</span> en anglais) se représente <span class="italique">comme</span> un tableau de nombres composé de lignes et de colonnes.<br>
<br>
<div class="centre"><img src="./ogl_files/4113.png" alt="Image utilisateur"><br>
<span class="italique">Un exemple de matrice</span></div><br>
<br>
On désigne généralement un élément par son numéro de ligne suivi de son numéro de colonne. Par exemple pour la matrice ci-dessus, l'élément en <span class="courrier">(1,2)</span> est <span class="courrier">15</span>.<br>
<br>
Les matrices peuvent être de toutes tailles mais dans le cas d'OpenGL les matrices que nous utiliserons, implicitement ou non, seront des matrices <span class="courrier">4x4</span> (4 lignes, 4 colonnes). Cette taille n'est pas anodine et est liée à l'utilisation géométrique qui en est faite en 3D (nous le verrons juste après).<br>
<br>
Tout comme avec les nombres ou les vecteurs, nous pouvons effectuer certaines opérations sur les matrices. La seule qui nous intéresse ici est la multiplication.<br>
<br>
<h3>Multiplication de matrices</h3><br>
<br>
Multiplier deux matrices est une gymnastique facile et rigolote. Mais les erreurs quand on le fait à la main sont assez fréquentes (tous ces chiffres qui se croisent, pauvres de nous ! <img src="./ogl_files/hihi.png" alt="^^" class="smilies"> ).<br>
<br>
Le principe est simple, pour calculer l'élément (i,j) de la matrice <span class="courrier">C</span>, produit de deux matrices <span class="courrier">A</span> et <span class="courrier">B</span>,  on multiplie la ligne <span class="courrier">i</span> de <span class="courrier">A</span> par la colonne <span class="courrier">j</span> de <span class="courrier">B</span> comme formalisé par :<br>
<br>
<div class="centre"><img src="./ogl_files/11229.gif" alt="Image utilisateur"></div><br>
<br>
Cette formule un peu barbare se résume très simplement par le schéma suivant :<br>
<br>
<div class="centre"><img src="./ogl_files/11230.png" alt="Image utilisateur"><br>
<span class="italique">Principe de la multiplication matrice x matrice</span></div><br>
<br>
Et pour bien comprendre ce que l'on fait de chaque élément, voici un calcul étape par étape pour 2 matrices simples :<br>
<br>
<div class="centre"><img src="./ogl_files/11231.gif" alt="Image utilisateur"><br>
<span class="italique">Détail d'une multiplication matrice x matrice</span></div><br>
<br>
Comme vous le voyez pour multiplier une ligne par une colonne, on fait la somme de chaque sous-produit entre éléments de la ligne de la matrice de gauche et de la colonne de la matrice de droite. La meilleure façon pour bien assimiler la technique est la pratique avec un papier et un crayon (ça va pour les matrices simples seulement, quand ça devient grand on s'embrouille vite  <img src="./ogl_files/rire.gif" alt=":lol:" class="smilies"> ).<br>
<br>
Pour une raison évidente, comme nous multiplions des lignes par des colonnes, on ne peut multiplier deux matrices <span class="courrier">A</span> et <span class="courrier">B</span> <strong>que</strong> si le nombre de colonnes de <span class="courrier">A</span> est égal au nombre de lignes de <span class="courrier">B</span>. Mais rassurez-vous, vous n'avez pas à vous en préoccuper car dans notre cas nous utilisons des matrices carrées (autant de lignes que de colonnes) et donc cette condition est toujours vérifiée.<br>
<br>
<div class="rmq attention">Contrairement aux nombres, la multiplication entre matrices n'est <strong>pas commutative</strong> ( <span class="courrier">AxB != BxA</span> ). L'ordre des multiplications est donc important (comme nous le verrons lors de la <span class="italique">combinaison de transformations</span>). </div><br>
<br>
<h3>Multiplication matrice x vecteur</h3><br>
<br>
Un vecteur n'est qu'un cas particulier de matrice avec une seule colonne. Il est donc tout à fait possible de multiplier une matrice par un vecteur (si la condition sur les tailles énoncée plus haut est remplie).<br>
<br>
Exemple :<br>
<div class="centre"><img src="./ogl_files/11232.png" alt="Image utilisateur"><br>
<span class="italique">Multiplication matrice x vecteur (le résultat est un vecteur)</span></div><br>
<br>
<h3>Matrice identité</h3><br>
<br>
La matrice identité est une matrice particulière, souvent notée I, dont tous les éléments de la diagonale sont à 1 (exemple en 4x4) :<br>
<div class="centre"><img src="./ogl_files/11234.png" alt="Image utilisateur"></div><br>
<br>
C'est ce que l'on appelle un élément neutre, en effet un vecteur multiplié par la matrice identité en ressort inchangé :<br>
<br>
<div class="centre"><img src="./ogl_files/11235.png" alt="Image utilisateur"></div><br>
<br>
<h3>Inverse</h3><br>
<br>
La dernière propriété qui nous intéresse sur les matrices est la notion d'inverse. Si par exemple nous avons une matrice M qui vient coder d'une certaine façon une translation de (1,1,1), alors son inverse M' sera une translation de (-1,-1,-1). Donc si l'on applique la matrice et son inverse à la suite à un vecteur, il reviendra donc comme il était au début. Mathématiquement on écrit ça comme ceci :<br>
<br>
<div class="centre"><img src="./ogl_files/11236.png" alt="Image utilisateur"></div><br>
<br>
Le produit d'une matrice avec son inverse donne l'identité. L'exemple qui était pris (translation) était très simple. Dans le cas général calculer l'inverse d'une matrice est assez barbare mais je vous en donnerai l'implémentation quand nous en aurons besoin.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_5001">Transformations</h2>
		<div class="ss_part_texte">
		Maintenant que nous comprenons l'outil mathématique matrice, je vais vous en montrer une utilisation bien pratique : les transformations géométriques.<br>
<br>
Nous l'avons vu plus haut, multiplier une matrice par un vecteur donne un autre vecteur. Ce vecteur résultat n'est autre que la transformée du vecteur initial par la transformation « contenue » dans la matrice.<br>
<br>
On se sert donc d'une simple multiplication matrice de transformation x vecteur de coordonnées pour obtenir les coordonnées transformées d'un point :<br>
<div class="centre"><img src="./ogl_files/11238.png" alt="Image utilisateur"></div><br>
<br>
Comme il est possible en utilisant une matrice de transformer un vecteur par un autre, nous allons utiliser cette propriété pour stocker dans la matrice des éléments pour exécuter chaque transformation élémentaire dont nous avons besoin en 3D : la rotation, la translation, et le changement d'échelle :<br>
<br>
<div class="centre"><img src="./ogl_files/11239.png" alt="Image utilisateur"></div><br>
<br>
Vous trouverez l'explication numérique de chaque transformation un peu après.<br>
<br>
<div class="rmq question">À quoi servent donc les éléments du bas qui n'ont d'utilité pour aucune transformation apparemment ?</div><br>
<br>
Le fait que la matrice fasse 4 colonnes de large est fixé pour nos besoins (rotation, scale, translation). Mais pour pouvoir faciliter les choses et plus tard savoir, à partir d'une matrice, trouver son inverse, il <strong>faut</strong> que celle-ci soit <strong>carrée</strong> (autant de lignes que de colonnes). C'est pourquoi la matrice de transformation possède aussi 4 lignes au lieu de 3. Il s'avère qu'une partie de la 4<sup>e</sup> ligne est utilisée par OpenGL pour la projection mais nous n'avons pas besoin d'en savoir plus sur le sujet.<br>
<br>
<h3>Coordonnées homogènes</h3><br>
<br>
<div class="rmq question">Ok pour la taille de la matrice mais nos vecteurs sont en 3D hein, c'est quoi ce 4<sup>e</sup> élément ? C'est le temps ?</div><br>
<br>
Non non, ici nous ne travaillons pas en 4D <img src="./ogl_files/smile.png" alt=":)" class="smilies"> mais bien en 3D. Vous le savez maintenant pour pouvoir multiplier une matrice et un vecteur il faut une condition particulière sur les dimensions : la taille du vecteur doit être égale au nombre de colonnes de la matrice, ici 4. Nous introduisons donc <strong>temporairement</strong> une 4<sup>e</sup> coordonnée (appelée w) pour exprimer et former ce que l'on appelle une coordonnée <strong>homogène</strong>.<br>
<br>
Pour passer d'un vecteur 3D (x,y,z) à son équivalent en coordonnées homogènes il suffit de rajouter un 1 soit (x,y,z,1). Par contre pour passer d'un vecteur en coordonnées homogènes (x,y,z,w) à sa version 3D normale il faut diviser les 3 premières coordonnées par la dernière soit : (x/w,y/w,z/w).<br>
Dans notre cas (les transformations), la 4<sup>e</sup> coordonnée n'est <strong>jamais</strong> modifiée et reste donc toujours à 1. Nous n'avons donc pas à nous en soucier.<br>
<br>
Voyons donc maintenant ce qui est mis réellement dans la matrice pour coder les transformations.<br>
<br>
<h3>Identité</h3><br>
<br>
<div class="centre"><img src="./ogl_files/11240.png" alt="Image utilisateur"></div><br>
<br>
Nous l'avons vu plus tôt cette matrice ne fait rien. Ça peut paraître inutile mais c'est ce que nous utiliserons pour réinitialiser la matrice à un état <strong>connu</strong> dont nous sommes sûrs qu'il n'affecte par les coordonnées des vertices.<br>
<br>
<h3>Translation</h3><br>
<br>
Une translation de (x,y,z) s'écrit matriciellement :<br>
<br>
<div class="centre"><img src="./ogl_files/11241.png" alt="Image utilisateur"></div><br>
<br>
Et en effet si on effectue la multiplication d'un vecteur quelconque (a,b,c) par cette matrice de translation, on obtient un vecteur résultat qui n'est ni plus ni moins que l'image du premier vecteur par cette translation.<br>
<br>
<h3>Changement d'échelle (Scale)</h3><br>
<br>
Un changement d'échelle s'écrit matriciellement :<br>
<div class="centre"><img src="./ogl_files/11242.png" alt="Image utilisateur"></div><br>
<br>
En effectuant la multiplication de la matrice de changement d'échelle par un vecteur quelconque on voit bien que ses composantes sont multipliées par chacune des composantes du changement d'échelle.<br>
<br>
<h3>Rotation</h3><br>
<br>
Attention accrochez-vous, une rotation d'angle thêta, autour d'un axe quelconque (x,y,z) s'écrit matriciellement :<br>
<br>
<div class="centre"><img src="./ogl_files/11245.png" alt="Image utilisateur"></div><br>
<br>
Ça fait peur hein !  <img src="./ogl_files/diable.png" alt=":diable:" class="smilies">  Ici c'est le cas le plus général qui soit. Simplifions vite cela en prenant le cas particulier de la rotation d'angle thêta (et oui toujours) autour de l'axe Z (0,0,1). Tout ce qui concerne x et y s'en va et on se retrouve avec une matrice qui fait nettement moins peur :<br>
<br>
<div class="centre"><img src="./ogl_files/11246.png" alt="Image utilisateur"></div><br>
<br>
Pour vérifier que cela marche bien comme on l'entend, prenons encore un cas plus particulier : celui de la rotation de 90° autour de l'axe Z et appliquons-la au vecteur (1,1) :<br>
<br>
<div class="centre"><img src="./ogl_files/11247.png" alt="Image utilisateur"></div><br>
<br>
Par le calcul on obtient donc le vecteur (-1,1) en rouge qui est en effet la rotation de 90° du vecteur (1,1) en noir.<br>
<div class="centre"><img src="./ogl_files/11248.png" alt="Image utilisateur"></div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_5000">Combinaison de transformations</h2>
		<div class="ss_part_texte">
		Pour l'instant nous avons vu comment écrire chaque transformation de base matriciellement. Mais qu'en est-il quand nous souhaitons en faire plusieurs à la suite ?<br>
<br>
Eh bien il suffit de les multiplier ! On fait ce qu'on appelle des <span class="italique">multiplications à droite</span>. Si nous voulons d'abord faire une translation puis une rotation, la matrice représentant la transformation totale sera : Translation x Rotation.<br>
<br>
<span class="souligne">Exemple</span> :<br>
Translation de (1,0,0) <strong>suivie</strong> d'une rotation de 90° autour de l'axe Z :<br>
<br>
<div class="centre"><img src="./ogl_files/11252.png" alt="Image utilisateur"></div><br>
<br>
<h3>Ordre des transformations</h3><br>
<br>
L'ordre dans lequel sont faites les transformations est important. En effet faire une translation suivie d'une rotation n'a pas le même effet que faire une rotation suivie d'une translation.<br>
<br>
Reprenons l'exemple de la translation de (1,0,0) mais cette fois-ci <strong>précédée</strong> d'une rotation de 90° autour de l'axe Z :<br>
<br>
<div class="centre"><img src="./ogl_files/11253.png" alt="Image utilisateur"></div><br>
<br>
La matrice finale n'est pas la même que précédemment. Et en effet si on compare graphiquement, l'effet est totalement différent :<br>
<br>
<div class="centre"><img src="./ogl_files/11254.png" alt="Image utilisateur"><br>
<span class="italique">Importance de l'ordre des transformations</span></div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Ce chapitre assez mathématique peut nécessiter plusieurs lectures et je vous conseille de le relire conjointement avec le chapitre sur les <a href="http://www.siteduzero.com/tuto-3-6304-1-les-transformations.html">transformations</a> pour avoir des exemples appliqués à OpenGL.<br>
<br>
Si vous voulez en savoir un peu plus sur l'outil matrice je vous conseille d'aller faire un tour sur <a href="http://fr.wikipedia.org/wiki/Matrice_%28math%C3%A9matiques%29">Wikipédia</a>.<br>
<br>
Et enfin si vous vous demandez d'où je tire toutes ces informations barbares sur les représentations matricielles des transformations, je vous conseille, si ce n'est déjà fait, de jeter un coup d'oeil dans l'<strong>excellente</strong> <a href="http://www.opengl.org/documentation/specs/man_pages/hardcopy/GL/html/gl/">documentation d'OpenGL</a>, notamment les pages de :<br>
<br>
<ul>
<li><a href="http://www.opengl.org/documentation/specs/man_pages/hardcopy/GL/html/gl/loadidentity.html">glLoadIdentity</a> ;</li>
<li><a href="http://www.opengl.org/documentation/specs/man_pages/hardcopy/GL/html/gl/translate.html">glTranslate</a> ;</li>
<li><a href="http://www.opengl.org/documentation/specs/man_pages/hardcopy/GL/html/gl/rotate.html">glRotate</a> ;</li>
<li><a href="http://www.opengl.org/documentation/specs/man_pages/hardcopy/GL/html/gl/scale.html">glScale</a> ;</li>
<li><a href="http://www.opengl.org/documentation/specs/man_pages/hardcopy/GL/html/gl/multmatrix.html">glMultMatrix</a> (pour la partie sur la combinaison de transformations).</li>
</ul><br>
<br>
Toutes ces informations combinées nous permettent de mieux comprendre comment fonctionne OpenGL et surtout d'être capables d'implémenter nous-mêmes les transformations (nous serons amenés à les utiliser).
	</div>
	
	<hr>
	<h1 id="chap_4994">Créer une vidéo de votre programme</h1>
	<div id="chap_intro">
	Vous avez peut-être été surpris de voir apparaître dans mon tutoriel des vidéos montrant les résultats animés des chapitres.<br>
Cette annexe a pour but de vous expliquer comment procéder pour créer des vidéos montrant vos jeux/animations 3D sous <strong>Windows</strong>.<br>
<br>
<div class="rmq information">Si vous n'avez pas Windows, n'ayez crainte ! Vos programmes OpenGL sont censés être portables si vous suivez correctement le tutoriel jusqu'à présent. Il vous suffit d'utiliser l'ordi d'un ami (on a tous un ami sous Windows  <img src="./ogl_files/langue.png" alt=":p" class="smilies"> ) en lui emmenant vos sources pour les compiler sous Windows avec Code::Blocks par exemple.</div>
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4993">Enregistrer la vidéo</h2>
		<div class="ss_part_texte">
		La première étape est donc l'enregistrement de la vidéo. Pour ce faire nous allons utiliser un logiciel bien pratique : Fraps.<br>
<br>
<div class="centre"><img src="./ogl_files/10943.png" alt="Image utilisateur"></div><br>
<br>
<h3>Télécharger Fraps</h3><br>
<br>
Ce logiciel est disponible gratuitement à l'adresse suivante : <a href="http://www.fraps.com/download.php">http://www.fraps.com/download.php</a><br>
<br>
La version gratuite possède cependant certaines limites :<br>
<ul>
<li>les vidéos seront limitées à 30 secondes ;</li>
<li>un petit texte « <a href="http://www.fraps.com/">www.fraps.com</a> » apparaîtra en haut des vidéos.</li>
</ul><br>
<br>
Le texte n'est pas trop handicapant, car discret et rien ne vous empêche de faire un montage de plusieurs vidéos de 30 secondes (une vidéo de démo d'un jeu ne s'attarde jamais bien longtemps sur un même endroit).<br>
<br>
<h3>Configurer Fraps</h3><br>
<br>
Après avoir installé et lancé Fraps, rendez-vous dans l'onglet « Movies » pour configurer les options de capture de vidéo :<br>
<br>
<div class="centre"><img src="./ogl_files/10944.png" alt="Image utilisateur"></div><br>
<br>
<ol class="liste_1">
<li>Le répertoire où seront stockées les vidéos.<br>
<div class="rmq attention">Pour des raisons d'optimisation de performances, les vidéos en sortie de Fraps seront très peu compressées. Pensez donc à spécifier un répertoire sur un disque où il y a de la place.</div></li>
<li>Utilisez de préférence <span class="italique">Full-Size</span> et changez la taille de votre fenêtre dans votre code. Cela évitera à Fraps d'avoir à redimensionner les images à la volée. En full Size avec une fenêtre de 640x480, la vidéo sera de taille 640x480.</li>
<li>Choisissez le nombre d'images par seconde désirées pour votre vidéo. <strong>30</strong> est un très bon compromis entre fluidité et taille de la vidéo. <div class="rmq attention">Pour respecter le framerate choisi, Fraps viendra limiter lui-même les FPS de votre application. Je vous conseille donc fortement de désactiver la limitation des FPS dans votre code avant d'enregistrer votre vidéo (il suffit simplement de commenter l'appel à <span class="courrier">SDL_Delay</span>).</div></li>
<li>Choisissez une touche qui déclenchera, une fois votre application lancée, l'enregistrement de la vidéo. Vous pouvez garder la touche par défaut, ou changer si cette touche est déjà utilisée dans votre programme.</li>
<li>Enfin minimisez Fraps (ça ne sert à rien de laisser la fenêtre visible) dans le systray.</li></ol><br>
<br>
<h3>Enregistrement de la vidéo</h3><br>
<br>
En lançant votre application avec Fraps actif, vous verrez apparaître un nombre sur votre fenêtre. C'est le nombre d'images par seconde. En effet Fraps sert à faire des vidéos mais peut aussi vous aider à tester les performances de votre application.<br>
<br>
<div class="centre"><img src="./ogl_files/10945.jpg" alt="Image utilisateur"></div><br>
<br>
<br>
Quand vous désirez commencer l'enregistrement, appuyez sur la touche choisie. Le nombre devient alors rouge pour vous signaler que Fraps a pris le contrôle du nombre d'images par seconde. Au bout de 30 secondes (pour la version gratuite), ou si vous appuyez à nouveau sur la touche, l'enregistrement s'arrête. Vous pouvez recommencer autant de fois que vous voulez sans quitter votre application tant que vous avez de la place sur votre disque dur.  <img src="./ogl_files/langue.png" alt=":p" class="smilies"><br>
<br>
<div class="centre"><img src="./ogl_files/10946.jpg" alt="Image utilisateur"></div><br>
<br>
En se rendant dans le répertoire des vidéos, on voit un nouveau fichier apparaître avec le nom de votre exécutable ainsi que la date. Ainsi il n'y pas de risque d'écrasement entre deux vidéos consécutives.<br>
<br>
<div class="centre"><img src="./ogl_files/10947.png" alt="Image utilisateur"></div><br>
<br>
Cependant comme je vous l'ai dit plus haut, la vidéo n'est pas compressée et prend donc pas mal de place. De plus, elle n'est lisible pour l'instant que par vous (ou toute autre personne ayant installé Fraps). Il va donc falloir l'encoder dans un format courant : <strong>Xvid</strong> (alternative non propriétaire au divX).
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_4995">Encoder la vidéo</h2>
		<div class="ss_part_texte">
		Pour encoder la vidéo nous allons utiliser un logiciel libre : <strong>VirtualDub</strong>.<br>
<br>
Vous pouvez le télécharger à l'adresse suivante : <a href="http://virtualdub.sourceforge.net/">http://virtualdub.sourceforge.net/</a>.<br>
<br>
Comme nous allons utiliser le format avi/Xvid, il nous faut les codecs appropriés que vous pouvez télécharger ici : <a href="http://www.xvidmovies.com/codec/">XviD codec vX.X.X for Windows(by Koepi)</a>.<br>
<br>
<div class="rmq information">Même si vous utilisez comme moi le très bon lecteur <a href="http://www.videolan.org/vlc/">VLC</a> qui ne nécessite pas de codecs tiers, il est nécessaire de posséder les codecs XviD pour pouvoir <strong>encoder</strong> la vidéo.</div><br>
<br>
<h3>Configuration de VirtualDub</h3><br>
<br>
Après avoir installé VirtualDub et les codecs, lancez VirtualDub et ouvrez votre vidéo. Dans le menu « <span class="italique">Video</span> » vérifiez que « <span class="italique">Full processing mode</span> » est bien sélectionné :<br>
<br>
<div class="centre"><img src="./ogl_files/10948.png" alt="Image utilisateur"></div><br>
<br>
Toujours dans ce même menu « <span class="italique">Video</span> », allez dans « <span class="italique">Compression...</span> » et sélectionnez le codec de compression désiré : ici <strong>XviD</strong>. (Si vous ne choisissez pas de compression, la vidéo finale sera très volumineuse).<br>
<br>
<div class="centre"><img src="./ogl_files/10949.png" alt="Image utilisateur"></div><br>
<br>
Il ne reste plus qu'à lancer l'encodage en allant dans le menu « <span class="italique">File</span> » &gt; « <span class="italique">Save as AVI...</span> » :<br>
<br>
<div class="centre"><img src="./ogl_files/10950.png" alt="Image utilisateur"></div><br>
<br>
VirtualDub vous affiche des informations le temps de l'encodage (vraiment rapide pour une vidéo de 30 secondes) :<br>
<br>
<div class="centre"><img src="./ogl_files/10951.png" alt="Image utilisateur"></div><br>
<br>
Enfin, en regardant le répertoire où la vidéo a été enregistrée, on constate que la taille a énormément diminué :<br>
<br>
<div class="centre"><img src="./ogl_files/10952.png" alt="Image utilisateur"></div><br>
<br>
Vous pouvez maintenant distribuer vos vidéos librement pour montrer vos prouesses en OpenGL !
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Comme vous pouvez le voir l'utilisation combinée de deux logiciels puissants, Fraps et VirtualDub, permet très facilement d'enregistrer des vidéos de vos applications 3D.<br>
<br>
Pour vous faire saliver un peu sur la suite du tutoriel voici justement une vidéo que j'ai réalisée avec la technique expliquée dans ce chapitre :<br>
<br>
<div class="centre"><br>
<img src="./ogl_files/5473.jpg" alt="Image utilisateur"><br>
<span class="gros"><a href="http://illament.free.fr/sdz/engine2.avi">Téléchargez une vidéo annoncant un chapitre futur de ce tuto (7.8 Mo)</a></span><br>
</div>
	</div>
	
<div>
<br>

</div>


<hr>

<div id="btuto_conclusion">
	
</div>

<div class="clearer"></div>

<div class="infobox cadre_auteur_date" id="tuto_details">
  <form action="http://www.siteduzero.com/tutoriel-54-5014.html" method="post">
    <div class="dnone"><input type="hidden" value="4bca73605591512818aaf350fccd8ca9b6e9bf3c" name="challenge"></div>

    <h3 class="special">Informations sur le tutoriel</h3>
   
    <div class="conteneur_infobox">
	<a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#onglets_tutos">Retour en haut <img src="./ogl_files/fleche_haut.png" alt="Retour en haut" title="Retour en haut"></a>
	<br>
   	<br>			
<strong>Créé</strong> : Le 24/10/2007 à 18:42:30<br>
<strong>Modifié</strong> : Le 10/05/2009 à 15:48:59<br>

<strong>Avancement</strong> : 100%<br>

<strong>Licence</strong> : Copie non autorisée<br><br>


  <a href="http://www.zcorrecteurs.fr/"><img src="./ogl_files/zcorrige.png" alt="L&#39;orthographe, la grammaire et la présentation de ce tutoriel ont été vérifiées par les zCorrecteurs." title="L&#39;orthographe, la grammaire et la présentation de ce tutoriel ont été vérifiées par les zCorrecteurs."></a><br>

<a href="http://www.siteduzero.com/tutoriel-50-5014-66736-creez-des-programmes-en-3d-avec-opengl.html#r66736">60 commentaires</a><br>

  <a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html">Revenir au sommaire du tutoriel</a><br>


    </div>
  </form>
</div>



                </div>
            </div>

            <div id="footer">
                <ul>
                    <li>
                        Le Site du Zéro
                        <ul>
                            <li><a href="http://www.siteduzero.com/plan.html">Plan du site</a></li>
                            <li><a href="http://www.siteduzero.com/membres-304.html">L'équipe</a></li>
                            <li><a href="http://www.siteduzero.com/mentions.html">Mentions légales</a></li>
                            <li><a href="http://www.siteduzero.com/accessibilite.html" accesskey="0">Accessibilité</a></li>
                            <li><a href="http://www.siteduzero.com/livreor.html">Livre d'or</a></li>
                            <li><a href="http://suggestions.siteduzero.com/"><img alt="logo_user_voice" src="./ogl_files/ico_uservoice.png"> Suggestions <img alt="Nouveau" src="./ogl_files/iconouveau.png"></a></li>
                        </ul>
                    </li>
                    <li>
                        Simple IT
                        <ul>
                            <li><a href="http://www.siteduzero.com/simpleit.html">Qui sommes-nous ? </a></li>
                            
                                <li><a href="http://www.siteduzero.com/formations.html">Formation professionnelle</a></li>
                                <li><a href="http://www.siteduzero.com/recrutement.html">Recrutement</a></li>
                            
                            <li><a href="http://www.simple-it.fr/blog/">Notre blog</a></li>
                        </ul>
                    </li>
                    <li>
                        Contacts
                        <ul>
                            <li><a href="http://www.siteduzero.com/publicite-440.html">Espace annonceurs</a></li>
                            <li><a href="http://www.siteduzero.com/presse.html">Espace presse</a></li>
                            <li><strong><a href="http://www.siteduzero.com/contact.html" accesskey="7">Nous contacter</a></strong></li>
                            <li><a href="http://www.siteduzero.com/promouvoir.html">Promouvoir le site</a></li>
                            <li><a href="http://suggestions.siteduzero.com/forums/97879-rapports-de-bugs">Signaler un bug</a></li>
                        </ul>
                    </li>
                    
                        <li>
                            Partenaires 
                            <ul>
                                <li><a href="http://www.planethoster.net/Site-du-Zero">Hébergement web</a></li>
                                <li><a href="http://www.zcorrecteurs.fr/">Correction tutoriels</a></li>
                            </ul>
                        </li>
                    
                    <li>
                        Suivez-nous
                        <ul class="dernier">
                            <li><a href="http://www.siteduzero.com/Templates/xml/news_fr.xml"><img src="./ogl_files/rss_mini.png" alt="Flux RSS"> Flux RSS News</a>, <a href="http://www.siteduzero.com/Templates/xml/tutoriels_fr.xml">Cours</a>, <a href="http://www.simple-it.fr/blog/index.php?feed/atom">Blog</a></li>
                            <li><a href="http://www.siteduzero.com/twitter.html"><img src="./ogl_files/twitter_mini.png" alt="Twitter"> Twitter</a></li>
                            <li><a href="http://www.facebook.com/siteduzero"><img src="./ogl_files/fb_mini.png" alt="Facebook"> Facebook</a></li>
                        </ul>
                    </li>
                </ul>

                
            </div>

            


            
            <script type="text/javascript" src="./ogl_files/scripts_lang.min.js"></script>
            <script type="text/javascript" src="./ogl_files/scripts.min.js"></script>
            <script type="text/javascript" src="./ogl_files/lib.min.js"></script>

            
                <script type="text/javascript">
    var addthis_config = {  ui_508_compliant: true,
                            ui_cobrand: "Site du Zéro",
                            ui_header_color: "#ffffff",
                            ui_header_background: "#7AB7FC",
                            username: "simpleit",
                            services_exclude: 'print,pdfonline,email,twitter,facebook,myspace,googlebuzz,blogger,buzz,live',
                            data_track_clickback: true  };
                        
    var addthis_share = {templates: { twitter:'{{title}} {{url}} #SdZ' } };

    $('div.slidable').hide();
    $('a.expend').show();
    $('a.expend').removeAttr('style');
    
    $('.expend').click(function(e)
    {
        e.preventDefault();
        $(this).hide('fast');
        $(this).next('div.slidable').slideToggle('fast');
    });
   
</script>
<script type="text/javascript" src="./ogl_files/addthis_widget.js"></script>
            

            <div class="droite printnone">
                <a href="http://www.xiti.com/xiti.asp?s=129196" title="WebAnalytics">
                    <script type="text/javascript">
                        <!--
                        Xt_param = 's=129196&p=%2Ftutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html%3Fall%3D1';
                        try {Xt_r = top.document.referrer;}
                        catch(e) {Xt_r = document.referrer; }
                        Xt_h = new Date();
                        Xt_i = '<img width="80" height="15" border="0" ';
                        Xt_i += 'src="http://logv23.xiti.com/g.xiti?'+Xt_param;
                        Xt_i += '&hl='+Xt_h.getHours()+'x'+Xt_h.getMinutes()+'x'+Xt_h.getSeconds();
                        if(parseFloat(navigator.appVersion)>=4)
                        {
                        Xt_s=screen;Xt_i+='&r='+Xt_s.width+'x'+Xt_s.height+'x'+Xt_s.pixelDepth+'x'+Xt_s.colorDepth;
                        }
                        document.write(Xt_i+'&ref='+Xt_r.replace(/[<>"]/g, '').replace(/&/g, '$')+'">');
                        //-->
                    </script><img width="80" height="15" border="0" src="./ogl_files/g.xiti">
                    <object>
                        <noscript>
                            &lt;p&gt;&lt;img width="80" height="15" src="http://logv23.xiti.com/g.xiti?s=129196&amp;amp;p=&amp;amp;" alt="WebAnalytics" /&gt;&lt;/p&gt;
                        </noscript>
                    </object>
                </a>
                <script type="text/javascript">
                    var _gaq = _gaq || [];
                    _gaq.push(['_setAccount', 'UA-19807070-2']);
                    _gaq.push(['_trackPageview']);

                    (function() {
                    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
                    })();
                </script>
            </div>

            <!-- /#3 274/#1.2169/#1.1702/# -->
	
    


<div style="display: none; position: absolute; overflow-x: hidden; overflow-y: hidden; z-index: 1000; outline-width: 0px; outline-style: initial; outline-color: initial; " class="ui-dialog ui-widget ui-widget-content ui-corner-all " tabindex="-1" role="dialog" aria-labelledby="ui-dialog-title-dialog_bientot"><div class="ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix" unselectable="on"><span class="ui-dialog-title" id="ui-dialog-title-dialog_bientot" unselectable="on">Bientôt sur le Site du Zéro.</span><a href="http://www.siteduzero.com/tutoriel-3-5014-creez-des-programmes-en-3d-avec-opengl.html?all=1#" class="ui-dialog-titlebar-close ui-corner-all" role="button" unselectable="on"><span class="ui-icon ui-icon-closethick" unselectable="on">close</span></a></div><div id="dialog_bientot" style="" class="ui-dialog-content ui-widget-content">
                <p>Le Site du Zéro vous proposera bientôt de nouveaux cours partant de Zéro dans d'autres domaines que l'informatique ! </p>
                 <a style="color:#2677C9;text-decoration:none;" href="http://www.siteduzero.com/tutoriel-1-433-sciences.html">Découvrir les cours scientifiques</a>
            </div><div class="ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"><button type="button" class="ui-state-default ui-corner-all">Ok</button></div></div><div id="tooltip" style="display: none; "><h3></h3><div class="body"></div><div class="url"></div></div></body></html>