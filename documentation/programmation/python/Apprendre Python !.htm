<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0071)http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1 -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link rel="stylesheet" type="text/css" href="./Apprendre Python !_files/widget53.css" media="all">

        


        
        <meta name="keywords" content="tutoriels, concernant, programmation, python">
        <meta name="description" content="Tutoriels concernant la programmation en Python">
        <meta name="robots" content="index,follow">
        <meta name="verify-v1" content="UL/4+QUCNTv1xBkNcC4sv4EjPUAoVj1yE+fMZClqLsc=">

        <title>
            Apprendre Python !
        </title>

        <link rel="shortcut icon" type="image/x-icon" href="http://www.siteduzero.com/Templates/images/designs/2/favicon.ico">
        <link rel="alternate" type="application/rss+xml" title="News du Site du Zéro" href="http://www.siteduzero.com/Templates/xml/news_fr.xml">
        
        <link rel="alternate" type="application/rss+xml" title="Derniers tutoriels du Site du Zéro" href="http://www.siteduzero.com/Templates/xml/tutoriels_fr.xml">
        

        <link rel="index" href="http://www.siteduzero.com/plan.html">
        <link rel="start" title="Accueil" href="http://www.siteduzero.com/">
        <link rel="search" type="application/opensearchdescription+xml" title="Site Du Zero" href="http://www.siteduzero.com/Templates/xml/xpi/fr/siteduzero.xpi">
        <link rel="search" href="http://www.siteduzero.com/recherche.html" title="Rechercher">
        <link rel="help" title="Accessibilité" href="http://www.siteduzero.com/accessibilite.html">
        <link rel="accesskeys" title="Raccourcis et Accesskeys" href="http://www.siteduzero.com/accessibilite.html">


        <link href="./Apprendre Python !_files/design.min.css" rel="stylesheet" type="text/css" media="screen, handheld, tv, projection">
        <link href="./Apprendre Python !_files/zcode.min.css" rel="stylesheet" type="text/css" media="screen, handheld, tv, projection">
        <link href="./Apprendre Python !_files/impression.min.css" rel="stylesheet" type="text/css" media="print">


        

        

        <!--[if lt IE 8]>
            <link href="/css/ie_old.min.css?1299748133" rel="stylesheet" type="text/css" media="screen" />
        <![endif]-->

        
            <script type="text/javascript" async="" src="./Apprendre Python !_files/ga.js"></script><script type="text/javascript">
                document.write('<style type="text/css">');
                document.write('.spoiler3{visibility: hidden;}');           // cache le contenu
                document.write('.spoiler3_hidden{display: none;}');         // ferme le cadre "secret"

                document.write('.spoiler_hidden a{visibility: visible;}');  // montre le lien pour afficher le contenu
                document.write('.spoiler a{visibility: visible;');          // montre le lien pour afficher le contenu
                document.write('</style>');
            </script><style type="text/css">.spoiler3{visibility: hidden;}.spoiler3_hidden{display: none;}.spoiler_hidden a{visibility: visible;}.spoiler a{visibility: visible;</style>
        
        <!--
        
            <style type="text/css">
                .spoiler3
                {
                        visibility: hidden;
                }
                .spoiler3_hidden
                {
                        display: none;
                }
            </style>
        
        -->
        
        <script type="text/javascript" src="./Apprendre Python !_files/jquery.min.js"></script>
        <script type="text/javascript" src="./Apprendre Python !_files/jqueryui.min.js"></script>
    </head>

    <body><div style="visibility: hidden; height: 1px; width: 1px; position: absolute; z-index: 100000; " id="_atssh"><iframe id="_atssh346" style="height: 1px; width: 1px; position: absolute; z-index: 100000; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; left: 0px; top: 0px; " src="./Apprendre Python !_files/sh33.htm"></iframe></div>
		
            <div id="acces_rapide">
                <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#menu">Aller au menu</a> - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#corps">Aller au contenu</a>
            </div>

            <div id="top">
                <ul class="intersites">
                    
                    <li class="selected"><a href="http://www.siteduzero.com/">Informatique</a></li>
                    <li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" id="bientot_lien">Bientôt...</a></li>
                </ul>

		<ul class="stats_sites">
                    
                    <li class="last_items"><a href="http://www.siteduzero.com/connectes.html">3 231 Zéros connectés</a> - </li>
                    <li class="last_items"><a href="http://www.siteduzero.com/membres-292.html">231 101 Membres inscrits</a></li>
		</ul>
            </div>

            <div id="header">
                <div class="header_gauche">
                    <a href="http://www.siteduzero.com/"><img src="./Apprendre Python !_files/logo_sdz_fr.png" alt=""></a>
                </div>

                <div class="header_droit">
                    <div class="fr">
                        <div id="logbox">
                            
                                <div class="bloc_inscription">
                                    <a href="http://www.siteduzero.com/membres-315.html">
                                        <strong class="liens_invites">Inscription</strong><br>
                                        Inscription rapide en 2 minutes
                                    </a>
                                </div>
                                <div class="bloc_connexion">
                                    <a href="http://www.siteduzero.com/connexion.html">
                                        <strong class="liens_invites">Connexion</strong><br>
                                        Utilisez votre compte
                                    </a>
                                    <a class="rpxnow" onclick="return false;" href="https://site-du-zero.rpxnow.com/openid/v2/signin?token_url=http%3A%2F%2Fwww.siteduzero.com%2Fmembres-348-1.html%3Freferer%3Dtutoriel-3-223267-apprendre-python.html%3Fall%3D1"><img src="./Apprendre Python !_files/rpx_icons.png" alt="connexion_rpx"></a>
                                    <script type="text/javascript">
                                        var rpxJsHost = (("https:" == document.location.protocol) ? "https://" : "http://static.");
                                        document.write(unescape("%3Cscript src='" + rpxJsHost +
                                        "rpxnow.com/js/lib/rpx.js' type='text/javascript'%3E%3C/script%3E"));
                                    </script><script src="./Apprendre Python !_files/rpx.js" type="text/javascript"></script>
                                    <script type="text/javascript">
                                        RPXNOW.overlay = true;
                                        RPXNOW.language_preference = 'fr';
                                    </script>
                                </div>
                            
                        </div>

                        
                    </div>

                    <div id="publicite_header">
                        <div id="publicite_banniere" class="publicite">
                            <script type="text/javascript">
                                <!--
                                ord=Math.random();
                                ord=ord*10000000000000000000;
                                document.write('<scr'+'ipt type="text/javascript" src="pub.js.php?cb='+ord+'&amp;l=468&amp;h=60&amp;age=0&amp;pays=0&amp;cid=196"><\/scr'+'ipt>');
                                -->
                            </script><script type="text/javascript" src="./Apprendre Python !_files/pub.js.php"></script>
                        </div>

                    </div>
                    </div>
                </div>

                    <div id="speedbarre">
                            <ul class="smenu">
                                <li id="speed_accueil" class="home">
                                    <a href="http://www.siteduzero.com/" accesskey="1">
                                        <span title="Accueil">Accueil</span>
                                    </a>
                                </li>
                                
                                <li id="speed_cours" class="">
                                    <a href="http://www.siteduzero.com/tutoriel.html">
                                        <span>Cours</span>
                                    </a>
                                    <span class="speedbarre_arrow"></span>
                                </li>
                                <li id="speed_forum" class="">
                                    <a href="http://www.siteduzero.com/forum.html">
                                        <span>Forums</span>
                                    </a>
                                    <span class="speedbarre_arrow"></span>
                                </li>
                                
                                    <li id="speed_concours" class="">
                                        <a href="http://www.siteduzero.com/participez.html">
                                            <span>Participez</span>
                                        </a>
                                        <span class="speedbarre_arrow"></span>
                                    </li>
                                    <li id="speed_etudes" class="">
                                        <a href="http://www.siteduzero.com/etudes.html" class="last_item">
                                            <span>Études</span>
                                        </a>
                                        <span class="speedbarre_arrow"></span>
                                    </li>
                                    <li id="speed_job" class="">
                                        <a href="http://www.siteduzero.com/emploi.html" class="last_item">
                                            <span>Emploi</span>
                                        </a>
                                        <span class="speedbarre_arrow"></span>
                                    </li>

                                    <li id="speed_boutique" class="">
                                    <a href="http://www.siteduzero.com/boutique.html" class="last_item">
                                            <span>Boutique</span>
                                        </a>
                                        <span class="speedbarre_arrow"></span>
                                    </li>
                                
                            </ul>

                            <div id="speedbar_expand" class="menuh" style="display:none;">
                                <div class="menuh_content">
                                    <div id="menuh_tutorials" style="display:none;">
                                        

                                        <div id="menu_tutorials">
                                            <div class="menu_prim">
                                                <h5>Les cours phares</h5>
                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><img src="./Apprendre Python !_files/67.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><strong>Site Web</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-13666-apprenez-a-creer-votre-site-web.html"><span style="display:block">XHTML / CSS</span></a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-309961-dynamisez-vos-sites-web-avec-javascript.html">Javascript</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-14668-concevez-votre-site-web-avec-php-et-mysql.html">PHP / MySQL</a>
                                                            <a href="http://www.siteduzero.com/boutique-614-107-concevez-votre-site-web-avec-php-et-mysql.html">
                                                                <span class="in_book"><img src="./Apprendre Python !_files/ico_livre.png" alt=""></span>
                                                                <span style="display:none">Ce cours existe en livre :<br>Concevez votre site web avec PHP et MySQL</span>
                                                            </a>
                                                        </li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-112219-apprenez-a-creer-des-applications-web-dynamiques-avec-jee.html">Java EE (J2EE)</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html"><img src="./Apprendre Python !_files/57.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html"><strong>Programmation</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-14189-apprenez-a-programmer-en-c.html">Langage C</a>
                                                            <a href="http://www.siteduzero.com/boutique-614-65-apprenez-a-programmer-en-c.html">
                                                                <span class="in_book"><img src="./Apprendre Python !_files/ico_livre.png" alt=""></span>
                                                                <span style="display:none">Ce cours existe en livre :<br>Apprenez à programmer en C</span>
                                                            </a>
                                                        </li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-11406-apprenez-a-programmer-en-c.html">Langage C++</a></li>
                                                        <li>
                                                            <a href="http://www.siteduzero.com/tutoriel-3-10601-programmation-en-java.html">
                                                                Java
                                                            </a>
                                                            <a href="http://server1.evonia.fr/tracking/ads_stats2-32325f35385f323533__77c00fc1a6__2748__2-0/http://www.siteduzero.com/boutique-614-430-apprenez-a-programmer-en-java.html">
                                                                <span class="in_book"><img src="./Apprendre Python !_files/ico_livre_preco.png" alt=""></span>
                                                                <span style="display:none">Ce livre est en précommande :<br>Apprenez à programmer en Java</span>
                                                            </a>
                                                        </li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-119239-programmation-en-java-api.html">Java (API)</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html">Python</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-134798-visual_basic_net.html">VB .NET </a></li>
                                                    </ul>
                                                </div>


                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><img src="./Apprendre Python !_files/60.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><strong>Systèmes d'exploitation</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-12827-reprenez-le-controle-a-l-aide-de-linux.html">Linux</a>
                                                            <a href="http://www.siteduzero.com/boutique-614-171-reprenez-le-controle-a-l-aide-de-linux.html">
                                                                <span class="in_book"><img src="./Apprendre Python !_files/ico_livre.png" alt=""></span>
                                                                <span style="display:none">Ce cours existe en livre :<br>Reprenez le contrôle a l'aide de Linux</span>
                                                            </a>
                                                        </li>                                                    
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-273305-freebsd-et-l-envers-du-decor.html">FreeBSD</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html"><img src="./Apprendre Python !_files/56.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html"><strong>Graphisme</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-351765-debuter-sur-adobe-photoshop.html">Photoshop</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html"><img src="./Apprendre Python !_files/58.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html"><strong>Infographie 3D</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-11714-debutez-dans-la-3d-avec-blender.html">Blender</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-228998-apprenez-a-modeliser-en-3d-avec-autodesk-maya.html">Maya </a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><img src="./Apprendre Python !_files/55.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><strong>Bureautique</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-258577-redigez-des-documents-de-qualite-professionnelle-avec-latex.html">LaTeX</a>
                                                            <a href="http://www.siteduzero.com/boutique-614-207-redigez-des-documents-de-qualite-professionnelle-avec-latex.html">
                                                                <span class="in_book"><img src="./Apprendre Python !_files/ico_livre.png" alt=""></span>
                                                                <span style="display:none">Ce cours existe en livre :<br>Rédigez des documents de qualité avec LaTeX</span>
                                                            </a>
                                                        </li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-417000-redigez-facilement-des-documents-avec-word.html">Word<img style="margin-left: 10px;" alt="" src="./Apprendre Python !_files/iconouveau.png"></a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                            
                                            <div class="menu_princi menuhcattuto ">
                                                <h5>Tous les cours par catégories</h5>
                                                <div class="menuh_princi_col">
                                                    
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><img src="./Apprendre Python !_files/67.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html">Site Web <span style="font-weight:normal;">(206 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-69-xhtml-css.html">XHTML / CSS</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-210-php.html">PHP</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-71-divers.html">Divers</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-73-forums.html">Forums</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-77-hebergement.html">Hébergement</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-70-javascript.html">Javascript</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-74-serveur.html">Serveur</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-309-ide.html">IDE</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><img src="./Apprendre Python !_files/60.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html">Systèmes d'exploitation <span style="font-weight:normal;">(96 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-96-linux.html">Linux</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-147-macos.html">MacOS</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-97-windows.html">Windows</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-408-bsd.html">BSD</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-54-mapping.html"><img src="./Apprendre Python !_files/54.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-54-mapping.html">Mapping <span style="font-weight:normal;">(31 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-63-half-life.html">Half-Life</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-66-half-life.html">Half-Life²</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-173-warcraft.html">Warcraft</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-188-autres.html">Autres</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><img src="./Apprendre Python !_files/55.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html">Bureautique <span style="font-weight:normal;">(29 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-290-microsoft-office.html">Microsoft Office</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-291-openoffice-org.html">OpenOffice.org</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-87-firefox.html">Firefox</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-195-irc.html">IRC</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-192-divers.html">Divers</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-59-jeux-video.html"><img src="./Apprendre Python !_files/59.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-59-jeux-video.html">Jeux Vidéo <span style="font-weight:normal;">(22 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-102-hl-ses-mods.html">HL &amp; ses mods</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-185-autres-jeux.html">Autres jeux</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-61-materiel.html"><img src="./Apprendre Python !_files/61.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-61-materiel.html">Matériel <span style="font-weight:normal;">(11 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-101-general.html">Général</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        

                                                    <div class="menuh_list_category">
                                                        <div class="ico"><img src="./Apprendre Python !_files/tuto_cat_thb.png" alt=""></div>
                                                        <h6>Autres</h6>
                                                        <ul>
                                                            
                                                                <li>
                                                                    <a style="display:block" href="http://www.siteduzero.com/tutoriel-2-404-bases-de-donnees.html">Bases de données</a>
                                                                </li>
                                                            
                                                                <li>
                                                                    <a style="display:block" href="http://www.siteduzero.com/tutoriel-2-403-mobiles.html">Mobiles</a>
                                                                </li>
                                                            
                                                                <li>
                                                                    <a style="display:block" href="http://www.siteduzero.com/tutoriel-2-141-site-du-zero.html">Site du Zéro</a>
                                                                </li>
                                                            
                                                        </ul>
                                                    </div>
                                                </div>

                                                <div class="menuh_princi_col">
                                                    
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html">
                                                                    <img src="./Apprendre Python !_files/57.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html">Programmation</a> <span style="font-weight:normal;">(244 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-91-as-flash-flex.html">AS / Flash / Flex</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-217-algorithmique.html">Algorithmique</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-254-basic-et-derives.html">Basic et dérivés</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-344-bibliotheques.html">Bibliothèques</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-262-c.html">C</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-261-c.html">C++</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-201-c-net.html">C# / .NET</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-258-calculatrices.html">Calculatrices</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-242-ide.html">IDE</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-336-erlang.html">Erlang</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-227-general.html">Général</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-178-java.html">Java</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-93-mirc.html">mIRC</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-196-python.html">Python</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-355-caml-ocaml.html">Caml / OCaml</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-386-cocoa-objective-c.html">Cocoa / Objective-C</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-253-autres-langages.html">Autres langages</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html">
                                                                    <img src="./Apprendre Python !_files/56.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html">Graphisme</a> <span style="font-weight:normal;">(27 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-176-dessin.html">Dessin</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-177-divers.html">Divers</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-79-flash.html">Flash</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-157-gimp.html">Gimp</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-153-dessin-vectoriel.html">Dessin vectoriel</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-190-photofiltre.html">PhotoFiltre</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-78-photoshop.html">Photoshop</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-197-pov-ray.html">POV-Ray</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html">
                                                                    <img src="./Apprendre Python !_files/58.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html">Infographie 3D</a> <span style="font-weight:normal;">(25 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-95-3d-studio-max.html">3D Studio Max</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-152-blender.html">Blender</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-296-maya.html">Maya</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-62-multimedia.html">
                                                                    <img src="./Apprendre Python !_files/62.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-62-multimedia.html">Multimédia</a> <span style="font-weight:normal;">(24 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-99-audio.html">Audio</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-100-video.html">Vidéo</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-382-after-effects.html">After Effects</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-182-reseaux.html">
                                                                    <img src="./Apprendre Python !_files/182.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-182-reseaux.html">Réseaux</a> <span style="font-weight:normal;">(18 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-183-general.html">Général</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-189-securite.html">Sécurité</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        

                                                    <div class="menuh_list_category">
                                                        <div id="create_tutorials_button">
                                                            
                                                                <div><a href="http://www.siteduzero.com/connexion.html"><img src="./Apprendre Python !_files/redigercours.png" alt=""></a></div>
                                                            
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="clear"></div>
                                            </div>
                                            <div class="clear"></div>
                                        </div>
                                    </div>
                                    
                                    <div id="menuh_forum" style="display:none;">
                                        <div class="menu_princi">
                                            <a class="button_all_forums" href="http://www.siteduzero.com/forum.html">Accueil des forums</a>
                                            <div class="menuh_princi_col">
                                                
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-121-site-web.html"><img src="./Apprendre Python !_files/121.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-121-site-web.html">Site Web</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-122-xhtml-css.html">XHTML / CSS</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-338-javascript.html">Javascript</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-123-php.html">PHP</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-128-mapping.html"><img src="./Apprendre Python !_files/128.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-128-mapping.html">Mapping</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-129-goldsource-hl1.html">GoldSource (HL1)</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-130-source-hl2.html">Source (HL2)</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-24-communaute-des-zeros.html"><img src="./Apprendre Python !_files/24.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-24-communaute-des-zeros.html">Communauté des zéros</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-28-discussions-generales.html">Discussions générales</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-278-vos-etudes.html">Vos études</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-239-presentation-de-vos-projets.html">Présentation de vos projets</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-200-recrutements-pour-vos-projets.html">Recrutements pour vos projets</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-440-sciences.html"><img src="./Apprendre Python !_files/440.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-440-sciences.html">Sciences</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-441-mathematiques.html">Mathématiques</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-442-physique-chimie.html">Physique - Chimie</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-443-biologie-et-geologie.html">Biologie et Géologie</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-444-autres-sciences.html">Autres sciences</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                            </div>

                                            <div class="menuh_princi_col">
                                                
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-125-programmation.html"><img src="./Apprendre Python !_files/125.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-125-programmation.html">Programmation</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-126-langage-c.html">Langage C</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-237-langage-c.html">Langage C++</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-305-langage-java.html">Langage Java</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-407-langage-python.html">Langage Python</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-406-bases-de-donnees.html">Bases de données</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-127-autres-langages-outils-et-approches.html">Autres langages, outils et approches</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-219-materiel-et-logiciels.html"><img src="./Apprendre Python !_files/219.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-219-materiel-et-logiciels.html">Matériel et logiciels</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-339-discussions-informatiques.html">Discussions informatiques</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-220-linux-mac-et-bsd.html">Linux, Mac et *BSD</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-221-windows.html">Windows</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-116-jeux-video.html">Jeux vidéo</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-117-graphisme.html">Graphisme</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-223-materiel.html">Matériel</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-310-concours.html"><img src="./Apprendre Python !_files/310.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-310-concours.html">Concours</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-435-innov-game-2011-a-la-gloire-de.html">Innov'Game 2011 : A la gloire de</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-447-atelier-de-noel-faites-votre-jeu.html">Atelier de noël : "Faites votre jeu"</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-143-le-site-du-zero.html"><img src="./Apprendre Python !_files/143.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-143-le-site-du-zero.html">Le Site du Zéro</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-144-suggestions-et-commentaires.html">Suggestions et Commentaires</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-145-designs-du-site-du-zero.html">Designs du Site du Zéro</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-429-tutoriels-du-site-du-zero.html">Tutoriels du Site du Zéro</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                            </div>
                                        </div>

                                        
                                    <div class="clear"></div>
                                    </div>
                                    <div id="menuh_collaborate" style="display:none;">
                                        <div class="menuh_list_category">
                                            
                                                <div class="ico"><a href="http://www.siteduzero.com/membres-315.html"><img src="./Apprendre Python !_files/tuto_cat_thb.png" alt=""></a></div>
                                                <h6><a href="http://www.siteduzero.com/membres-315.html">Cours</a></h6>
                                                <ul>
                                                    <li style="font-style:italic;">Pour rédiger et participer à la rédaction d'un tutoriel, <a style="display:inline; font-style:normal" href="http://www.siteduzero.com/membres-315.html">rejoignez-nous !</a></li>
                                                </ul>
                                            
                                        </div>

                                        <div class="menuh_list_category">
                                            
                                                <div class="ico"><a href="http://www.siteduzero.com/membres-315.html"><img src="./Apprendre Python !_files/defaut_thb.png" alt=""></a></div>
                                                <h6><a href="http://www.siteduzero.com/membres-315.html">News</a></h6>
                                                <ul>
                                                    <li style="font-style:italic;">Pour partager ou participer à la rédaction d'une news, <a style="display:inline; font-style:normal" href="http://www.siteduzero.com/membres-315.html"> rejoignez-nous !</a></li>
                                                </ul>
                                            
                                        </div>

                                        <div class="menuh_list_category">
                                            <div class="ico"><a href="http://www.siteduzero.com/concours.html"><img src="./Apprendre Python !_files/cup_thb.png" alt=""></a></div>
                                            <h6><a href="http://www.siteduzero.com/concours.html">Concours</a></h6>
                                            <ul>
                                                
                                                        <li><a href="http://www.siteduzero.com/concours-654-122-innov-game-2011-a-la-gloire-de.html">Innov'Game 2011 : A la gloire de</a></li>
                                                    
                                            </ul>
                                        </div>
                                        <div class="clear"></div>
                                    </div>


                                    <div id="menuh_job" style="display:none;">
                                        <div class="menu_princi">
                                            <div class="menuh_princi_col">
                                                <div class="menuh_list_category">
                                                    <h6>Dernières annonces</h6>
                                                    <div class="menuh_list_category_job">
                                                        
                                                            <a title="Consulter le poste : Développeur C/C++ (H/F)" href="http://www.siteduzero.com/emploi/78/developpeur-c-c" class="corpsmenu">
                                                                <span class="last_jobs">
                                                                    <span title="CDD" class="job_type jobtypes2">CDD</span>
                                                                </span>
                                                                <span>
                                                                    <span class="job_title">Développeur C/C++ (H/F)</span>
                                                                    <span style="color:#000000;">AYOTLE</span>
                                                                </span>
                                                            </a>
                                                        
                                                            <a title="Consulter le poste : Développeur web asp.net/aja…" href="http://www.siteduzero.com/emploi/77/developpeur-web-asp-net-ajax-xhtml" class="corpsmenu">
                                                                <span class="last_jobs">
                                                                    <span title="Stage" class="job_type jobtypes3">Stage</span>
                                                                </span>
                                                                <span>
                                                                    <span class="job_title">Développeur web asp.net/aja…</span>
                                                                    <span style="color:#000000;">Citizenside.com</span>
                                                                </span>
                                                            </a>
                                                        
                                                            <a title="Consulter le poste : Ingénieur logiciel C++ (H/F…" href="http://www.siteduzero.com/emploi/3/ingenieur-logiciel-c" class="corpsmenu">
                                                                <span class="last_jobs">
                                                                    <span title="Stage" class="job_type jobtypes3">Stage</span> <span title="CDI" class="job_type jobtypes1">CDI</span>
                                                                </span>
                                                                <span>
                                                                    <span class="job_title">Ingénieur logiciel C++ (H/F…</span>
                                                                    <span style="color:#000000;">FACTSET JCF</span>
                                                                </span>
                                                            </a>
                                                        
                                                    </div>
                                                </div>
                                            </div>
                                                
                                                <div class="menuh_princi_col">
                                                    
                                                        <div class="menuh_list_category">
                                                            <h6>Annonces à la une</h6>
                                                            <div class="menuh_list_category_job">
                                                                
                                                                    <a title="Consulter le poste : 5 Développeurs Java (H/F)" href="http://www.siteduzero.com/emploi/63/5-developpeurs-java" class="corpsmenu">

                                                                        <span class="last_jobs">
                                                                            <span title="CDI" class="job_type jobtypes1">CDI</span>
                                                                        </span>
                                                                        <span>
                                                                            <span class="job_title">5 Développeurs Java (H/F)</span>
                                                                            <span style="color:#000000;">Small iz beautiful pour AIRP…</span>
                                                                        </span>
                                                                    </a>
                                                                
                                                                    <a title="Consulter le poste : Développeur PHP Symfony (H/…" href="http://www.siteduzero.com/emploi/58/developpeur-php-symfony" class="corpsmenu">

                                                                        <span class="last_jobs">
                                                                            <span title="CDI" class="job_type jobtypes1">CDI</span>
                                                                        </span>
                                                                        <span>
                                                                            <span class="job_title">Développeur PHP Symfony (H/…</span>
                                                                            <span style="color:#000000;">Externis Resourcing</span>
                                                                        </span>
                                                                    </a>
                                                                
                                                            </div>
                                                        </div>
                                                      
                                                    <div class="menuh_list_category">
                                                        <div>
                                                            <div><a href="http://www.siteduzero.com/emploi.html"><img src="./Apprendre Python !_files/speed_barre_btn_recherche_emploi.png" alt=""></a></div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="menuh_more2">
                                                        <a href="http://www.siteduzero.com/emploi/liste.html">Toutes les annonces<img src="./Apprendre Python !_files/fleche_droite.png" alt="►"></a>
                                                </div>
                                            </div>
                                        <div class="clear"></div>
                                    </div>

                                    <div id="menuh_study" style="display:none; padding-left:15px;">
                                        <div class="menu_princi">
                                            <div class="ico_study"><img src="./Apprendre Python !_files/ico_etude.png" width="50" alt="icon etude"></div>
                                            <div class="menuh_princi_col">
                                                <div class="menuh_list_category">
                                                    <h6>Recrutement à Bac / Bac +1</h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-280-bts.html">BTS</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-269-ecoles-d-ing%C3%A9nieurs-en-informatique.html">Ecoles d'ingénieurs en informatique</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-274-ecoles-d-ing%C3%A9nieurs-generalistes.html">Ecoles d'ingénieurs généralistes</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-283-iut.html">IUT</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-300-universites.html">Universités</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-287-autre-formation-diplomantes.html">Autres formations diplômantes</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-448-cpge.html">CPGE</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <h6>Recrutement à Bac +2</h6>
                                                    <ul>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-270-ecoles-d-ing%C3%A9nieurs-en-informatique.html">Ecoles d'ingénieurs en informatique</a></li>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-273-ecoles-d-ing%C3%A9nieurs-generalistes.html">Ecoles d'ingénieurs généralistes</a></li>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-289-autre-formation-diplomantes.html">Autres formations diplômantes</a></li>
                                                    </ul>
                                                </div>
                                            </div>

                                            <div class="menuh_princi_col">
                                                <div class="menuh_list_category">
                                                    <h6>Recrutement à Bac +3 / Bac +4</h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-388-ecoles-d-ing%C3%A9nieurs-en-informatique.html">Ecoles d'ingénieurs en informatique</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-389-ecoles-d-ing%C3%A9nieurs-generalistes.html">Ecoles d'ingénieurs généralistes</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-390-autre-formation-diplomantes.html">Autres formations diplômantes</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <h6>Recrutement à Bac +5</h6>
                                                    <ul>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-299-doctorats.html">Doctorats</a></li>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-391-autre-formation-diplomantes.html">Autres formations diplômantes</a></li>
                                                    </ul>
                                                    <div class="menuh_list_category">
                                                        <div id="find_training">
                                                            <div><a href="http://www.siteduzero.com/etudes.html"><img src="./Apprendre Python !_files/ico_recherche_cours.png" alt=""><strong>Trouvez une formation</strong></a></div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="clear"></div>
                                    </div>

                                    <div id="menuh_shop" style="display:none;">
                                        <div class="flagship_products headband_preorder">
                                            <a style="display:block;height:144px;" href="http://www.siteduzero.com/boutique-614-430-apprenez-a-programmer-en-java.html"><img src="./Apprendre Python !_files/livre_cours_java_2d.png" alt="Apprenez à programmer en Java"></a>
                                            <h5>Apprenez à programmer en Java</h5>
                                            <div class="price" style="margin-top : 16px;">
                                                <span class="min_price">Prix de précommande</span><br>
                                                25 €
                                            </div>
                                            <span><a class="bouton_action fl" href="http://www.siteduzero.com/boutique-614-430-apprenez-a-programmer-en-java.html">Acheter</a></span>
                                        </div>
                                        <div class="flagship_products">
                                            <a href="http://www.siteduzero.com/boutique-614-188-cle-usb-du-site-du-zero-8-go.html"><img src="./Apprendre Python !_files/image_usb_speedbarre.jpg" alt="cle usb"></a>
                                            <h5>Clé USB du site du Zéro</h5>
                                            <a href="http://www.siteduzero.com/boutique-614-184-cle-usb-du-site-du-zero-4-go.html">4 Go</a>
                                            - <a href="http://www.siteduzero.com/boutique-614-188-cle-usb-du-site-du-zero-8-go.html">8 Go</a>
                                            - <a href="http://www.siteduzero.com/boutique-614-191-cle-usb-du-site-du-zero-16-go.html">16 Go</a><br>
                                            <div class="price">
                                                <span class="min_price">À partir de</span><br>
                                                15,20 €
                                            </div>
                                            <span><a class="bouton_action fl" href="http://www.siteduzero.com/boutique-614-188-cle-usb-du-site-du-zero-8-go.html">Acheter</a></span>
                                        </div>

                                    <div class="other_products">
                                        <span>Concevez votre site web avec PHP et MySQL<br>
                                        <a href="http://www.siteduzero.com/boutique-614-107-concevez-votre-site-web-avec-php-et-mysql.html">En savoir plus ►</a></span>
                                        <a href="http://www.siteduzero.com/boutique-614-107-concevez-votre-site-web-avec-php-et-mysql.html">
                                        <img style="margin:13px 0 0 22px" alt="Concevez votre site web avec php et mysql" src="./Apprendre Python !_files/livre_cours_php_2d.png"></a>
                                    </div>

                                    <div class="other_products">
                                        <span>Apprenez à programmer en C <br>
                                        <a href="http://www.siteduzero.com/boutique-614-65-apprenez-a-programmer-en-c.html">En savoir plus ►</a></span>
                                        <a href="http://www.siteduzero.com/boutique-614-65-apprenez-a-programmer-en-c.html">
                                        <img style="margin:13px 0 0 22px" alt="Apprenez à programmer en C" src="./Apprendre Python !_files/livre_cours_c_2d.png"></a>
                                    </div>
                                    <div class="other_products">
                                        <span>Reprenez le contrôle à l'aide de Linux <br>
                                        <a href="http://www.siteduzero.com/boutique-614-171-reprenez-le-controle-a-l-aide-de-linux.html">En savoir plus ►</a></span>
                                        <a href="http://www.siteduzero.com/boutique-614-171-reprenez-le-controle-a-l-aide-de-linux.html">
                                        <img style="margin:13px 0 0 22px" alt="Reprenez le contrôle à l&#39;aide de Linux" src="./Apprendre Python !_files/livre_cours_linux_2d.png"></a>
                                    </div>

                                    <div class="other_products">
                                        <span>Rédigez des documents de qualité avec LaTeX<br>
                                        <a href="http://www.siteduzero.com/boutique-614-207-redigez-des-documents-de-qualite-avec-latex.html">En savoir plus ►</a></span>
                                        <a href="http://www.siteduzero.com/boutique-614-207-redigez-des-documents-de-qualite-avec-latex.html">
                                        <img style="margin:13px 0 0 22px" alt="Rédigez des documents de qualité avec LaTeX" src="./Apprendre Python !_files/livre_cours_latex_2d.png"></a>
                                    </div>
                                      
                                    <div class="menuh_more">
                                        <a href="http://www.siteduzero.com/boutique.html">Tous les produits <img src="./Apprendre Python !_files/fleche_droite(1).png" alt="►"></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="search_bar">
                        <div class="ard"></div>
                        <form method="get" action="http://www.siteduzero.com/recherche.html" id="recherche">
                            <p>
                                <input type="text" name="src" id="champ_recherche" accesskey="4" value="Rechercher">
                                <select name="c" id="section_recherche">
                                    <option value="3" selected="selected">Cours</option>
                                    <option value="6">Forums</option>
                                    <option value="4">News</option>
                                    <option value="mbr">Membres</option>
                                    <option value="formation">Études</option>
                                    <option value="codeweb">Code web</option>
                                    <option value="mp">MP</option>
                                </select>
                                <input class="button_go_search" value="Go" type="submit">
                                <a class="button_more_search" href="http://www.siteduzero.com/recherche.html">+</a>
                            </p>
                        </form>
                        </div>

                    </div>

<script type="text/javascript">

    
        //On Hover

    var keyCodeEscape = 27;
    $(document).keyup(function(f) {
        if (f.keyCode == keyCodeEscape)
        {
            hideBlocMenu();
        }
    });


    /* Var for speedbar*/
    showDelay = 300;
    hiddenDelay = 367;
    fadeInDelay = 100
    fadeOutDelay = 100
    timer = null;
    hideTimeOut = null
    // speedbar function
    function speedShowDelay(){
        if($('.menuh_content > div').is(':visible'))
        {
            showDelay = null;
        }
        else
        {
            showDelay = 300;
        }
    }
    
    $("body").mouseleave(function(){
        $('.menuh_content > div').hide();
        $('#speedbarre .smenu>li a').removeClass("smenu_hover");
    });
    
    function showMenu(id, id2){

        $(id2).click(function(){
            clearInterval(timer);
            hideBlocMenu();
            return;
        });

        speedShowDelay();

        $("body").unbind('click');

        clearInterval(timer);
        if(!$(id).is(':visible'))
        {
            $('.menuh_content > div').hide();

            $('#speedbarre .smenu>li a').removeClass("smenu_hover");
            $('#speedbarre .smenu > li > .speedbarre_arrow').hide();

            timer=setInterval(function(){
                $(id+' ,#speedbar_expand').fadeIn(fadeInDelay);
                $(id2+' a').addClass('smenu_hover')
                clearInterval(timer);

                },showDelay);
        }
    }

    function hideMenu(id, id2){

        clearInterval(timer);
        clearTimeout(hideTimeOut);

        $("body").bind('click',function(){
            hideBlocMenu();
        });

        timer=setInterval(function(){
            $(id).fadeOut(fadeOutDelay,function(){
                $('#speedbar_expand').hide();
                $(id2+' a').removeClass("smenu_hover");
            });
            clearInterval(timer);
        },hiddenDelay)
    }

    function hideBlocMenu(){
        $('.menuh_content > div').fadeOut(fadeOutDelay, function(){
            $('#speedbar_expand').hide();
            $('#speedbarre .smenu>li a').removeClass("smenu_hover");})
    }

        /* speedbar */


    $("#speed_cours").addClass('hideOnLoad');
    $("#speed_forum").addClass('hideOnLoad');
    $("#speed_concours").addClass('hideOnLoad');
    $("#speed_job").addClass('hideOnLoad');
    $("#speed_etudes").addClass('hideOnLoad');
    $("#speed_boutique").addClass('hideOnLoad');



    $(document).mousemove(function(){
        $("#speed_cours").removeClass('hideOnLoad');
        $("#speed_forum").removeClass('hideOnLoad');
        $("#speed_concours").removeClass('hideOnLoad');
        $("#speed_job").removeClass('hideOnLoad');
        $("#speed_etudes").removeClass('hideOnLoad');
        $("#speed_boutique").removeClass('hideOnLoad');
    })


    //TUTORIALS
    $("#speed_cours, #menuh_tutorials").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_tutorials';
        id2 = '#speed_cours';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_tutorials';
        id2 = '#speed_cours';
        hideMenu(id, id2);
    });
    //FORUMS
    $("#speed_forum, #menuh_forum").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_forum';
        id2 = '#speed_forum';

        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_forum';
        id2 = '#speed_forum';
        hideMenu(id, id2);
    });

    //COLLABORATE
    $("#speed_concours, #menuh_collaborate").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_collaborate';
        id2 = '#speed_concours';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_collaborate';
        id2 = '#speed_concours';
        hideMenu(id, id2);
    });

    //JOB
    $("#speed_job, #menuh_job").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_job';
        id2 = '#speed_job';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_job';
        id2 = '#speed_job';
        hideMenu(id, id2);
    });

    //STUDY
    $("#speed_etudes, #menuh_study").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_study';
        id2 = '#speed_etudes';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_study';
        id2 = '#speed_etudes';
        hideMenu(id, id2);
    });

    //SHOP
    $("#speed_boutique, #menuh_shop").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_shop';
        id2 = '#speed_boutique';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_shop';
        id2 = '#speed_boutique';
        hideMenu(id, id2);
    });

    

</script>
            
            <div class="contenu">
                <div id="menu">
                    

                    <div class="box_menu">
                        <h5>Cours</h5>

                        <div class="corpsmenu">
                            <ul>
                                
                                    <li style="border-bottom: 0 none; padding: 0 0 2px 0; background-color: #e2f0ff">
                                        <a href="http://www.siteduzero.com/tutoriel-3-361996-par-ou-commencer.html"><img style="padding-left:5px;" src="./Apprendre Python !_files/compass.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu" style="margin-left: 43px;">
                                            <a href="http://www.siteduzero.com/tutoriel-3-361996-par-ou-commencer.html"><strong class="menu_cours_section">Nouveau ?</strong></a>
                                            <ul>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-361996-par-ou-commencer.html">Suivez le guide !</a></li>
                                            </ul>
                                        </div>
                                    </li>
                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><img src="./Apprendre Python !_files/67.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><strong class="menu_cours_section">Site Web</strong></a>
                                            <ul>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-13666-apprenez-a-creer-votre-site-web.html">XHTML / CSS</a></li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-309961-dynamisez-vos-sites-web-avec-javascript.html">Javascript</a></li>
                                                <li>
                                                    <a href="http://www.siteduzero.com/tutoriel-3-14668-concevez-votre-site-web-avec-php-et-mysql.html">
                                                        PHP / MySQL
                                                    </a>
                                                    <a href="http://www.siteduzero.com/boutique-614-107-concevez-votre-site-web-avec-php-et-mysql.html">
                                                        <span class="in_book"><img src="./Apprendre Python !_files/ico_livre.png" alt=""></span>
                                                        <span style="display:none">Ce cours existe en livre :<br>Concevez votre site web avec PHP et MySQL</span>
                                                    </a>
                                                </li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-112219-apprenez-a-creer-des-applications-web-dynamiques-avec-jee.html">Java EE (J2EE)</a></li>
                                            </ul>
                                        </div>
                                    </li>
                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html"><img src="./Apprendre Python !_files/57.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html"><strong class="menu_cours_section">Programmation</strong></a>
                                            <ul>
                                                <li>
                                                    <a href="http://www.siteduzero.com/tutoriel-3-14189-apprenez-a-programmer-en-c.html">
                                                        Langage C
                                                    </a>
                                                    <a href="http://www.siteduzero.com/boutique-614-65-apprenez-a-programmer-en-c.html">
                                                        <span class="in_book"><img src="./Apprendre Python !_files/ico_livre.png" alt=""></span>
                                                        <span style="display:none">Ce cours existe en livre :<br>Apprenez à programmer en C</span>
                                                    </a>
                                                </li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-11406-apprenez-a-programmer-en-c.html">Langage C++</a></li>
                                                <li>
                                                    <a href="http://www.siteduzero.com/tutoriel-3-10601-programmation-en-Java.html">
                                                        Java
                                                    </a>
                                                        <a href="http://server1.evonia.fr/tracking/ads_stats2-32325f35385f323533__77c00fc1a6__2748__2-0/http://www.siteduzero.com/boutique-614-430-apprenez-a-programmer-en-java.html">
                                                        <span class="in_book"><img src="./Apprendre Python !_files/ico_livre_preco.png" alt=""></span>
                                                        <span style="display:none">Ce livre est en précommande :<br>Apprenez à programmer en Java</span>
                                                    </a>
                                                </li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-119239-programmation-en-java-api.html">Java (API)</a></li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html">Python </a></li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-134798-visual_basic_net.html">VB .NET</a></li>
                                            </ul>
                                        </div>
                                    </li>
                                    <li>                                        
                                        <a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><img src="./Apprendre Python !_files/60.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><strong class="menu_cours_section">Systèmes d'exploitation</strong></a>
                                            <ul>
                                                <li>
                                                    <a href="http://www.siteduzero.com/tutoriel-3-12827-reprenez-le-controle-a-l-aide-de-linux.html">
                                                        Linux
                                                    </a>
                                                    <a href="http://www.siteduzero.com/boutique-614-171-reprenez-le-controle-a-l-aide-de-linux.html">
                                                        <span class="in_book"><img src="./Apprendre Python !_files/ico_livre.png" alt=""></span>
                                                        <span style="display:none">Ce cours existe en livre :<br>Reprenez le contrôle a l'aide de Linux</span>
                                                    </a>
                                                </li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-273305-freebsd-et-l-envers-du-decor.html">FreeBSD</a></li>
                                            </ul>
                                        </div>
                                    </li>
                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html"><img src="./Apprendre Python !_files/56.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html"><strong class="menu_cours_section">Graphisme</strong></a>
                                            <ul>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-351765-debuter-sur-adobe-photoshop.html">Photoshop</a></li>
                                            </ul>
                                        </div>
                                    </li>
                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html"><img src="./Apprendre Python !_files/58.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html"><strong class="menu_cours_section">Infographie 3D</strong></a>
                                            <ul>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-11714-debutez-dans-la-3d-avec-blender.html">Blender</a></li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-228998-apprenez-a-modeliser-en-3d-avec-autodesk-maya.html">Maya</a></li>
                                            </ul>
                                        </div>
                                    </li>

                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><img src="./Apprendre Python !_files/55.png" class="fl" alt=""></a>
                                        <div class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><strong class="menu_cours_section">Bureautique</strong></a>
                                            <ul>
                                                <li>
                                                    <a href="http://www.siteduzero.com/tutoriel-3-258577-redigez-des-documents-de-qualite-professionnelle-avec-latex.html">
                                                        LaTeX
                                                    </a>
                                                    <a href="http://www.siteduzero.com/boutique-614-207-redigez-des-documents-de-qualite-professionnelle-avec-latex.html">
                                                        <span class="in_book"><img src="./Apprendre Python !_files/ico_livre.png" alt=""></span>
                                                        <span style="display:none">Ce cours existe en livre :<br>Rédigez des documents de qualité avec LaTeX</span>
                                                    </a>
                                                </li>
                                                <li><a href="http://www.siteduzero.com/tutoriel-3-417000-redigez-facilement-des-documents-avec-word.html">Word<img style="margin-left: 10px;" alt="" src="./Apprendre Python !_files/iconouveau.png"></a></li>
                                            </ul>
                                        </div>
                                    </li>
                                    
                                    
                                    <li>
                                        <img src="./Apprendre Python !_files/die.png" class="fl" alt="">
                                        <div class="liste_cours_menu">
                                            <strong class="menu_cours_section">Tutoriel du jour</strong><br>
                                            <ul>
                                                <li>
                                                    <a href="http://www.siteduzero.com/tutoriel-3-33156-faire-un-menu-similaire-a-celui-du-design-popup.html">Faire un menu similaire à celui du design PopUp</a>
                                                </li>
                                            </ul>
                                        </div>
                                    </li>
                                
                                <li class="last_idem_liste">
                                    <div id="menu_ajout_cours">
                                        <ul>
                                            <li>
                                                
                                                    <a href="http://www.siteduzero.com/tutoriel-3-256867-devenez-auteur-de-cours-sur-le-site-du-zero-et-le-livre-du-zero.html">
                                                
                                                Rédigez un cours <img src="./Apprendre Python !_files/add.png" alt="">&nbsp;</a>
                                             </li>
                                             <li>
                                                 <a href="http://www.siteduzero.com/tutoriel.html" title="Tous les cours">Tous les cours  <img src="./Apprendre Python !_files/fleche_droite.png" alt="">&nbsp;</a>
                                             </li>
                                         </ul>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div id="corps">
                    <div id="zozor_position">
                        <div id="zozor">
                            <div class="centre"><img src="./Apprendre Python !_files/zozor6.png" alt=" Zozor" title=" Zozor"></div>
                       </div>
                    </div>

                    <div id="container_bulle_zozor">
                        
                    </div>

                    <div id="arbre">
                        
			&gt;  <a href="http://www.siteduzero.com/">Le Site du Zéro</a>
		
			&gt;  <a href="http://www.siteduzero.com/tutoriel.html">Cours</a>
			 &gt;  <a href="http://www.siteduzero.com/tutoriel-1-352-tutoriels.html">Tutoriels</a>
		 &gt;  <a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html">Programmation</a>
		 &gt;  <a href="http://www.siteduzero.com/tutoriel-2-196-python.html">Python</a>
		&gt;  <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html">Apprendre Python !</a> 

&gt; Lecture du tutoriel

                    </div>

                    


<h1>Apprendre Python !</h1>


<div id="onglets_tutos" class="onglets_tutos">
  <ul>
    
      <li class="selected">
      <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html">Tutoriel</a></li>
    
      <li>
      <a href="http://www.siteduzero.com/tutoriel-50-223267-p6-apprendre-python.html#r71572">160 commentaires</a></li>
    
      <li>
      <a href="http://www.siteduzero.com/tutoriel-21-223267-apprendre-python.html">Historique</a></li>
    
  </ul>
</div>
<hr class="bas_onglets">





<div class="cadre_auteur_date">
  <form action="http://www.siteduzero.com/tutoriel-54-223267.html" method="post">
    <div class="dnone"><input type="hidden" value="7297721f270eb1023794efafd96f8c66acb25dcd" name="challenge"></div>

    <div class="infobox">
<h3 class="special">Informations sur le tutoriel</h3>
<div class="conteneur_infobox">
<table>
  <tbody><tr>
    <td>
    <div class="boite_avatar_100px">
      <a href="http://www.etsionparlait.com/"><img src="./Apprendre Python !_files/1667.jpg" style="width:100px; height:100px;" alt="Avatar" class="avatar" id="avatar154182"></a>  
     </div>
    </td>
    <td>
     
      <strong>Auteurs</strong> :
      
    
	    <a class="auteur_tut" href="http://www.siteduzero.com/membres-294-154182.html">6pri1</a> et 
	    <a class="auteur_tut" href="http://www.siteduzero.com/membres-294-164233.html">prolixe</a>
    
      <br>
    
      
		  <strong>Difficulté</strong> :
		  
			<img src="./Apprendre Python !_files/niveau_1.png" alt="Facile">
		  
		  <br>
	  <strong>Licence</strong> : <a href="http://creativecommons.org/licenses/by-nc-sa/2.0/fr/"><img src="./Apprendre Python !_files/6.png" alt="Creative Commons BY-NC-SA" title="Creative Commons BY-NC-SA"></a><br><br>
      <br>
      <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#tuto_details" onclick="return false;" id="tuto_details_plus">Plus d'informations <img src="./Apprendre Python !_files/fleche_bas.png" alt="Plus d&#39;informations" title="Plus d&#39;informations" id="image_detail"></a>
      <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#onglets_tutos" onclick="return false;" id="tuto_details_moins" style="display : none;">Moins d'informations <img src="./Apprendre Python !_files/fleche_haut.png" alt="Plus d&#39;informations" title="Plus d&#39;informations" id="image_detail_moins"></a>
      <script type="text/javascript">
          var lien_plus = document.getElementById('tuto_details_plus');
          var lien_moins = document.getElementById('tuto_details_moins');

          var toggleDetails = function()
          {
              toggle('infos_detaillees');
              toggle('tuto_details_plus');
              toggle('tuto_details_moins');
              return false;
          };

          if(lien_plus.addEventListener)
          {
              lien_plus.addEventListener('click', toggleDetails , false);
          } else
          {
              lien_plus.attachEvent('onclick', toggleDetails);
          }

          if(lien_moins.addEventListener)
          {
              lien_moins.addEventListener('click', toggleDetails , false);
          } else
          {
              lien_moins.attachEvent('onclick', toggleDetails);
          }
          
      </script>

      <div style="display: none;" id="infos_detaillees">
	<br>			
<strong>Créé</strong> : Le 14/03/2009 à 17:16:53<br>
<strong>Modifié</strong> : Le 23/09/2010 à 12:47:16<br>

<strong>Avancement</strong> : 65%<br>

<br>


<a href="http://www.siteduzero.com/tutoriel-50-223267-71572-apprendre-python.html#r71572">160 commentaires</a><br>

  <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html">Revenir au sommaire du tutoriel</a><br>


      </div>

    </td>
  </tr>
</tbody></table>
</div>
</div>


    <div class="infobox">
        <h3 class="special">Popularité</h3>
        <div class="conteneur_infobox">
            <strong>Visualisations</strong> : 328&nbsp;057<br><br>
            <div style="padding-top: 1px; float: left;"><strong>Appréciation<br>des lecteurs</strong> : </div>
            <div class="tut_appreciation">
                <div class="tut_appreciation_smiley" id="smiley-1-8519--601963" style="background-position: -19px 50%;"><img src="./Apprendre Python !_files/empty.gif" alt=""></div>
                <span id="eval_nb-1">17</span>
            </div>
            <div class="tut_appreciation">
                <div class="tut_appreciation_smiley" id="smiley-2-8519--601963" style="background-position: -57px 50%;"><img src="./Apprendre Python !_files/empty.gif" alt=""></div>
                <span id="eval_nb-2">13</span>
            </div>
            <div class="tut_appreciation">
                <div class="tut_appreciation_smiley" id="smiley-3-8519--601963" style="background-position: -95px 50%;"><img src="./Apprendre Python !_files/empty.gif" alt=""></div>
                <span id="eval_nb-3">46</span>
            </div>
            <div class="tut_appreciation">
                <div class="tut_appreciation_smiley eval_always_color" id="smiley-4-8519--601963" style="background-position: -114px 50%;"><img src="./Apprendre Python !_files/empty.gif" alt=""></div>
                <span id="eval_nb-4">353</span>
            </div>
            
            <div style="clear: both;"></div>
                
                    <p id="tut_vot_ldz" style="text-align:center;"><img src="./Apprendre Python !_files/thb_livre_cours_c.png" id="tut_vot_ldz_img" alt="">
                    
                                <b>1134 personnes</b> souhaitent voir ce tutoriel publié en livre ! <br> <a href="http://www.siteduzero.com/vote/ldz/8519.html" id="tut_vot_ldz_link">Vous aussi ?</a>
                            
            </p>
        </div>
    </div>


<div class="infobox" id="pave_pub_tuto" style="display: block; ">
<h3 class="special">Publicité</h3>
<div class="conteneur_infobox">
<table style="width: 100%;">
  <tbody><tr>
    <td colspan="2" id="menu_pub_tuto">


        
            <script type="text/javascript">
                <!--
                ord=Math.random();
                ord=ord*10000000000000000000;
                var test = true;
                document.write('<scr'+'ipt type="text/javascript" src="pub.js.php?cb='+ord+'&amp;l=300&amp;h=250&amp;age=0&amp;afficher_bloc_pub=pave_pub_tuto&amp;cid=196&amp;pays=0"><\/scr'+'ipt>');
                -->
            </script><script type="text/javascript" src="./Apprendre Python !_files/pub.js(1).php"></script><iframe src="./Apprendre Python !_files/cm.htm" marginwidth="0" marginheight="0" width="300" height="250" border="0" frameborder="0" style="border:none;" scrolling="no"></iframe>
        
    </td>
  </tr>
</tbody></table>
</div>
</div>

    
	<div class="infobox">
		<h3 class="special">Historique des mises à jour</h3>
		<div class="conteneur_infobox">
			<ul>
				
					<li>
						<em>Le 26/02/2011 à 19:47:11</em><br>
						Correction orthographique (#3971)
					</li>
			  
					<li>
						<em>Le 22/02/2011 à 12:46:05</em><br>
						Corrections orthographiques, ticket #3955.
					</li>
			  
					<li>
						<em>Le 03/01/2011 à 17:04:32</em><br>
						Corrections de fautes d'orthographe. (#3590)
					</li>
			  
			</ul>
		</div>
	</div>


    
  </form>
</div>

<div id="btuto_intro">
	Ce tutoriel a pour but de vous initier au langage de programmation Python. Et comme le veut la coutume ici-bas, on démarre de zéro, dans la joie et la bonne humeur&nbsp;! <img src="./Apprendre Python !_files/heureux.png" alt=":D"><br>
<br>
La syntaxe claire et relativement intuitive de ce langage en fait un candidat idéal dans le cadre d'une introduction à la programmation. Ainsi, si vous n'avez jamais programmé en quelque langage que ce soit, si vous ne savez que très vaguement ce que cela signifie, Python est, me semble-t-il, un choix valable pour commencer votre apprentissage. Bonne lecture&nbsp;!<br>
<br>
Avantages de Python&nbsp;:<br>
<br>
<ul>
	<li>facile à apprendre, à lire, à comprendre et à écrire ;</li>
	<li>portable (fonctionne sous de nombreux systèmes d'exploitation) ;</li>
	<li>adapté aussi bien pour des scripts, des petits ou gros projets ;</li>
	<li>doté d'une façade objet bien conçue et puissante ;</li>
	<li>possède une communauté active autour du langage ;</li>
	<li>et j'en passe…</li>
</ul><br>
Un grand merci à <a href="http://www.siteduzero.com/membres-294-154182.html">6pri1</a> pour sa relecture attentive et sa patience. Un merci tout aussi cordial à Nathan21 et Sergeswi qui ont fourni les icônes du tutoriel.
</div>

<hr>



<div id="pre_liste_parties">
	Ce cours est composé des parties suivantes :
</div>

<ul id="liste_parties">
	
		<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#part_223266">Introduction à Python</a></li>
	
		<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#part_257579">La Programmation Orientée Objet en tant qu'utilisateur</a></li>
	
		<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#part_296052">La Programmation Orientée Objet, côté développeur</a></li>
	
		<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#part_338033">Les merveilles de la librairie standard</a></li>
	
		<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#part_338028">Récapitulatif et annexes</a></li>
	
</ul>
		<ul class="liste_parties_btut">
		
		<li>
		<hr class="separateur_parties">
		<h2 id="part_223266">Partie 1 : Introduction à Python</h2>
		<div>
			Cette partie consiste en une introduction à Python et ses principaux mécanismes. Vous y apprendrez :<br>
<ul>
<li>Ce qu'est exactement Python</li>
<li>Comment installer Python</li>
<li>Comprendre la syntaxe et les mécanismes de base de ce langage</li>
</ul><br>
<br>
Ne vous alarmez pas outre mesure si vous êtes déjà perdu dans le titre des sous-parties. J'ai promis que je commencerai de zéro, et je tiendrai cette promesse, autant que faire se peut. Commencez donc par le commencement, et continuez dans cette voie, c'est garanti sans douleur... du moins sans douleur excessive <img src="./Apprendre Python !_files/diable.png" alt=":diable:" class="smilies"> .
		</div>
			
				<ul class="liste_chapitres_btut">
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_223269">1) Qu'est-ce que Python ?</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/105466.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_223276">Un langage de programmation&nbsp;? Qu'est-ce que c'est&nbsp;?</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_223275">Pour la petite histoire</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_223271">Installer Python</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_223274">2) Premiers pas avec l'interpréteur de commandes Python</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/140471.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_223277">Où est-ce qu'on est, là ?</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_223278">Vos premières instructions : un peu de calcul mental pour l'ordinateur</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_223272">3) Le monde merveilleux des variables</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/140507.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_223270">C'est quoi, des variables ? Et à quoi ça sert ?</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_223282">Les types de données en Python</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_223279">Première utilisation des fonctions</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_223268">4) Les structures conditionnelles</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/177797.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_223273">Vos premières conditions et blocs d'instructions</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_223280">De nouveaux opérateurs</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_223281">Votre premier programme !</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_224341">5) Les boucles</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/211972.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_224340">En quoi ça consiste ?</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_224342">La boucle while</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_224343">La boucle for</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_229366">Un petit bonus : les mot-clés break et continue</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_229363">6) Pas à pas vers la modularité (1/2)</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/212273.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_229364">Les fonctions : à vous de jouer</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_229369">À la découverte des modules</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_229373">7) Pas à pas vers la modularité (2/2)</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/224292.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_229368">Mettre en boîte notre code</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_229372">Je viens pour conquérir le monde... et créer mes propres modules</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_229376">8) Les exceptions</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/227476.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_229378">À quoi ça sert ?</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_229375">Forme minimale du bloc try</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_229374">Forme plus complète</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_229371">Lever une exception</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_229370">9) TP 1 : tous au ZCasino</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/224418.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_229365">Notre sujet</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_229367">Organisons notre projet</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_229377">Correction !</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
				</ul>
				<div>
					<br>
					Et bien c'en est fini des concepts de base. Dès la prochaine partie, on s'attaque à la POO, la Programmation Orientée Objet, un concept franchement fascinant et très puissant en Python. Vous allez surtout apprendre à manier de nouveaux types de données, notamment les listes, les dictionnaires, les fichiers... ça donne envie non ? <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies">
				</div>
			
		</li>
		
		<li>
		<hr class="separateur_parties">
		<h2 id="part_257579">Partie 2 : La Programmation Orientée Objet en tant qu'utilisateur</h2>
		<div>
			Vous croyiez avoir tout vu ? Surprise ! Enfin j'espère pas trop grande... <img src="./Apprendre Python !_files/langue.png" alt=":p"><br>
<br>
Nous avons encore beaucoup de choses à voir. La première partie de ce cours nous a permis d'approcher les concepts de base de Python et de réaliser nos premiers programmes. Les deux parties qui suivent seront consacrées à l'Orienté Objet, une méthode de programmation très riche !<br>
<br>
Dans la partie courante, nous aborderons l'objet du point de vue de l'utilisateur. Nous allons apprendre à nous servir plus à fond des chaînes de caractères ; nous aborderons les listes, les dictionnaires et les fichiers. Dans la partie suivante, vous pourrez enfin créer vos propres objets <img src="./Apprendre Python !_files/smile.png" alt=":)"> .<br>
<br>
<div class="rmq question">Mais qu'est-ce qu'un objet ?</div> Avant tout, je vais répondre à cette question, et on entre dans le vif du sujet tout de suite avec le premier chapitre.
		</div>
			
				<ul class="liste_chapitres_btut">
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_257584">1) Notre premier objet : les chaînes de caractères</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/245374.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_257587">Vous avez dit objet ?</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_257582">Les méthodes de la classe str</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_257583">Parcours et sélection de chaînes</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_257585">2) Les listes et tuples (1/2)</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/253709.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_257581">Créons et éditons nos premières listes</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_257586">Le parcours de listes</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_257580">Un petit coup d'œil aux tuples</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_268450">3) Les listes et tuples (2/2)</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/260440.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_268451">Entre chaînes et listes</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_268449">Les listes et paramètres de fonctions</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_268452">Les compréhensions de liste</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_277209">4) Les dictionnaires</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/260778.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_277210">Création et édition de dictionnaires</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_277208">Les méthodes de parcours</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_277214">Les dictionnaires et paramètres de fonction</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_277215">5) Les fichiers</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/264453.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_277213">Avant de commencer</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_277211">Lecture et écriture dans un fichier</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_277212">Enregistrer des objets dans des fichiers</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_281293">6) Portée des variables et références</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/277057.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_281292">La portée des variables</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_281290">Les variables globales</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_281294">7) TP 2 : un bon vieux petit pendu</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/277238.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_281289">Votre mission</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_281291">Correction proposée</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
				</ul>
				<div>
					<br>
					Cette partie s'achève ici. Maintenant que vous avez appris à utiliser les objets que Python propose par défaut, il est temps d'apprendre à créer nos premières classes. Rendez-vous dans la prochaine partie !
				</div>
			
		</li>
		
		<li>
		<hr class="separateur_parties">
		<h2 id="part_296052">Partie 3 : La Programmation Orientée Objet, côté développeur</h2>
		<div>
			Maintenant que nous avons vu comment utiliser des objets, je crois qu'il est temps d'apprendre à créer nos premières classes, et donc à avoir nos premiers objets personnalisés. Tout au long de cette partie, vous pourrez découvrir les mécanismes qui se cachent derrière les objets que nous avons utilisé (chaîne de caractères, listes, dictionnaires, fichiers...). Je compte même aller un peu plus loin, étant donné l'importance de l'orienté objet en Python.<br>
<br>
C'est un point qui n'est pas toujours bien expliqué, d'une importance cruciale. Je vais donc faire de mon mieux pour vous présenter la programmation orientée objet en Python, en accord avec la philosophie du langage.
		</div>
			
				<ul class="liste_chapitres_btut">
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_296045">1) Première approche des classes</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/285218.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_296054">Les classes, tout un monde</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_296044">Nos premiers attributs</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_296051">Les méthodes, la recette</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_296043">2) Les propriétés</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/285648.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_296049">Que dit l'encapsulation ?</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_296055">Les propriétés à la casserole</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_296048">Les propriétés en action</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_296050">3) Les méthodes spéciales</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/291147.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_296053">Édition de l'objet et accès aux attributs</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_296047">Les méthodes de conteneur</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_296046">Les méthodes mathématiques</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_296056">Les méthodes de comparaison</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_306699">4) L'héritage</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/306588.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_306698">Pour bien commencer</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_306701">L'héritage simple</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_306700">L'héritage multiple</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_306697">Retour sur les exceptions</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_323952">5) Derrière la boucle for</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/317045.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_323950">Les itérateurs</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_323951">Les générateurs</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_323953">6) TP 3 : un dictionnaire ordonné</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/319136.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_323959">Notre mission</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_323956">Correction proposée</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_323958">7) Les décorateurs</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/322563.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_323954">Qu'est-ce que c'est ?</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_323955">En théorie</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_323957">Exemples d'application</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
				</ul>
				<div>
					<br>
					Encore un tour d'horizon bouclé <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Vous avez à présent un niveau suffisant en Python pour vous lancer dans de nombreux projets. La prochaine partie est là pour vous y aider, mais vous devrez tôt ou tard vous pencher sur des documentations si vous voulez progresser.<br>
<br>
Tout ce que vous avez appris jusqu'à présent vous sera utile d'une façon générale. Pour vous spécialiser, je vous propose un petit tour du côté de la librairie standard. Vous pourrez également consulter d'autres tutoriels ou documentations sur des librairies tierces. Mais dors et déjà, vos connaissances sont suffisantes pour programmer en Python à un bon niveau et avec des bons réflexes <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Sachez enfin que je n'ai pas pu traiter tout l'orienté objet côté développeur dans cette partie. Il vous reste des choses à apprendre, même si elles sont moins utilisées, ou moins utiles dans un contexte général. Les connaissances que j'ai essayé de vous transmettre vous suffiront largement pour aller plus loin, si vous le désirez.
				</div>
			
		</li>
		
		<li>
		<hr class="separateur_parties">
		<h2 id="part_338033">Partie 4 : Les merveilles de la librairie standard</h2>
		<div>
			Cette partie consiste en une présentation de quelques modules intéressants de la librairie standard que j'ai voulu souligner. Vous n'y apprendrez pas à installer et contrôler des librairies tierces, et cette partie ne se veut pas une présentation exaustive de tous les modules de la librairie standard : ce serai trop long, et la documentation officielle est faite pour ça <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
En attendant je vous propose d'aborder quelques thèmes intéressants, organisés en chapitre que vous pouvez lire dans le désordre. En début de chaque chapitre je préciserai les points que vous devez maîtriser pour vous lancer dans l'approche du sujet. Je ne vous conseille pas de lire ces chapitres avant d'avoir lu la première partie de ce tutoriel.<br>
<br>
De plus, je vous donnerai souvent des moyens d'aller plus loin si ce sujet vous intéresse, en vous renvoyant la plupart du temps à la documentation officielle, en anglais mais, encore une fois, bien plus complète que ce que vous pouvez espérer trouver ailleurs.
		</div>
			
				<ul class="liste_chapitres_btut">
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_338030">1) Les expressions régulières</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/336472.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_338029">Que sont les expressions régulières ?</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_338036">Le module re</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
				</ul>
				<div>
					<br>
					Encore une fois, je ne vous ai montré que quelques modules intéressants de la librairie standard. Vous pouvez retrouver une liste complète des modules de cette fameuse librairie standard, classés par thème, à l'adresse <a href="http://docs.python.org/py3k/library/index.html">http://docs.python.org/py3k/library/index.html</a>.<br>
<br>
N'hésitez pas à y jeter un coup d'oeil, d'autant si vous cherchez quelque chose de précis <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
				</div>
			
		</li>
		
		<li>
		<hr class="separateur_parties">
		<h2 id="part_338028">Partie 5 : Récapitulatif et annexes</h2>
		<div>
			Cette partie constitue une forme d'annexe récapitulant de façon sommaire ce que vous avez vu dans les parties précédentes. Il s'agit d'une série de résumés, très condensés, qui pourraient s'avérer utile si vous avez oublié à quoi sert tel mot-clé ou comment faire telle chose.<br>
<br>
Il ne s'agira que d'un résumé : si il ne suffit pas, reportez-vous aux parties précédentes <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Je vous donnerai également quelques conseils, quelques réponses à la grande question <span class="souligne">comment continuer</span> et quelques petites indications sur des fonctionnalités annexes qui sortent un peu du cadre de ce cours
		</div>
			
				<ul class="liste_chapitres_btut">
				
					<li>
						<br><br><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#chap_338034">1) Écrire nos programmes Python dans des fichiers</a>
						<div class="icone_chap">
							
								<img src="./Apprendre Python !_files/335399.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_338035">Mettre le code dans un fichier</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_338032">Préciser l'encodage de travail</a></li>
								
									<li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#ss_part_338031">Mettre en pause notre programme</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
				</ul>
				<div>
					<br>
					Cette fois, c'est la fin des fins. Je vous souhaite un bon développement et une bonne exploration des fonctionnalités, modules, librairies qu'il vous reste à découvrir. Pas de quartier ! <img src="./Apprendre Python !_files/pirate.png" alt=":pirate:" class="smilies">
				</div>
			
		</li>
		
		</ul>

<hr>
<h2>Partie 1 : Introduction à Python</h2>
<div>
Cette partie consiste en une introduction à Python et ses principaux mécanismes. Vous y apprendrez :<br>
<ul>
<li>Ce qu'est exactement Python</li>
<li>Comment installer Python</li>
<li>Comprendre la syntaxe et les mécanismes de base de ce langage</li>
</ul><br>
<br>
Ne vous alarmez pas outre mesure si vous êtes déjà perdu dans le titre des sous-parties. J'ai promis que je commencerai de zéro, et je tiendrai cette promesse, autant que faire se peut. Commencez donc par le commencement, et continuez dans cette voie, c'est garanti sans douleur... du moins sans douleur excessive <img src="./Apprendre Python !_files/diable.png" alt=":diable:" class="smilies"> .
</div>
	
	<hr>
	<h1 id="chap_223269">Qu'est-ce que Python ?</h1>
	<div id="chap_intro">
	Bonjour et bienvenue&nbsp;! <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"><br>
<br>
Alors, vous avez décidé d'apprendre Python, et je ne peux que vous en féliciter. J'essayerai d'anticiper sur vos questions et de ne laisser personne en arrière. En fonction de votre niveau en informatique et en programmation, vous risquez d'ingérer une plus ou moins grande quantité d'informations. Cependant, et sauf si vous avez déjà des connaissances avancées dans ce langage, je vous conseille de suivre attentivement cette partie sans omettre un seul chapitre. L'heure n'est pas encore à la sélection. <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"><br>
<br>
<div class="rmq question">Et d'abord, c'est quoi Python ?</div><br>
Je ne m'avance pas trop, c'est une question assez facile à deviner si vous n'avez jamais entendu parler de Python auparavant.<br>
<br>
Python est un langage de programmation, et pour bien commencer, je vais d'abord vous expliquer ce qu'est un langage de programmation. Je vais ensuite vous expliquer brièvement l'histoire de Python, pour que vous sachiez au moins d'où ça vient ! Rassurez-vous, il n'y aura pas de QCM pour ce premier chapitre, mais encore une fois je vous conseille de ne pas passer au suivant sans l'avoir lu.<br>
<br>
On attaque tout de suite&nbsp;! <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies">
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_223276">Un langage de programmation&nbsp;? Qu'est-ce que c'est&nbsp;?</h2>
		<div class="ss_part_texte">
		<h3>La communication humaine</h3><br>
Non, ceci n'est ni une explication biologique ni philosophique, ne partez pas&nbsp;! <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"><br>
Très simplement, si vous arrivez à comprendre ces suites de symboles étranges et déconcertants que sont les lettres de l'alphabet, c'est parce que nous respectons une certaine convention, dans le langage, et dans l'écriture. En français, il y a des règles de grammaire et d'orthographe, je ne vous apprends rien. Vous communiquez en connaissant, plus ou moins consciemment, ces règles et en les appliquant plus ou moins bien, selon les cas.<br>
Cependant, ces règles peuvent être aisément contournées&nbsp;: personne ne peut prétendre connaître l'ensemble des règles de la grammaire et de l'orthographe française, et peu de gens s'en soucient. Après tout, même si vous faites des fautes, les personnes avec qui vous communiquez pourront facilement vous comprendre.<br>
Quand on communique avec un ordinateur cependant, c'est très différent.<br>
<br>
<h3>Mon ordinateur communique aussi&nbsp;!</h3><br>
Eh oui, votre ordinateur communique sans cesse avec vous, et vous communiquez sans cesse avec lui. D'accord, il vous dit très rarement qu'il a faim, que l'été s'annonce caniculaire et que le dernier disque de ce groupe très connu était à pleurer.<br>
Il n'y a rien de magique si, quand vous cliquez sur la petite croix en haut à droite de l'application en cours, elle comprend qu'elle doit se fermer.<br>
<br>
<h4>Le langage machine</h4><br>
En fait, votre ordinateur se fonde aussi sur un langage pour communiquer avec vous ou avec lui-même. Les opérations qu'un ordinateur peut effectuer à la base sont des plus classiques et consistent en l'addition de deux nombres, leur soustraction, leur multiplication, leur division, entière ou non. Et pourtant, ces cinq opérations suffisent amplement à faire tourner les logiciels de simulation les plus complexes, ou les jeux super-réalistes.<br>
Tous ces logiciels fonctionnent en gros de la même façon&nbsp;:<br>
<br>
—&nbsp;une suite d'instructions écrites en langage machine compose le programme&nbsp;;<br>
—&nbsp;lors de l'exécution du programme, ces instructions décrivent à l'ordinateur ce qu'il faut faire (l'ordinateur ne peut pas le deviner <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> ).<br>
<br>
<div class="rmq question">Une liste d'instructions&nbsp;? Qu'est-ce que c'est encore, ça&nbsp;?</div><br>
En schématisant volontairement, une instruction pourrait demander au programme de se fermer si vous cliquez sur la croix en bas à droite de votre écran, ou de rester en tâche de fond si tel est son bon plaisir. Toutefois, en langage machine, une telle action demande à elle seule un nombre assez important d'instructions.<br>
Mais bon, vous pouvez vous en douter, parler avec l'ordinateur en langage machine, qui ne comprend que le binaire, ce n'est ni très enrichissant, ni très pratique, et en tous cas pas très marrant <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> .<br>
On a donc inventé des langages de programmation pour faciliter la communication avec l'ordinateur.<br>
<br>
<h4>Les langages de programmation</h4><br>
Les langages de programmation sont des langages bien plus faciles à comprendre pour nous, pauvres êtres humains que nous sommes. Le mécanisme reste le même, mais le langage est bien plus compréhensible. Au lieu d'écrire les instructions dans une suite assez peu intelligible de 0 et de 1, les ordres donnés à l'ordinateur sont écrits dans un «&nbsp;langage&nbsp;», souvent en anglais, avec une syntaxe particulière qu'il est nécessaire de respecter. Mais avant que l'ordinateur puisse comprendre ce langage, celui-ci sera traduit pour lui en langage machine.<br>
En gros, le programmeur «&nbsp;n'a qu'à&nbsp;» écrire des <strong>lignes de code</strong> écrites dans le langage qu'il a choisi, les étapes suivantes sont automatisées pour permettre à l'ordinateur de les décoder.<br>
<br>
Il existe un grand nombre de langages de programmation, et Python en fait partie. Il n'est pas nécessaire pour le moment de donner plus d'explications sur ces mécanismes très schématisés. Si vous n'avez pas réussi à comprendre les mots de vocabulaire et l'ensemble de ces explications, cela ne vous pénalisera pas pour la suite. Mais je trouvais intéressant de donner ces précisions quant aux façons de communiquer avec son ordinateur.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_223275">Pour la petite histoire</h2>
		<div class="ss_part_texte">
		Python est un langage de programmation, dont la première version est sortie en 1991. Créé par <strong>Guido van Rossum</strong>, il a voyagé du Macintosh de son créateur travaillant à cette époque au <span class="italique">Centrum voor Wiskunde en Informatica</span>, aux Pays-Bas, jusqu'à se voir attribuer une organisation à but non lucratif particulièrement dévouée, la <strong>Python Software Foundation</strong>, créée en 2001. Ce langage porte ce nom directement dérivé de celui de la série télévisée Monty Python <img src="./Apprendre Python !_files/rire.gif" alt=":lol:" class="smilies"> .<br>
<br>
<h3>Un langage de programmation interprété</h3><br>
Eh oui, vous allez devoir patienter encore un peu, car j'ai deux ou trois choses à vous expliquer encore, et je suis persuadé qu'il est important de savoir un minimum ces détails qui peuvent sembler peu pratiques de prime abord.<br>
Python est un langage de programmation <strong>interprété</strong>, c'est-à-dire que les instructions que vous lui enverrez seront «&nbsp;transcrites&nbsp;» en langage machine au fur et à mesure de leur lecture. D'autres langages (comme le C / C++) sont dits «&nbsp;langages <strong>compilés</strong>&nbsp;» car, avant de pouvoir les exécuter, un logiciel spécialisé se charge de transformer le code du programme en langage machine. On appelle cette étape la «&nbsp;<strong>compilation</strong>&nbsp;». À chaque modification du code, il faudra rappeler une étape de compilation.<br>
<br>
Les avantages d'un langage interprété sont sa simplicité (on ne passe pas par une étape de compilation avant d'exécuter son programme) et la portabilité (un langage tel que Python est censé marcher aussi bien sous Windows, Linux et Mac OS, et on ne devrait avoir à effectuer aucun changement dans le code pour le passer d'un système à l'autre). Cela ne veut pas dire que les langages compilés ne sont pas portables, loin de là ! Mais des compilateurs différents doivent être utilisés et certaines instructions ne sont pas compatibles avec tous les systèmes, voire se comportent différemment.<br>
<br>
En contre-partie, un langage compilé se révélera bien plus rapide qu'un langage interprété (la traduction à la volée de votre programme ralentit l'exécution), bien que cette différence tende à se faire de moins en moins sentir au fil des améliorations. De plus, Python devra être installé sur le système d'exploitation que vous utilisez pour que l'ordinateur puisse comprendre votre code.<br>
<br>
<h3>Différentes versions de Python</h3><br>
Lors de la création de la Python Software Foundation, en 2001, et durant les années qui ont suivi, le langage Python est passé par une suite de versions que l'on a englobées dans l'appellation Python 2.x (2.3, 2.5, 2.6…). Depuis le 13 février 2009, la version 3.0.1 est disponible. Cette version casse la <strong>compatibilité ascendante</strong> qui prévalait lors des dernières versions.<br>
<br>
<div class="rmq question">Compatibilité quoi&nbsp;?</div><br>
<br>
Quand un langage de programmation est mis à jour, les développeurs se gardent bien de supprimer ou de trop modifier d'anciennes fonctionnalités. L'intérêt est qu'un programme qui marche sous une certaine version marchera toujours avec la nouvelle version en date. Cependant, la Python Software Foundation, observant un bon nombre de fonctionnalités obsolètes, implémentées plusieurs fois… a décidé de nettoyer tout le projet. Un programme qui tourne à la perfection sous Python 2.x devra donc être mis à jour un minimum pour marcher de nouveau sous Python 3. C'est pourquoi je vais vous conseiller ultérieurement de télécharger et d'installer la dernière version en date de Python. Je m'attarderai en effet sur les fonctionnalités de Python 3, et certaines d'entre elles ne seront pas accessibles (ou pas sous le même nom) dans les anciennes versions.<br>
<br>
Ceci étant posé, tous à l'installation&nbsp;!
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_223271">Installer Python</h2>
		<div class="ss_part_texte">
		L'installation de Python est un jeu d'enfant, aussi bien sous Windows que sous Linux. Ne disposant pas de Mac OS sous la main, je ne pourrai faire le test en temps réel sous ce système, mais vous trouverez les fichiers d'installation sur le site de Python <a href="http://www.python.org/">http://www.python.org/</a>.<br>
<br>
<h3>Sous Windows</h3><br>
Rendez-vous sur le <a href="http://python.org/">site de Python</a>&nbsp;:<br>
<br>
<ol class="liste_1">
<li>Cliquez sur le lien "Download" dans le menu principal de la page.</li>
<li>Sélectionnez la version de Python que vous souhaitez utiliser (je vous conseille la dernière en date).</li>
<li>On vous propose un (ou plusieurs) lien(s) vers une version Windows, sélectionnez celle qui conviendra à votre processeur.<br>
Si vous avez un doute, votre PC vous dira simplement qu'il ne peut exécuter le programme et vous n'aurez qu'à essayer les autres.</li>
<li>Enregistrez puis exécutez le fichier d'installation, et suivez les étapes, ce n'est ni très long ni très difficile.</li>
<li>Une fois l'installation complétée, vous pouvez vous rendre dans le Menu Démarrer -&gt; Tous les programmes / Programmes. Python sera visible dans cette liste. Nous verrons bientôt comment le lancer, pas d'impatience…</li></ol><br>
<br>
<h3>Sous Linux</h3><br>
Python est pré-installé sur la plupart des distributions Linux. Cependant, il est possible que vous n'ayez pas la dernière version de Python. Pour le vérifier, tapez dans un terminal la commande <span class="code2 console">python&nbsp;-V</span>. Cette commande vous retourne la version de Python actuellement installée sur votre système. Il est très probable que cette version soit <span class="italique">2.X</span>, comme 2.6 ou 2.7, pour des raisons de compatibilité. Dans tous les cas, je vous conseille d'installer Python 3.X, la syntaxe est très proche de Python 2.X mais diffère quand même… <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"><br>
<br>
Rendez-vous sur le site de Python, <a href="http://www.python.org/">http://www.python.org/</a>, cliquez sur «&nbsp;download&nbsp;», et téléchargez la version de Python (actuellement «&nbsp;Python 3.1.2 compressed source tarball (for Linux, Unix or OS X)&nbsp;»). Ouvrez un terminal, puis rendez-vous dans le dossier où se trouve l'archive :<br>
<br>
<ol class="liste_1">
<li>Décompressez l'archive en tapant : <span class="code2 console">tar&nbsp;-jxvf&nbsp;Python-3.1.2.tar.bz2</span> (ce nom est bien entendu à changer en fonction de la version et du type de compression).</li>
<li>Attendez quelques instants que la décompression soit complétée, puis rendez-vous dans le dossier créé dans le répertoire courant (Python-3.1.2 dans mon cas).</li>
<li>Exécutez le script configure en tapant <span class="code2 console">./configure</span>.</li>
<li>Une fois que la configuration s'est déroulée, il n'y a plus qu'à compiler en tapant <span class="code2 console">make</span>.<br>
<br>
<div class="rmq attention">Cette commande rendra l'application disponible seulement dans le dossier où vous vous trouvez. Pour entrer dans Python, vous devrez ainsi toujours vous rendre dans ce dossier. Il est possible, grâce à la commande <span class="code2 console">sudo&nbsp;make&nbsp;fullinstall</span> d'installer Python dans tout le système. Cependant, d'autres applications déjà installées peuvent utiliser Python et du fait de l'incompatibilité entre les versions 2.X et 3.X, ces applications ne marcheront probablement plus. <strong>Emerge</strong>, notamment, installé sous la distribution <strong>Gentoo</strong>, réagit très mal à cette mise à jour imposée. Autant que possible, installez donc la version de Python dans un dossier défini quitte à faire un lien vers le script de lancement.</div><br>
</li></ol><br>
<br>
<h3>Sous Mac OS</h3><br>
Téléchargez la dernière version de Python sur le site officiel <a href="http://www.python.org/">www.python.org</a>. Ouvrez votre fichier .dmg et double-cliquez sur le paquet d'installation <span class="italique">Python.mpkg</span><br>
<div class="centre"><img src="./Apprendre Python !_files/243260.png" alt="Image utilisateur"></div><br>
Un assistant d'installation s'ouvre, laissez-vous guider : Python est maintenant installé !<br>
<br>
Merci à <a href="http://www.siteduzero.com/membres-294-140365.html">Etienne-02</a> pour ses explications <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Lancer Python</h3><br>
Ouf&nbsp;! Voilà qui est fait&nbsp;! <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"><br>
<br>
Bon, en théorie, on commence à utiliser Python dès le prochain chapitre, mais pour que vous soyez un peu récompensé de votre installation exemplaire <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> , voici les différents moyens d'accéder à la ligne de commande Python que nous allons tout particulièrement étudier dans les prochains chapitres.<br>
<br>
<h4>Sous Windows</h4><br>
Vous avez plusieurs façons d'accéder à la ligne de commande Python, la plus évidente étant de se rendre dans le menu Démarrer -&gt; Python 3.1 -&gt; Python Command Line. Si tout se passe bien, vous devriez obtenir une magnifique console qui reprend grosso modo ces informations (elles peuvent être différentes chez vous, ne vous inquiétez donc pas)&nbsp;:<br>
<br>
<span class="code">Code : Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Python&nbsp;3.1.2&nbsp;(r312:79149,&nbsp;Mar&nbsp;21&nbsp;2010,&nbsp;00:41:52)&nbsp;[MSC&nbsp;v.1500&nbsp;32&nbsp;bit&nbsp;(Intel)]&nbsp;on&nbsp;win32
Type&nbsp;"help",&nbsp;"copyright",&nbsp;"credits"&nbsp;or&nbsp;"license"&nbsp;for&nbsp;more&nbsp;information.
&gt;&gt;&gt;</pre></div></td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Qu'est-ce que c'est que ça&nbsp;?  <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"> </div><br>
<br>
On verra plus tard. L'important c'est que vous ayez réussi à ouvrir la console d'interprétation de Python, le reste attendra le prochain chapitre.<br>
<br>
Vous pouvez également passer par la ligne de commande Windows, à cause des raccourcis je privilégie en général cette méthode, mais c'est une question de goût.  <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> <br>
<br>
Allez dans le menu Démarrer, puis cliquez sur Exécuter. Dans la fenêtre qui s'affiche, tapez simplement «&nbsp;python&nbsp;» et la ligne de commande Python devrait s'afficher à nouveau. Sachez que vous pouvez directement vous rendre dans «&nbsp;Exécuter…&nbsp;» en tapant le raccourci Windows + R (raison pour laquelle je passe en général par ce chemin pour accéder à Python).<br>
<br>
Pour fermer l'interpréteur de commandes Python, vous pouvez tapez exit() puis entrée.<br>
<br>
<h4>Sous Linux</h4><br>
Si vous avez installé Python grâce à une compilation localisée dans un dossier, vous devez vous rendre dans ce dossier puis taper ./python pour accéder à la ligne de commande Python. Encore une fois, vous pouvez très bien créer un lien vers ce fichier afin de ne pas avoir à chaque fois à vous déplacer dans ce dossier.<br>
<br>
Pour fermer la ligne de commande Python, n'utilisez pas <span class="keyboard_shortcut">CTRL + C</span> mais <span class="keyboard_shortcut">CTRL + D</span> (nous verrons plus tard pourquoi).<br>
<br>
<h4>Sous Mac OS</h4><br>
Cherchez un dossier <span class="italique">Python</span> dans le dossier <span class="italique">Applications</span>. Pour lancer Python, ouvrez l'application IDLE de ce dossier. Vous obtenez ceci et vous êtes prêts à passer au concret&nbsp;!<br>
<br>
<span class="code">Code : Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Python&nbsp;3.1.2&nbsp;(r312:79360M,&nbsp;Mar&nbsp;24&nbsp;2010,&nbsp;01:33:18)&nbsp;
[GCC&nbsp;4.0.1&nbsp;(Apple&nbsp;Inc.&nbsp;build&nbsp;5493)]&nbsp;on&nbsp;darwin
Type&nbsp;"copyright",&nbsp;"credits"&nbsp;or&nbsp;"license()"&nbsp;for&nbsp;more&nbsp;information.
&gt;&gt;&gt;</pre></div></td></tr></tbody></table></div><br>
<br>
Merci encore à <a href="http://www.siteduzero.com/membres-294-140365.html">Etienne-02</a> pour ses explications.
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Allez, assez de théorie et d'installation comme ça, on commence la programmation dès le prochain chapitre, tout en douceur comme promis&nbsp;! Et vu que vous avez été sage (et que je ne trouve aucune question pertinente à vous poser), je vous dispense de QCM. Vous vous en tirez donc à bon compte, profitez-en, la récréation s'achève ici&nbsp;! <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies">
	</div>
	
	<hr>
	<h1 id="chap_223274">Premiers pas avec l'interpréteur de commandes Python</h1>
	<div id="chap_intro">
	Bien. Après les premières notions théoriques et l'installation de Python, il est temps de découvrir un peu l'interpréteur de commandes de ce langage. Si anodin que semblent ces petits tests, vous découvrirez dans cette partie les premiers rudiments de la syntaxe du langage et je vous conseille fortement de me suivre pas à pas, d'autant si vous êtes en face de votre premier langage de programmation.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_223277">Où est-ce qu'on est, là ?</h2>
		<div class="ss_part_texte">
		Pour commencer, je vais vous demander de retourner dans l'interpréteur de commandes Python (je vous ai montré, en fonction de votre système d'exploitation, comment y accéder à la fin du chapitre précédent).<br>
<br>
Je vous rappelle donc les informations que vous avez dans cette fenêtre, même si elles pourront être bien différentes chez vous en fonction de votre version et de votre système d'exploitation.<br>
<br>
<span class="code">Code : Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Python&nbsp;3.1.2&nbsp;(r312:79149,&nbsp;Mar&nbsp;21&nbsp;2010,&nbsp;00:41:52)&nbsp;[MSC&nbsp;v.1500&nbsp;32&nbsp;bit&nbsp;(Intel)]&nbsp;on&nbsp;win32
Type&nbsp;"help",&nbsp;"copyright",&nbsp;"credits"&nbsp;or&nbsp;"license"&nbsp;for&nbsp;more&nbsp;information.
&gt;&gt;&gt;</pre></div></td></tr></tbody></table></div><br>
<br>
Python vous souhaite à sa façon, la bienvenue dans son interpréteur de commandes.<br>
<br>
<div class="rmq question">Attends, attends, déjà, c'est quoi cet interpréteur ?</div><br>
<br>
Vous vous souvenez (du moins je l'espère) dans le chapitre précédent, je vous ai donné une brève explication sur la différence entre langages compilés et langages interprétés. Et bien, cet interpréteur de commandes va nous permettre de tester directement du code. J'entre une ligne d'instruction, je fais entrée, je regarde ce que me dit Python (s'il me dit quelque chose), puis j'en entre une deuxième, une troisième... Cet interpréteur est particulièrement utile pour comprendre la base de Python et réaliser nos premiers petits programmes. Le principal inconvénient, en contre-partie, étant que le code que vous entrez n'est pas sauvegardé si vous ne le faites pas manuellement, mais chaque chose en son temps.<br>
<br>
Dans la fenêtre que vous avez sous les yeux, l'information qui ne change pas d'un système d'exploitation à l'autre et qui est, somme toute, la plus importante, est la série des trois chevrons qui se trouvent en bas à gauche des informations "&gt;&gt;&gt;". Ces trois signes signifient : je suis prêt à recevoir tes instructions.<br>
<br>
Comme je l'ai dit, les langages de programmation respectent une syntaxe claire. On ne peut espérer que l'ordinateur comprenne si, dans cette fenêtre, vous commenciez à lui dire : j'aimerais que tu me codes un jeu vidéo génial <img src="./Apprendre Python !_files/magicien.png" alt=":magicien:" class="smilies"> . Et autant que vous le sachiez tout de suite (bien qu'à mon avis vous vous en doutiez), on est très loin d'obtenir des résultats aussi spectaculaires à notre niveau.<br>
<br>
Tout ça pour dire que si vous entrez n'importe quoi dans cette fenêtre, il est plus que probable que Python vous indique, clairement et fermement, qu'il n'a rien compris.<br>
<br>
Si par exemple vous entrez "premier test avec Python", vous obtenez le résultat suivant :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">premier</span> <span class="n">test</span> <span class="n">avec</span> <span class="n">Python</span>
<span class="go">File "&lt;stdin&gt;", line 1</span>
<span class="go">premier test avec Python</span>
<span class="go">^</span>
<span class="go">SyntaxError: invalid syntax</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et oui, l'interpréteur parle en anglais, et les instructions que vous entrerez, comme une écrasante majorité des langages de programmation, seront également en anglais. Mais pour l'instant, rien de bien compliqué : l'interpréteur vous indique qu'il a trouvé un problème dans votre ligne d'instruction. Il vous donne la ligne (en l'occurence la première) qu'il vous répète obligemment (ceci est très utile quand on travaille sur un programme de plusieurs centaines de lignes) puis vous dit ce qui l'arrête, ici : <span class="italique">SyntaxError: invalid syntax</span>. Limpide n'est-ce pas ? Ce que vous avez entré est incompréhensible pour Python. Enfin, la preuve qu'il n'est pas rancunier, c'est qu'il vous réaffiche une série de trois chevrons, montrant bien qu'il est prêt à retenter l'aventure <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> .<br>
<br>
Bon, c'est bien joli de recevoir un message d'erreur au premier test, mais je me doute que vous aimeriez bien voir des trucs qui marchent, maintenant. C'est parti donc <img src="./Apprendre Python !_files/pirate.png" alt=":pirate:" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_223278">Vos premières instructions : un peu de calcul mental pour l'ordinateur</h2>
		<div class="ss_part_texte">
		C'est assez trivial, quand on y pense, mais je pense qu'il s'agit d'une excellente manière d'aborder pas à pas la syntaxe de Python. Nous allons donc essayer d'obtenir des résultats à des calculs, plus ou moins compliqués. Je vous rappelle encore une fois qu'exécuter les tests en même temps que moi sur votre machine est une très bonne façon de vous rendre compte de la syntaxe et surtout, de la retenir.<br>
<br>
<h3>Entrer un nombre</h3><br>
Vous avez pu voir, sur notre premier (et à ce jour notre dernier) test que Python n'aimait pas particulièrement les suites de lettres qu'il ne comprend pas. Cependant, l'interpréteur adore les nombres. D'ailleurs, il les accepte sans sourciller, sans une seule erreur :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="mi">7</span>
<span class="go">7</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
D'accord, ce n'est pas extraordinaire. On entre un nombre, et l'interpréteur retourne ce nombre. Mais dans bien des cas, ce simple retour indique qu'il a bien compris et que ce que vous avez entré est en accord avec sa syntaxe. Vous pouvez de même entrer des nombres à virgule :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="mf">9.5</span>
<span class="go">9.5</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">Attention : on utilise ici la notation anglo-saxonne, le point remplace la virgule. La virgule a un tout autre sens pour Python, prenez donc cette habitude dès maintenant.</div><br>
<br>
Les nombres à virgule se comportent parfois étrangement, c'est pourquoi il faut les manier avec prudence.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="mf">8.13</span>
<span class="go">8.1300000000000008</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Euh... pourquoi ce résultat approximatif ?</div><br>
<br>
Python n'y est pas pour grand chose. En fait, le problème vient en grande partie de la façon dont les nombres à virgule sont écrits dans la mémoire de votre ordinateur. C'est pourquoi en programmation, quand on le peut, on préfère travailler avec des nombres entiers. Cependant, vous remarquerez que l'erreur est infime et qu'elle n'a pas d'impact formidable sur les calculs. Les applications qui ont besoin d'une précision mathématique à toute épreuve essayent de corriger ces défauts par d'autres moyens, mais ici ce ne sera pas nécessaire <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Il va de soi que l'on peut tout aussi bien rentrer des nombres négatifs (vous pouvez faire l'essai d'ailleurs).<br>
<br>
<h3>Opérations courantes</h3><br>
Bon, il est temps d'apprendre à utiliser les principaux opérateurs de Python qui vont vous servir pour la grande majorité de vos programmes.<br>
<br>
<h4>Addition, soustraction, multiplication, division</h4><br>
Pour effectuer ces opérations, on utilise respectivement les symboles "+", "-", "*" et "/".<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="mi">3</span><span class="o">+</span><span class="mi">4</span>
<span class="go">7</span>
<span class="gp">&gt;&gt;&gt; </span><span class="o">-</span><span class="mi">2</span><span class="o">+</span><span class="mi">93</span>
<span class="go">91</span>
<span class="gp">&gt;&gt;&gt; </span><span class="mf">9.5</span><span class="o">+</span><span class="mi">2</span>
<span class="go">11.5</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Faites également des tests pour la soustraction, la multiplication et la division, il n'y a rien de difficile.<br>
<br>
<h4>Division entière et modulo</h4><br>
<br>
Si vous avez pris le temps de tester la division, vous vous êtes rendu compte que le résultat est donné en virgule flottante.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="mi">10</span><span class="o">/</span><span class="mi">5</span>
<span class="go">2.0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="mi">10</span><span class="o">/</span><span class="mi">3</span>
<span class="go">3.3333333333333335</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il existe deux autres opérateurs qui permettent de connaître le résultat d'une division entière et le reste de cette division.<br>
<br>
Le premier opérateur est le signe "//". Il permet d'obtenir la partie entière d'une division.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="mi">10</span><span class="o">//</span><span class="mi">3</span>
<span class="go">3</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
L'opérateur "%" que l'on appelle "modulo" permet de connaître le reste de la division :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="mi">10</span><span class="o">%</span><span class="mi">3</span>
<span class="go">1</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cette notion de partie entière et de reste de division n'est pas bien difficile à comprendre et vous servira très probablement par la suite.<br>
<br>
Si vous avez du mal à en saisir le sens, sachez donc que :<br>
<br>
<ul>
<li>La partie entière de la division de 10 par 3 est le résultat de cette division, sans tenir compte des chiffres au-delà de la virgule (en l'occurence, 3).</li>
<li>Pour obtenir le reste de 10/3, on regarde quelle est la partie entière. Ici elle est de 3 (<span class="code2 python"><span class="mi">10</span><span class="o">//</span><span class="mi">3</span>
</span>). On multiplie cette partie entière par 3 (celui de 10/3) et on obtient... 9 <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"> . Entre 9 et 10, on a 1... et c'est le reste de notre division. Vous devriez retrouver ces chiffres facilement en posant la division sur papier.</li>
</ul><br>
<br>
Souvenez-vous bien de ces deux opérateurs, et surtout le modulo "%" dont vous aurez besoin dans vos programmes futurs.
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Voilà ! Ce premier tour d'horizon s'est bien passé pour vous je l'espère, il n'y avait rien de vraiment compliqué. Mais finalement, on n'est pas vraiment rentré dans le sujet de la syntaxe, et ce qu'on a fait, une calculette de poche peut le faire aussi bien, inutile d'apprendre à programmer pour savoir faire 3+8. Le chapitre suivant va vous faire découvrir le monde des variables, et vous aurez vos premiers concepts spécifiques à Python à ingurgiter. <br>
N'hésitez pas, avant de passer à ce chapitre, à tester quelques opérations, notamment des plus complexes, avec des parenthèses pour tester par exemple la priorité des opérateurs.
	</div>
	
	<hr>
	<h1 id="chap_223272">Le monde merveilleux des variables</h1>
	<div id="chap_intro">
	Dans le chapitre précédent, vous avez entré vos premières instructions en langage Python, bien que vous ne vous en soyez peut-être pas rendu compte. Il est également vrai que les instructions entrées auraient marché dans la plupart des langages. Ici, cependant, nous commençons à approfondir un petit peu la syntaxe du langage, tout en découvrant un concept important de programmation : les variables.<br>
<br>
Ce concept est essentiel et vous ne pouvez absolument pas faire de croix dessus, mais je vous rassure il n'y a rien de compliqué, que de l'utile et de l'agréable <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_223270">C'est quoi, des variables ? Et à quoi ça sert ?</h2>
		<div class="ss_part_texte">
		Les variables sont l'un des concepts qui se retrouvent dans la majorité (si ce n'est la totalité) des langages de programmation. Autant dire que sans variable, on ne peut pas programmer, sans exagération.<br>
<br>
<h3>C'est quoi, des variables ?</h3><br>
Une variable est une donnée de votre programme. C'est un code alpha-numérique que vous allez lier à une donnée de votre programme, pour pouvoir l'utiliser à plusieurs reprises et faire des calculs un peu plus intéressants dessus. C'est bien joli de savoir faire des opérations, mais si on ne peut pas même stocker le résultat, ça devient très vite ennuyeux.<br>
<br>
<h3>Comment ça marche ?</h3><br>
Le plus simplement du monde. Vous allez dire à Python : je veux que dans une variable que je nomme <span class="italique">age</span> tu stockes mon âge, pour que je puisse le retenir (si j'ai la mémoire très courte), l'augmenter (à mon anniversaire) et l'afficher si besoin est.<br>
<br>
Comme je vous l'ai dit, on ne peut passer à côté des variables. Vous ne voyez peut-être pas encore tout l'intérêt de stocker des informations de votre programme et pourtant, si vous ne stockez rien, vous ne pouvez pratiquement rien faire.<br>
<br>
En Python, pour donner une valeur à une variable, il suffit d'écrire <span class="code2 python"><span class="n">nom_de_la_variable</span> <span class="o">=</span> <span class="n">valeur</span>
</span>.<br>
<br>
Une variable respecte quelques règles de syntaxe incontournables :<br>
<br>
<ol class="liste_1">
<li>Le nom de la variable n'est composé que de lettres, majuscules ou minuscules, de chiffres et du symbole souligné (underscore en anglais) "_". Les caractères accentués ne font pas partie des lettres autorisées.</li>
<li>Le nom de la variable ne peut commencer par un chiffre.</li>
<li>Le langage Python est sensible à la casse, ce qui signifie que des lettres majuscules et minuscules ne constituent pas la même variable (<span class="italique">AGE</span> est différent de <span class="italique">aGe</span>, elle-même différente de <span class="italique">age</span>).</li></ol><br>
<br>
Au-delà de ces règles de syntaxe incontournables puisque parties intégrantes du langage, il existe des conventions définies par les programmeurs. L'une d'elle, que j'ai tendance à utiliser le plus souvent, consiste à écrire la variable en minuscule et de remplacer les espaces éventuels par un signe souligné "_". Si je dois créer une variable contenant mon âge, elle se nommera donc <span class="italique">mon_age</span>. Une autre généralement utilisée est de remplacer les caractères commençant chaque mot par la majuscule de ce caractère, à l'exception du premier mot constituant la variable. Donc, la variable contenant mon âge se nommera donc <span class="italique">monAge</span>.<br>
<br>
Vous pouvez utiliser la convention qui vous plaît, même en créer une bien à vous, mais essayez de rester cohérent et de n'utiliser qu'une seule convention d'écriture, car vous repérer dans vos variables est essentiel dès lors qu'on commence à travailler sur des programmes un peu plus consistants.<br>
<br>
Ainsi, si je veux associer mon âge à une variable, la syntaxe sera :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">mon_age</span> <span class="o">=</span> <span class="mi">21</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
L'interpréteur vous remet aussitôt trois chevrons sans aucun message. Cela signifie qu'il a bien compris et qu'il n'y a eu aucune erreur.<br>
<br>
Sachez qu'on appelle cette étape <strong>l'affectation de variable</strong>. On dit en effet qu'on a affecté 21 à la variable <span class="italique">mon_age</span>.<br>
<br>
On peut afficher la valeur de cette variable en l'entrant simplement dans l'interpréteur de commandes.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mon_age</span>
<span class="go">21</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
N.B.: Les espaces séparant = du nom et de la valeur de la variable sont facultatifs. Je les mets pour des raisons de lisibilité, mais il est possible, par la suite, que je ne le fasse pas, ne soyez donc pas surpris.<br>
<br>
<div class="rmq question">Bon, c'est bien joli tout ça, mais qu'est-ce qu'on fait avec cette variable ?</div><br>
<br>
Et bien, tout ce que vous avez déjà fait dans le chapitre précédent, en utilisant cette variable comme un nombre à part entière. Vous pouvez même affecter d'autres variables à partir de calculs sur la première, et c'est là toute la puissance de ce mécanisme.<br>
<br>
Essayons par exemple d'augmenter de 2 la variable mon_age :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mon_age</span> <span class="o">=</span> <span class="n">mon_age</span> <span class="o">+</span> <span class="mi">2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_age</span>
<span class="go">23</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Encore une fois, lors de l'affectation de la variable, rien ne s'affiche, ce qui est parfaitement normal.<br>
<br>
Maintenant, essayons d'affecter une autre variable d'après la valeur de <span class="italique">mon_age</span>.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mon_age_x2</span> <span class="o">=</span> <span class="n">mon_age</span> <span class="o">*</span> <span class="mi">2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_age_x2</span>
<span class="go">46</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Encore une fois, je vous invite à tester en long, en large et en travers cette possibilité. Le concept n'est pas compliqué, mais extrêmement puissant. De plus, comparé à certains langages, affecter une valeur à une variable est des plus simples. Si la variable n'est pas créée, Python le fait automatiquement. Si la variable existe déjà, l'ancienne valeur est supprimée et remplacée par la nouvelle. Quoi de plus simple <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> ?<br>
<br>
<div class="rmq attention">Certains mot-clés de Python sont <span class="souligne">réservés</span>, c'est-à-dire que vous ne pouvez pas créer des variables portant ce nom.</div><br>
<br>
En voici la liste pour Python 3.<br>
<br>
<table class="tab_user">







<tbody><tr>
<td>and</td>
<td>del</td>
<td>from</td>
<td>none</td>
<td>true</td>
</tr><tr>
<td>as</td>
<td>elif</td>
<td>global</td>
<td>nonlocal</td>
<td>try</td>
</tr><tr>
<td>assert</td>
<td>else</td>
<td>if</td>
<td>not</td>
<td>while</td>
</tr><tr>
<td>break</td>
<td>except</td>
<td>import</td>
<td>or</td>
<td>with</td>
</tr><tr>
<td>class</td>
<td>false</td>
<td>in</td>
<td>pass</td>
<td>yield</td>
</tr><tr>
<td>continue</td>
<td>finally</td>
<td>is</td>
<td>raise</td>
<td> </td>
</tr><tr>
<td>def</td>
<td>for</td>
<td>lambda</td>
<td>return</td>
<td> </td>
</tr></tbody></table><br>
<br>
Ces mot-clés sont utilisés par Python, vous ne pouvez pas construire des variables avec. Vous allez découvrir dans la suite de ce cours la majorité de ces mot-clés et comment ils s'utilisent <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_223282">Les types de données en Python</h2>
		<div class="ss_part_texte">
		Là se trouve un concept très important que l'on retrouve dans beaucoup de langages de programmation. Ouvrez bien en grand vos oreilles, ou plutôt vos yeux, car vous devrez être parfaitement à l'aise avec ce concept pour continuer ce tutoriel. Rassurez-vous toutefois, du moment que vous êtes attentifs, il n'y a rien de délicat à comprendre.<br>
<br>
<h3>Qu'entend-t-on par "type de donnée" ?</h3><br>
Jusqu'ici, vous n'avez travaillé qu'avec des nombres. Et s'il faut bien avouer qu'on ne fera que très rarement un programme sans aucun nombre, c'est loin d'être la seule donnée que l'on peut utiliser en Python. A terme, vous serez même capable de créer vos propres types de données, mais n'anticipons pas.<br>
<br>
Python a besoin de savoir quels types de données sont utilisées, d'abord, et tout bêtement, pour savoir quelles opérations il peut effectuer. Vous allez dans ce chapitre apprendre à faire des chaînes de caractères, et multiplier une chaîne de caractères ne se fait pas du tout comme multiplier un nombre. Pour certains types de données, la multiplication n'a d'ailleurs aucun sens. Python associe donc à chaque donnée un type qui va définir les opérations qu'il peut faire sur cette donnée en particulier.<br>
<br>
<h3>Les différents types de données</h3><br>
Nous n'allons voir ici que les incontournables et les plus faciles à manier. Des chapitres entiers seront consacrés aux types plus complexes.<br>
<br>
<h4>Les nombres</h4><br>
<br>
<strong>Les entiers</strong><br>
<br>
Et oui, Python différencie les entiers des nombres à virgule flottante !<br>
<br>
<div class="rmq question">Pourquoi cela ?</div><br>
<br>
Initialement, c'est surtout pour une question de place en mémoire, mais les opérations que l'on effectue sur des nombres à virgule ne sont pour un ordinateur pas les mêmes que les opérations que l'on effectue sur un entier, et cette distinction reste encore d'actualité de nos jours.<br>
<br>
Le type entier se nomme <span class="italique">int</span> en Python ("entier" en anglais). La syntaxe d'un entier est un nombre sans virgule.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="mi">3</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous avons vu dans le chapitre précédent les opérations que l'on pouvait effectuer sur ce type de données, et quand bien même vous ne vous en souviendriez pas, les deviner est assez élémentaire.<br>
<br>
<strong>Les flottants</strong><br>
<br>
Les flottants sont les nombres à virgule. Ils se nomment <span class="italique">float</span> en Python ("flottant" en anglais). La syntaxe d'un nombre flottant est celle d'un nombre à virgule (n'oubliez pas de remplacer la virgule par un point). Si ce nombre n'a pas de partie flottante mais que vous voulez qu'il soit considéré par le système comme un flottant, vous pouvez lui mettre une partie flottante de 0 (exemple <span class="italique">52.0</span>).<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="mf">3.152</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Les nombres après la virgule ne sont pas infinis, puisque rien n'est infini en informatique. Mais la précision est assez importante pour travailler sur des données très précises.<br>
<br>
<h4>Les chaînes de caractères</h4><br>
Heureusement, Python ne permet pas seulement de traiter des nombres, bien loin de là. Le dernier type "simple" que nous verrons dans ce chapitre consiste en les chaînes de caractères. Elles permettent de stocker une série de lettres, une phrase, pourquoi pas.<br>
<br>
On peut écrire une chaîne de caractères de différentes façons :<br>
<br>
<ul>
<li>Entre guillemets (<span class="code2 python"><span class="s">"ceci est une chaîne de caractères"</span>
</span>)</li>
<li>Entre apostrophes (<span class="code2 python"><span class="s">'ceci est une chaîne de caractères'</span>
</span>)</li>
<li>Entre triples guillemets (<span class="code2 python"><span class="sd">"""ceci est une chaîne de caractères"""</span>
</span>)</li>
</ul><br>
<br>
Quelques remarques sont à faire quant aux chaînes de caractères :<br>
<br>
<ul>
<li>On peut, à l'instar des nombres (et de tous les types de données) stocker une chaîne de caractères dans une variable (<span class="code2 python"><span class="n">ma_chaine</span> <span class="o">=</span> <span class="s">"Bonjour, la foule !"</span>
</span>)</li>
<li>Si vous utilisez les délimiteurs simples (le guillemet ou l'apostrophe) pour encadrer une chaîne de caractères, il faut échapper, au choix, les guillemets ou les apostrophes que vous contiendrez dans la chaîne. Par exemple, si vous tapez :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">chaine</span> <span class="o">=</span> <span class="s">'je m'</span><span class="n">appelle</span> <span class="n">Prolixe</span><span class="o">.</span><span class="s">'</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous obtenez le message :<br>
<br>
<span class="code">Code : Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>File&nbsp;"&lt;stdin&gt;",&nbsp;line&nbsp;1
chaine&nbsp;=&nbsp;'je&nbsp;m'appelle&nbsp;Prolixe.'
^
SyntaxError:&nbsp;invalid&nbsp;syntax</pre></div></td></tr></tbody></table></div><br>
<br>
Ceci est dû au fait que l'apostrophe de "m'appelle" est considéré par Python comme la fin de la chaîne, et qu'il ne sait pas quoi faire de tout ce qui se trouve au-delà.<br>
<br>
Pour pallier ce problème, il faut <strong>échapper</strong> les apostrophes se trouvant au coeur de la chaîne (si les délimiteurs sont des apostrophes, il va de soi que si vous utilisez des guillemets, le problème ne se pose pas avec des apostrophes). Pour se faire, on insère l'anti-slash "\" avant les apostrophes contenus dans le message.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">chaine</span> <span class="o">=</span> <span class="s">'je m</span><span class="se">\'</span><span class="s">appelle Prolixe.'</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On doit également échapper les guillemets si on utilise les guillemets comme délimiteurs :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">chaine2</span> <span class="o">=</span> <span class="s">"</span><span class="se">\"</span><span class="s">Le seul individu formé, c'est celui qui a appris comment apprendre (...)</span><span class="se">\"</span><span class="s"> (Karl Rogers, 1976)"</span>
</pre></div>
</td></tr></tbody></table></div></li>
<li>Le caractère d'échappement "\" est utilisé pour symboliser d'autres signes très utiles. Ainsi, "\n" symbolise un saut de ligne (<span class="code2 python"><span class="s">"essai</span><span class="se">\n</span><span class="s">sur</span><span class="se">\n</span><span class="s">plusieurs</span><span class="se">\n</span><span class="s">lignes"</span>
</span>). Pour écrire un véritable anti-slash dans une chaîne, il faut lui-même l'échapper (donc écrire "\\").<br>
<br>
N.B.: l'interpréteur affiche les sauts de lignes comme on les entre, c'est-à-dire sous forme de "\n". Nous verrons dans la partie qui vient juste après comment afficher réellement ces chaînes de caractères, et pourquoi l'interpréteur ne les affiche pas comme il le devrait.</li>
<li>Utiliser les triple guillemets pour encadrer une chaîne de caractères dispense d'échapper les guillemets, les apostrophes, et permet d'écrire plusieurs lignes sans symboliser les retours à la ligne grâce à "\n".<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">chaine3</span> <span class="o">=</span> <span class="s">"""Ceci est un nouvel</span>
<span class="gp">... </span><span class="s">essai sur plusieurs</span>
<span class="gp">... </span><span class="s">lignes"""</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Notez que les trois chevrons sont remplacés par trois points, ce qui signifie que l'interpréteur considère que vous n'avez pas fini d'écrire cette instruction, qui ne s'achève en effet que quand vous refermez la chaîne avec trois nouveaux guillemets. Les sauts de lignes seront remplacés automatiquement par des "\n" dans la chaîne."</li>
</ul><br>
<br>
Vous pouvez utiliser, à la place des trois guillemets, trois apostrophes qui ont exactement le même but. Je n'utilise personnellement pas ces délimiteurs, mais sachez qu'ils existent et ne soyez pas surpris si vous les voyez un jour dans un code source.<br>
<br>
Voilà, le rapide tour d'horizon des types simples est accompli. Qualifier les chaînes de caractères de type simple n'est pas strictement vrai, mais nous n'allons pas dans ce chapitre rentrer dans le détail des opérations que l'on peut effectuer sur ces chaînes, c'est inutile pour l'instant, et ce serait hors sujet. Cependant, rien ne vous empêche de tester vous même quelques opérations comme l'addition et la multiplication (dans le pire des cas, Python vous dira qu'il ne peut pas faire ce que vous lui demandez), et comme nous l'avons vu, il est peu rancunier <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
<h3>Un petit bonus</h3><br>
Dans le chapitre précédent, nous avons vu les opérateurs "classiques" pour manipuler des nombres, mais aussi, comme on le verra plus tard, d'autres types de données. D'autres opérateurs ont été créés afin de simplifier la manipulation des variables.<br>
<br>
Vous serez amené par la suite, et assez régulièrement, à incrémenter des variables. L'incrémentation désigne l'augmentation de la valeur d'une variable d'un certain nombre. Jusqu'ici, j'ai procédé comme ceci pour augmenter une variable de 1 :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">variable</span> <span class="o">=</span> <span class="n">variable</span> <span class="o">+</span> <span class="mi">1</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cette syntaxe est claire, intuitive, mais assez longue, et les programmeurs, tout le monde le sait, sont des fainéants nés ;). On a donc trouvé plus court :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">variable</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
L'opérateur += revient à ajouter la valeur précisée à sa suite à la variable qui le précède. Les opérateurs -=, *= et /= existent également, bien qu'ils soient moins utilisés.<br>
<br>
<h3>Quelques trucs et astuces pour vous faciliter la vie</h3><br>
<br>
Python propose un moyen simple de permuter deux variables (échanger leur valeur). Dans d'autres langages, il est nécessaire de passer par une troisième variable qui retient l'une des deux valeurs... ici c'est bien plus simple :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="mi">32</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span><span class="n">a</span> <span class="c"># permutation</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span>
<span class="go">32</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span>
<span class="go">5</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez, après l'exécution de la ligne 3, les variables <span class="italique">a</span> et <span class="italique">b</span> ont échangées leur valeur. On retrouvera cette distribution d'affectation bien plus loin <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
On peut également affecter une valeur à plusieurs variables assez simplement :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">3</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">x</span>
<span class="go">3</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">y</span>
<span class="go">3</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Enfin, ce n'est pas encore d'actualité pour vous, mais sachez qu'on peut couper une instruction Python, pour l'écrire sur deux lignes ou plus.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="mi">1</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">-</span> <span class="mi">3</span> <span class="o">*</span> <span class="mi">19</span> <span class="o">+</span> <span class="mi">33</span> <span class="o">-</span> <span class="mi">45</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="mi">8</span> <span class="o">-</span> <span class="mi">3</span><span class="p">)</span> \
<span class="gp">... </span><span class="o">-</span><span class="mi">6</span> <span class="o">+</span> <span class="mf">23.5</span>
<span class="go">-86.5</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez, le symbole "\" permet, avant un saut de ligne, de dire à Python "cette instruction se poursuit en-dessous). Vous pouvez ainsi morceler votre instruction sur plusieurs lignes.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_223279">Première utilisation des fonctions</h2>
		<div class="ss_part_texte">
		Et bien, ça avance gentiment, et je me permets d'introduire l'utilisation des fonctions dans le chapitre des variables, même s'il s'agit, en fait, bien plus d'une application concrète de ce que vous avez appris juste à l'instant. Un chapitre entier sera consacré aux fonctions, mais utiliser celles que je vais vous montrer n'est pas sorcier et pourra vous être utile.<br>
<br>
<h3>Utiliser une fonction</h3><br>
<br>
<div class="rmq question">A quoi servent les fonctions ?</div><br>
<br>
Une fonction exécute un certain nombre d'instructions déjà enregistrées. En gros, c'est comme si vous enregistriez un groupe d'instructions pour faire une action précise et que vous lui donniez un nom. Vous n'avez plus ensuite qu'à appeler cette fonction par son nom autant de fois que nécessaire (cela évite bon nombre de répétitions). Toutefois, il est encore bien trop tôt pour apprendre à créer vos fonctions.<br>
<br>
La plupart des fonctions ont besoin d'au moins un paramètre pour travailler sur une donnée. Les fonctions que je vais vous montrer ne font pas exception. Ce concept vous semble peut-être un peu difficile à saisir dans son ensemble, mais rassurez-vous, les exemples devraient rendre tout limpide.<br>
<br>
Les fonctions s'utilisent en suivant cette syntaxe : <span class="italique">nom_de_la_fonction(parametre_1,parametre_2,...,parametre_n)</span>.<br>
<br>
<ul>
<li>Vous commencez par écrire le nom de la fonction.</li>
<li>Vous placez entre parenthèses les paramètres de la fonction. Si la fonction n'attend aucun paramètre, vous devrez quand même mettre les parenthèses, sans rien entre elles.</li>
</ul><br>
<br>
<h3>La fonction "type"</h3><br>
<br>
Dans la partie précédente, je vous ai présenté les types de données simples, du moins une partie d'entre eux. Une des grandes puissances de Python est qu'il comprend automatiquement de quel type est une variable et cela lors de son affectation. Mais il est pratique de pouvoir savoir de quel type est une variable.<br>
<br>
La syntaxe de cette fonction est simple :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="nb">type</span><span class="p">(</span><span class="n">nom_de_la_variable</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La fonction retourne le type de la variable passée en paramètre. Vu que nous sommes dans l'interpréteur de commandes, cette valeur sera affichée. Si vous entrez dans l'interpréteur les lignes suivantes :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span>
<span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous obtenez :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="go">&lt;class 'int'&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Python vous indique donc que la variable a appartient à la classe des entiers. Ce mot de classe ne sera pas approfondi avant bien des chapitres, mais sachez qu'on peut le rapprocher d'un type de donnée.<br>
<br>
Vous pouvez faire le test sans passer par des variables :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="mf">3.4</span><span class="p">)</span>
<span class="go">&lt;class 'float'&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="s">"un essai"</span><span class="p">)</span>
<span class="go">&lt;class 'str'&gt;</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
N.B.: str est l'abréviation de "string" qui signifie chaîne (sous-entendu, de caractère) en anglais.<br>
<br>
Vous serez peut-être amené à utiliser cette fonction pour différencier des actions en fonction de types de données, mais pour l'instant il est juste utile de savoir à quel type de donnée appartient une variable.<br>
<br>
<h3>La fonction "print"</h3><br>
<br>
La fonction <span class="italique">print</span> permet d'afficher une ou plusieurs variables.<br>
<br>
<div class="rmq question">Mais... on ne fait pas exactement la même chose en entrant juste le nom de la variable dans l'interpréteur ?</div><br>
<br>
Oui, et non. L'interpréteur l'affiche, car il affiche automatiquement tout ce qu'il peut, pour pouvoir suivre les étapes d'un programme. Cependant, quand vous ne travaillerez plus avec l'interpréteur, taper simplement le nom de la variable n'aura aucun effet. De plus, et vous l'aurez sans doute remarqué, l'interpréteur entoure les chaînes de caractères de délimiteurs et affiche les caractères d'échappement, tout ceci encore pour des raisons de clarté.<br>
<br>
La fonction <span class="italique">print</span> est dédiée à l'affichage uniquement. Son nombre de paramètres est variable, c'est à dire que vous pouvez lui demander d'afficher une ou plusieurs variables. Considérez cet exemple :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">3</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="mi">2</span>
<span class="k">print</span><span class="p">(</span><span class="s">"a ="</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="s">"et b ="</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le premier <strong>appel</strong> à <span class="italique">print</span> se contente d'afficher la variable a, c'est à dire <span class="italique">3</span>.<br>
Le second appel à <span class="italique">print</span> affiche :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="go">a = 6 et b = 4</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce deuxième appel à <span class="italique">print</span> est peut-être un peu plus dur à comprendre. En fait, on passe quatre paramètres à print, deux chaînes de caractères, et a et b. Quand Python interprète cette fonction, il va afficher dans l'ordre de passage les paramètres en les séparant par un espace.<br>
<br>
Relisez bien cet exemple, il montre tout l'intérêt des fonctions. Si vous avez du mal à le comprendre dans son ensemble, décortiquez-le en prenant chaque paramètre indépendamment.<br>
<br>
Testez l'utilisation de <span class="italique">print</span> avec d'autres types de données, et en insérant des chaînes avec des sauts de lignes et des caractères échappés, pour bien vous rendre compte de la différence.<br>
<br>
<h4>Un petit Hello World ?</h4><br>
Quand on fait un cours sur un langage quelconque, il est pour ainsi dire de tradition de présenter le programme <a href="http://fr.wikipedia.org/wiki/Hello_world">Hello World</a> qui permet de montrer assez rapidement la syntaxe superficielle d'un langage.<br>
<br>
Le but du jeu est très simple : faire un programme qui affiche <span class="italique">Hello World</span>. Dans certains langages, notamment les langages compilés, vous pourrez avoir autour d'une dizaine de lignes pour obtenir ce résultat. En Python, comme nous venons de le voir, il ne suffit que d'une seule ligne :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">print</span><span class="p">(</span><span class="s">"Hello World !"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour ma part, je cherche toujours quelque chose de plus simple <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Pour plus d'informations, n'hésitez pas à consulter la page Wikipédia consacrée au programme <a href="http://fr.wikipedia.org/wiki/Hello_world">Hello World</a>, vous avez même le code de ce programme sous un grand nombre de langages, ce peut être intéressant <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Et voilà, cette fois je crois que tout est dit. Vous n'avez peut-être pas l'impression d'avoir appris grand chose d'utile, et ce du fait de la facilité relative des concepts, mais à chaque chapitre, nous entrons un peu plus avant dans la syntaxe du langage, et dès le prochain vous pourrez commencer à faire des choses réellement intéressantes.
	</div>
	
	<hr>
	<h1 id="chap_223268">Les structures conditionnelles</h1>
	<div id="chap_intro">
	Jusqu'à présent, nous avons testé des instructions d'une façon linéaire : l'interpréteur exécutait au fur et à mesure le code que vous entriez dans la console. Mais nos programmes seraient bien pauvres si l'on ne pouvait de temps à autre demander à exécuter certaines instructions dans un cas, et d'autres instructions dans un autre cas. Et le programmeur inventa... la condition <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> .
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_223273">Vos premières conditions et blocs d'instructions</h2>
		<div class="ss_part_texte">
		<h3>Forme minimale en if</h3><br>
Les conditions sont un concept essentiel en programmation (oui oui, je me répète à force, mais il faut avouer que des concepts essentiels, on n'a pas fini d'en voir <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> ). Elles vont vous permettre de faire une action précise si, par exemple, une variable est positive, et une autre action si cette variable est négative, et encore une troisième si la variable est nulle. Comme un bon exemple vaut mieux que plusieurs lignes d'explications, voici un exemple clair d'une condition prise sous sa forme la plus simple.<br>
<br>
N.B.: Dès à présent dans mes exemples, j'utiliserais des commentaires. Les commentaires sont des messages qui sont ignorés par l'interpréteur et qui permettent de donner des indications sur le code (car, vous vous en rendrez compte, relire ses programmes après plusieurs semaines d'abandon, sans commentaire, ce peut être parfois plus qu'ardu <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> ). En Python, un commentaire débute par un dièse (#) et se termine par un saut de ligne. Tout ce qui est compris entre ce # et ce saut de ligne est ignoré. Tous les commentaires sont donc soit sur toute une ligne (on place le "#" en début de ligne) soit après une instruction (on place le # après la ligne de code pour la commenter plus spécifiquement).<br>
<br>
Cela étant posé, revenons à nos conditions :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="c"># premier exemple de condition</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span> <span class="c"># si a est supérieur à 0</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"a est supérieur à 0."</span><span class="p">)</span>
<span class="gp">... </span>
<span class="go">a est supérieur à 0.</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Détaillons ce code, ligne par ligne :<br>
<br>
<ol class="liste_1">
<li>La première ligne est un commentaire décrivant qu'il s'agit du premier test de condition. Elle est ignorée par l'interpréteur et sert juste à vous renseigner sur le code qui va suivre.</li>
<li>Cette ligne, vous devriez la comprendre sans aucune aide. On se contente d'affecter 5 à la variable <span class="italique">a</span>.</li>
<li>Ici se trouve notre test conditionnel. Il se compose, dans l'ordre :<br>
<ul>
<li>Du mot clé <span class="italique">if</span> qui signifie "si" en anglais</li>
<li>De la condition proprement dite <span class="italique">a &gt; 0</span> qu'il est facile de lire. Une liste des opérateurs de comparaison possibles sera présentée plus bas.</li>
<li>Du signe deux points (:) qui termine la condition. Ce signe est indispensable : Python affichera une erreur de syntaxe si vous l'omettez.</li>
</ul><br>
</li>
<li>Ici se trouve l'instruction à exécuter dans le cas où a est supérieur à 0. Après l'appui sur entrée à la ligne précédente, l'interpréteur vous présente la série de trois points qui signifie qu'il attend que vous entriez le <strong>bloc d'instructions</strong> concerné avant de l'interpréter. Cette instruction (et les autres instructions à exécuter s'il y en a) est indentée, c'est-à-dire décalée sur la droite. Des explications supplémentaires seront données sur les indentations un peu plus bas</li>
<li>L'interpréteur vous ré-affiche trois nouveaux points, si vous voulez entrer une nouvelle instruction dans ce bloc d'instructions. Ce n'est pour l'instant pas le cas. Vous appuyez donc sur entrée sans avoir rien écrit et l'interpréteur vous affiche le message "a est supérieur à 0", ce qui est assez logique, vu que a est effectivement supérieur à 0 <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .</li></ol><br>
<br>
Il y a deux notions importantes sur lesquelles je dois à présent revenir, elles sont complémentaires ne vous en faites pas.<br>
<br>
La première est celle de bloc d'instructions. On entend par bloc d'instructions une série d'instructions qui s'exécutent dans un certain cas précis (par condition, comme on vient de le voir, par répétition, comme on le verra plus tard...). Ici, notre bloc d'instructions n'est constitué que d'une seule instruction (la ligne 4 faisant appel à print). Mais rien ne vous empêche de mettre plusieurs instructions dans ce bloc.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">8</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="c"># on incrémente la valeur de b</span>
    <span class="n">b</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="c"># on affiche les valeurs des variables</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a ="</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="s">"et b ="</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La seconde notion importante est celle d'indentation. On entend par indentation un certain décalage vers la droite obtenu, au choix, par un (ou plusieurs) espaces ou tabulations.<br>
<br>
J'avais tendance, jusqu'à peu, à utiliser (et conseiller) les tabulations pour marquer l'indentation. Cependant, si on s'appuie sur la <a href="http://www.python.org/dev/peps/pep-0008/">PEP 08</a> (les PEPs sont les <strong>Python Enhancement Proposals</strong> : propositions d'amélioration de Python), il est plus judicieux d'utiliser 4 espaces par niveau d'indentation. Je respecterais donc dorénavant cette convention.<br>
<br>
Les indentations sont essentielles pour Python. Il ne s'agit pas, comme dans d'autres langages tels que le C++ ou le Java d'un confort de lecture, mais bien d'un moyen pour l'interpréteur de savoir où se trouve le début et la fin d'un bloc.<br>
<br>
<h3>Forme complète (if, elif et else)</h3><br>
<h4>Les limites de la condition simple en if</h4><br>
La première forme de condition que l'on vient de voir est pratique, mais assez incomplète.<br>
<br>
Si l'on considère par exemple une variable a de type entier. On souhaite faire une action si elle est positive, et une autre différente si elle est négative. Il est possible d'obtenir ce résultat avec la forme simple d'une condition :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span> <span class="c"># si a est positif</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a est positif."</span><span class="p">)</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span> <span class="c"># a est négatif</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a est négatif."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Amusez-vous à changer la valeur de a, et ré-exécutez les conditions, vous obtiendrez des messages différents, sauf si a est égal à 0. En effet, aucune action n'a été prévue si a est égal à 0.<br>
<br>
Cette méthode n'est pas optimale. Tout d'abord parce qu'elle nous oblige à faire deux conditions séparées pour tester une même variable. De plus, et même si c'est dur à concevoir par cet exemple, dans le cas où la variable remplirait les deux conditions (ici c'est impossible bien entendu), les deux portions de code s'exécuteraient.<br>
<br>
La condition "if" est donc bien pratique, mais insuffisante.<br>
<br>
<h4>L'instruction else:</h4><br>
Le mot-clé <span class="italique">else</span> qui signifie "sinon" en anglais, permet de définir une première forme de complément à notre instruction <span class="italique">if</span>.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">age</span> <span class="o">=</span> <span class="mi">21</span>
<span class="k">if</span> <span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">:</span> <span class="c"># si age est supérieur ou égal à 18</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Vous êtes majeur."</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span> <span class="c"># sinon (age inférieur à 18)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Vous êtes mineur."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je pense que cet exemple suffit amplement à exposer l'utilisation de <span class="italique">else</span>. La seule "subtilité" est de bien se rendre compte que Python exécute soit l'un, soit l'autre, et jamais les deux. Notez que cette instruction doit se trouver au même niveau d'indentation que l'instruction <span class="italique">if</span> qu'elle complète. De plus, elle se termine également par deux points puisqu'il s'agit d'une condition, même si elle est sous-entendue.<br>
<br>
L'exemple de tout à l'heure pourrait donc se présenter comme suit, avec l'utilisation de else :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a est supérieur à 0."</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a est inférieur ou égal à 0."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Mais... le résultat n'est pas tout à fait le même, si ?</div><br>
<br>
Non, en effet. Vous vous rendrez compte que cette fois, le cas où a égale 0 est bien pris en compte. En effet, la condition initiale prévoit d'exécuter le premier bloc d'instructions si a est strictement supérieur à 0. Sinon, on exécute le second bloc d'instructions.<br>
<br>
Si l'on veut faire la différence entre les nombres positifs, négatifs ou nuls, il va falloir utiliser une condition intermédiaire.<br>
<br>
<h4>L'instruction elif:</h4><br>
Le mot clé <span class="italique">elif</span> est une contraction de "else if", que l'on peut traduire très littéralement par "sinon si". Dans l'exemple que nous venons juste de voir, l'idéal serait de faire :<br>
<br>
<ul>
<li>Si <span class="italique">a</span> est strictement supérieur à 0, on dit qu'il est positif</li>
<li>Sinon si <span class="italique">a</span> est strictement inférieur à 0, on dit qu'il est négatif</li>
<li>Sinon (<span class="italique">a</span> ne peut qu'être égal à 0), <span class="italique">a</span> est nul.</li>
</ul><br>
<br>
Traduit en langage Python, ça donne :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span> <span class="c"># positif</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a est positif."</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span> <span class="c"># négatif</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a est négatif."</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span> <span class="c"># nul</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a est nul."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
De même que le <span class="italique">else</span>, le <span class="italique">elif</span> est sur le même niveau d'indentation que le <span class="italique">if</span> de départ. Il se termine de même par deux points, cependant, entre le <span class="italique">elif</span> et les deux points se trouve une nouvelle condition. Linéairement, le schéma d'exécution se traduit comme suit :<br>
<br>
<ol class="liste_1">
<li>On regarde si <span class="italique">a</span> est strictement supérieur à 0. Si c'est le cas, on affiche "a est positif" et on s'arrête là</li>
<li>Sinon, on regarde si <span class="italique">a</span> est strictement inférieur à 0. Si c'est le cas, on affiche "a est négatif" et on s'arrête</li>
<li>Sinon, on affiche "a est nul".</li></ol><br>
<br>
<div class="rmq attention">Attention : quand je dis "on s'arrête", il va de soi que c'est uniquement pour cette condition. Si il y a du code après les trois blocs d'instructions, il sera exécuté dans tous les cas.</div><br>
<br>
Vous pouvez mettre autant de <span class="italique">elif</span> que vous voulez après une condition en <span class="italique">if</span>. Tout comme le <span class="italique">else</span>, cette instruction est facultative, et, quand bien même vous construiriez une instruction en <span class="italique">if</span>, <span class="italique">elif</span>, vous n'êtes pas du tout obligé de prévoir un <span class="italique">else</span> après. En revanche, l'instruction else ne doit être mise qu'une fois au maximum, clôturant le bloc de la condition. Deux instructions <span class="italique">else</span> dans une même condition ne sont pas envisageables et n'auraient de toute façon pas grand sens.<br>
<br>
Sachez qu'il est heureusement possible d'imbriquer des conditions, et, dans ce cas, l'indentation permet de comprendre clairement le schéma d'exécution du programme. Je vous laisse essayer cette possibilité, je ne vais pas tout faire à votre place, non plus <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_223280">De nouveaux opérateurs</h2>
		<div class="ss_part_texte">
		<h3>Les opérateurs de comparaison</h3><br>
Les conditions doivent nécessairement introduire de nouveaux opérateurs, dits <strong>opérateurs de comparaison</strong>. Je vais les présenter très brièvement, vous laissant l'initiative de faire des tests, car ils ne sont réellement pas difficiles à comprendre.<br>
<br>
<table class="tab_user">







<thead><tr><th>Opérateur</th><th>Signification littérale</th></tr></thead><tbody><tr>
<td>&lt;</td>
<td>Strictement inférieur à</td>
</tr><tr>
<td>&gt;</td>
<td>Strictement supérieur à</td>
</tr><tr>
<td>&lt;=</td>
<td>Inférieur ou égal à</td>
</tr><tr>
<td>&gt;=</td>
<td>Supérieur ou égal à</td>
</tr><tr>
<td>==</td>
<td>Egal à</td>
</tr><tr>
<td>!=</td>
<td>Différent de</td>
</tr></tbody></table><br>
<br>
<div class="rmq attention">Attention : l'égalité de deux valeurs est comparée avec l'opérateur "==" et non "=". Ce dernier est en effet l'opérateur d'affectation et ne doit pas être utilisé dans une condition.</div><br>
<br>
<h3>Prédicats et booléens</h3><br>
Avant d'aller plus loin, sachez que vos conditions se trouvant par exemple entre "if" et les deux points sont appelés des <strong>prédicats</strong>. Vous pouvez tester ces prédicats directement dans l'interpréteur, pour comprendre les explications qui vont suivre.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">==</span> <span class="mi">5</span>
<span class="go">False</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">8</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">!=</span> <span class="mf">33.19</span>
<span class="go">True</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
L'interpréteur renvoie tantôt <span class="italique">True</span> (c'est-à-dire "vrai") ou tantôt <span class="italique">False</span> (c'est-à-dire "faux").<br>
<br>
<span class="italique">True</span> et <span class="italique">False</span> sont les deux valeurs possibles d'un type que nous n'avons pas vu jusqu'ici : le type booléen (bool).<br>
<br>
<div class="rmq attention">N'oubliez pas que <span class="italique">True</span> et <span class="italique">False</span> sont des valeurs ayant leur première lettre en majuscule. Si vous commencez à écrire <span class="italique">true</span> sans un 'T' majuscule, Python ne va pas comprendre.</div><br>
<br>
Les variables de ce type ne peuvent prendre comme valeur que vrai ou faux et peuvent être pratiques, justement, pour stocker des prédicats, de la façon dont nous l'avons vu ou d'une façon plus détournée.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">age</span> <span class="o">=</span> <span class="mi">21</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">majeur</span> <span class="o">=</span> <span class="bp">False</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">if</span> <span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">:</span>
<span class="gp">&gt;&gt;&gt; </span>    <span class="n">majeur</span> <span class="o">=</span> <span class="bp">True</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
A la fin de cet exemple, majeur vaut "True", c'est-à-dire "vrai", si age est supérieur ou égal à 18. Sinon, il continue de valoir "False". Les booléens ne vous semblent pas très utiles pour l'instant je pense, mais vous verrez qu'ils rendent de grands services.<br>
<br>
<h3>Les mots clés "and", "or" et "not"</h3><br>
Il arrive souvent que nos conditions doivent tester plusieurs prédicats. Par exemple, si l'on veut savoir si une variable quelconque, de type entier, se trouve dans un intervalle précis (c'est-à-dire comprise entre deux nombres). Avec nos méthodes actuelles, le plus simple serait de faire comme suit :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># on fait un test pour savoir si a est comprise dans l'intervalle allant de 2 à 8 inclus</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="mi">8</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"a est dans l'intervalle."</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"a n'est pas dans l'intervalle."</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a n'est pas dans l'intervalle."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ça marche, mais c'est assez lourd. D'autant que pour être sûr qu'un message soit affiché à chaque fois, il faut fermer d'un <span class="italique">else</span> les deux conditions (la seconde étant imbriquée dans la première). Si vous avez du mal à comprendre cet exemple, prenez le temps de le décortiquer, ligne par ligne, il n'y a rien que de très simple.<br>
<br>
Il existe cependant le mot clé <span class="italique">and</span> ("et" en anglais) qui ici va nous rendre un fier service. En effet, ce qu'on veut tester, c'est si <span class="italique">a</span> est supérieur ou égal à 2 et inférieur ou égal à 8. L'on peut donc réduire ainsi nos conditions imbriquées :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">if</span> <span class="n">a</span><span class="o">&gt;=</span><span class="mi">2</span> <span class="ow">and</span> <span class="n">a</span><span class="o">&lt;=</span><span class="mi">8</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a est dans l'intervalle."</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a n'est pas dans l'intervalle."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Simple et bien plus compréhensible, avouez-le <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Sur le même mode, il existe le mot clé <span class="italique">or</span> qui signifie cette fois "ou". Nous allons prendre le même exemple, sauf que nous allons monter notre condition différemment.<br>
<br>
Nous allons chercher à savoir si <span class="italique">a</span> n'est pas dans l'intervalle. La variable ne se trouve pas dans l'intervalle si elle est inférieur à 2 ou supérieur à 8. Voici donc le code :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">if</span> <span class="n">a</span><span class="o">&lt;</span><span class="mi">2</span> <span class="ow">or</span> <span class="n">a</span><span class="o">&gt;</span><span class="mi">8</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a n'est pas dans l'intervalle."</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a est dans l'intervalle."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Enfin, il existe le mot clé <span class="italique">not</span> qui "inverse" un prédicat. Le prédicat <span class="code2 python"><span class="ow">not</span> <span class="n">a</span><span class="o">==</span><span class="mi">5</span>
</span> équivaut donc à <span class="code2">a!=5</span>.<br>
<br>
<span class="italique">not</span> rend la syntaxe plus claire. Pour cet exemple, j'ajoute à cette liste un nouveau mot clé <span class="italique">is</span> qui teste non pas l'égalité des valeurs de deux variables, mais l'égalité de leur référence. Je ne vais pas rentrer dans le détail de ce mécanisme avant longtemps. Qu'il vous suffise de savoir que pour les entiers, les flottants et les booléens, c'est strictement la même chose. Mais en testant une égalité entre variables dont le type est plus complexe, préférez l'opérateur "==". Mais revenons à cette démonstration :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">majeur</span> <span class="o">=</span> <span class="bp">False</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">if</span> <span class="n">majeur</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">True</span><span class="p">:</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"Vous n'êtes pas encore majeur."</span><span class="p">)</span>
<span class="gp">... </span>
<span class="go">Vous n'êtes pas encore majeur.</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
En parlant un minimum l'anglais, ce prédicat est limpide, et d'une simplicité sans égale <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> .<br>
<br>
Vous pouvez tester les prédicats plus complexes de la même façon que les précédents, en les entrant directement, sans le if ni les deux points dans l'interpréteur de commande. Vous pouvez utiliser les parenthèses ouvrantes et fermantes pour encadrer des prédicats et les comparer selon une priorité bien précise (nous verrons ce point plus loin si vous n'en comprenez pas l'utilité).
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_223281">Votre premier programme !</h2>
		<div class="ss_part_texte">
		<div class="rmq question">À quoi on joue ?</div><br>
L'heure est venue pour le premier TP. S'agissant du tout premier, et parce qu'il y a quelques indications que je dois vous donner pour que vous le réalisiez jusqu'au bout, je vous accompagnerai pas à pas dans sa réalisation.<br>
<br>
<h3>Avant de commencer</h3><br>
Vous allez dans cette sous-partie écrire votre premier programme. Vous allez sûrement tester les syntaxes dans l'interpréteur de commande directement. Mais vous pourriez préférer écrire votre code directement dans un fichier que vous pourrez exécuter. Si c'est le cas, je vous renvoie au <a href="http://www.siteduzero.com/tutoriel-3-338034-ecrire-nos-programmes-python-dans-des-fichiers.html">récapitulatif traitant de ce point</a>.<br>
<br>
<h3>Sujet</h3><br>
Le but de notre programme va être de déterminer si une année entrée par l'utilisateur est bissextile. Il s'agit d'un sujet très prisé des enseignants en informatique quand il s'agit d'expliquer les conditions. Mille pardons donc à ceux qui ont déjà fait cet exercice dans un autre langage, mais, une fois n'est pas coutume, je trouve que ce petit programme reprend assez de thèmes abordés dans ce chapitre pour être réellement intéressant.<br>
<br>
Je vous rappelle les règles qui déterminent si une année est bissextile ou non (vous allez peut-être même apprendre des choses que le commun des mortels ignore <img src="./Apprendre Python !_files/langue.png" alt=":p"> ).<br>
<br>
Une année est dite bissextile si c'est un multiple de 4, sauf si c'est un multiple de 100. Toutefois, elle est considérée comme bissextile si c'est un multiple de 400. Je développe :<br>
<br>
<ul>
<li>Si une année n'est pas multiple de 4, on s'arrête là, elle n'est pas bissextile.</li>
<li>Si elle l'est, on regarde si elle est multiple de 100.<br>
<ul>
<li>Si c'est le cas, on regarde si elle est multiple de 400.<br>
<ul>
<li>Si c'est le cas, l'année est bissextile.</li>
<li>Sinon, elle ne l'est pas.</li>
</ul><br>
</li>
<li>Sinon, elle l'est.</li>
</ul><br>
</li>
</ul><br>
<br>
<h3>Solution ou résolution</h3><br>
Voilà. Le problème est posé clairement (sinon relisez attentivement l'énoncé autant de fois que nécessaire), il faut maintenant réfléchir à sa résolution en terme de programmation. C'est une phase de transition assez délicate de prime abord, et je vous conseille de schématiser le problème, de prendre des notes sur les différentes étapes, sans pour l'instant penser au code. C'est une phase purement algorithmique, autrement dit, on réfléchit au programme sans réfléchir au code.<br>
<br>
Vous aurez besoin, pour réaliser ce petit programme, de quelques indications qui sont réellement spécifiques à Python. Ne lisez donc ceci qu'après avoir cerné et clairement écrit le problème d'une façon plus algorithmique. Cela étant dit, si vous peinez à trouver une solution, ne vous y attardez pas. Cette phase de réflexion est assez difficile au début, et parfois il suffit d'un peu de pratique et d'explications pour comprendre l'essentiel.<br>
<br>
<h4>La fonction input()</h4><br>
Tout d'abord, j'ai fais mention d'une année entrée par l'utilisateur. En effet, depuis tout à l'heure, on teste des variables que l'on déclare nous-mêmes avec une valeur précise. La condition est donc assez ridicule.<br>
<br>
<span class="italique">input()</span> est une fonction qui va, pour nous, caractériser nos premières interactions avec l'utilisateur : le programme réagira différemment en fonction du nombre que l'utilisateur entrera.<br>
<br>
<span class="italique">input()</span> ne prend aucun paramètre. Elle interrompt le programme et attend que l'utilisateur entre ce qu'il veut puis appuie sur Entrée. A cet instant, la fonction retourne ce que l'utilisateur a entré. Il faut donc piéger cette valeur dans une variable.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="c"># test de la fonction input</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="s">"Entrez une année :"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">annee</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
<span class="go">2009</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">annee</span><span class="p">)</span>
<span class="go">'2009'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il subsiste un problème : le type de la variable annee après l'appel à input() est... une chaîne de caractère <img src="./Apprendre Python !_files/blink.gif" alt="o_O"> . Vous pouvez vous en rendre compte grâce aux apostrophes qui encadrent la valeur de la variable quand vous l'affichez directement dans l'interpréteur.<br>
<br>
C'est bien ennuyeux tout ça, nous qui allons devoir travailler sur un entier, nous allons devoir convertir cette variable. Pour convertir une variable dans un autre type, il faut utiliser le nom du type comme une fonction (ce que c'est, d'ailleurs).<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">annee</span><span class="p">)</span>
<span class="go">&lt;type 'str'&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c"># on veut convertir la variable en un entier, on utilise donc</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c"># la fonction int qui prend en paramètre la variable d'origine</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">annee</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">annee</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">annee</span><span class="p">)</span>
<span class="go">&lt;type 'int'&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">annee</span><span class="p">)</span>
<span class="go">2009</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Bon, parfait ! On a donc maintenant l'année sous sa forme entière. Notez que si vous entrez des lettres lors de l'appel à <span class="italique">input()</span>, la conversion renverra une erreur.<br>
<br>
<div class="rmq attention">L'appel à la fonction <span class="italique">int()</span> en a peut-être déconcerté certains. On passe en paramètre de cette fonction la variable contenant la chaîne de caractère issue de <span class="italique">input()</span>, pour tenter de la convertir. La fonction <span class="italique">int()</span> retourne la valeur convertie en entier, et on la récupère donc dans la même variable. On évite ainsi de travailler sur plusieurs variables, sachant que la première n'a plus aucune utilité à présent qu'on l'a convertie.</div><br>
<br>
<h4>Test de multiples</h4><br>
Certains pourraient également se demander comment tester si un nombre a est multiple d'un nombre b. Il suffit en fait de tester le reste de la division entière de b par a. Si ce reste est nul, alors a est un multiple de b.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="mi">5</span><span class="o">%</span><span class="mi">2</span> <span class="c"># 5 n'est pas un multiple de 2</span>
<span class="go">1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="mi">8</span><span class="o">%</span><span class="mi">2</span> <span class="c"># 8 est un multiple de 2</span>
<span class="go">0</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h4>A vous de jouer</h4><br>
Je pense vous avoir donné le nécessaire pour réussir. A mon avis, le plus difficile est la phase de réflexion qui précède la composition du programme. Si vous avez du mal à réaliser cette opération, passez à la correction et étudiez-la soigneusement. Sinon, on se retrouve à la partie suivante.<br>
<br>
Bonne chance ! <img src="./Apprendre Python !_files/heureux.png" alt=":D"><br>
<br>
<h3>Correction</h3><br>
C'est l'heure de comparer nos méthodes, et avant de vous divulguer le code de ma solution, je vous précise qu'elle est loin d'être la seule possible et que vous pouvez très bien avoir trouvé quelque chose de différent, mais qui marche tout aussi bien.<br>
<br>
Attention... la voiiiciiiiiii...<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># programme testant si une année, entrée par l'utilisateur,</span>
<span class="c"># est bissextile ou non</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Entrez une année :"</span><span class="p">)</span>
<span class="n">annee</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span> <span class="c"># on attend que l'utilisateur entre l'année qu'il désire tester</span>
<span class="n">annee</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">annee</span><span class="p">)</span> <span class="c"># risque d'erreur si l'utilisateur n'a pas rentré un nombre</span>
<span class="n">bissextile</span> <span class="o">=</span> <span class="bp">False</span> <span class="c"># on crée un booléen qui va être vrai ou faux</span>
                   <span class="c"># si l'année est bissextile ou non</span>

<span class="k">if</span> <span class="n">annee</span><span class="o">%</span><span class="mi">400</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
    <span class="n">bissextile</span> <span class="o">=</span> <span class="bp">True</span>
<span class="k">elif</span> <span class="n">annee</span><span class="o">%</span><span class="mi">100</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
    <span class="n">bissextile</span> <span class="o">=</span> <span class="bp">False</span>
<span class="k">elif</span> <span class="n">annee</span><span class="o">%</span><span class="mi">4</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
    <span class="n">bissextile</span> <span class="o">=</span> <span class="bp">True</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">bissextile</span> <span class="o">=</span> <span class="bp">False</span>
<span class="k">if</span> <span class="n">bissextile</span><span class="p">:</span> <span class="c"># si l'année est bissextile</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"L'année entrée est bissextile."</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"L'année entrée n'est pas bissextile."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je pense que le code est assez clair, reste à expliciter l'enchaînement des conditions. Vous remarquerez qu'on a inversé le problème. On test en effet d'abord si l'année est un multiple de 400, ensuite si c'est un multiple de 100, et ensuite si c'est un multiple de 4. En effet, le "elif" garantit que, si annee est un multiple de 100, ce n'est pas un multiple de 400 (car le cas a été traité au-dessus). De cette façon, on s'assure que tous les cas sont prévus. Vous pouvez faire des essais avec plusieurs années et vous rendre compte si le programme a raison ou pas.<br>
<br>
N.B.: l'utilisation de <span class="italique">bissextile</span> comme d'un prédicat à part entière vous a peut-être déconcerté. C'est en fait tout à fait possible et logique, puisque <span class="italique">bissextile</span> est un booléen. Il est de ce fait vrai ou faux et donc on peut le tester simplement. On peut bien entendu aussi écrire <span class="code2 python"><span class="k">if</span> <span class="n">bissextile</span><span class="o">==</span><span class="bp">True</span><span class="p">:</span>
</span>, cela revient au même.<br>
<br>
<h4>Un peu d'optimisation</h4><br>
Ce qu'on a fait était bien, mais on peut l'améliorer. D'ailleurs, vous vous rendrez compte que c'est presque toujours le cas. Ici, il s'agit bien entendu de notre condition que je vais passer au crible afin d'en construire si possible une plus courte et plus logique. On peut parler d'optimisation dans ce cas, même si l'optimisation intègre aussi et surtout les ressources consommées par votre application, en vue de les diminuer et d'améliorer sa rapidité. Mais pour une petite application comme cela, je ne pense pas qu'on perdra du temps sur l'optimisation du temps d'exécution <img src="./Apprendre Python !_files/langue.png" alt=":p"> .<br>
<br>
Le premier détail que vous auriez pu remarquer, c'est que le "else" de fin est inutile. En effet, la variable <span class="italique">bissextile</span> est à <span class="italique">False</span> par défaut et le reste donc si le cas n'est pas traité (ici, quand l'année n'est ni un multiple de 400, ni un multiple de 100, ni un multiple de 4).<br>
<br>
Ensuite, il apparaît que nous pouvons faire un grand ménage dans notre condition, car, les deux seuls cas dans lesquels l'année est bissextile sont "si l'année est un multiple de 400" ou "si l'année est un multiple de 4 mais pas de 100".<br>
<br>
Le prédicat correspondant est un peu délicat, il fait appel aux priorités des parenthèses. Je n'attendais pas que vous le trouviez tout seul, mais que vous le compreniez bien à présent.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># programme testant si une année, entrée par l'utilisateur,</span>
<span class="c"># est bissextile ou non</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Entrez une année :"</span><span class="p">)</span>
<span class="n">annee</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span> <span class="c"># on attend que l'utilisateur entre l'année qu'il désire tester</span>
<span class="n">annee</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">annee</span><span class="p">)</span> <span class="c"># risque d'erreur si l'utilisateur n'a pas rentré un nombre</span>
                   <span class="c"># si l'année est bissextile ou non</span>

<span class="k">if</span> <span class="n">annee</span><span class="o">%</span><span class="mi">400</span><span class="o">==</span><span class="mi">0</span> <span class="ow">or</span> <span class="p">(</span><span class="n">annee</span><span class="o">%</span><span class="mi">4</span><span class="o">==</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">annee</span><span class="o">%</span><span class="mi">100</span><span class="o">!=</span><span class="mi">0</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"L'année entrée est bissextile."</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"L'année entrée n'est pas bissextile."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Du coup, on n'a plus besoin de la variable <span class="italique">bissextile</span>, c'est déjà ça de gagné. Nous sommes passés de 16 lignes de code à seulement 7 (sans compter les commentaires et les sauts de ligne) ce qui n'est pas rien <img src="./Apprendre Python !_files/clin.png" alt=";)"> .
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Et voilà, ça fait pas mal de choses à ingérer déjà. Dès que vous vous sentez prêt, passez au chapitre suivant, nous attaquons les boucles, un autre grand concept de la programmation. Rassurez-vous, on se dirige lentement mais sûrement vers vos premiers véritables programmes :).
	</div>
	
	<hr>
	<h1 id="chap_224341">Les boucles</h1>
	<div id="chap_intro">
	Les boucles sont un nouveau concept qui va vous permettre de répéter une certaine opération autant de fois que nécessaire. Le concept risque de vous sembler un peu théorique, car les applications pratiques qui seront présentées dans ce chapitre ne vous paraitront probablement pas très intéressantes. Toutefois, il est impératif que cette notion soit comprise avant que vous ne passiez à la suite. Viendra vite le moment où vous aurez du mal à écrire une application sans boucle. Alors, on commence ? <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies">
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_224340">En quoi ça consiste ?</h2>
		<div class="ss_part_texte">
		Comme je l'ai dit juste au-dessus, les boucles sont un moyen de répéter des instructions de votre programme un certain nombre de fois. Prenons un exemple simple, même si assez peu réjouissant en lui-même : écrire un programme affichant la table de multiplication par 7, de 1 * 7 à 10 * 7.<br>
<br>
... bah quoi ? <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"><br>
<br>
Bon, ce n'est qu'un exemple, ne faites pas cette tête, et puis je suis sûr que ce sera utile pour certains <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"> . Dans un premier temps, vous devriez arriver au programme suivant :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">print</span><span class="p">(</span><span class="s">" 1 * 7 ="</span><span class="p">,</span><span class="mi">1</span><span class="o">*</span><span class="mi">7</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 2 * 7 ="</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="mi">7</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 3 * 7 ="</span><span class="p">,</span><span class="mi">3</span><span class="o">*</span><span class="mi">7</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 4 * 7 ="</span><span class="p">,</span><span class="mi">4</span><span class="o">*</span><span class="mi">7</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 5 * 7 ="</span><span class="p">,</span><span class="mi">5</span><span class="o">*</span><span class="mi">7</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 6 * 7 ="</span><span class="p">,</span><span class="mi">6</span><span class="o">*</span><span class="mi">7</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 7 * 7 ="</span><span class="p">,</span><span class="mi">7</span><span class="o">*</span><span class="mi">7</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 8 * 7 ="</span><span class="p">,</span><span class="mi">8</span><span class="o">*</span><span class="mi">7</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 9 * 7 ="</span><span class="p">,</span><span class="mi">9</span><span class="o">*</span><span class="mi">7</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"10 * 7 ="</span><span class="p">,</span><span class="mi">10</span><span class="o">*</span><span class="mi">7</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
... et le résultat :<br>
<br>
<span class="code">Code : Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>1&nbsp;*&nbsp;7&nbsp;=&nbsp;7
&nbsp;2&nbsp;*&nbsp;7&nbsp;=&nbsp;14
&nbsp;3&nbsp;*&nbsp;7&nbsp;=&nbsp;21
&nbsp;4&nbsp;*&nbsp;7&nbsp;=&nbsp;28
&nbsp;5&nbsp;*&nbsp;7&nbsp;=&nbsp;35
&nbsp;6&nbsp;*&nbsp;7&nbsp;=&nbsp;42
&nbsp;7&nbsp;*&nbsp;7&nbsp;=&nbsp;49
&nbsp;8&nbsp;*&nbsp;7&nbsp;=&nbsp;56
&nbsp;9&nbsp;*&nbsp;7&nbsp;=&nbsp;63
10&nbsp;*&nbsp;7&nbsp;=&nbsp;70</pre></div></td></tr></tbody></table></div><br>
<br>
Bon, c'est sûrement la première idée qui vous est venue, et ça fonctionne, très bien même. Seulement, vous reconnaitrez qu'un programme comme ça n'est pas bien utile. Si on compte partir d'une variable à présent, une variable qui contiendrait le 7 (comme ça, si on décide d'afficher la table de multiplication de 6, on n'aura qu'à changer la valeur de la variable). Pour cet exemple, on utilise une variable <span class="italique">nb</span> qui contiendra 7. Les instructions seront légèrement différentes, mais vous devriez toujours pouvoir écrire ce programme :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">nb</span> <span class="o">=</span> <span class="mi">7</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 1 *"</span><span class="p">,</span> <span class="n">nb</span><span class="p">,</span> <span class="s">"="</span><span class="p">,</span> <span class="mi">1</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 2 *"</span><span class="p">,</span> <span class="n">nb</span><span class="p">,</span> <span class="s">"="</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 3 *"</span><span class="p">,</span> <span class="n">nb</span><span class="p">,</span> <span class="s">"="</span><span class="p">,</span> <span class="mi">3</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 4 *"</span><span class="p">,</span> <span class="n">nb</span><span class="p">,</span> <span class="s">"="</span><span class="p">,</span> <span class="mi">4</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 5 *"</span><span class="p">,</span> <span class="n">nb</span><span class="p">,</span> <span class="s">"="</span><span class="p">,</span> <span class="mi">5</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 6 *"</span><span class="p">,</span> <span class="n">nb</span><span class="p">,</span> <span class="s">"="</span><span class="p">,</span> <span class="mi">6</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 7 *"</span><span class="p">,</span> <span class="n">nb</span><span class="p">,</span> <span class="s">"="</span><span class="p">,</span> <span class="mi">7</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 8 *"</span><span class="p">,</span> <span class="n">nb</span><span class="p">,</span> <span class="s">"="</span><span class="p">,</span> <span class="mi">8</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">" 9 *"</span><span class="p">,</span> <span class="n">nb</span><span class="p">,</span> <span class="s">"="</span><span class="p">,</span> <span class="mi">9</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"10 *"</span><span class="p">,</span> <span class="n">nb</span><span class="p">,</span> <span class="s">"="</span><span class="p">,</span><span class="mi">10</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le résultat est le même, vous pouvez vérifier. Mais le code est quand-même un peu plus intéressant : on peut changer la table de multiplication à afficher en changeant la variable <span class="italique">nb</span>.<br>
<br>
Mais ce programme reste assez peu pratique. Il fait une action bien répétitive, et les programmeurs sont très paresseux <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> , d'où les boucles.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_224342">La boucle while</h2>
		<div class="ss_part_texte">
		La boucle que je vais présenter se retrouve dans la plupart des autres langages de programmation, et sous le même nom. Elle permet de répéter un <strong>bloc d'instructions</strong> tant qu'une condition est vraie (<span class="italique">while</span> signifie "tant que" en anglais). J'espère que le concept de <strong>bloc d'instructions</strong> est clair pour vous, sinon, je vous renvoie au chapitre précédent.<br>
<br>
La syntaxe du <span class="italique">while</span> est :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">while</span> <span class="n">condition</span><span class="p">:</span>
    <span class="c"># instruction 1</span>
    <span class="c"># instruction 2</span>
    <span class="c"># ...</span>
    <span class="c"># instruction N</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous devriez reconnaitre la forme d'un bloc d'instructions, du moins je l'espère <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"> .<br>
<br>
<div class="rmq question">Quelle condition va-t-on utiliser ?</div><br>
<br>
Et bien, c'est là le point important. On va dans cet exemple créer une variable que l'on va incrémenter dans le bloc d'instructions. Tant que cette variable sera inférieure à 10, le bloc s'exécutera pour afficher la table.<br>
<br>
Si ce n'est pas clair, regardez ce code, quelques commentaires suffiront pour le comprendre :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">nb</span> <span class="o">=</span> <span class="mi">7</span> <span class="c"># on garde la variable contenant le nombre dont on veut la table de multiplication</span>
<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="c"># c'est notre variable compteur que nous allons incrémenter dans la boucle</span>

<span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">:</span> <span class="c"># tant que i est strictement inférieure à 10</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">,</span> <span class="s">"*"</span> <span class="p">,</span> <span class="n">nb</span> <span class="p">,</span> <span class="s">"="</span> <span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c"># on incrémente i de 1 à chaque tour de boucle</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Prenons ce code ligne par ligne :<br>
<br>
<ol class="liste_1">
<li>On instancie notre variable <span class="italique">nb</span> qui va accueillir le nombre sur lequel nous allons travailler (7 en l'occurence). Vous avez bien entendu la possibilité de faire entrer ce nombre à l'utilisateur, vous savez le faire à présent.</li>
<li>On instancie la variable <span class="italique">i</span> qui sera notre compteur durant la boucle. <span class="italique">i</span> est un standard utilisé quand il s'agit de boucles et de variables s'incrémentant, mais il va de soi que vous auriez pu lui donner un autre nom. On l'initialise à 0.</li>
<li>Un saut de ligne ne fait jamais de mal <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> !</li>
<li>On trouve ici l'instruction <span class="italique">while</span> qui se décode, comme je l'ai indiqué en commentaire, en <strong>"tant que <span class="italique">i</span> est strictement inférieure à 10"</strong>. N'oubliez pas les deux points à la fin de la ligne.</li>
<li>La ligne du <span class="italique">print</span>, vous devez la reconnaitre. Maintenant, la plus grande partie de la ligne affichée est constituée de variables, à part les signes mathématiques. Vous remarquez qu'à chaque fois qu'on utilise <span class="italique">i</span> dans cette ligne, pour l'affichage ou le calcul, on lui ajoute 1. Cela est dû au fait qu'en programmation, on a l'habitude, (habitude que vous devrez prendre) de commencer à compter à partir de 0. Seulement ce n'est pas le cas de la table de multiplication, qui va de 1 à 10 et non de 0 à 9, comme c'est le cas ici. Certes j'aurais pu changer la condition et la valeur initiale de <span class="italique">i</span>, ou même mettre l'incrémentation de <span class="italique">i</span> avant l'affichage, mais j'ai voulu prendre le cas le plus utilisé, le format de boucle que vous retrouverez le plus souvent. Rien ne vous empêche de faire les tests, et je vous y encourage même.</li>
<li>Ici, on incrémente la variable <span class="italique">i</span> de 1. Si on est dans le premier tour de boucle, <span class="italique">i</span> passe donc de 0 à 1. Et alors, puisqu'il s'agit de la fin du bloc d'instructions, on revient à l'instruction <span class="italique">while</span>. <span class="italique">while</span> vérifie que <span class="italique">i</span> est toujours inférieure à 10. Si c'est le cas (et ça l'est pour l'instant), on réexécute le bloc d'instructions. En tout, on exécute ce bloc 10 fois, jusqu'à ce que <span class="italique">i</span> passe de 9 à 10. Alors, l'instruction <span class="italique">while</span> vérifie la condition, se rend compte qu'elle est à présent fausse (<span class="italique">i</span> n'est pas inférieure à 10, puisqu'elle est maintenant égale à 10) et s'arrête. S'il y avait du code après le bloc, il serait à présent exécuté.</li></ol><br>
<br>
<div class="rmq attention">N'oubliez pas d'incrémenter <span class="italique">i</span> ! Sinon, vous créerez ce qu'on appelle une boucle infinie, puisque <span class="italique">i</span> ne sera jamais supérieure à 10, et que la condition du <span class="italique">while</span> sera toujours vraie... Elle s'exécutera donc à l'infini, du moins hypothétiquement. Si votre ordinateur se lance dans une boucle infinie à cause de votre programme, vous devrez taper, sous Windows ou Linux, ctrl + C dans la fenêtre de l'interpréteur pour interrompre la boucle. Python ne le fera pas tout seul, car pour lui, il se passe bel et bien quelque chose, et de toute façon il est incapable de différencier une boucle infinie d'une boucle finie : c'est au programmeur de le faire.</div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_224343">La boucle for</h2>
		<div class="ss_part_texte">
		L'instruction <span class="italique">while</span>, ai-je dit, est la plus présente dans la plupart des autres langages. Dans le C++ ou le Java, on retrouve également des instructions <span class="italique">for</span> mais qui n'ont pas le même sens. C'est assez particulier et c'est le point sur lequel je risque de manquer d'exemples pour l'illustrer, toute son utilité se révélera au chapitre sur les listes. Notez que, si vous avez fait du Perl ou du PHP, vous pouvez retrouver les boucles <span class="italique">for</span> sous un mot-clé assez proche : <span class="italique">foreach</span>.<br>
<br>
L'instruction <span class="italique">for</span> travaille sur des ensembles de données. Elle est en fait spécialisée dans le parcours d'un ensemble de données. Nous n'avons pas vu (et nous ne verrons pas tout de suite), ces ensembles assez particuliers et utilisés, mais aussi complexes. Toutefois, il y en a un que nous avons vu depuis quelque temps déjà : les chaînes de caractères.<br>
<br>
Les chaînes de caractères sont des ensembles... de caractères <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> ! Vous pouvez parcourir une chaîne de caractères, et cela était rendu possible également par <span class="italique">while</span>, nous verrons plus tard comment. Pour l'instant, intéressons-nous à <span class="code2 python"><span class="k">for</span>
</span>.<br>
<br>
L'instruction <span class="italique">for</span> se construit ainsi :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">ensemble</span><span class="p">:</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<span class="italique">element</span> est une variable créée par le <span class="italique">for</span>, ce n'est pas à vous de l'instancier. Elle prend successivement les valeurs contenues dans l'ensemble parcouru.<br>
<br>
Ce n'est pas très clair ? Alors, comme d'habitude, tout s'éclaire avec le code ! <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"><br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">chaine</span> <span class="o">=</span> <span class="s">"Bonjour les ZER0S"</span>
<span class="k">for</span> <span class="n">lettre</span> <span class="ow">in</span> <span class="n">chaine</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">lettre</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<span class="code">Code : Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>B
o
n
j
o
u
r
&nbsp;
l
e
s
&nbsp;
Z
E
R
0
S</pre></div></td></tr></tbody></table></div><br>
<br>
Est-ce plus clair ? En fait, la variable <span class="italique">lettre</span> prend successivement la valeur de chaque lettre contenue dans la chaîne de caractères (d'abord B, puis o, puis n...). On les affiche avec <span class="code2 python"><span class="k">print</span>
</span> et cette fonction fait un retour à la ligne après chaque message, ce qui fait que toutes les lettres sont sur une seule colonne. Littéralement, la ligne 2 signifie <strong>"pour lettre dans chaine"</strong>. Arrivé à cette ligne, l'interpréteur va créer une variable <span class="italique">lettre</span> qui contiendra le premier élément de la chaîne (la première lettre, autrement dit). Après l'exécution du bloc, la variable "lettre" contient la seconde lettre, et ainsi de suite, tant qu'il y a une lettre dans la chaîne.<br>
<br>
Notez bien que du coup, il est inutile d'incrémenter la variable <span class="italique">lettre</span> (ce qui serait d'ailleurs assez ridicule vu que ce n'est pas un nombre). Python se charge de l'incrémentation, un des grands avantages de l'instruction <span class="italique">for</span>.<br>
<br>
A l'instar des conditions que nous avons vu jusqu'ici, <span class="code2 python"><span class="ow">in</span>
</span> peut être utilisée ailleurs que dans une boucle <span class="italique">for</span>.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">chaine</span> <span class="o">=</span> <span class="s">"Bonjour les ZER0S"</span>
<span class="k">for</span> <span class="n">lettre</span> <span class="ow">in</span> <span class="n">chaine</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">lettre</span> <span class="ow">in</span> <span class="s">"AEIOUYaeiouy"</span><span class="p">:</span> <span class="c"># lettre est une voyelle</span>
        <span class="k">print</span><span class="p">(</span><span class="n">lettre</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span> <span class="c"># lettre est une consonne... ou plutôt, lettre n'est pas une voyelle</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"*"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
... ce qui donne :<br>
<br>
<span class="code">Code : Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>*
o
*
*
o
u
*
*
*
e
*
*
*
E
*
*
*</pre></div></td></tr></tbody></table></div><br>
<br>
Voilà ! Soit l'interpréteur affiche les lettres si ce sont des voyelles, soit il affiche des "*". Notez bien que le 0 n'est pas affiché à la fin, Python ne se doute nullement qu'il s'agit d'un "o" stylisé <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> .<br>
<br>
Retenez bien cette utilisation de <span class="italique">in</span> dans une condition. On cherche à savoir si un élément quelconque est contenu dans un ensemble quelconque (ici si la lettre est contenue dans "AEIOUYaeiouy", c'est-à-dire si lettre est une voyelle). On retrouvera plus loin cette fonctionnalité.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_229366">Un petit bonus : les mot-clés break et continue</h2>
		<div class="ss_part_texte">
		Je vais ici vous montrer deux nouveaux mot-clés, <span class="italique">break</span> et <span class="italique">continue</span>. Vous ne les utiliserez peut-être pas beaucoup, mais vous devez au moins savoir qu'ils existent... et à quoi ils servent <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
<h3>break</h3><br>
Le mot-clé <span class="italique">break</span> permet tout simplement d'interrompre une boucle. Il est souvent utilisé dans une forme de boucle que je n'approuve pas trop :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">while</span> <span class="mi">1</span><span class="p">:</span> <span class="c"># 1 est toujours vrai -&gt; boucle infinie</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Entrez 'Q' pour quitter"</span><span class="p">)</span>
    <span class="n">lettre</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">lettre</span><span class="o">==</span><span class="s">"Q"</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Fin de la boucle"</span><span class="p">)</span>
        <span class="k">break</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La boucle <span class="italique">while</span> a pour condition <span class="italique">1</span>, c'est-à-dire une condition qui sera <span class="souligne">toujours</span> vraie. Autrement dit, en regardant la ligne du <span class="italique">while</span>, on pense à une boucle infinie. En pratique, on demande à l'utilisateur d'entrer une lettre (un 'Q' pour quitter). Tant que l'utilisateur n'entre pas cette lettre, le programme lui redemande d'entrer une lettre. Quand il entre 'Q', le programme affiche <span class="code2 console">Fin&nbsp;de&nbsp;la&nbsp;boucle</span> et la boucle s'arrête grâce au mot-clé <span class="italique">break</span>.<br>
<br>
Ce mot-clé permet d'arrêter une boucle quel que soit la condition de la boucle. Python sort immédiatement de la boucle et exécute le code qui se trouve ensuite, si il y en a.<br>
<br>
C'est un exemple un peu simpliste, mais vous pouvez voir l'idée d'ensemble. Dans ce cas-là et, à mon sens, dans la plupart des cas ou <span class="italique">break</span> est utilisé, on pourrait s'en sortir en précisant une véritable condition à la ligne du <span class="italique">while</span>. Par exemple, pourquoi ne pas créer un booléen qui sera <span class="italique">vrai</span> tout au long de la boucle et <span class="italique">faux</span> quand la boucle doit s'arrêter ? Ou bien tester directement si <span class="italique">lettre != "Q"</span> dans le <span class="italique">while</span> ?<br>
<br>
Parfois, <span class="italique">break</span> est véritablement utile et fait gagner du temps. Mais ne l'utilisez pas à outrance, préférez une boucle avec une condition claire plutôt qu'un bloc d'instructions avec un <span class="italique">break</span>, qui sera plus dure à appréhender d'un seul regard.<br>
<br>
<h3>continue</h3><br>
Le mot-clé <span class="italique">continue</span> permet de... continuer une boucle, en repartant directement à la ligne du <span class="italique">while</span> ou <span class="italique">for</span>. Un petit exemple s'impose je pense :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">i</span><span class="o">=</span><span class="mi">1</span>
<span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">20</span><span class="p">:</span> <span class="c"># tant que i est inférieure à 20</span>
    <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">3</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
        <span class="n">i</span><span class="o">+=</span><span class="mi">4</span> <span class="c"># on ajoute 4 à i</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"On incrémente i de 4. i est maintenant égale à"</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
        <span class="k">continue</span> <span class="c"># on retourne au while sans exécuter les autres lignes</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"La variable i ="</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
    <span class="n">i</span><span class="o">+=</span><span class="mi">1</span> <span class="c"># dans le cas classique on ajoute juste 1 à i</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Voici le résultat :<br>
<br>
<span class="code">Code : Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>La&nbsp;variable&nbsp;i&nbsp;=&nbsp;1
La&nbsp;variable&nbsp;i&nbsp;=&nbsp;2
On&nbsp;incrémente&nbsp;i&nbsp;de&nbsp;4.&nbsp;i&nbsp;est&nbsp;maintenant&nbsp;égale&nbsp;à&nbsp;7
La&nbsp;variable&nbsp;i&nbsp;=&nbsp;7
La&nbsp;variable&nbsp;i&nbsp;=&nbsp;8
On&nbsp;incrémente&nbsp;i&nbsp;de&nbsp;4.&nbsp;i&nbsp;est&nbsp;maintenant&nbsp;égale&nbsp;à&nbsp;13
La&nbsp;variable&nbsp;i&nbsp;=&nbsp;13
La&nbsp;variable&nbsp;i&nbsp;=&nbsp;14
On&nbsp;incrémente&nbsp;i&nbsp;de&nbsp;4.&nbsp;i&nbsp;est&nbsp;maintenant&nbsp;égale&nbsp;à&nbsp;19
La&nbsp;variable&nbsp;i&nbsp;=&nbsp;19</pre></div></td></tr></tbody></table></div><br>
<br>
Comme vous le voyez, tous les trois tours de boucle, <span class="italique">i</span> s'incrémente de 4. Arrivé au mot-clé <span class="italique">continue</span>, Python n'exécute pas la fin du bloc mais revient au début de la boucle en retestant la condition du <span class="italique">while</span>. Autrement dit, quand Python arrive à la ligne 6, il saute à la ligne 2, sans exécuter la ligne 7 et 8. Au nouveau tour de boucle, Python reprend l'exécution normale de la boucle (<span class="italique">continue</span> n'ignore la fin du bloc que pour le tour de boucle courant).<br>
<br>
Mon exemple ne démontre pas de manière éclatante l'utilité de <span class="italique">continue</span>. Les rares fois où j'utilise ce mot-clé, c'est par exemple pour supprimer des éléments d'une liste, mais nous n'avons pas encore vu les listes <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> . L'essentiel pour l'instant c'est que vous vous souveniez de ces deux mot-clés et que vous sachiez ce qu'ils font, si vous les rencontrez au détour d'une instruction <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Personnellement, je n'utilise pas très souvent ces mot-clés, mais c'est aussi une question de goût.
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Nous avons vu ce que je considère comme la base des boucles dans ce chapitre. Dans les parties suivantes, nous reviendrons à ce concept pour l'agrémenter de nouveaux exemples et nouvelles fonctionnalités. Retenez bien les deux formes de boucles, <span class="italique">while</span> et <span class="italique">for</span>, sachant qu'à l'avenir nous travaillerons surtout avec <span class="italique">for</span>. Retenez également le mot-clé <span class="italique">in</span> et son utilité, nous le reverrons dans la seconde partie, notamment dans le chapitre consacré aux listes.
	</div>
	
	<hr>
	<h1 id="chap_229363">Pas à pas vers la modularité (1/2)</h1>
	<div id="chap_intro">
	En programmation, on est souvent amené à utiliser plusieurs fois des groupes d'instructions pour un but très précis. Ce n'est pas de boucles dont je parle ici. Simplement, vous pourrez vous rendre compte que la plupart de nos tests pourront être regroupés dans des blocs plus vastes, fonctions, ou modules. Je vais détailler tranquillement ces deux concepts.<br>
<br>
Vous découvrirez beaucoup de choses nouvelles dans ce chapitre, alors prenez bien le temps de le lire et le comprendre, sans précipitation.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_229364">Les fonctions : à vous de jouer</h2>
		<div class="ss_part_texte">
		Nous avons utilisé pas mal de fonctions depuis le début de ce tutoriel. On citera pour mémoire <span class="code2 python"><span class="k">print</span></span>, <span class="code2 python"><span class="nb">type</span></span> et <span class="code2 python"><span class="nb">input</span></span>, sans compter quelques autres. Mais vous devez bien vous rendre compte qu'il existe un nombre incalculable de fonctions déjà construites en Python. Toutefois, vous vous apercevrez aussi que très souvent on crée nos propres fonctions. C'est le premier pas que vous ferez, dans ce chapitre, vers la <strong>modularité</strong>. Ce terme un peu barbare signifie que l'on va s'habituer à regrouper des parties de notre code que nous serons amenés à réutiliser dans des fonctions. Dans le chapitre suivant, nous apprendrons à regrouper nos fonctions ayant un rapport dans un fichier pour constituer un module, mais n'anticipons pas.<br>
<br>
<h3>La création de fonctions</h3><br>
Nous allons pour illustrer cet exemple reprendre le code de la table de multiplication, que nous avons vu dans le chapitre précédent et qui, décidément, n'en finit pas de vous poursuivre <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> .<br>
<br>
Nous allons emprisonner notre code calculant la table de multiplication par 7 dans une fonction que nous appellerons <span class="italique">table_par_7</span>.<br>
<br>
On crée une fonction selon le schéma suivant :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">nom_de_la_fonction</span><span class="p">(</span><span class="n">parametre1</span><span class="p">,</span> <span class="n">parametre2</span><span class="p">,</span> <span class="n">parametre3</span><span class="p">,</span> <span class="n">parametreN</span><span class="p">):</span>
    <span class="c"># bloc d'instructions</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Les blocs d'instructions nous courent après aussi, quel enfer <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> . Si l'on décortique la ligne de la définition de la fonction, on trouve dans l'ordre :<br>
<br>
<ul>
<li><span class="code2 python"><span class="k">def</span></span> : le mot-clé qui est l'abréviation de "define" (définir en anglais) et qui est le prélude à toute construction de fonction.</li>
<li>Le nom de la fonction, qui se nomme exactement comme une variable (nous verrons par la suite que ce n'est pas par hasard). N'utilisez pas un nom de variable déjà instanciée pour nommer une fonction.</li>
<li>La liste des paramètres qui seront fournis à la fonction lors de son appel, séparés par une virgule et encadrée par une parenthèse ouvrante et une fermante (là encore, les espaces sont optionnelles mais aident à la lisibilité).</li>
<li>Les deux points, encore et toujours, qui clôturent la ligne.</li>
</ul><br>
<br>
N.B. : les parenthèses sont obligatoires, quand bien même votre fonction n'attendrait aucun paramètre.<br>
<br>
Le code pour mettre notre table de multiplication par 7 dans une fonction serait donc :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">table_par_7</span><span class="p">():</span>
    <span class="n">nb</span> <span class="o">=</span> <span class="mi">7</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="c"># Notre compteur ! L'auriez-vous oublié ?</span>
    <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">:</span> <span class="c"># Tant que i est strictement inférieure à 10,</span>
        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">,</span> <span class="s">"*"</span> <span class="p">,</span> <span class="n">nb</span> <span class="p">,</span> <span class="s">"="</span> <span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c"># on incrémente i de 1 à chaque tour de boucle.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Quand vous exécutez ce code à l'écran, rien ne se passe. Une fois que vous avez retrouvé les trois chevrons essayez d'appeler la fonction :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">table_par_7</span><span class="p">()</span>
<span class="go">1 * 7 = 7</span>
<span class="go">2 * 7 = 14</span>
<span class="go">3 * 7 = 21</span>
<span class="go">4 * 7 = 28</span>
<span class="go">5 * 7 = 35</span>
<span class="go">6 * 7 = 42</span>
<span class="go">7 * 7 = 49</span>
<span class="go">8 * 7 = 56</span>
<span class="go">9 * 7 = 63</span>
<span class="go">10 * 7 = 70</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Bien, c'est, euh, exactement ce qu'on avait réussi à faire dans le chapitre précédent, et l'intérêt ne saute pas encore aux yeux, sauf que l'on peut appeler facilement la fonction et réafficher toute la table sans avoir besoin de tout réécrire. Enfin à part ça...<br>
<br>
<div class="rmq question">Mais, si on entre des paramètres pour pouvoir afficher la table de 5 ou de 8... ?</div><br>
<br>
Oui, ce serait déjà bien plus utile. Je ne pense pas que vous ayez trop de mal à trouver le code de la fonction :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">table</span><span class="p">(</span><span class="n">nb</span><span class="p">):</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">:</span> <span class="c"># Tant que i est strictement inférieure à 10,</span>
        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">,</span> <span class="s">"*"</span> <span class="p">,</span> <span class="n">nb</span> <span class="p">,</span> <span class="s">"="</span> <span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c"># on incrémente i de 1 à chaque tour de boucle.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et là, vous pouvez entrer différents nombres en paramètres, <span class="code2 python"><span class="n">table</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span></span> pour afficher la table de multiplication par 8 par exemple.<br>
<br>
On peut aussi envisager de passer en paramètre le nombre de valeurs à afficher dans la table.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">table</span><span class="p">(</span><span class="n">nb</span><span class="p">,</span> <span class="nb">max</span><span class="p">):</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">max</span><span class="p">:</span> <span class="c"># Tant que i est strictement inférieure à la variable max,</span>
        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">,</span> <span class="s">"*"</span> <span class="p">,</span> <span class="n">nb</span> <span class="p">,</span> <span class="s">"="</span> <span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si vous entrez à présent <span class="code2 python"><span class="n">table</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span></span>, l'interpréteur vous affichera la table de 11, de 1*11 à 20*11. Magique non ? <img src="./Apprendre Python !_files/magicien.png" alt=":magicien:" class="smilies"><br>
<br>
<div class="rmq attention">Dans le cas où on utilise plusieurs paramètres sans les nommer, comme ici, il faut respecter l'ordre d'appel des paramètres, cela va de soi. Si vous commencez à mettre le nombre d'affichages en premier paramètre alors que dans la définition c'était le second, vous risquez d'avoir quelques surprises <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"> . Il est possible d'appeler les paramètres dans le désordre mais il faut dans ce cas préciser leur nom, nous verrons ça plus bas.</div><br>
<br>
Si vous précisez en second paramètre un nombre négatif, vous avez toutes les chances de créer une magnifique boucle infinie... vous pouvez l'empêcher en rajoutant des vérifications avant la boucle, comme par exemple si le nombre est négatif ou nul, je le mets à 10. D'un autre côté, ça va de soi qu'on ne précise pas de nombre négatif quand on vous demande un maximum dans ce cadre. En Python, on préférera mettre un commentaire en tête de fonction ou une <strong>docString</strong> comme on le verra plus bas, pour indiquer que max doit être positif, plutôt que de faire des vérifications qui au final feront perdre du temps. Une des phrases reflettant la philosophie du langage et qui peut s'appliquer à ce type de situation est <span class="italique">we're all consenting adults here.</span> : nous sommes entre adultes consentants (sous-entendu, quelques avertissements en commentaires sont plus efficaces qu'une restriction au niveau du code). On aura l'occasion de retrouver cette phrase plus loin, surtout quand on parlera des objets.<br>
<br>
<h3>Valeurs par défaut des paramètres</h3><br>
On peut également préciser une valeur par défaut aux paramètres de la fonction. Vous pouvez par exemple dire que le nombre maximum d'affichages doit être de 10 par défaut (c'est-à-dire si l'utilisateur de votre fonction ne le précise pas). Cela se fait le plus simplement du monde :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">table</span><span class="p">(</span><span class="n">nb</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
    <span class="sd">"""Fonction affichant la table de multiplication par nb</span>
<span class="sd">    de 1*nb à max*nb</span>
<span class="sd">    </span>
<span class="sd">    (max &gt;= 0)</span>
<span class="sd">    """</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">max</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">,</span> <span class="s">"*"</span> <span class="p">,</span> <span class="n">nb</span> <span class="p">,</span> <span class="s">"="</span> <span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il suffit de rajouter <span class="italique">=10</span> après max. A présent, vous pouvez appeler la fonction de deux façons : soit en précisant le numéro de la table et le nombre maximum d'affichages, soit en ne précisant que le numéro de la table (<span class="code2 python"><span class="n">table</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span></span>). Dans ce dernier cas, max vaudra 10 par défaut.<br>
<br>
J'en ai profité pour ajouter quelques lignes d'explications que vous aurez remarquées. Nous avons mis une chaîne de caractères, sans la capturer dans une variable, juste en-dessous de la définition de la fonction. Cette chaîne est ce qu'on appelle une <strong>docstring</strong> que l'on pourrait traduire par une chaîne d'aide. Si vous faites help(table), c'est ce message que vous verrez apparaître. Documenter vos fonctions est également une bonne habitude à prendre. Comme vous le voyez on indente cette chaîne et on la met entre triple guillemets. Si la chaîne est sur une seule ligne on pourra mettre les trois guillemets clôturant la chaîne sur la même ligne, sinon on préférera sauter une ligne avant de fermer cette chaîne pour des raisons de lisibilité. Tout le texte d'aide est indenté au même niveau que le code de la fonction.<br>
<br>
Enfin, sachez que l'on peut appeler des paramètres par leur nom. Cela est utile pour une fonction comptant un certain nombre de paramètres qui ont tous une valeur par défaut. Vous pouvez aussi utiliser cette méthode sur une fonction sans paramètre par défaut, mais c'est moins courant. <br>
<br>
Prenons un exemple de définition de fonction :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">fonc</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">e</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a ="</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="s">"b ="</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="s">"c ="</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="s">"d ="</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="s">"e ="</span><span class="p">,</span><span class="n">e</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Simple, n'est-ce pas ? Et bien, vous avez de nombreuses façons d'appeler cette fonction. En voici quelques exemples :<br>
<br>
<table class="tab_user">





<thead><tr><th>Instruction</th><th>Résultat</th></tr></thead><tbody><tr>
<td><span class="code2 python"><span class="n">fonc</span><span class="p">()</span></span></td>
<td>a = 1 b = 2 c = 3 d = 4 e = 5</td>
</tr><tr>
<td><span class="code2 python"><span class="n">fonc</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span></span></td>
<td>a = 4 b = 2 c = 3 d = 4 e = 5</td>
</tr><tr>
<td><span class="code2 python"><span class="n">fonc</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span></span></td>
<td>a = 1 b = 8 c = 3 d = 5 e = 5</td>
</tr><tr>
<td><span class="code2 python"><span class="n">fonc</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="mi">35</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="mi">48</span><span class="p">,</span> <span class="n">a</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">e</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span></span></td>
<td>a = 4 b = 35 c = 48 d = 4 e = 9</td>
</tr></tbody></table><br>
<br>
Je ne pense pas que des explications suplémentaires s'imposent. Si vous voulez changer la valeur d'un paramètre, vous entrez son nom, un signe égal, et une valeur (qui peut être une variable bien entendu). Peu importe les paramètres que vous précisez (comme vous le voyez, dans cet exemple ou tous les paramètres ont une valeur par défaut, vous pouvez appeler la fonction sans paramètres), peu importe l'ordre d'appel des paramètres.<br>
<br>
<h3>Signature d'une fonction</h3><br>
On entend par "signature de fonction" les éléments qui permettent au langage de l'identifier. En C++ par exemple, la signature d'une fonction est constituée de son nom et des types de ses paramètres. Cela veut dire que l'on peut trouver plusieurs fonctions du même nom mais avec différents paramètres dans leur définition. Au moment de l'appel de fonction, le compilateur recherche la fonction qui s'applique à cette signature.<br>
<br>
En Python comme vous avez pu le voir, on ne précise pas les types des paramètres. Dans ce langage, la signature d'une fonction est tout simplement son nom. Cela signifie que vous ne pouvez définir deux fonctions du même nom (l'ancienne définition est écrasée par la nouvelle si vous le faites).<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">exemple</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Un exemple d'une fonction sans paramètres"</span><span class="p">)</span>

<span class="n">exemple</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">exemple</span><span class="p">():</span> <span class="c"># on redéfinit la fonction exemple</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Un autre exemple de fonction sans paramètres"</span><span class="p">)</span>

<span class="n">exemple</span><span class="p">()</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
A la ligne 1 on définit la fonction <span class="italique">exemple</span>. On l'appelle une première fois à la ligne 4. On redéfinit à la ligne 6 la fonction <span class="italique">exemple</span>. L'ancienne définition est écrasée et l'ancienne fonction ne pourra plus être appelée.<br>
<br>
Retenez simplement que, comme pour les variables, un nom de fonction ne renvoie que vers une fonction précise, on ne peut surcharger de fonctions en Python.<br>
<br>
<h3>L'instruction <span class="code2 python"><span class="k">return</span></span></h3><br>
Ce que nous avons fait était intéressant, mais nous n'avons pas encore fait le tour des possibilités de la fonction. Et d'ailleurs, même à la fin de ce chapitre, il nous restera quelques petites fonctionnalités à voir. Si vous vous souvenez bien, il existe des fonctions comme <span class="code2 python"><span class="k">print</span></span> qui ne retournent rien (attention, retourner et afficher ne sont pas identiques) et des fonctions, telles que <span class="code2 python"><span class="nb">input</span></span> ou <span class="code2 python"><span class="nb">type</span></span> qui retournent une valeur. Vous pouvez capturer cette valeur en mettant une variable devant (exemple <span class="code2 python"><span class="n">variable2</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="n">variable1</span><span class="p">)</span></span>). En effet, les fonctions travaillent en général sur des données et retournent le résultat obtenu, suite à un calcul par exemple.<br>
<br>
Prenons un exemple simple : une fonction chargée de mettre au carré une valeur passée en paramètre. Je vous rappelle que Python en est parfaitement capable sans avoir à coder une nouvelle fonction, mais c'est pour l'exemple <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">carre</span><span class="p">(</span><span class="n">valeur</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">valeur</span> <span class="o">*</span> <span class="n">valeur</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
L'instruction <span class="code2 python"><span class="k">return</span></span> signifie qu'on va <strong>retourner</strong> la valeur, pour pouvoir la récupérer ensuite et la stocker dans une variable par exemple. Cette instruction arrête le déroulement de la fonction, du code placé après le return ne s'exécutera pas.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">variable</span> <span class="o">=</span> <span class="n">carre</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La variable <span class="italique">variable</span> contiendra après cette instruction 5 au carré, c'est-à-dire 25.<br>
<br>
Sachez que l'on peut retourner plusieurs valeurs que l'on sépare par des virgules, et que l'on peut les capturer dans des variables également séparées par des virgules, mais je m'attarderai plus loin sur cette particularité. Retenez simplement la définition d'une fonction, les paramètres, les valeurs par défaut, l'instruction <span class="code2 python"><span class="k">return</span></span> et ce sera déjà bien <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_229369">À la découverte des modules</h2>
		<div class="ss_part_texte">
		Jusqu'ici, nous avons travaillé avec les fonctions de Python chargées au lancement de l'interpréteur. Il y en a déjà un certain nombre, et nous pourrions continuer et finir cette première partie sans utiliser de module Python... ou presque. Mais il faut bien que je vous montre cette possibilité des plus intéressantes à un moment donné !<br>
<br>
<h3>Les modules, qu'est-ce que c'est ?</h3><br>
Un module est grossièrement un bout de code que l'on a enfermé dans un fichier. On emprisonne ainsi des fonctions, des variables, toutes ayant un rapport entre elles. Ainsi, si l'on veut travailler avec les fonctionnalités prévues par le module (celles qui ont été enfermées dans le module), vous n'avez qu'à <strong>importer</strong> le module et utiliser ensuite toutes les fonctions et variables prévues.<br>
<br>
Il existe un grand nombre de modules disponibles avec Python sans avoir besoin d'installer de bibliothèques suplémentaires. Pour cette partie, nous prendrons l'exemple du module <span class="souligne">math</span> qui contient, comme son nom l'indique, des fonctions mathématiques. Inutile de vous inquiéter, nous n'allons pas nous attarder sur le module-même pour coder une calculatrice scientifique, nous verrons surtout les différentes méthodes d'importation <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>La méthode <span class="code2 python"><span class="kn">import</span>
</span></h3><br>
En ouvrant l'interpréteur Python, les fonctionnalités du module <span class="italique">math</span> ne sont pas incluses. Il s'agit en effet d'un module, il vous appartient de l'importer si vous vous dites "tiens, mon programme risque d'avoir besoin de fonctions mathématiques". Nous allons voir une première syntaxe d'importation.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">math</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La syntaxe est facile à retenir : le mot-clé <span class="code2 python"><span class="kn">import</span>
</span> qui signifie "importer" en anglais, et le nom du module, ici <span class="italique">math</span>.<br>
<br>
Après l'exécution de cette instruction, rien ne se passe... en apparence. En réalité, Python vient d'importer le module <span class="italique">math</span>. Toutes les fonctions mathématiques contenues dans ce module sont maintenant accessibles. Pour appeler une fonction du module, il faut taper le nom du module, un point "." puis le nom de la fonction. C'est la même syntaxe pour appeler des variables du module. Voyons un exemple :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
<span class="go">4</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez, la fonction <span class="italique">sqrt</span> du module <span class="italique">math</span> retourne la racine carrée du nombre passé en paramètre.<br>
<br>
<div class="rmq question">Mais, comment je suis censé savoir quelles fonctions existent, et que fait math.sqrt dans ce cas précis ?</div><br>
<br>
J'aurais dû vous montrer cette fonction bien plus tôt, car oui, c'est une fonction qui va nous donner la solution. Il s'agit de <span class="code2 python"><span class="n">help</span>
</span>, qui prend en paramètre la fonction ou le module sur lequel vous demandez de l'aide. L'aide est fournie en anglais, mais c'est de l'anglais technique, c'est-à-dire une forme de l'anglais que vous devrez maîtriser pour programmer, si ce n'est pas le cas. Une grande majorité de la documentation est en anglais, bien que vous puissiez en trouver pas mal en français maintenant.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="s">"math"</span><span class="p">)</span>
<span class="go">Help on built-in module math:</span>

<span class="go">NAME</span>
<span class="go">    math</span>

<span class="go">FILE</span>
<span class="go">    (built-in)</span>

<span class="go">DESCRIPTION</span>
<span class="go">    This module is always available.  It provides access to the</span>
<span class="go">    mathematical functions defined by the C standard.</span>

<span class="go">FUNCTIONS</span>
<span class="go">    acos(...)</span>
<span class="go">        acos(x)</span>

<span class="go">        Return the arc cosine (measured in radians) of x.</span>

<span class="go">    acosh(...)</span>
<span class="go">        acosh(x)</span>

<span class="go">        Return the hyperbolic arc cosine (measured in radians) of x.</span>

<span class="go">    asin(...)</span>
<span class="go">-- Suite  --</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si vous parlez un minimum l'anglais, vous avez accès à une description exhaustive des fonctions du module <span class="italique">math</span>. Vous voyez en haut de la page le nom du module, le fichier le contenant, puis la description du module. Ensuite se trouve une liste des fonctions avec une courte description de chacune.<br>
<br>
Tapez "q" pour revenir à la fenêtre d'interpréteur, la touche "espace" pour avancer d'une page, la touche "entrer" pour avancer d'une ligne. Vous pouvez également passer un nom de fonction en paramètre de la fonction <span class="code2 python"><span class="n">help</span>
</span>.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="s">"math.sqrt"</span><span class="p">)</span>
<span class="go">Help on built-in function sqrt in module math:</span>

<span class="go">sqrt(...)</span>
<span class="go">    sqrt(x)</span>

<span class="go">    Return the square root of x.</span>

<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ne mettez pas les parenthèses habituelles après le nom de la fonction. C'est en réalité la référence de la fonction que vous envoyez à <span class="code2 python"><span class="n">help</span>
</span>. Si vous rajoutez les parenthèses ouvrantes et fermantes après le nom de la fonction, vous devrez préciser une valeur et, si vous le faites, c'est la valeur retournée par <span class="code2 python"><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span>
</span> qui sera analysée, soit un nombre (entier ou flottant).<br>
<br>
Nous reviendrons plus tard sur le concept des références des fonctions. Si vous avez compris pourquoi il ne fallait pas mettre de parenthèses après le nom de la fonction dans <span class="code2 python"><span class="n">help</span>
</span>, tant mieux. Sinon, ce n'est pas grave, nous y reviendrons en temps voulu.<br>
<br>
<h3>Utiliser un espace de noms spécifique</h3><br>
En vérité, quand vous tapez <span class="code2 python"><span class="kn">import</span> <span class="nn">math</span>
</span>, un espace de noms se crée, portant le nom math, contenant les variables et fonctions du module "math". Quand vous tapez <span class="code2 python"><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span>
</span>, vous précisez à Python que vous souhaitez exécuter la fonction <span class="code2 python"><span class="n">sqrt</span>
</span> contenue dans l'espace de noms <span class="code2 python"><span class="n">math</span>
</span>. Cela signifie que vous pouvez avoir, dans l'espace de noms principal, une autre fonction sqrt que vous avez défini. Il n'y aura pas de conflit entre la fonction que vous avez créée et que vous appellerez grâce à l'instruction <span class="code2 python"><span class="n">sqrt</span>
</span> et la fonction <span class="italique">sqrt</span> du module math que vous appellerez grâce à l'instruction <span class="code2 python"><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span>
</span>.<br>
<br>
<div class="rmq question">Mais concrètement, un espace de noms c'est quoi ?</div><br>
<br>
Il s'agit de regrouper certaines fonctions et variables avec un préfixe spécifique. Prenons un exemple concret :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="kn">import</span> <span class="nn">math</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">b</span> <span class="o">=</span> <span class="mf">33.2</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<ul>
<li>Dans l'espace de noms principal, celui qui ne nécessite pas de préfixe et que vous utilisez depuis le début de ce tutoriel, on trouve :<br>
<ul>
<li>La variable a</li>
<li>La variable b</li>
<li>Le module <span class="italique">math</span> qui se trouve dans un espace de nom s'appelant <span class="italique">math</span> également. Dans cet espace de nom, on trouve :<br>
<ul>
<li>La fonction sqrt</li>
<li>La variable pi</li>
<li>Et bien d'autres fonctions et variables...</li>
</ul><br>
</li>
</ul><br>
</li>
</ul><br>
<br>
C'est aussi l'intérêt des modules : des variables et fonctions sont stockées à part, bien à l'abri dans un espace de noms, sans risque de conflit avec vos propres variables et fonctions. Mais dans certains cas, vous pourrez vouloir changer le nom de l'espace de noms dans lequel le module importé sera stocké.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="kn">import</span> <span class="nn">math</span> <span class="kn">as</span> <span class="nn">mathematiques</span>
<span class="n">mathematiques</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Qu'est-ce qu'on a fait là ?</div><br>
<br>
On a simplement importé le module <span class="italique">math</span> en lui spécifiant qu'il ne devrait pas être contenu dans l'espace de noms <span class="italique">math</span>, mais <span class="italique">mathematiques</span>. Cela permet simplement de contrôler un peu mieux les espaces de nom des modules que vous importerez. Dans la plupart des cas, vous n'utiliserez pas cette fonctionnalité j'imagine, mais au moins vous savez qu'elle existe. Quand on se penchera sur les packages, vous vous souviendrez probablement de cette possibilité.<br>
<br>
<h3>Une autre méthode d'importation : <span class="code2 python"><span class="kn">from</span> <span class="nn">...</span> <span class="kn">import</span> <span class="o">...</span>
</span></h3><br>
Il existe une autre méthode d'importation qui ne fonctionne pas tout à fait de la même façon. En fonction du résultat attendu, j'utilise l'une ou l'autre méthode indifféremment. Si nous reprenons notre exemple du module <span class="italique">math</span>. Admettons que nous avons uniquement besoin dans notre programme de la fonction retournant la valeur absolue d'une variable. Dans ce cas, nous n'allons importer que la fonction, au lieu d'importer tout le module.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">fabs</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fabs</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">)</span>
<span class="go">5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fabs</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="go">2</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour ceux qui n'ont pas encore étudié les valeurs absolues, il s'agit tout simplement de l'opposé de la variable si elle est négative, et de la variable elle-même si elle est positive. Une valeur absolue est ainsi toujours positive.<br>
<br>
Vous aurez remarqué qu'on ne met plus le préfixe <span class="code2 python"><span class="n">math</span><span class="o">.</span>
</span> devant le nom de la fonction. En effet, nous l'avons importé avec la méthode <span class="code2 python"><span class="kn">from</span>
</span> qui charge la fonction depuis le module indiqué et le place dans l'interpréteur au même plan que les fonctions existantes de l'interpréteur, tout comme <span class="code2 python"><span class="k">print</span>
</span>. Si vous avez compris les explications sur les espaces de noms, <span class="code2 python"><span class="k">print</span>
</span> et <span class="code2 python"><span class="n">fabs</span>
</span> sont dans le même espace de noms (principal).<br>
<br>
Vous pouvez appeler toutes les variables et fonctions d'un module en tapant "*" à la place du nom de la fonction à importer.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">sqrt</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="go">2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fabs</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="go">5</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
A la ligne 1 de notre programme, l'interpréteur a parcouru toutes les fonctions et variables du module <span class="italique">math</span> et les a importées directement dans l'espace de noms principal sans les emprisonner dans l'espace de noms <span class="italique">math</span>.<br>
<br>
<h3>Bilan</h3><br>
<div class="rmq question">Quelle méthode faut-il utiliser ?</div><br>
<br>
Vaste question ! Je dirais que c'est à vous de voir. La seconde méthode a l'avantage inestimable que l'on n'a pas besoin de taper le nom du module avant d'utiliser ses fonctions. L'inconvénient de cette méthode est que si on utilise plusieurs modules de cette manière, et que par hasard, deux fonctions du même nom existent dans deux modules différents, l'interpréteur gardera la dernière fonction appelée (je vous rappelle qu'il ne peut y avoir deux variables ou fonctions du même nom). Conclusion... c'est à vous de voir en fonction de vos besoins <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> .
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Allez, prenez bien le temps de souffler. Dans le chapitre suivant, on va bien moins travailler, je vais surtout vous apprendre à mettre vos programmes Python dans des fichiers et à créer des modules (comme vous le verrez, ça va de pair) <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> . Quand vous êtes prêts, en avant ! <img src="./Apprendre Python !_files/pirate.png" alt=":pirate:" class="smilies">
	</div>
	
	<hr>
	<h1 id="chap_229373">Pas à pas vers la modularité (2/2)</h1>
	<div id="chap_intro">
	Nous allons commencer par voir comment mettre nos programmes en boîte... ou plutôt en fichier. Je vais faire d'une pierre deux coups : d'abord, c'est chouette d'avoir son programme dans un fichier éditable, surtout qu'on commence à pouvoir faire des programmes assez sympas, même si vous n'en avez peut-être pas l'impression. Et ensuite, c'est un prélude nécessaire à la création de modules. C'est parti ! <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies">
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_229368">Mettre en boîte notre code</h2>
		<div class="ss_part_texte">
		<h3>Fini, l'interpréteur ?</h3><br>
Je le répète encore, l'interpréteur est véritablement très pratique pour un grand nombre de raisons. Et la meilleure d'entre elles est qu'il propose une manière interactive d'écrire un programme avec la possibilité de tester à chaque instruction le résultat. Toutefois, l'interpréteur a aussi un défaut : le code que vous entrez est effacé à la fermeture de la fenêtre. Or, nous commençons à être capable de rédiger des programmes relativement complexes, même si vous n'en avez peut-être pas l'impression. Dans ces conditions, devoir réécrire le code entier de son programme à chaque fois qu'on ouvre l'interpréteur de commandes est assez lourd.<br>
<br>
La solution ? Mettre notre code dans un fichier que nous pourrons lancer à volonté, comme un véritable programme ! <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"><br>
<br>
Comme je l'ai dit dans le début de cette partie, il est grand temps que je vous montre cette possibilité. Mais on ne dit pas adieu à l'interpréteur de commandes pour autant. On lui dit juste au revoir pour cette fois... mais on le retrouvera bien assez tôt, la possibilité de tester notre code à la volée est vraiment un atout pour apprendre le langage.<br>
<br>
<h3>Emprisonnons notre programme dans un fichier</h3><br>
Pour cette démonstration, je reprendrai le code optimisé du programme calculant si une année est bissextile. C'est un petit programme dont l'utilité est certes discutable mais il remplit un but précis, en l'occurrence dire si l'année entrée par l'utilisateur est bissextile ou non, et ça suffit pour un premier essai.<br>
<br>
Je vous remet le code ici pour qu'on travaille tous sur les mêmes lignes, même si votre version marchera également sans problème dans un fichier, si elle tournait sous l'interpréteur de commandes.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># programme testant si une année, entrée par l'utilisateur,</span>
<span class="c"># est bissextile ou non</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Entrez une année :"</span><span class="p">)</span>
<span class="n">annee</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span> <span class="c"># on attend que l'utilisateur entre l'année qu'il désire tester</span>
<span class="n">annee</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">annee</span><span class="p">)</span> <span class="c"># risque d'erreur si l'utilisateur n'a pas rentré un nombre</span>

<span class="k">if</span> <span class="n">annee</span><span class="o">%</span><span class="mi">400</span><span class="o">==</span><span class="mi">0</span> <span class="ow">or</span> <span class="p">(</span><span class="n">annee</span><span class="o">%</span><span class="mi">4</span><span class="o">==</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">annee</span><span class="o">%</span><span class="mi">100</span><span class="o">!=</span><span class="mi">0</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"L'année entrée est bissextile."</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"L'année entrée n'est pas bissextile."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ca va être à vous de travailler maintenant, je vais vous donner des pistes mais je ne vais pas me mettre à votre place, chacun prend ses habitudes en fonction de ses préférences <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Ouvrez un éditeur basique, le bloc-notes Windows est candidat, Wordpad ou Word sont exclus. Sous Linux, vous pouvez utiliser vim ou emacs. Copiez et collez le code dans ce fichier. Enregistrez-le en précisant l'extension .py (exemple bissextile.py). Cela permettra au système d'exploitation de savoir qu'il doit utiliser Python pour exécuter ce programme (sous Windows, sous Linux ce n'est pas nécessaire).<br>
<br>
Sous Linux, vous devrez rajouter dans votre fichier une ligne tout au début spécifiant le chemin de l'interpréteur Python (si vous avez déjà scripté en bash par exemple cette méthode ne vous surprendra pas). La première ligne de votre programme sera :<br>
<br>
#!adresse<br>
<br>
Remplacez adresse par l'adresse ou l'on peut trouver l'interpréteur, exemple : /usr/bin/python3. Vous devrez changer le droit d'exécution du fichier avant de l'exécuter comme un script.<br>
<br>
Sous Windows, rendez-vous dans le dossier où vous avez enregistré votre fichier .py. Vous pouvez double-cliquer dessus, Windows saura qu'il doit appeler Python, grâce à l'extension .py, et Python reprend la main. Attendez toutefois car il reste quelques petites choses à régler avant de pouvoir exécuter votre programme.<br>
<br>
<h3>Quelques ajustements</h3><br>
Quand on exécute un programme directement dans un fichier et que le programme contient des accents (et c'est le cas ici), il est nécessaire de préciser à Python l'encodage des accents. Je ne vais pas rentrer dans les détails, je vais simplement vous donner une ligne de code qu'il faudra mettre tout en haut de votre programme (sous Linux, juste en-dessous du chemin de l'interpréteur Python).<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># -*-coding:ENCODAGE -*</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Sous Windows, vous devrez probablement remplacer "ENCODAGE" par "Latin-1". Sous Linux, ce sera plus vraissemblablement "utf-8". Il n'est pas temps de faire un cours sur les encodages. Utilisez simplement la ligne qui marche chez vous sans oublier de la mettre et tout ira bien.<br>
<br>
Il est probable, si vous exécutez votre application d'un double-clic, que votre programme se referme immédiatement après vous avoir demandé l'année. En fait, il fait bel et bien le calcul s'il n'y a pas eu d'erreur, mais il arrive à la fin du programme en une fraction de seconde et referme l'application, puisqu'elle est finie. Pour palier cette difficulté, il faut demander à votre programme de se mettre en pause à la fin de son exécution. Vous devrez rajouter une instruction un peu spéciale, un appel système qui marche sous Windows (pas sous Linux). Il faut tout d'abord importer le module os. Ensuite, on rajoute l'appel à la fonction <span class="code2 python"><span class="n">os</span><span class="o">.</span><span class="n">system</span>
</span> en lui passant en paramètre la chaîne de caractère "pause" (cela, à la fin de votre programme). Sous Linux, vous pouvez simplement exécuter votre programme dans la console ou, si vous tenez à faire une pause, utiliser par exemple <span class="italique">input</span> avant la fin de votre programme (pas bien élégant toutefois).<br>
<br>
Voici donc, enfin, le code de votre premier programme l'encodage est à changer en fonction de votre système).<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># -*-coding:Latin-1 -*</span>

<span class="kn">import</span> <span class="nn">os</span> <span class="c"># on importe le module os qui dispose de variables et de fonctions</span>
          <span class="c"># utiles pour dialoguer avec votre système d'exploitation</span>

<span class="c"># programme testant si une année, entrée par l'utilisateur,</span>
<span class="c"># est bissextile ou non</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Entrez une année :"</span><span class="p">)</span>
<span class="n">annee</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span> <span class="c"># on attend que l'utilisateur entre l'année qu'il désire tester</span>
<span class="n">annee</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">annee</span><span class="p">)</span> <span class="c"># risque d'erreur si l'utilisateur n'a pas rentré un nombre</span>
                   <span class="c"># si l'année est bissextile ou non</span>
<span class="k">if</span> <span class="n">annee</span><span class="o">%</span><span class="mi">400</span><span class="o">==</span><span class="mi">0</span> <span class="ow">or</span> <span class="p">(</span><span class="n">annee</span><span class="o">%</span><span class="mi">4</span><span class="o">==</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">annee</span><span class="o">%</span><span class="mi">100</span><span class="o">!=</span><span class="mi">0</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"L'année entrée est bissextile."</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"L'année entrée n'est pas bissextile."</span><span class="p">)</span>

<span class="c"># on met le programme en pause pour éviter qu'il ne se referme (Windows)</span>
<span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">"pause"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">Quand vous exécutez ce script, que ce soit sous Windows ou Linux, vous faites toujours appel à l'interpréteur Python ! Votre programme n'est pas compilé, mais chaque ligne d'instruction est exécutée à la volée par l'interpréteur, le même que celui qui exécutait vos premiers programmes dans l'interpréteur de commandes. La grande différence ici est que Python exécute votre programme depuis le fichier et que donc, si vous souhaitez le modifier, il faudra modifier le fichier.</div><br>
<br>
Sachez qu'il existe des éditeurs spécialisés pour Python, notamment Idle installé en même temps que Python, que personnellement je n'utilise pas. Vous pouvez l'ouvrir avec un clic droit sur votre fichier .py et regarder comment ça marche, ce n'est pas bien compliqué et vous avez la possibilité d'exécuter votre programme depuis ce logiciel. Mais étant donné que je ne l'utilise pas, je ne vous ferai pas un cours dessus. Si vous avez du mal à utiliser une des fonctionnalités du logiciel, recherchez sur Internet, d'autres tutoriels doivent exister, en anglais dans le pire des cas.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_229372">Je viens pour conquérir le monde... et créer mes propres modules</h2>
		<div class="ss_part_texte">
		<h3>Mes modules à moi</h3><br>
Bon, nous avons vu le plus dur... ça va ? <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> Rassurez-vous, nous n'allons rien faire de compliqué dans cette dernière partie. Le plus dur est derrière nous.<br>
<br>
Commencez par vous créer un espace de test pour les petits programmes Python que nous allons être amenés à faire, un joli dossier à l'écart de vos photos et musiques <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> . Nous allons créer deux fichiers .py dans ce dossier :<br>
<br>
<ul>
<li>Un fichier multipli.py qui contiendra notre fonction <span class="code2 python"><span class="n">table</span>
</span> que nous avons codé au début de ce chapitre</li>
<li>Un fichier test.py qui contiendra le test d'exécution de notre module</li>
</ul><br>
<br>
Vous devriez vous en tirer sans problème. N'oubliez pas de spécifier la ligne contenant l'encodage en tête de vos deux fichiers. Maintenant, voyons le code du fichier multipli.py.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="sd">"""module multipli contenant la fonction table"""</span>

<span class="k">def</span> <span class="nf">table</span><span class="p">(</span><span class="n">nb</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
    <span class="sd">"""Fonction affichant la table de multiplication par nb de</span>
<span class="sd">    1 * nb jusqu'à max * nb</span>
<span class="sd">    """</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">max</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">,</span> <span class="s">"*"</span> <span class="p">,</span> <span class="n">nb</span> <span class="p">,</span> <span class="s">"="</span> <span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On se contente de définir une seule fonction, table, qui affiche la table de multiplication choisie. Rien de nouveau jusqu'ici. Si vous vous souvenez des docstrings, au chapitre précédent, nous en avons mis une nouvelle ici, non pas pour commenter une fonction mais bien un module entier. C'est une bonne habitude à prendre quand nos projets deviennent important.<br>
<br>
Voici le code du fichier test.py, n'oubliez pas la ligne de votre encodage en haut <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">multipli</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c"># test de la fonction table</span>
<span class="n">table</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">"pause"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
En le lançant directement voilà ce qu'on obtient :<br>
<br>
<span class="code">Code : Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>1&nbsp;*&nbsp;3&nbsp;=&nbsp;3
2&nbsp;*&nbsp;3&nbsp;=&nbsp;6
3&nbsp;*&nbsp;3&nbsp;=&nbsp;9
4&nbsp;*&nbsp;3&nbsp;=&nbsp;12
5&nbsp;*&nbsp;3&nbsp;=&nbsp;15
6&nbsp;*&nbsp;3&nbsp;=&nbsp;18
7&nbsp;*&nbsp;3&nbsp;=&nbsp;21
8&nbsp;*&nbsp;3&nbsp;=&nbsp;24
9&nbsp;*&nbsp;3&nbsp;=&nbsp;27
10&nbsp;*&nbsp;3&nbsp;=&nbsp;30
11&nbsp;*&nbsp;3&nbsp;=&nbsp;33
12&nbsp;*&nbsp;3&nbsp;=&nbsp;36
13&nbsp;*&nbsp;3&nbsp;=&nbsp;39
14&nbsp;*&nbsp;3&nbsp;=&nbsp;42
15&nbsp;*&nbsp;3&nbsp;=&nbsp;45
16&nbsp;*&nbsp;3&nbsp;=&nbsp;48
17&nbsp;*&nbsp;3&nbsp;=&nbsp;51
18&nbsp;*&nbsp;3&nbsp;=&nbsp;54
19&nbsp;*&nbsp;3&nbsp;=&nbsp;57
20&nbsp;*&nbsp;3&nbsp;=&nbsp;60
Appuyez&nbsp;sur&nbsp;une&nbsp;touche&nbsp;pour&nbsp;continuer...</pre></div></td></tr></tbody></table></div><br>
<br>
Je ne pense pas avoir grand chose à ajouter. Nous avons vu comment créer un module, il suffit de le mettre dans un fichier. On peut alors l'importer depuis un autre fichier <strong>contenu dans le même répertoire</strong> en précisant le nom du fichier (sans l'extension .py). Notre code encore une fois n'est pas très utile mais vous pouvez le modifier pour le rendre plus intéressant, vous en avez parfaitement les compétences à présent <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Vous avez pu remarquer l'apparition du fichier multipli.pyc dans votre dossier de test. Ce fichier est généré par Python et contient le code compilé (ou presque) de votre module. Il ne s'agit pas réellement de langage machine, mais d'un format que Python décode un peu plus vite que le code que vous pouvez écrire. Python se charge lui-même de générer ce fichier et vous n'avez pas vraiment besoin de vous en soucier quand vous codez, ne soyez juste pas surpris.<br>
<br>
<h3>Faire un test de module dans le module-même</h3><br>
Dans l'exemple que nous venons de voir, nous avons créé deux fichiers, le premier contenant un module, le second testant ledit module. Mais on peut très facilement tester le code d'un module dans le module-même. Cela veut dire que vous pourriez exécuter votre module comme un programme à lui tout seul, un programme qui testerait le module écrit dans le même fichier. Voyons voir cela <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Reprenons le code du module "multipli" :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="sd">"""module multipli contenant la fonction table"""</span>

<span class="k">def</span> <span class="nf">table</span><span class="p">(</span><span class="n">nb</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
    <span class="sd">"""Fonction affichant la table de multiplication par nb de</span>
<span class="sd">    1 * nb jusqu'à max * nb</span>
<span class="sd">    """</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">max</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">,</span> <span class="s">"*"</span> <span class="p">,</span> <span class="n">nb</span> <span class="p">,</span> <span class="s">"="</span> <span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce module définit une seule fonction, "table", qu'il pourrait être bon de tester. Oui mais... si nous rajoutons une ligne comme par exemple <span class="code2 python"><span class="n">table</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span> juste en-dessous, cette ligne sera exécutée lors de l'importation et donc, dans le programme appelant le module. Quand vous ferez <span class="code2 python"><span class="kn">import</span> <span class="nn">multipli</span>
</span>, vous verrez la table de multiplication par 8 s'afficher... hum, il y a mieux <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Heureusement, il y a un moyen très rapide de séparer le code qui sera exécuté si on lance le module directement en tant que programme, ou si on l'importe. Je vais vous livrer la solution que je détaillerai au-dessous :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="syntax"><pre><span class="sd">"""module multipli contenant la fonction table"""</span>

<span class="kn">import</span> <span class="nn">os</span>

<span class="k">def</span> <span class="nf">table</span><span class="p">(</span><span class="n">nb</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
    <span class="sd">"""Fonction affichant la table de multiplication par nb de</span>
<span class="sd">    1 * nb jusqu'à max * nb</span>
<span class="sd">    """</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">max</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">,</span> <span class="s">"*"</span> <span class="p">,</span> <span class="n">nb</span> <span class="p">,</span> <span class="s">"="</span> <span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">nb</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>


<span class="c"># test de la fonction table</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">table</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">"pause"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">N'oubliez pas la ligne indiquant l'encodage !</div><br>
<br>
Voilà. A présent, si vous double-cliquez directement sur le fichier "multipli.py", vous allez voir la table de multiplication par 4. En revanche, si vous l'importez, le code de test ne s'exécutera pas. Tout repose en fait sur la variable __name__, c'est une variable qui existe dès le lancement de l'interpréteur. Si elle vaut "__main__", cela veut dire que le fichier appelé est le fichier exécuté. Autrement dit, si __name__ est égale à "__main__", vous pouvez mettre un code qui sera exécuté si le fichier est lancé directement comme un exécutable.<br>
<br>
Prenez le temps de comprendre ce mécanisme, faites des tests si nécessaire, ça pourra vous être utile par la suite <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Ouf ! Et bien, ce fut long tout ça <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Heureusement, c'est fini. Vous coupez au QCM sur cette partie. Il nous reste un dernier chapitre théorique sur les exceptions, puis notre premier TP, et c'en sera fini de cette première partie introductive sur Python <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
	</div>
	
	<hr>
	<h1 id="chap_229376">Les exceptions</h1>
	<div id="chap_intro">
	Dans ce chapitre, nous aborderons le dernier concept que je considère comme indispensable avant d'attaquer la partie sur la Programmation Orientée Objet. J'ai longtemps hésité avant de placer ce chapitre ici, et je vous préviens donc d'ores et déjà : nous aurons l'occasion de compléter ce cours sur les exceptions, notamment quand nous aborderons le sujet des objets.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_229378">À quoi ça sert ?</h2>
		<div class="ss_part_texte">
		Nous avons déjà été confrontés à des erreurs dans nos programmes ; certaines que j'ai volontairement provoquées, mais la plupart que vous avez dû rencontrer si vous avez testé un minimum des instructions dans l'interpréteur. <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> Quand Python rencontre une erreur dans votre code, il <strong>lève une exception</strong>. Sans le savoir, vous avez donc déjà vu des exceptions levées par Python :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="c"># exemple classique : test d'une division par zéro</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">variable</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">0</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n-Identifier">&lt;module&gt;</span>
<span class="nc">ZeroDivisionError</span>: <span class="n-Identifier">int division or modulo by zero</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Attardons-nous sur la dernière ligne. Nous y trouvons deux informations :<br>
<br>
<ul>
<li><span class="code2 pycon"><span class="go">ZeroDivisionError</span>
</span> : le type de l'exception</li>
<li><span class="code2 pycon"><span class="go">int division or modulo by zero</span>
</span> : le message qu'envoie Python pour vous aider à comprendre l'erreur qui vient de se produire.</li>
</ul><br>
<br>
Python lève donc des exceptions quand il trouve une erreur, soit dans le code (une erreur de syntaxe par exemple), soit dans l'opération que vous lui demandez de faire.<br>
<br>
Notez qu'à l'instar des variables, on trouve des types d'exceptions que Python va utiliser dans plusieurs situations. Le type d'exceptions <span class="italique">ValueError</span> notamment sera levé par Python dans plusieurs situations différentes incluant des erreurs de "valeurs". C'est donc dans ce cas le message qui vous indique plus clairement le problème. Nous verrons dans la prochaine partie consacrée à la Programmation Orientée Objet ce que sont réellement ces types d'exceptions. <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> <br>
<br>
Bon, c'est très joli d'avoir cette exception. On voit le fichier et la ligne à laquelle s'est produite l'erreur (très pratique quand on commence à travailler sur un projet) et on a une indication sur le problème qui suffit en général à le régler. Mais Python permet quelque chose de bien plus pratique. <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> <br>
<br>
Admettons que certaines erreurs puissent être provoquées par l'utilisateur. Par exemple, on demande à l'utilisateur d'entrer, au clavier, un entier, et il entre une chaîne de caractères... problème. Nous avons déjà rencontré cette situation, souvenez-vous du programme <span class="italique">bissextile</span>.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">annee</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span> <span class="c"># on demande à l'utilisateur d'entrer l'année</span>
<span class="n">annee</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">annee</span><span class="p">)</span> <span class="c"># on essaye de convertir l'année en un entier</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je vous avais dit que si l'utilisateur rentrait ici quelque chose d'inconvertible en entier (une lettre par exemple), le programme planterait. En fait, il lève une exception, et Python arrête l'exécution du programme. Si vous testez le programme directement dans l'explorateur, il va se fermer tout de suite (en fait, il affiche bel et bien l'erreur mais se referme aussitôt). <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> <br>
<br>
Dans ce cas, et dans d'autres similaires, Python permet de tester un bout de code. S'il ne renvoie aucune erreur, Python continue. Sinon, on peut lui demander d'exécuter une autre action (par exemple, redemander à l'utilisateur d'entrer l'année). C'est ce que nous allons voir ici. <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies">
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_229375">Forme minimale du bloc try</h2>
		<div class="ss_part_texte">
		On va parler ici de <strong>bloc <span class="italique">try</span></strong>. Nous allons en effet mettre les instructions que nous souhaitons tester dans un premier bloc d'instructions et les instructions à exécuter en cas d'erreur dans un autre bloc d'instructions. Sans plus attendre, voici la syntaxe :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">try</span><span class="p">:</span>
    <span class="c"># bloc à essayer</span>
<span class="k">except</span><span class="p">:</span>
    <span class="c"># bloc qui sera exécuté en cas d'erreur</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Dans l'ordre, nous trouvons :<br>
<br>
<ul>
<li>Le mot-clé <span class="italique">try</span> suivi des deux points ":" (try signifie "essayer" en anglais)</li>
<li>Le bloc d'instructions à essayer</li>
<li>Le mot-clé <span class="italique">except</span> suivi, une fois encore, des deux points ":". Il se trouve au même niveau d'indentation que le <span class="italique">try</span></li>
<li>Le bloc d'instructions qui sera exécuté si une erreur est trouvée dans le premier bloc.</li>
</ul><br>
<br>
Reprenons notre test de conversion en enfermant l'instruction qui pourrait lever une exception dans un bloc <span class="italique">try</span>.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">annee</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
<span class="k">try</span><span class="p">:</span> <span class="c"># on essaye de convertir l'année en entier</span>
    <span class="n">annee</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">annee</span><span class="p">)</span>
<span class="k">except</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Erreur lors de la conversion de l'année."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous pouvez tester ce code en précisant plusieurs valeurs différentes à la variable <span class="italique">annee</span> comme <span class="italique">"2010"</span> ou <span class="italique">"annee2010"</span>.<br>
<br>
J'ai parlé de <strong>forme minimale</strong> et ce n'est pas pour rien. <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> D'abord il va de soi que vous ne pouvez intégrer cette solution directement dans votre code. En effet, si l'utilisateur entre une année inconvertible, le système affiche certes une erreur mais finit par planter (puisque l'année, au final, n'a pas été convertie). Une des solutions envisageable est d'attribuer une valeur par défaut à l'année en cas d'erreur, ou de redemander à l'utilisateur d'entrer l'année.<br>
<br>
Ensuite et surtout, cette méthode est assez grossière. Elle essaye une instruction et intercepte <strong>n'importe quelle</strong> exception liée à cette instruction. Ici, c'est acceptable car nous n'avons pas énormément d'erreurs possibles sur cette instruction. Mais c'est une mauvaise habitude à prendre. Voici une manière plus élégante et moins dangereuse. <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies">
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_229374">Forme plus complète</h2>
		<div class="ss_part_texte">
		Nous allons apprendre à compléter notre bloc <span class="italique">try</span>. Comme je l'ai indiqué plus haut, la forme minimale est à éviter pour plusieurs raisons.<br>
<br>
D'abord, elle ne différencie pas les exceptions qui pourront être levées dans le bloc <span class="italique">try</span>. Ensuite, Python peut lever des exceptions qui ne signifient pas nécessairement qu'il y a eu une erreur.<br>
<br>
<h3>Exécuter le bloc <span class="italique">except</span> pour un type d'exceptions précis</h3><br>
Dans l'exemple que nous avons vu plus haut, on ne pense qu'à un type d'exceptions qui pourrait être levé : le type <span class="italique">ValueError</span> qui pourrait trahir une erreur de conversion. Voyons un autre exemple :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">try</span><span class="p">:</span>
    <span class="n">resultat</span> <span class="o">=</span> <span class="n">numerateur</span> <span class="o">/</span> <span class="n">denominateur</span>
<span class="k">except</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Une erreur est survenue... laquelle ?"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ici, on peut trouver plusieurs erreurs possibles, levant chacune une exception différente.<br>
<br>
<ul>
<li><span class="italique">NameError</span> : l'une des variables <span class="italique">numerateur</span> ou <span class="italique">denominateur</span> n'a pas été définie (elle n'existe pas). Si vous essayez dans l'interpréteur l'instruction <span class="code2 python"><span class="k">print</span><span class="p">(</span><span class="n">numerateur</span><span class="p">)</span></span> alors que vous n'avez pas défini la variable <span class="italique">numerateur</span>, vous aurez la même erreur</li>
<li><span class="italique">TypeError</span> : l'une des variables <span class="italique">numerateur</span> ou <span class="italique">denominateur</span> ne peut diviser ou être divisée (les chaînes de caractères ne peuvent être divisées, ni diviser d'autres types, par exemple). Cette exception est levée car vous utilisez l'opérateur de division "/" sur des types qui ne savent pas quoi en faire</li>
<li><span class="italique">ZeroDivisionError</span> : encore elle ! Si <span class="italique">denominateur</span> est égale à 0, cette exception sera levée.</li>
</ul><br>
<br>
Cette énumération n'est pas une liste exhaustive de toutes les exceptions qui peuvent être levées à l'exécution de ce code. Elle est surtout là pour vous montrer que plusieurs erreurs peuvent se produire sur une instruction (c'est encore plus flagrant sur un bloc constitué de plusieurs instructions) et que la forme minimale intercepte toutes ces erreurs sans les distinguer, ce qui peut être problématique parfois. <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"><br>
<br>
Tout se joue sur la ligne du <span class="italique">except</span>. Entre ce mot-clé et les deux points, vous pouvez préciser le type de l'exception que vous souhaitez traiter.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">try</span><span class="p">:</span>
    <span class="n">resultat</span> <span class="o">=</span> <span class="n">numerateur</span> <span class="o">/</span> <span class="n">denominateur</span>
<span class="k">except</span> <span class="ne">NameError</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"La variable numerateur ou denominateur n'a pas été définie."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce code ne traite que le cas où une exception <span class="italique">NameError</span> est levée. On peut intercepter les autres types d'exceptions en faisant d'autres blocs <span class="italique">except</span> à la suite :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">try</span><span class="p">:</span>
    <span class="n">resultat</span> <span class="o">=</span> <span class="n">numerateur</span> <span class="o">/</span> <span class="n">denominateur</span>
<span class="k">except</span> <span class="ne">NameError</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"La variable numerateur ou denominateur n'a pas été définie."</span><span class="p">)</span>
<span class="k">except</span> <span class="ne">TypeError</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"La variable numerateur ou denominateur possède un type incompatible avec la division."</span><span class="p">)</span>
<span class="k">except</span> <span class="ne">ZeroDivisionError</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"La variable denominateur est égale à 0."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
C'est mieux non ? <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"><br>
<br>
Allez un petit dernier... euh... pour l'instant <img src="./Apprendre Python !_files/diable.png" alt=":diable:" class="smilies"> .<br>
<br>
On peut capturer l'exception et afficher son message grâce au mot-clé <span class="italique">as</span> que vous avez déjà vu, dans un autre contexte (si si, rappelez-vous de l'importation de modules <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> ).<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">try</span><span class="p">:</span>
    <span class="c"># bloc de test</span>
<span class="k">except</span> <span class="n">type_de_l_exception</span> <span class="k">as</span> <span class="n">exception_retournee</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Voici l'erreur :"</span><span class="p">,</span> <span class="n">exception_retournee</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Dans ce cas, une variable <span class="italique">exception_retournee</span> est créée par Python si une exception du type précisé est levée dans le bloc <span class="italique">try</span>.<br>
<br>
Je vous conseille de <span class="souligne">toujours</span> préciser un type d'exceptions après <span class="italique">except</span> (sans nécessairement capturer l'exception dans une variable, bien entendu). D'abord, vous ne devez pas utiliser <span class="italique">try</span> comme une méthode miracle pour tester n'importe quel bout de code. Il est important que vous gardiez le maximum de contrôle sur votre code. Cela signifie que si une erreur se produit, vous devez être capable de l'anticiper. En pratique, vous n'irez pas jusqu'à tester si une variable quelconque existe bel et bien, <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> il faut faire un minimum confiance à son code. Mais si vous êtes en face d'une division et que le dénominateur pourrait avoir une valeur de 0, mettez la division dans un bloc <span class="italique">try</span> et précisez après le <span class="italique">except</span> le type de l'exception qui risque de se produire (<span class="italique">ZeroDivisionError</span> dans cet exemple).<br>
<br>
Si vous adoptez la forme minimale (à savoir <span class="italique">except</span> sans préciser un type d'exceptions qui pourrait se produire sur le bloc <span class="italique">try</span>), toutes les exceptions seront traitées de la même façon. Et même si "exception = erreur" la plupart du temps, ce n'est pas toujours le cas. Par exemple, Python lève une exception quand vous voulez fermer votre programme avec le raccourci CTRL + C. Ici vous ne voyez peut-être pas le problème, mais si votre bloc <span class="italique">try</span> est dans une boucle par exemple, vous ne pourrez pas arrêter votre programme avec CTRL + C, puisque l'exception sera traitée par votre <span class="italique">except</span>.<br>
    <br>
Je vous conseille donc de toujours préciser un type d'exceptions possible après votre <span class="italique">except</span>. Vous pouvez bien entendu tester dans l'interpréteur de commandes Python pour reproduire l'exception que vous voulez traiter et ainsi connaitre son type.<br>
<br>
<h3>Les mots-clés else et finally</h3><br>
Ce sont deux mots-clés qui vont nous permettre de construire un bloc <span class="italique">try</span> plus complet.<br>
<br>
<h4>else</h4><br>
Vous avez déjà vu ce mot-clé et j'espère que vous vous en rappelez. <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> Dans un bloc <span class="italique">try</span>, <span class="italique">else</span> va permettre d'exécuter une action si aucune erreur n'est trouvée dans le bloc. Voici un petit exemple :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">try</span><span class="p">:</span>
    <span class="n">resultat</span> <span class="o">=</span> <span class="n">numerateur</span> <span class="o">/</span> <span class="n">denominateur</span>
<span class="k">except</span> <span class="ne">NameError</span>    <span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"La variable numerateur ou denominateur n'a pas été définie."</span><span class="p">)</span>
<span class="k">except</span> <span class="ne">TypeError</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"La variable numerateur ou denominateur possède un type incompatible avec la division."</span><span class="p">)</span>
<span class="k">except</span> <span class="ne">ZeroDivisionError</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"La variable denominateur est égale à 0."</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Le résultat obtenu est"</span><span class="p">,</span> <span class="n">resultat</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Dans les faits, on utilise assez peu <span class="italique">else</span>. La plupart des codeurs préfère mettre la ligne contenant le <span class="italique">print</span> directement dans le bloc <span class="italique">try</span>. Pour ma part, je trouve que c'est important de distinguer entre le bloc <span class="italique">try</span> et ce qui s'effectue ensuite. La ligne du <span class="italique">print</span> ne produira vraisemblablement aucune erreur, inutile de la mettre dans le bloc <span class="italique">try</span>.<br>
<br>
<h4>finally</h4><br>
<span class="italique">finally</span> permet d'exécuter du code après un bloc <span class="italique">try</span>, <strong>quelle que soit l'exécution du dit bloc</strong>. La syntaxe est des plus simples :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">try</span><span class="p">:</span>
    <span class="c"># test d'instruction(s)</span>
<span class="k">except</span> <span class="n">TypeDInstruction</span><span class="p">:</span>
    <span class="c"># traitement en cas d'erreur</span>
<span class="k">finally</span><span class="p">:</span>
    <span class="c"># instruction(s) exécutée(s) qu'il y ait eu erreurs ou non</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Est-ce que ça ne revient pas au même si on met du code juste après le bloc ?</div><br>
<br>
Pas tout à fait. Le bloc <span class="italique">finally</span> est exécuté dans tous les cas de figure. Quand bien même Python trouverait une instruction <span class="italique">return</span> dans votre bloc <span class="italique">except</span> par exemple, il exécutera le bloc <span class="italique">finally</span>.<br>
<br>
<h3>Un petit bonus : le mot-clé pass</h3><br>
Il peut arriver, dans certains cas, que l'on souhaite tester un bloc d'instructions... mais ne rien faire en cas d'erreur. Toutefois, un bloc <span class="italique">try</span> ne peut être seul.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">try</span><span class="p">:</span>
<span class="gp">... </span>    <span class="mi">1</span><span class="o">/</span><span class="mi">0</span>
<span class="gp">...</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">3</span>

<span class="go">    ^</span>
<span class="go">SyntaxError: invalid syntax</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il existe un petit mot-clé que l'on peut utiliser dans ce cas. Son nom est <span class="italique">pass</span> et sa syntaxe est très simple d'utilisation :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">try</span><span class="p">:</span>
    <span class="c"># test d'instruction(s)</span>
<span class="k">except</span> <span class="n">type_de_l_exception</span><span class="p">:</span> <span class="c"># rien ne doit se passer en cas d'erreur</span>
    <span class="k">pass</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je ne vous encourage pas particulièrement à utiliser ce mot-clé mais il existe et vous le savez à présent <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
<span class="italique">pass</span> n'est pas un mot-clé propre aux exceptions : on peut également le trouver dans des conditions, ou dans des fonctions que l'on souhaite laisser vide.<br>
<br>
Voilà, nous avons vu l'essentiel. Il nous reste à faire un petit point sur les assertions et à voir comment lever une exception (ce sera très rapide) et on pourra passer au QCM.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_229371">Lever une exception</h2>
		<div class="ss_part_texte">
		Hmmm... je vois d'ici les mines sceptiques (non non, ne vous cachez pas !) <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Vous vous demandez probablement pourquoi vous feriez le boulot de Python en levant des exceptions. Après tout, votre boulot, c'est en théorie d'éviter que votre programme plante. <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"><br>
<br>
Parfois cependant, il pourra être utile de lever des exceptions. Vous verrez tout l'intérêt du concept quand vous créerez vos propres classes... mais ce n'est pas pour tout de suite <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> . En attendant, je vais vous donner la syntaxe et vous pourrez faire quelques tests, vous verrez de toute façon qu'il n'y a rien de compliqué.<br>
<br>
On utilisera un nouveau mot-clé pour lever une exception... le mot-clé <span class="italique">raise</span>.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">raise</span> <span class="n">TypeDeLException</span><span class="p">(</span><span class="s">"message à afficher"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Prenons un petit exemple, toujours autour de notre programme <span class="italique">bissextile</span>. Nous allons lever une exception de type <span class="italique">ValueError</span> si l'utilisateur entre une année négative ou nulle.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">annee</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span> <span class="c"># l'utilisateur entre l'année</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">annee</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">annee</span><span class="p">)</span> <span class="c"># on tente de convertir l'année</span>
    <span class="k">if</span> <span class="n">annee</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">:</span>
        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">"l'année entrée est négative ou nulle"</span><span class="p">)</span>
<span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"La valeur entrée est invalide (l'année est peut-être négative)."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce que nous venons de faire, nous aurions pu le faire sans utiliser d'exceptions, mais c'était surtout pour vous montrer la syntaxe dans un véritable contexte. Ici, on lève une exception que l'on intercepte immédiatement ou presque, l'intérêt est donc limité, mais bien entendu la plupart du temps ce n'est pas le cas.<br>
<br>
Il reste des choses à découvrir sur les exceptions, mais on en a assez fait pour ce chapitre et cette partie. <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> Je ne vous demande pas de connaitre toutes les exceptions que Python est amené à utiliser (certaines d'entre elles pourront d'ailleurs n'exister que dans certains modules). En revanche, vous devez être capable de savoir, grâce à l'interpréteur de commandes, quelles exceptions peuvent être levées par Python dans une certaine situation.
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Voici qui conclut ce chapitre sur les exceptions et la fin de la partie introductive sur Python approche... Il ne reste devant vous qu'un TP pour vous remettre en mémoire un peu tout ce qu'on a fait, et surtout, vous rendre compte du chemin parcouru.<br>
<br>
Alors... à l'assaut ? <img src="./Apprendre Python !_files/pirate.png" alt=":pirate:" class="smilies">
	</div>
	
	<hr>
	<h1 id="chap_229370">TP 1 : tous au ZCasino</h1>
	<div id="chap_intro">
	L'heure de vérité a sonné ! C'est dans ce chapitre que je vais faire montre de ma cruauté sans limite <img src="./Apprendre Python !_files/diable.png" alt=":diable:" class="smilies"> en vous lachant dans la nature... ou presque. <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"><br>
<br>
Ce n'est pas tout à fait votre premier TP dans le sens où le programme du chapitre 4, sur les conditions, constituait votre première expérience en la matière, mais à ce moment nous n'avions pas fait un programme très... récréatif, disons <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> .<br>
<br>
Si, durant la réalisation du TP, vous sentez que certaines connaissances vous manquent, revenez en arrière, prenez tout votre temps, on n'est pas pressé <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_229365">Notre sujet</h2>
		<div class="ss_part_texte">
		Dans ce chapitre, nous allons essayer de faire un petit programme que nous appellerons ZCasino. Il s'agira d'un petit jeu de roulette très simplifié dans lequel vous pourrez jouer une certaine somme et gagner... ou perdre de l'argent (telle est la fortune, au casino <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> ). Quand vous n'avez plus d'argent, vous avez perdu.<br>
<br>
<h3>Notre règle du jeu</h3><br>
Bon, la roulette, c'est très sympathique comme jeu, mais un peu trop compliqué pour un premier TP. Alors, on va simplifier les règles et je vous présente tout de suite ce que l'on obtient :<br>
<br>
<ul>
<li>Le joueur mise sur un numéro entre 0 et 49 (50 numéros en tout). En choisissant son numéro, il dépose la somme qu'il souhaite miser sur ce numéro.</li>
<li>La roulette est constituée de 50 cases allant naturellement de 0 à 49. Les numéros pairs sont de couleur noire, les numéros impairs sont de couleur rouge. Le croupier lance la roulette, lache la bille et, quand la roulette s'arrête, relève le numéro de la case dans laquelle la bille s'est arrêtée. Dans notre programme, tous ces détails "matériels" ne seront pas repris mais ces explications sont aussi à l'intention de ceux qui ont eu la chance d'éviter les salles de casino jusqu'ici <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> . Le numéro sur lequel s'est arrêté la bille est, naturellement, le numéro gagnant.</li>
<li>Si le numéro gagnant est celui sur lequel le joueur a misé (probabilité de 1/50, plutôt faible <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> ), le croupier lui remet 3 fois la somme misée.</li>
<li>Sinon, le croupier regarde si le numéro misé par le joueur est de la même couleur que le numéro gagnant (s'ils sont tous les deux pairs ou tous les deux impairs). Si c'est le cas, le croupier lui remet 50 % de la somme misée. Si ce n'est pas le cas, le joueur perd sa mise.</li>
</ul><br>
<br>
Dans les deux scénarios gagnants vus au-dessus (le numéro misé et le numéro gagnant sont identiques ou ont la même couleur), le croupier remet au joueur sa somme avant d'y ajouter ses gains. Cela veut dire que dans ces deux scénarios il récupère de l'argent. Il n'y a que dans le troisième cas qu'il perd la somme misée.<br>
<br>
N.B. : on utilisera pour devise le dollar $ à la place de l'euro pour des raisons d'encodage sous la console Windows.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_229367">Organisons notre projet</h2>
		<div class="ss_part_texte">
		Bon pour ce projet, nous n'allons pas écrire de module. Nous allons utiliser ceux de Python qui sont bien suffisants pour l'instant, notamment celui pour générer de l'aléatoire que je vais présenter plus bas. En attendant, ne vous privez quand même pas de faire un répertoire et d'y mettre le fichier <span class="italique">ZCasino.py</span>, tout va se jouer à l'intérieur.<br>
<br>
Vous êtes capable d'écrire le programme <span class="italique">ZCasino</span> tel qu'expliqué dans la première partie sans difficulté... sauf pour générer de l'aléatoire. Python a dédié tout un module à la génération de pseudo-'aléatoire, le module <span class="italique">random</span>.<br>
<br>
<h3>Le module random</h3><br>
Nous allons nous intéresser tout particulièrement à la fonction <span class="italique">randrange</span> de ce module qui peut s'utiliser de deux manières.<br>
<br>
<ul>
<li>En ne précisant qu'un paramètre (<span class="code2 python"><span class="n">randrange</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span>) : retourne un nombre aléatoire compris entre 0 et 5</li>
<li>En précisant deux paramètres (<span class="code2 python"><span class="n">randrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
</span>) : retourne un nombre aléatoire compris entre 1 et 6 (utile pour reproduire une expérience avec un dé à six faces).</li>
</ul><br>
<br>
Pour tirer un nombre aléatoire compris entre 0 et 49 et simuler l'expérience du jeu de la roulette, nous allons donc utiliser l'instruction <span class="code2 python"><span class="n">randrange</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
</span>.<br>
<br>
Il existe d'autres façons d'utiliser <span class="italique">randrange</span> mais nous n'en aurons pas besoin ici et je dirais même que pour ce programme, seule la première utilisation vous sera utile.<br>
<br>
N'hésitez pas à faire des tests dans l'interpréteur de commande (vous n'avez pas oublié où c'est hein ? <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> ) et essayez plusieurs syntaxes de la fonction <span class="italique">randrange</span>. Je vous rappelle qu'elle se trouve dans le module <span class="italique">random</span>, n'oubliez pas de l'importer <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
<h3>Arrondir un nombre</h3><br>
Vous l'avez peut-être bien noté, dans l'explication des règles je spécifiais que si le joueur misait sur la bonne couleur, il obtenait 50% de sa mise. Oui mais... c'est quand même mieux de travailler avec des entiers. Si le joueur mise 3 $ par exemple, on lui rend 1,5 $. C'est encore acceptable mais si ça se poursuit, on va vraiment arriver à des nombres flottants avec beaucoup de chiffres après la virgule. Alors, autant arrondir le nombre au supérieur. Ainsi, si le joueur mise 3$, on lui rend 2$. Pour cela, on va utiliser une fonction du module <span class="italique">math</span> nommée <span class="italique">ceil</span>. Je vous laisse regarder ce qu'elle fait, il n'y a rien de compliqué.<br>
<br>
<h3>A vous de jouer</h3><br>
Voilà, vous avez toutes les clés en main pour coder ce programme. Prenez le temps qu'il faut pour y arriver, ne vous ruez pas sur la correction, le but du TP est que vous appreniez à coder vous-même un programme... et celui-ci n'est pas très difficile. Si vous avez du mal, morcelez le programme, ne codez pas tout d'un coup. Et n'hésitez pas à passer par l'interpréteur pour tester des fonctionnalités, c'est réellement une chance qui vous est donnée, ne la laissez pas passer <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
A vous de jouer ! <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies">
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_229377">Correction !</h2>
		<div class="ss_part_texte">
		C'est encore une fois l'heure de comparer nos versions. Et une fois encore, il est très peu probable que vous ayez un code identique au mien. Donc si le vôtre marche, je dirais que c'est l'essentiel. Si vous vous heurtez à des difficultés insurmontables, le forum est là pour poser vos questions.<br>
<br>
<div class="rmq attention">... ATTENTION... voici... la solution !</div><br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># ce fichier abrite le code du ZCasino, un jeu de roulette adapté</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randrange</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">ceil</span>

<span class="c"># déclaration des variables de départ</span>
<span class="n">argent</span> <span class="o">=</span> <span class="mi">1000</span> <span class="c"># on a 1000 $ au début du jeu</span>
<span class="n">continuer_partie</span> <span class="o">=</span> <span class="bp">True</span> <span class="c"># booléen qui est vrai tant qu'on doit continuer la</span>
                        <span class="c"># partie</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Vous vous installez à la table de roulette avec"</span><span class="p">,</span> <span class="n">argent</span><span class="p">,</span> <span class="s">"$."</span><span class="p">)</span>

<span class="k">while</span> <span class="n">continuer_partie</span><span class="p">:</span> <span class="c"># tant qu'on doit continuer la partie</span>
    <span class="c"># on demande à l'utilisateur d'entrer le nombre surlequel il va miser</span>
    <span class="n">nombre_mise</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="k">while</span> <span class="n">nombre_mise</span><span class="o">&lt;</span><span class="mi">0</span> <span class="ow">or</span> <span class="n">nombre_mise</span><span class="o">&gt;</span><span class="mi">49</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Entrez le nombre sur lequel vous voulez miser (entre 0 et 49) :"</span><span class="p">)</span>
        <span class="n">nombre_mise</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
        <span class="c"># on convertit le nombre misé</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">nombre_mise</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">nombre_mise</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Vous n'avez pas entré de nombre"</span><span class="p">)</span>
            <span class="n">nombre_mise</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">continue</span>
        <span class="k">if</span> <span class="n">nombre_mise</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Ce nombre est négatif"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">nombre_mise</span><span class="o">&gt;</span><span class="mi">49</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Ce nombre est supérieur à 49"</span><span class="p">)</span>

    <span class="c"># à présent, on sélectionne la somme à miser sur le nombre</span>
    <span class="n">mise</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">mise</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="ow">or</span> <span class="n">mise</span><span class="o">&gt;</span><span class="n">argent</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Entrez le montant de votre mise :"</span><span class="p">)</span>
        <span class="n">mise</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
        <span class="c"># on converti la mise</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">mise</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">mise</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Vous n'avez pas entré de nombre"</span><span class="p">)</span>
            <span class="n">mise</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">continue</span>
        <span class="k">if</span> <span class="n">mise</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"La mise entrée est négative ou nulle."</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">mise</span><span class="o">&gt;</span><span class="n">argent</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Vous ne pouvez miser autant, vous n'avez que"</span><span class="p">,</span> <span class="n">argent</span><span class="p">,</span> <span class="s">"$"</span><span class="p">)</span>

    <span class="c"># le nombre misé et la mise ont été sélectionnés par l'utilisateur</span>
    <span class="c"># on fait tourner la roulette</span>
    <span class="n">numero_gagnant</span> <span class="o">=</span> <span class="n">randrange</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"La roulette tourne... ... et s'arrête sur le numéro"</span><span class="p">,</span> <span class="n">numero_gagnant</span><span class="p">)</span>

    <span class="c"># on va établir le gain du joueur</span>
    <span class="k">if</span> <span class="n">numero_gagnant</span> <span class="o">==</span> <span class="n">nombre_mise</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Félicitations ! Vous obtenez"</span><span class="p">,</span> <span class="n">mise</span> <span class="o">*</span> <span class="mi">3</span><span class="p">,</span> <span class="s">"$ !"</span><span class="p">)</span>
        <span class="n">argent</span> <span class="o">+=</span> <span class="n">mise</span> <span class="o">*</span> <span class="mi">3</span>
    <span class="k">elif</span> <span class="n">numero_gagnant</span> <span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="n">nombre_mise</span> <span class="o">%</span><span class="mi">2</span><span class="p">:</span> <span class="c"># ils sont de la même couleur</span>
        <span class="n">mise</span> <span class="o">=</span> <span class="n">ceil</span><span class="p">(</span><span class="n">mise</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Vous avez misé sur la bonne couleur. Vous obtenez"</span><span class="p">,</span> <span class="n">mise</span><span class="p">,</span> <span class="s">"$"</span><span class="p">)</span>
        <span class="n">argent</span> <span class="o">+=</span> <span class="n">mise</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Désolé l'ami, c'est pas pour cette fois. Vous perdez votre mise."</span><span class="p">)</span>
        <span class="n">argent</span> <span class="o">-=</span> <span class="n">mise</span>

    <span class="c"># on va interrompre la partie si le joueur est ruiné</span>
    <span class="k">if</span> <span class="n">argent</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Vous êtes ruiné ! C'est la fin de la partie."</span><span class="p">)</span>
        <span class="n">continuer_partie</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c"># on affiche l'argent du joueur</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Vous avez à présent"</span><span class="p">,</span> <span class="n">argent</span><span class="p">,</span> <span class="s">"$"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Souhaitez-vous quitter le casino (o/n) ?"</span><span class="p">)</span>
        <span class="n">quitter</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">quitter</span><span class="o">==</span><span class="s">"o"</span> <span class="ow">or</span> <span class="n">quitter</span><span class="o">==</span><span class="s">"O"</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Vous quittez le casino avec vos gains."</span><span class="p">)</span>
            <span class="n">continuer_partie</span> <span class="o">=</span> <span class="bp">False</span>

<span class="c"># on met en pause le système (Windows)</span>
<span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">"pause"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Encore une fois, n'oubliez pas la ligne spécifiant l'encodage si vous voulez éviter les surprises <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Une petite chose qui pourrait vous surprendre est la construction des boucles pour tester si le joueur a entré une valeur correcte (quand on demande à l'utilisateur d'entrer un nombre entre 0 et 49 par exemple, il faut s'assurer qu'il l'a bien fait). C'est assez simple en vérité : on attend que le joueur entre un nombre. Si le nombre n'est pas valide, on demande à nouveau au joueur d'entrer ce nombre. J'en ai profité pour utiliser le concept des exceptions afin de s'assurer que l'utilisateur entrait bien un nombre. Comme vous l'avez vu, si ce n'est pas le cas, on affiche un message d'erreur. La valeur de la variable qui contiendra le nombre est remise à <span class="italique">-1</span> (c'est-à-dire une valeur qui indiquera à la boucle que nous n'avons toujours pas eu de valeur valide de l'utilisateur) et on utilise le mot-clé <span class="italique">continue</span> pour passer les autres instructions du bloc (sans quoi, vous auriez un autre message qui s'afficherait, disant que le nombre entré est négatif... c'est plus pratique ainsi) <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . De cette façon, si l'utilisateur entre une donnée inconvertible, le jeu ne plante pas et lui redemande tout simplement d'entrer une valeur valide.<br>
<br>
La boucle principale tourne autour d'un booléen. On utilise une variable <span class="italique">continuer_partie</span> qui est "vrai" tant qu'on doit continuer la partie. Une fois que la partie doit s'interrompre, elle passe à "faux". Notre boucle globale qui gère le déroulement de la partie travaille sur ce booléen et donc, dès qu'il est "faux", la boucle s'interrompt et le programme se met en pause. Tout le reste, vous devriez le comprendre sans aide, les commentaires sont là pour vous aider. Si vous avez des doutes, vous pouvez tester les lignes d'instructions problématiques dans votre interpréteur de commandes Python, encore une fois n'oubliez pas cet outil.<br>
<br>
<h3>Et maintenant ?</h3><br>
Prenez bien le temps de lire ma version mais surtout de modifier la vôtre, si vous êtes arrivé à une version qui marche bien, ou qui marche presque. Ne mettez pas ce projet à la corbeille sous prétexte que nous avons fini de le coder et qu'il marche. On peut toujours améliorer un projet, et celui-ci ne fait évidemment pas exception. Vous trouverez probablement de nouveaux concepts, dans la suite de ce tutoriel, qui pourront être utilisés dans le programme de ZCasino <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Voilà qui est fait. Ce TP conclut le chapitre introductif sur Python. Il vous reste bien des choses à apprendre sur ce langage et ça commence dès la prochaine partie, consacrée à la programmation orientée objet... un nom mystérieux cachant un concept fabuleux. Nous allons surtout découvrir de nouveaux types de données plus complexes et intéressants que ceux que nous avons déjà vus (à savoir les listes, dictionnaires, fichiers...). C'est parti ! <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies">
	</div>
	
<div>
<br>
Et bien c'en est fini des concepts de base. Dès la prochaine partie, on s'attaque à la POO, la Programmation Orientée Objet, un concept franchement fascinant et très puissant en Python. Vous allez surtout apprendre à manier de nouveaux types de données, notamment les listes, les dictionnaires, les fichiers... ça donne envie non ? <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies">
</div>

<hr>
<h2>Partie 2 : La Programmation Orientée Objet en tant qu'utilisateur</h2>
<div>
Vous croyiez avoir tout vu ? Surprise ! Enfin j'espère pas trop grande... <img src="./Apprendre Python !_files/langue.png" alt=":p"><br>
<br>
Nous avons encore beaucoup de choses à voir. La première partie de ce cours nous a permis d'approcher les concepts de base de Python et de réaliser nos premiers programmes. Les deux parties qui suivent seront consacrées à l'Orienté Objet, une méthode de programmation très riche !<br>
<br>
Dans la partie courante, nous aborderons l'objet du point de vue de l'utilisateur. Nous allons apprendre à nous servir plus à fond des chaînes de caractères ; nous aborderons les listes, les dictionnaires et les fichiers. Dans la partie suivante, vous pourrez enfin créer vos propres objets <img src="./Apprendre Python !_files/smile.png" alt=":)"> .<br>
<br>
<div class="rmq question">Mais qu'est-ce qu'un objet ?</div> Avant tout, je vais répondre à cette question, et on entre dans le vif du sujet tout de suite avec le premier chapitre.
</div>
	
	<hr>
	<h1 id="chap_257584">Notre premier objet : les chaînes de caractères</h1>
	<div id="chap_intro">
	Les objets... vaste sujet ! <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> Et avant d'en créer, on va d'abord voir ce dont il s'agit, par l'exemple. On va commencer avec les chaînes de caractères, un type que vous pensez bien connaître <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"> .
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_257587">Vous avez dit objet ?</h2>
		<div class="ss_part_texte">
		La première question qui risque de vous empêcher de dormir si je n'y réponds pas tout de suite, c'est :<br>
<div class="rmq question">Mais c'est quoi un objet ?</div> Eh bien j'ai lu beaucoup de définitions très différentes et je n'ai pas trouvé de points communs à toutes ces définitions. Nous allons donc partir d'une définition incomplète, mais qui suffira pour l'instant :<br>
<br>
<strong>Un objet est une structure de données, comme les variables, qui peut contenir elle-même d'autres variables et fonctions.</strong> On étoffera plus loin cette définition, elle suffit bien pour le moment <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<div class="rmq question">Je ne comprends rien. Passe encore qu'une variable en contienne d'autres, après tout les chaînes de caractères contiennent bien des caractères, mais qu'une variable contienne des fonctions... ça rime à quoi ? <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"> </div><br>
<br>
Je pourrais passer des heures à expliquer la théorie du concept que vous n'en seriez pas beaucoup plus avancé. J'ai choisi de vous montrer les objets par l'exemple et donc, vous allez très rapidement voir ce que tout cela signifie. Mais vous allez devoir me faire confiance au début sur l'utilité de la méthode objet <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Avant d'attaquer, une petite précision. J'ai dit qu'un objet était un peu comme une variable... en fait, pour être plus exact, il faut dire qu'une variable est un objet <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> . Toutes les variables avec lesquelles nous avons travaillé jusqu'ici sont des objets. Les fonctions que nous avons vues sont également des objets. <strong>Tout est objet en Python</strong>, gardez-le à l'esprit.<br>
<br>
Assez de théorie ! Je vais expliquer tout ça tout de suite et, si je fais bien mon travail, vous devriez comprendre tout ça très rapidement <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_257582">Les méthodes de la classe str</h2>
		<div class="ss_part_texte">
		Ohlala, j'en vois qui grimacent rien qu'en voyant le titre <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> . Pas de raison de s'inquiéter ! <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> On va aller tout doucement.<br>
<br>
Je vais vous poser un problème : comment peut-on mettre une chaîne de caractères en minuscule ? Si vous vous êtes contenté de mon tutoriel, vous ne pourrez pas faire cet exercice, j'ai volontairement évité de trop aborder les chaînes de caractères jusqu'ici. Mais admettons que vous arriviez à coder une fonction prenant en paramètre la chaîne en question. Vous aurez un code qui ressemblera à cela :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">chaine</span> <span class="o">=</span> <span class="s">"NE CRIE PAS SI FORT !"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mettre_en_minuscule</span><span class="p">(</span><span class="n">chaine</span><span class="p">)</span>
<span class="go">'ne crie pas si fort !'</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Sachez que dans les anciennes versions de Python, celles qui n'intégraient pas encore l'approche objet, on avait un module spécialisé dans le traitement des chaînes de caractères. On importait ce module et on pouvait appeler la fonction pour mettre en minuscule une chaîne. Ce module existe d'ailleurs encore et reste utilisé pour certains traitements spécifiques. Mais on va découvrir ici une façon de faire différente. Regardez attentivement :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">chaine</span> <span class="o">=</span> <span class="s">"NE CRIE PAS SI FORT !"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">chaine</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="c"># mettre en minuscule la chaîne</span>
<span class="go">'ne crie pas si fort !'</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La fonction <span class="italique">lower</span> est une nouveauté pour vous. Vous devez reconnaître le point « . » qui symbolisait déjà, dans le chapitre sur les modules, une relation d'appartenance (<span class="italique">a.b</span> signifiait <span class="italique">b</span> contenu dans <span class="italique">a</span>). Ici c'est la même signification : la fonction <span class="italique">lower</span> est une fonction de la variable <span class="italique">chaine</span>.<br>
<br>
La fonction <span class="italique">lower</span> est propre aux chaînes de caractères. Toutes les chaînes peuvent faire appel à cette fonction. Si vous tapez <span class="code2 python"><span class="nb">type</span><span class="p">(</span><span class="n">chaine</span><span class="p">)</span>
</span> dans l'interpréteur, vous obtenez <span class="code2 console">&lt;class&nbsp;'str'&gt;</span>. Nous avons dit qu'une variable est issue d'un type de donnée. Je vais à présent reformuler : un <strong>objet</strong> est issu d'une <strong>classe</strong>. La <strong>classe</strong> est une forme de type de donnée, sauf qu'elle permet de définir des fonctions et variables propres au type. C'est pour cela que dans toutes les chaînes de caractères, on peut appeler la fonction <span class="italique">lower</span>. C'est tout simplement parce que la fonction <span class="italique">lower</span> a été définie dans la <strong>classe</strong> <span class="italique">str</span>. Les fonctions définies dans une classe sont appelées des <strong>méthodes</strong>.<br>
<br>
Récapitulons. Nous avons découvert :<br>
<ul>
<li>Les <strong>objets</strong> que j'ai présentés comme des variables, pouvant contenir d'autres variables ou fonctions (que l'on appelle <strong>méthodes</strong>). On appelle une méthode d'un objet grâce à <span class="code2 python"><span class="n">objet</span><span class="o">.</span><span class="n">methode</span><span class="p">()</span>
</span>.</li>
<li>les <strong>classes</strong> que j'ai présentées comme des types de données. Une classe est un modèle qui servira à construire un objet ; c'est dans la classe qu'on va définir les méthodes propres à l'objet.</li>
</ul><br>
<br>
Schématiquement voici le mécanisme qui vous permet d'appeler la méthode <span class="italique">lower</span> d'une chaîne :<br>
<br>
<ol class="liste_1">
<li>Les développeurs de Python ont créé la classe <span class="italique">str</span> qui sera utilisée pour créer des chaînes de caractères. Dans cette classe, ils ont défini plusieurs méthodes, comme <span class="italique">lower</span>, qui pourront être utilisées par n'importe quel objet construit sur cette classe.</li>
<li>Quand vous écrivez <span class="code2 python"><span class="n">chaine</span> <span class="o">=</span> <span class="s">"NE CRIE PAS SI FORT !"</span>
</span>, Python reconnaît qu'il doit créer une chaîne de caractères. Il va donc créer un objet d'après la classe (le modèle) qui a été définie à l'étape précédente.</li>
<li>Vous pouvez ensuite appeler toutes les méthodes de la classe <span class="italique">str</span> depuis l'objet <span class="italique">chaine</span> que vous venez de créer.</li></ol><br>
<br>
Ouf ! Ҫa fait beaucoup de choses nouvelles, du vocabulaire et du concept un peu particulier <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Vous ne voyez peut-être pas encore tout l'intérêt d'avoir des méthodes définies dans une certaine classe. Cela permet d'abord de bien séparer les diverses fonctionnalités (on ne peut mettre en minuscule un nombre entier, ça n'a aucun sens). Ensuite, c'est plus intuitif, une fois passé le choc de la première rencontre <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Bon, on parle, on parle, mais on code pas beaucoup <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
<h3>Mettre en forme une chaîne</h3><br>
Non, vous n'allez pas apprendre à mettre une chaîne en gras, souligné, avec une police Verdana de 15px... sachons raison garder, nous ne sommes encore que dans une console <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> . Nous venons de voir <span class="italique">lower</span>, il existe d'autres méthodes... mais avant tout voyons un contexte d'utilisation.<br>
<br>
Certains d'entre vous se demandent peut-être l'intérêt de mettre des chaînes en minuscule... alors voici un petit exemple.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">chaine</span> <span class="o">=</span> <span class="nb">str</span><span class="p">()</span> <span class="c"># créée une chaîne vide</span>
               <span class="c"># on aurait obtenu le même résultat en tapant chaine = ""</span>

<span class="k">while</span> <span class="n">chaine</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="o">!=</span> <span class="s">"q"</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Tapez 'Q' pour quitter..."</span><span class="p">)</span>
    <span class="n">chaine</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Merci !"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous devez comprendre rapidement ce programme. On demande dans une boucle à l'utilisateur d'entrer la lettre "Q" pour quitter. Tant que l'utilisateur entre une autre lettre, la boucle continue de s'exécuter. Dès que l'utilisateur entre <span class="italique">Q</span>, la boucle s'arrête et le programme affiche <span class="code2 console">Merci&nbsp;!</span> Ҫa devrait vous rappeler quelque chose... direction le TP de la partie 1 pour ceux qui ont la mémoire courte <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
La petite nouveauté est dans le test de la boucle : <span class="italique">chaine.lower() != "q"</span>. On prend la chaîne entrée par l'utilisateur, on la met en minuscule et on regarde si elle est différente de "q". Cela veut dire que l'utilisateur peut entrer "q" en majuscule ou en minuscule, dans les deux cas la boucle s'arrêtera.<br>
<br>
Notez que <span class="code2 python"><span class="n">chaine</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span> retourne la chaîne en minuscule, mais ne modifie pas la chaîne. Cela est très important, nous verrons pourquoi dans le chapitre suivant.<br>
<br>
Notez aussi que nous avons appelé la fonction <span class="italique">str</span> pour créer une chaîne vide. Je ne vais pas trop compliquer les choses, pas encore, mais sachez qu'appeler ainsi un type comme une fonction permet de créer un objet de la classe. Ici, <span class="italique">str()</span> crée un objet « chaîne de caractères ». Nous avons vu dans la première partie <span class="italique">int()</span> qui crée aussi un entier (depuis un autre type si nécessaire, ce qui permet de convertir une chaîne en entier par exemple).<br>
<br>
Bon, voyons d'autres méthodes. Je vous invite à tester mes exemples (ils sont commentés, mais on retient mieux en essayant par soi-même). <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"><br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">minuscule</span> <span class="o">=</span> <span class="s">"une chaine en minuscule"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">minuscule</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="c"># mettre en majuscule</span>
<span class="go">'UNE CHAINE EN MINUSCULE'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">minuscule</span><span class="o">.</span><span class="n">capitalize</span><span class="p">()</span> <span class="c"># la première lettre en majuscule</span>
<span class="go">'Une chaine en minuscule'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">espaces</span> <span class="o">=</span> <span class="s">"   une  chaine avec  des espaces   "</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">espaces</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="c"># on retire les espaces au début et à la fin de la chaîne</span>
<span class="go">'une  chaine avec  des espaces'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">titre</span> <span class="o">=</span> <span class="s">"introduction"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">titre</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span><span class="o">.</span><span class="n">center</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
<span class="go">'    INTRODUCTION    '</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La dernière instruction mérite quelques explications. Dans l'ordre :<br>
<br>
<ul>
<li>On appelle la méthode <span class="italique">upper</span> de l'objet <span class="italique">titre</span>. Cette méthode, comme vous l'avez vu plus haut, retourne la chaîne de caractères contenue dans l'objet, en majuscule.</li>
<li>On appelle ensuite la méthode <span class="italique">center</span>, méthode que nous n'avons pas encore vue et qui permet de centrer une chaîne. On lui passe en paramètre la taille de la chaîne que l'on souhaite obtenir et la méthode, travaillant sur l'objet, va rajouter alternativement une espace au début et à la fin de la chaîne, jusqu'à obtenir la taille demandée. Dans cet exemple, <span class="italique">titre</span> contient la chaîne <span class="italique">'introduction'</span>, chaîne qui (en minuscule ou en majuscule <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> ) mesure 12 caractères. On demande à <span class="italique">center</span> de centrer cette chaîne dans un espace de 20 caractères. La méthode <span class="italique">center</span> va donc placer 4 espaces avant le titre, et 4 espaces après, pour faire 20 en tout <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Bon, mais maintenant, sur quel objet travaille <span class="italique">center</span> ? Sur <span class="italique">titre</span> ? Non. Sur la chaîne retournée par <span class="italique">titre.upper()</span>, c'est-à-dire le titre en majuscule. C'est pourquoi on peut chaîner ces deux méthodes : <span class="italique">upper</span>, comme la plupart des méthodes de chaînes, travaille sur une chaîne et retourne une chaîne... qui elle aussi va posséder les méthodes propres à une chaîne de caractères. Si ce n'est pas très clair, faites quelques tests, avec <span class="italique">titre.upper()</span> et <span class="italique">titre.center(20)</span>, en passant par une seconde variable si nécessaire, pour vous rendre compte du mécanisme, ce n'est pas bien compliqué.</li>
</ul><br>
<br>
Je n'ai mis ici que quelques méthodes, il y en a bien d'autres. Vous pouvez en voir la liste dans l'aide, en tapant, dans l'interpréteur : <span class="code2 python"><span class="n">help</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span> .<br>
<br>
<h3>Formater et afficher une chaîne</h3> <br>
<div class="rmq question">Attends, on a appris à faire ça depuis cinq bons chapitres ! On va pas tout réapprendre quand même ?</div><br>
<br>
Pas tout, non. Mais nous allons apprendre à considérer ce que nous savons à travers le modèle objet. Et vous allez vous rendre compte que la plupart du temps nous n'avons fait qu'effleurer les fonctionnalités du langage. Vous allez peut-être même demander grâce avant la fin de ce chapitre <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Je ne vais pas revenir sur ce que j'ai dit, pour afficher une chaîne, on passe par la fonction <span class="italique">print</span>.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">chaine</span> <span class="o">=</span> <span class="s">"Bonjour tout le monde !"</span>
<span class="k">print</span><span class="p">(</span><span class="n">chaine</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Rien de nouveau ici. En revanche, on va un peu changer nos habitudes quand on désire afficher plusieurs variables.<br>
<br>
Jusqu'ici, nous avons utilisé <span class="italique">print</span> en lui passant plusieurs paramètres. Ca marche, mais nous allons voir quelque chose légèrement plus flexible, qui d'ailleurs n'est pas seulement utile pour l'affichage.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">prenom</span> <span class="o">=</span> <span class="s">"Paul"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">nom</span> <span class="o">=</span> <span class="s">"Dupont"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">age</span> <span class="o">=</span> <span class="mi">21</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="s">"Je m'appelle {0} {1} et j'ai {2} ans."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">prenom</span><span class="p">,</span> <span class="n">nom</span><span class="p">,</span> <span class="n">age</span><span class="p">))</span>
<span class="go">Je m'appelle Paul Dupont et j'ai 21 ans.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Mais ! C'est quoi ça ?</div><br>
<br>
Question légitime. Voyons un peu <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h4>Première syntaxe de la méthode format</h4><br>
Nous avons utilisé une méthode de la classe <span class="italique">str</span> (encore une) pour formater notre chaîne. De gauche à droite, nous avons :<br>
<br>
<ul>
<li>une chaîne de caractères qui ne présente rien de particulier, sauf ces accolades entourant des nombres, d'abord <span class="italique">0</span>, puis <span class="italique">1</span>, puis <span class="italique">2</span> ;</li>
<li>nous appelons la méthode <span class="italique">format</span> de cette chaîne en lui passant en paramètre les variables à afficher, dans un ordre bien précis ;</li>
<li>quand Python exécute cette méthode, il va remplacer dans notre chaîne <span class="italique">{0}</span> par la première variable passée à la méthode <span class="italique">format</span> (soit le prénom), <span class="italique">{1}</span> par la deuxième variable... ainsi de suite.</li>
</ul><br>
<br>
Souvenez-vous qu'en programmation, on commence à compter à partir de 0.<br>
<br>
<div class="rmq question">Bien, mais on aurait pu faire exactement la même chose en passant plusieurs valeurs à <span class="italique">print</span>, non ?</div><br>
<br>
Absolument. Mais rappelez-vous que cette fonctionnalité est bien plus puissante qu'un simple affichage, vous pouvez formater des chaînes de cette façon. Ici, nous avons directement affiché la chaîne formatée, mais nous aurions pu la stocker :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">nouvelle_chaine</span> <span class="o">=</span> <span class="s">"Je m'appelle {0} {1} et j'ai {2} ans."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">prenom</span><span class="p">,</span> <span class="n">nom</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour faire la même chose sans utiliser <span class="italique">format</span>, on aurait dû concaténer des chaînes, ce que nous allons voir un peu plus loin, mais ça reste plus élégant.<br>
<br>
Dans cet exemple, nous avons appelé les variables dans l'ordre où nous les placions dans <span class="italique">format</span>, mais ce n'est pas une obligation. Considérez cet exemple :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">prenom</span> <span class="o">=</span> <span class="s">"Paul"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">nom</span> <span class="o">=</span> <span class="s">"Dupont"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">age</span> <span class="o">=</span> <span class="mi">21</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span> \
<span class="gp">... </span>  <span class="s">"Je m'appelle {0} {1} ({3} {0} pour l'administration) et j'ai {2} ans."</span> \
<span class="gp">... </span>  <span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">prenom</span><span class="p">,</span> <span class="n">nom</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">nom</span><span class="o">.</span><span class="n">upper</span><span class="p">()))</span>
<span class="go">Je m'appelle Paul Dupont (DUPONT Paul pour l'administration) et j'ai 21 ans.'</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
J'ai coupé notre instruction, plutôt longue, à l'aide du signe « \ » placé avant un saut de ligne, pour dire à Python que l'instruction se prolongeait au-dessous.<br>
<br>
Si vous avez du mal à comprendre l'exemple, relisez l'instruction en remplaçant vous-même les nombres entre accolades par les variables (n'oubliez pas de compter à partir de 0).<br>
<br>
Cette première syntaxe suffit la plupart du temps, mais n'est pas forcément intuitive quand on insère beaucoup de variables : on doit retenir leur position dans l'appel de <span class="italique">format</span> pour comprendre laquelle est affichée à tel endroit. Mais il existe une autre syntaxe.<br>
<br>
<h4>Seconde syntaxe de la méthode format</h4><br>
On peut également nommer les variables que l'on va afficher, c'est souvent plus intuitif que d'utiliser leur indice. Voici un nouvel exemple :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># formatage d'une adresse</span>
<span class="n">adresse</span> <span class="o">=</span> <span class="s">"""</span>
<span class="s">  {no_rue}, {nom_rue}</span>
<span class="s">  {code_postal} {nom_ville} ({pays})</span>
<span class="s">"""</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">no_rue</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">nom_rue</span><span class="o">=</span><span class="s">"rue des Postes"</span><span class="p">,</span> <span class="n">code_postal</span><span class="o">=</span><span class="mi">75003</span><span class="p">,</span> \
    <span class="n">nom_ville</span><span class="o">=</span><span class="s">"Paris"</span><span class="p">,</span> <span class="n">pays</span><span class="o">=</span><span class="s">"France"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">adresse</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<span class="code">Code : Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>5,&nbsp;rue&nbsp;des&nbsp;Postes
&nbsp;&nbsp;75003&nbsp;Paris&nbsp;(France)</pre></div></td></tr></tbody></table></div><br>
<br>
Je pense que vous voyez assez précisément en quoi consiste cette deuxième syntaxe de <span class="italique">format</span>. Au lieu de donner des nombres entre accolades, on spécifie des noms de variable qui doivent correspondre à ceux entrés comme mot-clé dans la méthode <span class="italique">format</span>. Je ne m'attarderai pas davantage sur ce point, je pense qu'il est assez clair comme cela.<br>
<br>
<h4>La concaténation de chaînes</h4><br>
Nous allons glisser très rapidement sur le concept de concaténation, assez intuitif d'ailleurs. On cherche à regrouper deux chaînes en une, en mettant la seconde à la suite de la première. Cela se fait le plus simplement du monde :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">prenom</span> <span class="o">=</span> <span class="s">"Paul"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">message</span> <span class="o">=</span> <span class="s">"Bonjour"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">chaine_complete</span> <span class="o">=</span> <span class="n">message</span> <span class="o">+</span> <span class="n">prenom</span> <span class="c"># on utilise le symbole '+'</span>
<span class="gp">&gt;&gt;&gt; </span>                                   <span class="c"># pour concaténer deux chaînes</span>
<span class="gp">... </span><span class="k">print</span><span class="p">(</span><span class="n">chaine_complete</span><span class="p">)</span> <span class="c"># résultat :</span>
<span class="go">BonjourPaul</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c"># pas encore parfait, il manque une espace</span>
<span class="gp">... </span><span class="c"># qu'à cela ne tienne !</span>
<span class="gp">... </span><span class="n">chaine_complete</span> <span class="o">=</span> <span class="n">message</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">prenom</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">chaine_complete</span><span class="p">)</span> <span class="c"># résultat :</span>
<span class="go">Bonjour Paul</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
C'est assez clair je pense. Le signe '+' utilisé pour ajouter des nombres est ici utilisé pour <strong>concaténer</strong> deux chaînes. Essayons à présent de concaténer des chaînes et des nombres :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">age</span> <span class="o">=</span> <span class="mi">21</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">message</span> <span class="o">=</span> <span class="s">"J'ai "</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span> <span class="s">" ans."</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n-Identifier">&lt;module&gt;</span>
<span class="nc">TypeError</span>: <span class="n-Identifier">Can't convert 'int' object to str implicitly</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Python se fâche tout rouge ! Certains langages auraient accepté cette syntaxe sans sourciller mais Python n'aime pas ça du tout.<br>
<br>
Au début de la première partie, nous avons dit que Python était un langage à <strong>typage dynamique</strong>, ce qui signifie qu'il identifie lui-même les types de données et que les variables peuvent changer de type au cours du programme. Mais Python est aussi un langage <strong>fortement typé</strong>, et cela veut dire que les types de données ne sont pas là pour faire joli, on ne peut les ignorer. Ainsi, vous voulez ici ajouter une chaîne à un entier et à une autre chaîne. Python ne comprend pas : est-ce que les chaînes contiennent des nombres que je dois convertir pour les ajouter à l'entier ou est-ce que l'entier doit être converti en chaîne puis concaténé avec les autres chaînes ? Python ne sait pas. Il ne le fera pas tout seul. Mais il s'avère de bonne volonté puisqu'il suffit de lui demander de convertir l'entier pour pouvoir le concaténer aux autres chaînes.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">age</span> <span class="o">=</span> <span class="mi">21</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">message</span> <span class="o">=</span> <span class="s">"J'ai "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">age</span><span class="p">)</span> <span class="o">+</span> <span class="s">" ans."</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
<span class="go">J'ai 21 ans.</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On appelle <span class="italique">str</span> pour convertir en une chaîne de caractères, comme nous avons appelé <span class="italique">int</span> pour convertir en entier. C'est le même mécanisme, sauf que convertir un entier en chaîne de caractères ne lèvera vraissemblablement aucune exception.<br>
<br>
Le typage fort de Python est important. Il est un fondement de sa philosophie : j'ai tendance à considérer pour ma part qu'un langage faiblement typé (comme JavaScript qui aurait permis de concaténer ces deux chaînes et cet entier) crée des erreurs qui sont plus difficiles à repérer. Alors qu'ici, il nous suffit de convertir explicitement le type pour que Python sache ce qu'il doit faire.<br>
<br>
Un petit extrait de la PEP 20 illustrera mes propos. Cette PEP (Python Enhancement Proposals : propositions d'amélioration de Python) reprend en phrases courtes et claires la philosophie de Python (c'est cadeau <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> ).<br>
<br>
<span class="citation"><a href="http://www.python.org/dev/peps/pep-0020/">Citation</a></span><div class="citation2"><br>
Explicit is better than implicit.<br>
</div><br>
<br>
Courage ! On est presque à la fin. On jète un coup d'oeil au parcours et à la sélection de chaînes, et c'en sera fini de ce chapitre, riche en nouveautés... et en émotions <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_257583">Parcours et sélection de chaînes</h2>
		<div class="ss_part_texte">
		Nous avons vu très rapidement dans la partie 1 un moyen de parcourir des chaînes. Nous allons en voir un second ici qui fonctionne par indice.<br>
<br>
<h3>Parcours par indice</h3><br>
Vous devez vous en souvenir : j'ai dit qu'une chaîne de caractères était un ensemble constitué... de caractères <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> . En fait, une chaîne de caractères est elle-même constituée de chaînes de caractères mais qui ne se composent que d'un caractère.<br>
<br>
<h4>Accéder aux caractères d'une chaîne</h4><br>
Nous allons apprendre à accéder aux lettres constituant une chaîne. Par exemple, nous souhaitons sélectionner la première lettre d'une chaîne.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">chaine</span> <span class="o">=</span> <span class="s">"Salut les ZER0S !"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">chaine</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c"># première lettre de la chaîne</span>
<span class="go">'S'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">chaine</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c"># troisième lettre de la chaîne</span>
<span class="go">'l'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">chaine</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c"># dernière lettre de la chaîne</span>
<span class="go">'!'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On précise entre crochets <span class="italique">[]</span> l'indice (la position du caractère auquel on souhaiterait accéder).<br>
<br>
Rappelez-vous, on commence à compter à partir de 0. La première lettre est donc à l'indice 0, la deuxième à l'indice 1, la troisième à l'indice 2... On peut accéder aux lettres en partant de la fin en entrant un indice négatif. Quand vous entrez <span class="italique">chaine[-1]</span>, vous accédez ainsi à la dernière lettre de la chaîne (enfin, au dernier caractère, qui n'est pas une lettre ici).<br>
<br>
On peut obtenir la longueur de la chaîne (le nombre de caractères qu'elle contient) grâce à la fonction <span class="italique">len</span>.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">chaine</span> <span class="o">=</span> <span class="s">"Salut"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">chaine</span><span class="p">)</span>
<span class="go">5</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Pourquoi ne pas avoir défini cette fonction comme une méthode de la classe <span class="italique">str</span> ? Pourquoi ne pourrait-on pas faire <span class="italique">chaine.len()</span> ?</div><br>
<br>
En fait, c'est un peu le cas je vous montrerai bien plus loin. Mais, avant tout, <span class="italique">str</span> n'est qu'un exemple parmi d'autres d'ensembles (on en découvrira d'autres dans les prochains chapitres) et donc les développeurs de Python ont préféré créer une fonction qui travaillerait sur l'ensemble, plutôt qu'une méthode dans toutes ces classes.<br>
<br>
<h4>Méthode de parcours par <span class="italique">while</span></h4><br>
Eh bien vous en savez assez pour parcourir une chaîne grâce à la boucle <span class="italique">while</span>. Notez que dans la plupart des cas, on préférera parcourir un ensemble avec <span class="italique">for</span>, mais il est bien de savoir faire autrement, ça vous sera utile parfois.<br>
<br>
Voici le code auquel vous pourriez arriver :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">chaine</span> <span class="o">=</span> <span class="s">"Salut"</span>
<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="c"># on appelle notre indice 'i' par convention</span>
<span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">chaine</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">chaine</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="c"># on affiche le caractère à chaque tour de boucle</span>
    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
N'oubliez pas d'incrémenter <span class="italique">i</span>, sinon vous allez avoir quelques surprises <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
Si vous essayez d'accéder à un indice qui n'existe pas (par exemple <span class="italique">25</span> alors que votre chaîne ne fait que 20 de longueur), Python lèvera une exception de type <span class="italique">IndexError</span>.<br>
<br>
Une petite dernière chose : vous ne pouvez changer les lettres de la chaîne en utilisant les indices :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mot</span> <span class="o">=</span> <span class="s">"lac"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mot</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">"b"</span> <span class="c"># on veut remplacer 'l' par 'b'</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n-Identifier">&lt;module&gt;</span>
<span class="nc">TypeError</span>: <span class="n-Identifier">'str' object does not support item assignment</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Python n'est pas content. Il ne veut pas que vous utilisiez les indices pour modifier des caractères de la chaîne. Pour ce faire, il va falloir utiliser la sélection.<br>
<br>
<h3>Sélection de chaînes</h3><br>
<div class="rmq question">Chouette ! On va faire du copier-coller ? <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"> </div><br>
<br>
Euh... presque <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> .<br>
<br>
Nous allons voir comment sélectionner une partie de la chaîne.<br>
<br>
Si je souhaite par exemple sélectionner les deux premières lettres de la chaîne :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">presentation</span> <span class="o">=</span> <span class="s">"salut"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">presentation</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="c"># on sélectionne les deux premières lettres</span>
<span class="s">'sa'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">presentation</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">presentation</span><span class="p">)]</span> <span class="c"># on sélectionne la chaîne sauf les deux premières lettres</span>
<span class="s">'lut'</span>
<span class="o">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La sélection consiste donc à extraire une partie de la chaîne. Cette opération retourne le morceau de la chaîne sélectionné (encore une fois sans modifier la chaîne d'origine).<br>
<br>
Sachez que l'on peut sélectionner du début de la chaîne jusqu'à un indice, et d'un indice jusqu'à la fin de la chaîne, sans le préciser comme nous l'avons fait. Python comprend très bien si on le sous-entend :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">presentation</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span> <span class="c"># du début jusqu'à la troisième lettre non comprise</span>
<span class="s">'sa'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">presentation</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span> <span class="c"># de la troisième lettre (comprise) à la fin</span>
<span class="s">'lut'</span>
<span class="o">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Maintenant, nous pouvons reprendre notre exemple de tout à l'heure pour constituer une nouvelle chaîne, en remplaçant une lettre par une autre :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mot</span> <span class="o">=</span> <span class="s">"lac"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mot</span> <span class="o">=</span> <span class="s">"b"</span> <span class="o">+</span> <span class="n">mot</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">mot</span><span class="p">)</span>
<span class="go">bac</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Voilà ! <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"><br>
<br>
<div class="rmq question">Ça reste assez peu intuitif non ?</div><br>
<br>
Pour remplacer des lettres, ça paraît un peu lourd en effet. Et d'ailleurs on s'en sert assez rarement pour ça. Pour rechercher / remplacer, on a les méthodes <span class="italique">count</span>, <span class="italique">find</span> et <span class="italique">replace</span> dont je vous laisse le soin de comprendre le fonctionnement <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Aller, on peut passer au QCM, vous avez le droit à l'interpréteur pour celui-là <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Pfiou ! Voilà qui conclut un bien long chapitre, et pas très simple avec ça. Vous y avez affronté vos premiers objets et vous vous en êtes bien tiré, apparemment. Mais il n'empêche que ce chapitre contenait beaucoup de nouveautés, d'ordre conceptuelles, syntaxiques... Le chapitre suivant risque d'être au moins aussi long et cette tendance risque de se confirmer tout au long de cette partie 2. Mais passée la première rencontre avec les objets, ce que vous verrez vous surprendra moins. Inutile de vous le cacher toutefois : ça commence juste. Alors, dès que la migraine est passée, on se retrouve au chapitre suivant, consacré aux listes et aux tuples.
	</div>
	
	<hr>
	<h1 id="chap_257585">Les listes et tuples (1/2)</h1>
	<div id="chap_intro">
	<span class="italique">Veni, vidi, vici.</span> J'aurai réussi à vous faire connaître et j'espère, aimer le Python sans vous apprendre les listes <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Mais allons ! Cette époque est révolue. Maintenant que nous commençons à étudier l'objet sous toutes ses formes, je ne vais pouvoir garder le secret plus longtemps : il existe des listes en Python. Pour ceux qui ne voient même pas de quoi je parle, vous allez vite vous rendre compte qu'avec les dictionnaires que nous verrons plus loin, c'est un type, ou plutôt une classe, dont on aura du mal à se passer.<br>
<br>
Commençons ! <img src="./Apprendre Python !_files/pirate.png" alt=":pirate:" class="smilies">
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_257581">Créons et éditons nos premières listes</h2>
		<div class="ss_part_texte">
		<h3>D'abord c'est quoi, une liste ?</h3><br>
En Python, les listes sont des objets qui peuvent en contenir d'autres. C'est donc un ensemble, comme une chaîne de caractères, mais qui, au lieu de contenir des caractères, contient n'importe quel objet. Comme d'habitude, on va s'occuper du concept des listes avant de voir tout son intérêt <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Création de listes</h3><br>
On a deux moyens de créer des listes. Si je vous dis que la classe d'une liste s'appelle, assez logiquement, <span class="italique">list</span>, vous devriez déjà pouvoir trouver une manière de créer une liste.<br>
<br>
Non ? ... <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"><br>
<br>
Vous allez vous habituer à cette syntaxe :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span> <span class="c"># on crée une liste vide</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">ma_liste</span><span class="p">)</span>
<span class="go">&lt;class 'list'&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span>
<span class="go">[]</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Là encore, on appelle la classe comme une fonction pour <strong>instancier</strong> un objet de cette classe.<br>
<br>
Quand vous affichez la liste, vous pouvez constater qu'elle est vide. Entre les crochets (qui sont les délimiteurs des listes en Python), il n'y a rien. On peut également utiliser ces crochets pour créer une liste.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span> <span class="o">=</span> <span class="p">[]</span> <span class="c"># on crée une liste vide</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ça revient au même, vous pouvez vérifier. Toutefois, on peut également créer une liste non vide, en lui indiquant les objets à y mettre directement à la création.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span> <span class="c"># une liste avec cinq objets</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">ma_liste</span><span class="p">)</span>
<span class="go">[1, 2, 3, 4, 5]</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La liste que nous venons de créer compte cinq objets du type <span class="italique">int</span>. Ils sont classés par ordre croissant. Mais rien de tout cela n'est obligatoire.<br>
<br>
<ul>
<li>Vous pouvez faire des listes de toute longueur.</li>
<li>Les listes peuvent contenir n'importe quel type d'objet.</li>
<li>Les objets dans une liste peuvent être mis dans le désordre. Toutefois, la structure d'une liste fait que chaque objet <span class="souligne">a sa place</span> et que l'ordre compte.</li>
</ul><br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">,</span> <span class="s">"une chaine"</span><span class="p">,</span> <span class="p">[]]</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous avons ici créé une liste contenant quatre objets de types différents : un entier, un flottant, une chaîne de caractères et... une autre liste <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Voyons à présent comment accéder aux éléments d'une liste :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span> <span class="o">=</span> <span class="p">[</span><span class="s">'c'</span><span class="p">,</span> <span class="s">'f'</span><span class="p">,</span> <span class="s">'m'</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c"># on veut accéder au premier élément de la liste</span>
<span class="go">'c'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c"># troisième élément</span>
<span class="go">'m'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">'Z'</span> <span class="c"># on remplace 'f' par 'Z'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span>
<span class="go">['c', 'Z', 'm']</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous pouvez le voir, on accède aux éléments d'une liste de la même façon qu'on accède aux caractères d'une chaîne de caractères : on indique entre crochets l'indice de l'élément qui nous intéresse. Rappelez-vous que l'on commence à compter à partir de 0.<br>
<br>
Contrairement à la classe <span class="italique">str</span>, la classe <span class="italique">list</span> vous permet de remplacer un élément par un autre. Les listes sont en effet des types dits <span class="souligne">mutables</span>.<br>
<br>
<h3>Ajouter des objets dans une liste</h3><br>
On peut trouver plusieurs méthodes, définies dans la classe <span class="italique">list</span>, pour ajouter des éléments dans une liste.<br>
<br>
<h4>Ajouter un élément à la fin de la liste</h4><br>
On utilise la méthode <span class="italique">append</span> pour ajouter un élément à la fin de la liste.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">56</span><span class="p">)</span> <span class="c"># on ajoute 56 à la fin de la liste</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span>
<span class="go">[1, 2, 3, 56]</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comment ça, je sais pas compter ? <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies"><br>
<br>
C'est assez simple non ? On passe en paramètre de la méthode <span class="italique">append</span> l'objet que nous souhaitons ajouter à la fin de la liste.<br>
<br>
<div class="rmq attention">Attention ! La méthode <span class="italique">append</span>, comme beaucoup de méthodes de listes, travaille directement sur l'objet et ne retourne rien.</div><br>
<br>
Ceci est extrêmement important. Dans le chapitre précédent, nous avons vu que toutes les méthodes de chaînes ne modifient pas l'objet d'origine mais retournent l'objet modifié. Ici c'est le contraire : les méthodes de listes ne retournent rien mais modifient l'objet d'origine. Regardez ce code si ce n'est pas bien clair :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">chaine1</span> <span class="o">=</span> <span class="s">"une petite phrase"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">chaine2</span> <span class="o">=</span> <span class="n">chaine1</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="c"># on met en majuscule chaine1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">chaine1</span> <span class="c"># on affiche la chaîne d'origine</span>
<span class="go">'une petite phrase'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c"># elle n'a pas été modifiée par la méthode upper</span>
<span class="gp">... </span><span class="n">chaine2</span> <span class="c"># on affiche chaine2</span>
<span class="go">'UNE PETITE PHRASE'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c"># c'est chaine2 qui contient la chaîne en majuscule</span>
<span class="gp">... </span><span class="c"># voyons pour les listes à présent</span>
<span class="gp">... </span><span class="n">liste1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mf">5.5</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">liste2</span> <span class="o">=</span> <span class="n">liste1</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="o">-</span><span class="mi">15</span><span class="p">)</span> <span class="c"># on ajoute -15 à liste1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">liste1</span> <span class="c"># on affiche liste1</span>
<span class="go">[1, 5.5, 18, -15]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c"># cette fois, l'appel de la méthode a modifié l'objet d'origine (liste1)</span>
<span class="gp">... </span><span class="c"># voyons ce que contient liste2</span>
<span class="gp">... </span><span class="n">liste2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c"># rien ? Vérifions avec print</span>
<span class="gp">... </span><span class="k">print</span><span class="p">(</span><span class="n">liste2</span><span class="p">)</span>
<span class="go">None</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je vais expliquer les dernières lignes. Mais d'abord, il faut que vous fassiez bien la différence entre les méthodes de chaînes, où l'objet d'origine n'est jamais modifié mais qui retournent un nouvel objet, et les méthodes de listes, qui ne retournent rien mais modifient l'objet d'origine.<br>
<br>
J'ai dit que les méthodes de listes ne retournent rien. On va pourtant essayer de capturer la valeur de retour dans <span class="italique">liste2</span>. Quand on essaye d'afficher la valeur de <span class="italique">liste2</span> en l'entrant directement, on n'obtient rien. Il faut l'afficher avec <span class="italique">print</span> pour savoir ce qu'elle contient : <span class="italique">None</span>. C'est l'objet vide de Python. En réalité, quand une fonction ne retourne rien, elle retourne <span class="italique">None</span>. Vous retrouverez peut-être ce mot-clé de temps à autre, ne soyez donc pas surpris.<br>
<br>
<h4>Insérer un élément dans la liste</h4><br>
Nous allons passer assez rapidement sur cette seconde méthode. On peut, très simplement, insérer un objet dans une liste, à l'endroit voulu. On utilise pour cela la méthode <span class="italique">insert</span>.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span> <span class="o">=</span> <span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">,</span> <span class="s">'e'</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">'c'</span><span class="p">)</span> <span class="c"># on insère 'c' à l'indice 2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">ma_liste</span><span class="p">)</span>
<span class="go">['a', 'b', 'c', 'd', 'e']</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Quand on demande d'insérer <span class="italique">'c'</span> à l'indice 2, la méthode va décaler les objets d'indice supérieur ou égal à 2. <span class="italique">'c'</span> va donc s'intercaler entre <span class="italique">'b'</span> et <span class="italique">'d'</span>.<br>
<br>
<h4>Concaténation de listes</h4><br>
On peut également agrandir des listes en les concaténant avec une autre :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste1</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">ma_liste2</span><span class="p">)</span> <span class="c"># on insère ma_liste2 à la fin de ma_liste1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">ma_liste1</span><span class="p">)</span>
<span class="go">[3, 4, 5, 8, 9, 10]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste1</span> <span class="o">+</span> <span class="n">ma_liste2</span>
<span class="go">[3, 4, 5, 8, 9, 10]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste1</span> <span class="o">+=</span> <span class="n">ma_liste2</span> <span class="c"># identique à extend</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">ma_liste1</span><span class="p">)</span>
<span class="go">[3, 4, 5, 8, 9, 10]</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Voici les différentes façons de concaténer des listes. Vous pouvez remarquer l'opérateur <span class="italique">+</span> qui concatène deux listes entre elles et retourne le résultat. On peut utiliser <span class="italique">+=</span> assez logiquement pour étendre une liste. Cette façon de faire revient au même qu'utiliser la méthode <span class="italique">extend</span>.<br>
<br>
<h3>Suppression d'éléments d'une liste</h3><br>
Nous allons voir rapidement comment supprimer des éléments d'une liste avant d'apprendre à les parcourir. Vous allez vite pouvoir constater que ça se fait assez simplement. Nous allons voir deux méthodes pour supprimer des éléments d'une liste :<br>
<br>
<ul>
<li>Le mot-clé <span class="italique">del</span></li>
<li>La méthode <span class="italique">remove</span></li>
</ul><br>
<br>
<h4>Le mot-clé del</h4><br>
C'est un des mot-clés de Python, que j'aurais pu vous montrer plus tôt. Mais les applications de <span class="italique">del</span> me semblaient assez peu pratiques avant d'aborder les listes.<br>
<br>
<span class="italique">del</span> (abréviation de delete) signifie "supprimer" en anglais. Son utilisation est des plus simple : <span class="code2 python"><span class="k">del</span> <span class="n">variable_a_supprimer</span>
</span>. Voyons un exemple :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">variable</span> <span class="o">=</span> <span class="mi">34</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">variable</span>
<span class="go">34</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">del</span> <span class="n">variable</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">variable</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n-Identifier">&lt;module&gt;</span>
<span class="nc">NameError</span>: <span class="n-Identifier">name 'variable' is not defined</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez, après l'utilisation de <span class="italique">del</span>, la variable n'existe plus. Python l'efface tout simplement. Mais on peut également utiliser <span class="italique">del</span> pour supprimer des éléments d'un ensemble, comme une liste, et c'est ce qui nous intéresse ici.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">del</span> <span class="n">ma_liste</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c"># on supprime le premier élément de la liste</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span>
<span class="go">[-2, 1, 4, 7, 10]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">del</span> <span class="n">ma_liste</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c"># on supprime le troisième élément de la liste</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span>
<span class="go">[-2, 1, 7, 10]</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si vous entrez <span class="code2 python"><span class="k">del</span> <span class="n">ma_liste</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span>, le premier élément de la liste sera supprimé de <span class="italique">ma_liste</span>. Simple non ?<br>
<br>
<h4>La méthode remove</h4><br>
On peut aussi supprimer des éléments de la liste grâce à la méthode <span class="italique">remove</span> qui prend en paramètre, non pas l'indice de l'élément à supprimer, mais l'élément lui-même.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span> <span class="o">=</span> <span class="p">[</span><span class="mi">31</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">35</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span>
<span class="go">[31, 33, 34, 35]</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La méthode <span class="italique">remove</span> parcourt la liste et en retire l'élément que vous lui passez en paramètre. C'est une façon de faire un peu différente et vous appliquerez <span class="italique">del</span> et <span class="italique">remove</span> dans des situations différentes.<br>
<br>
<div class="rmq attention">Attention ! La méthode <span class="italique">remove</span> ne retire que la première occurrence de la valeur trouvée dans la liste.</div><br>
<br>
Notez au passage que le mot-clé <span class="italique">del</span> n'est pas une méthode de liste. Il aurait pu l'être. Mais il s'agit d'une fonctionnalité de Python qu'on retrouve dans la plupart des objets conteneurs, tels que les listes que nous venons de voir, ou les dictionnaires que nous verrons plus tard. D'ailleurs, <span class="italique">del</span> sert plus généralement à supprimer, pas forcément des éléments d'un ensemble mais aussi, comme nous l'avons vu, des variables.<br>
<br>
Nous allons à présent voir comment parcourir une liste, même si vous devez déjà avoir votre petite idée sur la question <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_257586">Le parcours de listes</h2>
		<div class="ss_part_texte">
		Vous avez déjà dû vous faire une idée des méthodes pour parcourir une liste. Je vais passer brièvement dessus, vous ne verrez rien de nouveau ni, je l'espère, de très surprenant :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span> <span class="o">=</span> <span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">,</span> <span class="s">'e'</span><span class="p">,</span> <span class="s">'f'</span><span class="p">,</span> <span class="s">'g'</span><span class="p">,</span> <span class="s">'h'</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="c"># notre indice pour la boucle while</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="n">ma_liste</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">ma_liste</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
<span class="gp">... </span>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c"># on incrémente i, ne pas oublier !</span>
<span class="gp">... </span>
<span class="go">a</span>
<span class="go">b</span>
<span class="go">c</span>
<span class="go">d</span>
<span class="go">e</span>
<span class="go">f</span>
<span class="go">g</span>
<span class="go">h</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">elt</span> <span class="ow">in</span> <span class="n">ma_liste</span><span class="p">:</span> <span class="c"># elt va prendre les valeurs successives des éléments de ma_liste</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">elt</span><span class="p">)</span>
<span class="gp">... </span>
<span class="go">a</span>
<span class="go">b</span>
<span class="go">c</span>
<span class="go">d</span>
<span class="go">e</span>
<span class="go">f</span>
<span class="go">g</span>
<span class="go">h</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il s'agit des mêmes méthodes de parcours que nous avons vues pour les chaînes de caractères, dans le chapitre précédent. Nous allons cependant aller un peu plus loin.<br>
<br>
<h3>La fonction <span class="italique">range</span></h3><br>
Les deux méthodes que nous venons de voir possèdent toutes deux des inconvénients :<br>
<br>
<ul>
<li>La méthode par <span class="italique">while</span> est plus longue à écrire, moins intuitive et elle est perméable aux boucles infinies, si l'on oublie d'incrémenter la variable servant de compteur</li>
<li>La méthode par <span class="italique">for</span> se contente de parcourir la liste en capturant les éléments dans une variable ; sans qu'on puisse savoir où ils sont dans la liste.</li>
</ul><br>
<br>
C'est vrai dans le cas que nous venons de voir. Certains codeurs vont combiner les deux méthodes pour plus de flexibilité, mais très souvent le code obtenu est moins lisible. Heureusement, les développeurs de Python ont pensé à nous.<br>
<br>
La fonction <span class="italique">range</span> prend au minimum un paramètre, un nombre. Elle retourne une liste contenant tous les entiers de 0 au nombre passé en paramètre moins un.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="go">[0, 1, 2, 3, 4]</span>
<span class="go">&gt;&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On utilise parfois cette fonction pour parcourir une liste par la méthode <span class="italique">for</span>, mais en utilisant les indices.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ma_liste</span><span class="p">)):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">ma_liste</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Décortiquez un peu cet exemple : on appelle la méthode <span class="italique">range</span> et on lui passe en paramètre la taille de <span class="italique">ma_liste</span>. La fonction <span class="italique">range</span> va donc retourner une liste allant de 0 à la taille de la liste moins un. La liste obtenue est donc la liste des indices de <span class="italique">ma_liste</span>. La boucle <span class="italique">for</span> travaille sur cette liste d'indice et elle va placer successivement chaque indice dans la variable <span class="italique">i</span>.<br>
<br>
<div class="rmq question">Pourquoi s'embêter à utiliser <span class="italique">range</span> ? On arrivait très bien à parcourir une liste avec <span class="code2 python"><span class="k">for</span> <span class="n">elt</span> <span class="ow">in</span> <span class="n">ma_liste</span>
</span>.</div><br>
<br>
En effet. Mais dans certaines situations, que nous allons justement voir un peu plus bas, il est plus utile d'avoir les indices d'une liste que les éléments qu'elle contient. Souvenez-vous que grâce aux indices, on peut accéder aux éléments mais que l'inverse n'est pas vrai.<br>
<br>
<h3>La fonction <span class="italique">enumerate</span></h3><br>
Utiliser la fonction <span class="italique">range</span> pour parcourir une liste n'est ni très intuitif ni très élégant. Voici une autre façon de faire que je vais détailler plus bas :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="syntax"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">ma_liste</span> <span class="o">=</span> <span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">,</span> <span class="s">'e'</span><span class="p">,</span> <span class="s">'f'</span><span class="p">,</span> <span class="s">'g'</span><span class="p">,</span> <span class="s">'h'</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">elt</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">ma_liste</span><span class="p">):</span>
<span class="o">...</span>     <span class="k">print</span><span class="p">(</span><span class="s">"A l'indice {0} se trouve {1}."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">elt</span><span class="p">))</span>
<span class="o">...</span> 
<span class="n">A</span> <span class="n">l</span><span class="s">'indice 0 se trouve a.</span>
<span class="n">A</span> <span class="n">l</span><span class="s">'indice 1 se trouve b.</span>
<span class="n">A</span> <span class="n">l</span><span class="s">'indice 2 se trouve c.</span>
<span class="n">A</span> <span class="n">l</span><span class="s">'indice 3 se trouve d.</span>
<span class="n">A</span> <span class="n">l</span><span class="s">'indice 4 se trouve e.</span>
<span class="n">A</span> <span class="n">l</span><span class="s">'indice 5 se trouve f.</span>
<span class="n">A</span> <span class="n">l</span><span class="s">'indice 6 se trouve g.</span>
<span class="n">A</span> <span class="n">l</span><span class="s">'indice 7 se trouve h.</span>
<span class="o">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pas de panique ! <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"><br>
<br>
Nous avons ici une boucle <span class="italique">for</span> un peu surprenante. Entre <span class="italique">for</span> et <span class="italique">in</span>, nous avons deux variables, séparées par une virgule.<br>
<br>
Regardons d'abord ce que renvoie la fonction <span class="italique">enumerate</span> :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="nb">enumerate</span><span class="p">(</span><span class="n">ma_liste</span><span class="p">)</span>
<span class="go">((0, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (4, 'e'), (5, 'f'), (6, 'g'), (7, 'h'))</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ça ne vous aide peut-être pas beaucoup. En fait, <span class="italique">enumerate</span> prend une liste en paramètre et retourne un <span class="italique">tuple</span>, contenant lui-même d'autres <span class="italique">tuples</span>, associant un indice à l'élément correspondant. Nous verrons les <span class="italique">tuples</span> un peu plus loin, pour l'instant sachez qu'il s'agit simplement de listes que l'on ne peut pas modifier.<br>
<br>
Ce n'est sans doute pas encore très clair. Essayons d'afficher ça un peu mieux :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">elt</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">ma_liste</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">elt</span><span class="p">)</span>
<span class="gp">... </span>
<span class="go">(0, 'a')</span>
<span class="go">(1, 'b')</span>
<span class="go">(2, 'c')</span>
<span class="go">(3, 'd')</span>
<span class="go">(4, 'e')</span>
<span class="go">(5, 'f')</span>
<span class="go">(6, 'g')</span>
<span class="go">(7, 'h')</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Quand on parcourt chaque élément de notre <span class="italique">tuple</span> retourné par <span class="italique">enumerate</span>, on voit d'autres <span class="italique">tuples</span> qui contiennent deux éléments : d'abord l'indice, puis ensuite l'objet se trouvant à cet indice, dans la liste passée en paramètre de la fonction <span class="italique">enumerate</span>.<br>
<br>
Si les parenthèses vous déconcertent trop, vous pouvez imaginer à la place des crochets, cela revient au même dans cet exemple.<br>
<br>
Quand on utilise <span class="italique">enumerate</span>, on capture l'indice et l'élément dans deux variables distinctes. Voyons un autre exemple pour comprendre ce mécanisme :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">autre_liste</span> <span class="o">=</span> <span class="p">[</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s">'a'</span><span class="p">],</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="s">'d'</span><span class="p">],</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="s">'g'</span><span class="p">],</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">26</span><span class="p">,</span> <span class="s">'z'</span><span class="p">],</span>
<span class="gp">... </span><span class="p">]</span> <span class="c"># on a étalé la liste sur plusieurs lignes</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">nb</span><span class="p">,</span><span class="n">lettre</span> <span class="ow">in</span> <span class="n">autre_liste</span><span class="p">:</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"La lettre {0} est la {1}e de l'alphabet."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">lettre</span><span class="p">,</span> <span class="n">nb</span><span class="p">))</span>
<span class="gp">... </span>
<span class="go">La lettre a est la 1e de l'alphabet.</span>
<span class="go">La lettre d est la 4e de l'alphabet.</span>
<span class="go">La lettre g est la 7e de l'alphabet.</span>
<span class="go">La lettre z est la 26e de l'alphabet.</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
J'espère que c'est assez clair dans votre esprit. Dans le cas contraire, décomposez ces exemples, le déclic devrait se faire.<br>
<br>
<span class="italique">N.B.</span> : On écrit ici la définition de la liste sur plusieurs lignes pour des raisons de lisibilité. On n'est pas obligé de mettre des anti-slashs <strong>\</strong> en fin de ligne car, tant que Python ne trouve pas de crochet fermant la liste, il continue d'attendre sans interpréter la ligne. Vous pouvez d'ailleurs le constater avec les points qui remplacent les chevrons au début de la ligne, tant que la liste n'a pas été refermée.<br>
<br>
<div class="rmq attention">Quand on travaille sur une liste que l'on parcours en même temps, on peut se retrouver face à des erreurs assez étranges, qui paraissent souvent incompréhensibles au début.</div><br>
<br>
Par exemple, des exceptions <span class="italique">IndexError</span> si on tente de supprimer certains éléments d'une liste en la parcourant.<br>
<br>
Nous verrons dans le chapitre suivant comment faire cela proprement, pour l'heure qu'il vous suffise de vous méfier d'un parcours qui modifie une liste, sa structure surtout. D'une façon générale, évitez de parcourir une liste dont la taille évolue en même temps.<br>
<br>
Allez ! On va jeter un coup d'oeil aux tuples, pour conclure ce chapitre <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_257580">Un petit coup d'œil aux tuples</h2>
		<div class="ss_part_texte">
		Nous avons brièvement vu les <span class="italique">tuples</span> un peu plus haut, grâce à la fonction <span class="italique">enumerate</span>. J'avais dit alors que les <span class="italique">tuples</span> étaient des listes immutables, que l'on ne pouvait modifier. En fait, vous allez vous rendre compte que nous utilisons depuis longtemps des <span class="italique">tuples</span> sans nous en rendre compte.<br>
<br>
Un <span class="italique">tuple</span> se définit comme une liste, sauf qu'on utilise comme délimiteur des parenthèses au lieu des crochets :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">tuple_vide</span> <span class="o">=</span> <span class="p">()</span>
<span class="n">tuple_non_vide</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,)</span>
<span class="n">tuple_non_vide</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Une petite subtilité ici : si on veut créer un <span class="italique">tuple</span> avec un unique élément, on doit quand même mettre une virgule après. Sinon, Python va automatiquement supprimer les parenthèses et on se retrouvera avec une variable lambda et non un <span class="italique">tuple</span> contenant cette variable.<br>
<br>
<div class="rmq question">Mais à quoi ça sert ?</div><br>
<br>
Il est assez rare que l'on travaille directement sur des <span class="italique">tuples</span>. Ce sont après tout des types que l'on ne peut modifier. On ne peut supprimer d'éléments d'un tuple, ni en ajouter. Cela vous paraît peut-être encore assez abstrait, mais il peut être utile de travailler sur des données sans pouvoir les modifier.<br>
<br>
Passons en attendant. Voyons plutôt les cas où nous avons utilisé des tuples sans le savoir.<br>
<br>
<h3>Affectation multiple</h3><br>
Tous les cas que nous allons voir sont des cas d'affectation multiple. Vous vous souvenez ?<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span><span class="mi">4</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span>
<span class="go">3</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span>
<span class="go">4</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On a également utilisé cette syntaxe pour permuter deux variables. Et bien, cette syntaxe passe par des tuples qui ne sont pas déclarés explicitement. Vous pourriez écrire :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Quand Python trouve plusieurs variables ou valeurs séparées par des virgules et sans délimiteur, il va les mettre dans des tuples. Dans le premier exemple, les parenthèses sont sous-entendues et Python comprend ce qu'il doit faire.<br>
<br>
<h3>Une fonction retournant plusieurs valeurs</h3><br>
Nous ne l'avons pas vu jusqu'ici, mais une fonction peut retourner deux valeurs, ou même plus :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">decomposer</span><span class="p">(</span><span class="n">entier</span><span class="p">,</span> <span class="n">divise_par</span><span class="p">):</span>
    <span class="sd">"""Cette fonction retourne la partie entière et le reste de</span>
<span class="sd">    entier / divise_par .</span>
<span class="sd">    """</span>
    <span class="n">p_e</span> <span class="o">=</span> <span class="n">entier</span> <span class="o">//</span> <span class="n">divise_par</span>
    <span class="n">reste</span> <span class="o">=</span> <span class="n">entier</span> <span class="o">%</span> <span class="n">divise_par</span>
    <span class="k">return</span> <span class="n">p_e</span><span class="p">,</span> <span class="n">reste</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et on peut ensuite capturer la partie entière et le reste dans deux variables, au retour de la fonction :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">partie_entiere</span><span class="p">,</span> <span class="n">reste</span> <span class="o">=</span> <span class="n">decomposer</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">partie_entiere</span>
<span class="go">6</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">reste</span>
<span class="go">2</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Là encore, on passe par des tuples sans que ce soit indiqué explicitement à Python. Si vous essayez de faire <span class="code2 python"><span class="n">retour</span> <span class="o">=</span> <span class="n">decomposer</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span>, vous allez capturer un tuple contenant deux éléments : la partie entière et le reste de 20 divisé par 3.<br>
<br>
Nous verrons plus loin d'autres exemples de tuples, et d'autres utilisations. Je pense que ça suffit pour cette fois. En attendant, direction le QCM !
		</div>
		<hr>
		
	<div id="chap_conclusion">
	J'espère que ce petit tour d'horizon vous a plu, car on n'en a pas fini avec les listes. Dès le prochain chapitre, on attaque des concepts un peu plus difficiles, mais qu'il vous faut connaître. N'hésitez pas à faire une petite pause entre ces chapitres pour être bien sûr de maîtriser les concepts présentés.
	</div>
	
	<hr>
	<h1 id="chap_268450">Les listes et tuples (2/2)</h1>
	<div id="chap_intro">
	Les listes sont très utilisées en Python. Elles sont liées à pas mal de fonctionnalités, dont certaines plutôt complexes. Aussi, j'ai préféré scinder mon approche des listes en deux chapitres. Vous allez voir dans celui-ci quelques fonctionnalités qui ne s'appliquent qu'aux listes et aux tuples, et qui pourront vous être extrêmement utiles <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Je vous conseille donc, avant tout, d'être bien à l'aise avec les listes, création, parcours, édition, suppression...<br>
<br>
D'autre part, comme la plupart des chapitres abordés, je ne peux faire un tour d'horizon de toutes les fonctionnalités de tous les objets présentés. Je vous invite donc à lire la documentation pour une liste exhaustive des méthodes, en tapant <span class="code2 python"><span class="n">help</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span>.<br>
<br>
C'est parti ! <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies">
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_268451">Entre chaînes et listes</h2>
		<div class="ss_part_texte">
		Nous allons voir un moyen de transformer des chaînes en listes, et réciproquement.<br>
<br>
Il est assez surprenant, de prime abord, d'avoir une conversion possible entre ces deux types qui sont tout de même assez différents. Mais comme on va le voir, il ne s'agit pas d'une réelle conversion. Il va être difficile de démontrer l'utilité tout de suite, mieux valent quelques exemples <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Des chaînes aux listes</h3><br>
Pour « convertir » une chaîne en liste, on va utiliser une méthode de chaîne, nommée <span class="italique">split</span> ( « découper » en anglais). Cette méthode prend un paramètre, une autre chaîne, souvent d'un caractère, qui définit comment on va découper notre chaîne initiale.<br>
<br>
C'est un peu compliqué et ça paraît très tordu... mais regardez plutôt :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_chaine</span> <span class="o">=</span> <span class="s">"Bonjour à tous"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_chaine</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">" "</span><span class="p">)</span>
<span class="go">['Bonjour', 'à', 'tous']</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On passe en paramètre de la méthode <span class="italique">split</span> une chaîne contenant une unique espace. La méthode retourne une liste contenant les trois mots de notre petite phrase. Chaque mot se trouve dans une case de la liste.<br>
<br>
C'est assez simple en fait : quand on appelle la méthode <span class="italique">split</span>, elle va découper la chaîne en fonction du paramètre donné, ici la première case de la liste va être du début jusqu'à la première espace (non incluse), puis de la première espace à la seconde, ainsi de suite jusqu'à la fin de la chaîne.<br>
<br>
Sachez que <span class="italique">split</span> possède un paramètre par défaut, un code qui définit les espaces, les tabulations et les sauts de ligne. Donc vous pouvez très bien faire <span class="code2 python"><span class="n">ma_chaine</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span>, ça revient ici au même.<br>
<br>
<h3>Des listes aux chaînes</h3><br>
Voyons l'inverse à présent : si on a une liste contenant des chaînes de caractères que nous souhaitons rassembler en une seule. On utilise la méthode de chaîne <span class="italique">join</span> (joindre en anglais <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> ). Sa syntaxe d'utilisation est un peu surprenante :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Bonjour'</span><span class="p">,</span> <span class="s">'à'</span><span class="p">,</span> <span class="s">'tous'</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s">" "</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ma_liste</span><span class="p">)</span>
<span class="go">'Bonjour à tous'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
En paramètre de la méthode <span class="italique">join</span>, on passe la liste des chaînes que l'on souhaite « ressouder ». La méthode va travailler sur l'objet qui l'appelle, ici une chaîne de caractères contenant une unique espace. Elle va insérer cette chaîne entre chaque chaîne de la liste, ce qui au final nous donne la chaîne de départ, <span class="italique">'Bonjour à tous'</span>.<br>
<br>
<div class="rmq question">N'aurait-il pas été plus simple ou plus logique de faire une méthode de liste, prenant en paramètre la chaîne faisant la jonction ?</div><br>
<br>
Ce choix est en effet contesté, mais je ne trancherai pas pour ma part. Le fait est que c'est cette méthode qui a été choisie, et avec un peu d'habitude on arrive à bien lire le résultat obtenu. D'ailleurs, nous allons voir comment appliquer concrètement ces deux méthodes <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Une application pratique</h3><br>
Admettons que nous avons un nombre flottant dont nous souhaitons afficher la partie entière et la partie flottante, mais uniquement les trois premières décimales. Autrement dit, si on a un nombre flottant tel que <span class="italique">3.999999999999998</span>, on souhaite avoir comme résultat <span class="italique">3.999</span>. D'ailleurs, ce serait plus joli si on remplaçait le point décimal par la virgule, à laquelle nous sommes plus habitués <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Là encore, je vous invite à essayer de faire ce petit exercice par vous-même. On part du principe que la valeur de retour de la fonction chargée de la pseudo-conversion est une chaîne de caractères. Voici quelques exemples d'utilisation de la fonction que vous devriez coder :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">afficher_flottant</span><span class="p">(</span><span class="mf">3.99999999999998</span><span class="p">)</span>
<span class="go">'3,999'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">afficher_flottant</span><span class="p">(</span><span class="mf">1.5</span><span class="p">)</span>
<span class="go">'1,5'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Voici la correction que je vous propose :<br>
<br>
<span class="spoiler_hidden">Secret <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden"><br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">afficher_flottant</span><span class="p">(</span><span class="n">flottant</span><span class="p">):</span>
    <span class="sd">"""Fonction prenant en paramètre un flottant et retournant une chaîne</span>
<span class="sd">    de caractères avec ce nombre tronqué. La partie flottante</span>
<span class="sd">    doit être d'une longueur maximum de 3 caractères.</span>

<span class="sd">    De plus, on va remplacer le point décimal par la virgule.</span>
<span class="sd">    """</span>
    <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">flottant</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="nb">float</span><span class="p">:</span>
        <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s">"le paramètre attendu doit être un flottant"</span><span class="p">)</span>
    <span class="n">flottant</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">flottant</span><span class="p">)</span>
    <span class="n">partie_entiere</span><span class="p">,</span> <span class="n">partie_flottante</span> <span class="o">=</span> <span class="n">flottant</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">"."</span><span class="p">)</span>
    <span class="c"># la partie entière n'est pas à modifier. Seule la partie flottante</span>
    <span class="c"># doit être tronquée</span>
    <span class="k">return</span> <span class="s">","</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">partie_entiere</span><span class="p">,</span> <span class="n">partie_flottante</span><span class="p">[:</span><span class="mi">3</span><span class="p">]])</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
En s'assurant que le type passé en paramètre est bien un flottant, on assure qu'il n'y aura pas d'erreurs lors du fractionnement de la chaîne. On est sûr qu'il y aura forcément une partie entière et une partie flottante séparées par un point, même si la partie flottante n'est constituée que d'un 0. Si vous n'y êtes pas arrivé par vous-même, regardez bien cette solution, elle n'est pas forcément simple au premier coup d'oeil. On fait intervenir un certain nombre de mécanismes que vous avez vus il y a peu, tâchez de bien les comprendre.<br>
</div></div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_268449">Les listes et paramètres de fonctions</h2>
		<div class="ss_part_texte">
		Nous allons droit vers une fonctionnalité des plus intéressantes, qui fait une partie de la puissance de Python. Nous allons étudier un cas assez particulier avant de généraliser : les fonctions avec une liste inconnue de paramètres.<br>
<br>
Notez malgré tout que ce point est assez délicat. Si vous n'arrivez pas bien à le comprendre, laissez cette sous-partie de côté, ça ne vous pénalisera pas <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Les fonctions dont on ne connaît pas le nombre de paramètres à l'avance</h3><br>
Vous devriez tout de suite penser à la fonction <span class="italique">print</span> : on lui passe une liste de paramètres que la fonction va afficher, dans l'ordre où ils sont placés, séparés par une espace (ou tout autre délimiteur choisi).<br>
<br>
Vous n'allez peut-être pas trouver sur le moment d'applications de cette fonctionnalité, mais tôt ou tard cela arrivera. La syntaxe est tellement simple que c'en est déconcertant :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">fonction</span><span class="p">(</span><span class="o">*</span><span class="n">parametres</span><span class="p">):</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On place une étoile <span class="italique">*</span> devant le nom du paramètre qui accueillera la liste des paramètres. Voyons un peu plus précisément comment cela se présente :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">fonction_inconnue</span><span class="p">(</span><span class="o">*</span><span class="n">parametres</span><span class="p">):</span>
<span class="gp">... </span>    <span class="sd">"""Test d'une fonction pouvant être appelée avec un nombre variable</span>
<span class="gp">... </span><span class="sd">    de paramètres.</span>
<span class="gp">... </span><span class="sd">    """</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"J'ai reçu : {0}."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">parametres</span><span class="p">))</span>
<span class="gp">... </span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fonction_inconnue</span><span class="p">()</span> <span class="c"># on appelle la fonction sans paramètre</span>
<span class="go">J'ai reçu : ().</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fonction_inconnue</span><span class="p">(</span><span class="mi">33</span><span class="p">)</span>
<span class="go">J'ai reçu : (33,).</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fonction_inconnue</span><span class="p">(</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'e'</span><span class="p">,</span> <span class="s">'f'</span><span class="p">)</span>
<span class="go">J'ai reçu : ('a', 'e', 'f').</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">var</span> <span class="o">=</span> <span class="mf">3.5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fonction_inconnue</span><span class="p">(</span><span class="n">var</span><span class="p">,</span> <span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="s">"..."</span><span class="p">)</span>
<span class="go">J'ai reçu : (3.5, [4], '...').</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je pense que cela suffit. Comme vous le voyez, on peut appeler notre <span class="italique">fonction_inconnue</span> avec un nombre indéterminé de paramètres, de 0 à l'infini (enfin, théoriquement <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> ). Le fait de préciser une étoile <span class="italique">*</span> devant le nom du paramètre fait que Python va placer tous les paramètres de la fonction dans un <span class="italique">tuple</span>, que l'on peut ensuite traiter comme on le souhaite.<br>
<br>
<div class="rmq question">Et les paramètres nommés dans l'histoire ? Comment sont-ils insérés dans le <span class="italique">tuple</span> ?</div><br>
<br>
Ils ne le sont pas. Si vous entrez <span class="code2 python"><span class="n">fonction_inconnue</span><span class="p">(</span><span class="n">couleur</span><span class="o">=</span><span class="s">"rouge"</span><span class="p">)</span>
</span>, vous allez avoir une erreur : <span class="italique">fonction_inconnue() got an unexpected keyword argument 'couleur' </span>. Nous verrons dans le chapitre suivant comment capturer ces paramètres nommés.<br>
<br>
Vous pouvez bien entendu définir une fonction avec plusieurs paramètres que l'on doit rentrer quoi qu'il arrive, et ensuite une liste de paramètres variables :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">fonction_inconnue</span><span class="p">(</span><span class="n">nom</span><span class="p">,</span> <span class="n">prenom</span><span class="p">,</span> <span class="o">*</span><span class="n">commentaires</span><span class="p">):</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Dans cet exemple de définition de fonction, vous devez impérativement préciser un nom et un prénom, et ensuite vous mettez ce que vous voulez en commentaire, aucun paramètre, un, deux... ce que vous voulez <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
<div class="rmq attention">Si on définit une liste variable de paramètres, elle doit se trouver après la liste des paramètres standards.</div><br>
<br>
Cela est évident au fond. Vous ne pouvez avoir une définition de fonction comme <span class="code2 python"><span class="k">def</span> <span class="nf">fonction_inconnue</span><span class="p">(</span><span class="o">*</span><span class="n">parametres</span><span class="p">,</span> <span class="n">nom</span><span class="p">,</span> <span class="n">prenom</span><span class="p">)</span>
</span>. En revanche, si vous souhaitez avoir des paramètres nommés, il faut les mettre après cette liste. Les paramètres nommés sont un peu une exception, puisqu'ils ne figureront de toute façon pas dans le <span class="italique">tuple</span> obtenu. Voyons par exemple la définition de la fonction <span class="italique">print</span>.<br>
<br>
<span class="citation">Citation</span><div class="citation2"><br>
print(value, ..., sep=' ', end='\n', file=sys.stdout)<br>
</div><br>
<br>
Ne nous occupons pas du dernier paramètre. Il définit le descripteur vers lequel <span class="italique">print</span> envoie ses données, par défaut c'est l'écran.<br>
<br>
<div class="rmq question">D'où viennent ces points de suspension dans les paramètres ?</div><br>
<br>
En fait, il s'agit d'un affichage un peu plus agréable. Si on veut réellement avoir la définition en code Python, on retombera plutôt sur :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">print</span><span class="p">(</span><span class="o">*</span><span class="n">values</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">' '</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">):</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Petit exercice : faire une fonction <span class="italique">afficher</span> identique à <span class="italique">print</span>, c'est-à-dire prenant un nombre indéterminé de paramètres, les affichant en les séparant à l'aide du paramètre nommé <span class="italique">sep</span> et terminant l'affichage par la variable <span class="italique">fin</span>. Notre fonction <span class="italique">afficher</span> ne comptera pas de paramètre <span class="italique">file</span>. En outre, elle devra passer par <span class="italique">print</span> pour afficher (on ne connaît pas encore d'autres façons de faire). La seule contrainte est que l'appel à <span class="italique">print</span> ne doit compter qu'un seul paramètre non nommé. Autrement dit, avant l'appel à <span class="italique">print</span>, la chaîne devra avoir été déjà formatée, prête à l'affichage.<br>
<br>
Pour que ce soit plus clair, je vous mets la définition de la fonction, ainsi que la <span class="italique">docstring</span> que j'ai écrite :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">afficher</span><span class="p">(</span><span class="o">*</span><span class="n">parametres</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">' '</span><span class="p">,</span> <span class="n">fin</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">):</span>
    <span class="sd">"""Fonction chargée de reproduire le comportement de print.</span>
<span class="sd">    Elle doit finir par faire appel à print pour afficher le résultat, mais</span>
<span class="sd">    les paramètres devront déjà avoir été formatés. On doit passer à print</span>
<span class="sd">    une unique chaîne, en lui spécifiant de ne rien mettre à la fin :</span>

<span class="sd">    print(chaine, end='')</span>
<span class="sd">    """</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Voici la solution que je vous propose :<br>
<br>
<span class="spoiler_hidden">Secret <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden"><br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">afficher</span><span class="p">(</span><span class="o">*</span><span class="n">parametres</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">' '</span><span class="p">,</span> <span class="n">fin</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">):</span>
    <span class="sd">"""Fonction chargée de reproduire le comportement de print.</span>
<span class="sd">    Elle doit finir par faire appel à print pour afficher le résultat, mais</span>
<span class="sd">    les paramètres devront déjà avoir été formatés. On doit passer à print</span>
<span class="sd">    une unique chaîne, en lui spécifiant de ne rien mettre à la fin :</span>

<span class="sd">    print(chaine, end='')</span>
<span class="sd">    """</span>
    <span class="c"># les paramètres sont sous la forme d'un tuple. Or, on a besoin de</span>
    <span class="c"># les convertir. Mais on ne peut pas modifier un tuple.</span>
    <span class="c"># On a plusieurs possibilités, ici je choisis de convertir</span>
    <span class="c"># le tuple en liste.</span>
    <span class="n">parametres</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">parametres</span><span class="p">)</span>
    <span class="c"># on va commencer par convertir toutes les valeurs en chaîne, sinon</span>
    <span class="c"># on va avoir quelques problèmes lors du join</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">parametre</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">parametres</span><span class="p">):</span>
        <span class="n">parametres</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">parametre</span><span class="p">)</span>
    <span class="c"># la liste des paramètres ne contient plus que des chaînes de caractères</span>
    <span class="c"># à présent on va constituer la chaîne finale</span>
    <span class="n">chaine</span> <span class="o">=</span> <span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">parametres</span><span class="p">)</span>
    <span class="c"># on ajoute le paramètre fin à la fin de la chaîne</span>
    <span class="n">chaine</span> <span class="o">+=</span> <span class="n">fin</span>
    <span class="c"># on affiche l'ensemble</span>
    <span class="k">print</span><span class="p">(</span><span class="n">chaine</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
</div></div><br>
<br>
J'espère que ce n'était pas trop difficile, et que si vous avez fait des erreurs, vous avez pu les comprendre.<br>
<br>
Ce n'est pas du tout grave si vous avez réussi à coder cette fonction d'une manière différente. Au contraire, tant que vous comprenez la solution que je propose <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Transformer une liste en paramètres de fonction</h3><br>
C'est peut-être un peu moins fréquent, mais vous devez connaître ce mécanisme puisqu'il complète parfaitement le premier. Si vous avez un <span class="italique">tuple</span>, ou une liste contenant des paramètres qui doivent être passés à une fonction, vous pouvez très simplement les transformer en paramètres lors de l'appel. Le seul problème c'est que côté démonstration je me vois un peu limité.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">liste_des_parametres</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">36</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">liste_des_parametres</span><span class="p">)</span>
<span class="go">1 4 9 16 25 36</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce n'est pas bien spectaculaire, et pourtant c'est une fonctionnalité très puissante du langage. Là, on a une liste contenant des paramètres, et on la transforme en une liste de paramètres de la fonction <span class="italique">print</span>. Donc, au lieu que ce soit la liste qui soit affichée, ce sont tous les nombres, séparés par des espaces. C'est exactement comme si vous aviez fait <span class="code2 python"><span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>
</span>.<br>
<br>
<div class="rmq question">Mais quel intérêt ? Ça ne change pas grand-chose, et il est rare que l'on capture les paramètres d'une fonction dans une liste, non ?</div><br>
<br>
Oui je vous l'accorde. Ici l'intérêt ne saute pas aux yeux. Mais un peu plus tard, vous pourrez tomber sur des applications où les fonctions sont utilisées sans savoir quels paramètres elles attendent réellement. Si on ne connaît pas la fonction que l'on appelle, c'est très pratique. Là encore, vous découvrirez ça dans les chapitres suivants ou dans certains projets. Essayez de garder à l'esprit ce mécanisme de transformation.<br>
<br>
On utilise une étoile <span class="italique">*</span> dans les deux cas. Si c'est dans une définition de fonction, ça signifie que les paramètres entrés non attendus lors de l'appel seront capturés dans la variable, sous la forme d'un <span class="italique">tuple</span>. Si c'est dans un appel de fonction, au contraire, cela signifie que la variable sera décomposée en plusieurs paramètres envoyés à la fonction.<br>
<br>
J'espère que vous êtes encore en forme, on attaque le point que je considère comme le plus dur de ce chapitre, mais aussi le plus intéressant. Gardez les yeux ouverts <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> !
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_268452">Les compréhensions de liste</h2>
		<div class="ss_part_texte">
		Les compréhensions de liste (« <span class="italique">list comprehensions</span> » en anglais) sont un moyen de filtrer ou modifier une liste très simplement. La syntaxe est déconcertante au début, mais vous allez voir que c'est très puissant <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Parcours simple</h3><br>
Les compréhensions de liste permettent de parcourir une liste en en retournant une seconde, modifiée ou filtrée. Pour l'instant, nous allons voir une simple modification :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">liste_origine</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="n">nb</span> <span class="o">*</span> <span class="n">nb</span> <span class="k">for</span> <span class="n">nb</span> <span class="ow">in</span> <span class="n">liste_origine</span><span class="p">]</span>
<span class="go">[0, 1, 4, 9, 16, 25]</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je vous avais prévenus <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
Étudions un peu cette ligne. Comme vous avez pu le deviner, elle signifie en langage plus conventionnel « Mettre au carré tous les nombres contenus dans la liste d'origine. » Nous trouvons dans l'ordre, entre les crochets qui sont les délimiteurs d'une instruction de compréhension de liste :<br>
<br>
<ul>
<li><span class="code2 python"><span class="n">nb</span> <span class="o">*</span> <span class="n">nb</span>
</span> : la valeur de retour. Pour l'instant, on ne sait pas ce qu'est la variable <span class="italique">nb</span>, on sait juste qu'il faut la mettre au carré. Notez qu'on aurait pu écrire <span class="code2 python"><span class="n">nb</span><span class="o">**</span><span class="mi">2</span>
</span>, cela revient au même.</li>
<li><span class="code2 python"><span class="k">for</span> <span class="n">nb</span> <span class="ow">in</span> <span class="n">liste_origine</span>
</span> : voilà d'où vient notre variable <span class="italique">nb</span>. On reconnaît la syntaxe d'une boucle <span class="italique">for</span>, sauf qu'on n'est pas habitué à la voir sous cette forme.</li>
</ul><br>
<br>
Quand Python interprète cette ligne, il va parcourir la liste d'origine et mettre chaque élément de la liste au carré. Il retourne ensuite le résultat obtenu, sous la forme d'une liste qui est de la même longueur que celle d'origine. On peut naturellement capturer cette nouvelle liste dans une variable.<br>
<br>
<h3>Filtrage avec un branchement conditionnel</h3><br>
On peut aussi filtrer une liste de cette façon :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">liste_origine</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="n">nb</span> <span class="k">for</span> <span class="n">nb</span> <span class="ow">in</span> <span class="n">liste_origine</span> <span class="k">if</span> <span class="n">nb</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">]</span>
<span class="go">[2, 4, 6, 8, 10]</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On rajoute à la fin de l'instruction une condition qui va déterminer quelles valeurs seront transférées dans la nouvelle liste. Ici, on ne transfert que les valeurs paires. Au final, on se retrouve donc avec une liste deux fois plus petite que celle d'origine <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
N.B. : si vous travaillez sur un tuple, au lieu d'une liste, vous remplacerez les crochets encadrant les compréhensions de liste par des parenthèses.<br>
<br>
<h3>Mélangeons un peu tout ça</h3><br>
Il est possible de filtrer et modifier une liste assez simplement. Par exemple, on a une liste contenant les quantités de marchandises stockées pour un magasin. Prenons des fruits, par exemple (je suis pas sectaire vous pouvez prendre des hamburgers si vous préférez <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> ). Chaque semaine, le magasin va emprunter en stock une certaine quantité de chaque fruit, pour les mettre en vente. À ce moment, le stock de chaque fruit diminue naturellement. Inutile en conséquence de garder les fruits qu'on n'a plus en stock.<br>
<br>
Je vais un peu reformuler. On va avoir une liste simple, qui contiendra des entiers, précisant la quantité de chaque fruit (c'est abstrait, les fruits ne sont pas précisés). On va faire une compréhension de liste pour diminuer d'une quantité donnée toutes les valeurs de cette liste, et en profiter pour retirer celles qui sont inférieures ou égales à 0.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">qtt_a_retirer</span> <span class="o">=</span> <span class="mi">7</span> <span class="c"># on retire chaque semaine 7 fruits de chaque sorte</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fruits_stockes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">15</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span> <span class="c"># par exemple 15 pommes, 3 melons...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="n">nb_fruits</span><span class="o">-</span><span class="n">qtt_a_retirer</span> <span class="k">for</span> <span class="n">nb_fruits</span> <span class="ow">in</span> <span class="n">fruits_stockes</span> <span class="k">if</span> <span class="n">nb_fruits</span><span class="o">&gt;</span><span class="n">qtt_a_retirer</span><span class="p">]</span>
<span class="go">[8, 11, 14]</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez, le fruit de quantité 3 n'a pas survécu à cette semaine d'achat. Bien sûr, cet exemple n'est pas complet : on n'a aucun moyen fiable d'associer les nombres restants aux fruits. Mais vous avez un exemple de filtrage et modification d'une liste.<br>
<br>
Prenez bien le temps de regarder ces exemples, les compréhensions de liste ne sont pas forcément simples dans leur syntaxe au début. Faites des essais, c'est aussi le meilleur moyen de comprendre.<br>
<br>
<h3>Nouvelle application concrète</h3><br>
De nouveau, c'est à vous de bosser <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
Nous allons en gros reprendre l'exemple précédent, en le modifiant un peu pour qu'il soit plus cohérent. Nous travaillons toujours avec des fruits, sauf que cette fois nous allons associer un nom de fruit avec la quantité restante en magasin. Nous verrons dans le chapitre suivant comment le faire avec des dictionnaires, pour l'instant on va se contenter de listes :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">inventaire</span> <span class="o">=</span> <span class="p">[</span>
<span class="gp">... </span>    <span class="p">(</span><span class="s">"pomme"</span><span class="p">,</span> <span class="mi">22</span><span class="p">),</span>
<span class="gp">... </span>    <span class="p">(</span><span class="s">"melon"</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
<span class="gp">... </span>    <span class="p">(</span><span class="s">"poire"</span><span class="p">,</span> <span class="mi">18</span><span class="p">),</span>
<span class="gp">... </span>    <span class="p">(</span><span class="s">"fraise"</span><span class="p">,</span> <span class="mi">76</span><span class="p">),</span>
<span class="gp">... </span>    <span class="p">(</span><span class="s">"prune"</span><span class="p">,</span> <span class="mi">51</span><span class="p">),</span>
<span class="gp">... </span><span class="p">]</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Recopiez cette liste. Elle contient des <span class="italique">tuples</span>, contenant chacun un couple, le nom du fruit et sa quantité en magasin.<br>
<br>
Votre mission : trier cette liste en fonction de la quantité de chaque fruit. Autrement dit, on doit obtenir quelque chose comme ça :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="p">[</span>
    <span class="p">(</span><span class="s">"fraise"</span><span class="p">,</span> <span class="mi">76</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"prune"</span><span class="p">,</span> <span class="mi">51</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"pomme"</span><span class="p">,</span> <span class="mi">22</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"poire"</span><span class="p">,</span> <span class="mi">18</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"melon"</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
<span class="p">]</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour ceux qui n'ont pas eu la curiosité de regarder dans la documentation des listes, je signale à votre attention la méthode <span class="italique">sort</span> qui permet de trier une liste. Vous pouvez utiliser également la fonction <span class="italique">sorted</span> qui prend en paramètre la liste à trier (ce n'est pas une méthode de liste, faites attention). <span class="italique">sorted</span> retourne la liste triée, sans modifier l'originale, ce qui peut être utile dans certaines circonstances, précisément celle-ci. À vous de voir, vous pouvez y arriver par les deux méthodes.<br>
<br>
Bien entendu, essayez de faire cet exercice en utilisant les compréhensions de liste.<br>
<br>
Je vous donne juste un petit indice : vous ne pouvez trier la liste comme ça, il faut l'inverser (autrement dit, placer la quantité avant le nom du fruit) pour pouvoir ensuite la trier par quantité.<br>
<br>
Voici la correction que je vous propose :<br>
<br>
<span class="spoiler_hidden">Secret <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden"><br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># on va placer l'inventaire dans l'autre sens, la quantité avant le nom</span>
<span class="n">inventaire_inverse</span> <span class="o">=</span> <span class="p">[(</span><span class="n">qtt</span><span class="p">,</span> <span class="n">nom_fruit</span><span class="p">)</span> <span class="k">for</span> <span class="n">nom_fruit</span><span class="p">,</span><span class="n">qtt</span> <span class="ow">in</span> <span class="n">inventaire</span><span class="p">]</span>
<span class="c"># on n'a plus qu'à trier dans l'ordre décroissant l'inventaire inversé</span>
<span class="c"># on reconstitue l'inventaire trié</span>
<span class="n">inventaire</span> <span class="o">=</span> <span class="p">[(</span><span class="n">nom_fruit</span><span class="p">,</span> <span class="n">qtt</span><span class="p">)</span> <span class="k">for</span> <span class="n">qtt</span><span class="p">,</span><span class="n">nom_fruit</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">inventaire_inverse</span><span class="p">,</span> \
    <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)]</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ca marche, et le traitement a été fait en deux lignes.<br>
<br>
Si vous trouvez ça plus compréhensible, vous pouvez trier l'inventaire inversé avant la reconstitution. Il faut privilégier la lisibilité à la quantité de lignes.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># on va placer l'inventaire dans l'autre sens, la quantité avant le nom</span>
<span class="n">inventaire_inverse</span> <span class="o">=</span> <span class="p">[(</span><span class="n">qtt</span><span class="p">,</span> <span class="n">nom_fruit</span><span class="p">)</span> <span class="k">for</span> <span class="n">nom_fruit</span><span class="p">,</span><span class="n">qtt</span> <span class="ow">in</span> <span class="n">inventaire</span><span class="p">]</span>
<span class="c"># on trie l'inventaire inversé dans l'ordre décroissant</span>
<span class="n">inventaire_inverse</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="c"># et on reconstitue l'inventaire</span>
<span class="n">inventaire</span> <span class="o">=</span> <span class="p">[(</span><span class="n">nom_fruit</span><span class="p">,</span> <span class="n">qtt</span><span class="p">)</span> <span class="k">for</span> <span class="n">qtt</span><span class="p">,</span><span class="n">nom_fruit</span> <span class="ow">in</span> <span class="n">inventaire_inverse</span><span class="p">)]</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Tu n'as pas dit qu'il fallait mettre des parenthèses à la place des crochets quand on travaillait sur des tuples ?</div><br>
<br>
Si, absolument. Mais là on travaille sur une liste. Elle contient des <span class="italique">tuples</span>, c'est entendu, mais l'inventaire est une liste, et c'est l'inventaire que l'on parcourt grâce aux compréhensions de liste.<br>
</div></div><br>
<br>
Faites des essais, entraînez-vous, vous en aurez sans doute besoin, la syntaxe n'est pas très simple au début. Et évitez de tomber dans l'extrême aussi : certaines opérations ne sont pas faisables avec les compréhensions de listes, ou alors sont trop condensées pour être facilement comprises. Dans l'exemple précédent, on aurait très bien pu remplacer nos deux à trois lignes d'instructions par une seule, mais ça aurait été dur à lire. Ne sacrifiez pas la lisibilité au détriment de la longueur de votre code.<br>
<br>
<span class="citation"><a href="http://www.python.org/dev/peps/pep-0020/">Citation</a></span><div class="citation2"><br>
<span class="italique">Readability count.</span><br>
</div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Ce tour d'horizon des listes et tuples est terminé. Cela ne veut pas dire que tout a été vu, bien entendu.<br>
<br>
Quand vous êtes prêts, on attaque un autre type très utilisé, presque plus que les listes : les dictionnaires <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
	</div>
	
	<hr>
	<h1 id="chap_277209">Les dictionnaires</h1>
	<div id="chap_intro">
	Nous y voilà <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Le seigneur des types, dans toute sa splendeur <img src="./Apprendre Python !_files/soleil.png" alt=":soleil:" class="smilies"> .<br>
<br>
Maintenant que vous commencez à vous familiariser avec la programmation orientée objet, nous allons pouvoir aller un peu plus vite sur les manipulations "classiques" de ce type, pour nous concentrer sur quelques petites spécificités propres aux dictionnaires <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_277210">Création et édition de dictionnaires</h2>
		<div class="ss_part_texte">
		Un dictionnaire est un type de données extrêmement puissant et pratique. Il se rapproche des listes sur certains points, mais sur beaucoup il diffère totalement. Python utilise ce type pour représenter beaucoup de fonctionnalités : on peut par exemple retrouver les attributs d'un objet grâce à un dictionnaire particulier.<br>
<br>
Mais n'anticipons pas. Dans les deux chapitres précédents, nous avons découvert les listes. Les objets de ce type sont des objets conteneurs, dans lesquels on trouve d'autres objets. Pour accéder à ces objets contenus, il faut connaître leur position dans la liste. Cette position se traduit par des entiers, des indices, compris entre 0 (inclus) et la taille de la liste (non incluse). Tout ça vous devez déjà le savoir <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Le dictionnaire est aussi un objet conteneur. Il n'a quant à lui aucune structure ordonnée, à la différence des listes. De plus, pour accéder aux objets contenus dans le dictionnaire, on n'utilise pas nécessairement des indices mais des <strong>clés</strong> qui peuvent être de bien des types distincts.<br>
<br>
<h3>Créer un dictionnaire</h3><br>
Là encore, je vous donne le nom de la classe sur laquelle se construit un dictionnaire : <span class="italique">dict</span>. Vous devriez du même coup trouver la première méthode d'instanciation du dictionnaire :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">mon_dictionnaire</span><span class="p">)</span>
<span class="go">&lt;class 'dict'&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span>
<span class="go">{}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c"># du coup, vous devriez trouver la deuxième manière de créer un dictionnaire vide</span>
<span class="gp">... </span><span class="n">mon_dictionnaire</span> <span class="o">=</span> <span class="p">{}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span>
<span class="go">{}</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Les parenthèses délimitent les <span class="italique">tuples</span>, les crochets délimitent les listes et les accolades <span class="italique">{}</span> délimitent les dictionnaires.<br>
<br>
Voyons comment ajouter des clés et valeurs dans notre dictionnaire vide :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span> <span class="o">=</span> <span class="p">{}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span><span class="p">[</span><span class="s">"pseudo"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"Prolixe"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span><span class="p">[</span><span class="s">"mot de passe"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"*"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span>
<span class="go">{'mot de passe': '*', 'pseudo': 'Prolixe'}</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous indiquons entre crochets la clé à laquelle nous souhaitons accéder. Si la clé n'existe pas, elle est ajoutée au dictionnaire avec la valeur spécifiée après le signe <span class="italique">=</span>. Sinon, l'ancienne valeur à l'emplacement indiqué est remplacée par la nouvelle :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span> <span class="o">=</span> <span class="p">{}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span><span class="p">[</span><span class="s">"pseudo"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"Prolixe"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span><span class="p">[</span><span class="s">"mot de passe"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"*"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span><span class="p">[</span><span class="s">"pseudo"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"6pri1"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span>
<span class="go">{'mot de passe': '*', 'pseudo': '6pri1'}</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La valeur <span class="italique">'Prolixe'</span> pointée par la clé <span class="italique">'pseudo'</span> a été remplacée, à la ligne 4, par la valeur <span class="italique">'6pri1'</span>. Cela devrait vous rappeler la création de variables : si la variable n'existe pas, elle est créée, sinon elle est remplacée par la nouvelle valeur.<br>
<br>
Pour accéder à la valeur d'une clé précise, c'est très simple :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span><span class="p">[</span><span class="s">"mot de passe"</span><span class="p">]</span>
<span class="go">'*'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si la clé n'existe pas dans le dictionnaire, une exception de type <span class="italique">KeyError</span> sera levée.<br>
<br>
Généralisons un peu tout ça : nous avons des dictionnaires, qui peuvent contenir d'autres objets. On place et accède à ces objets grâce à des clés. Un dictionnaire ne peut naturellement pas contenir deux clés identiques (comme on l'a vu, la seconde valeur écrase la première). En revanche, rien n'empêche d'avoir deux valeurs identiques dans le dictionnaire.<br>
<br>
Nous avons utilisé ici, pour nos clés et nos valeurs, des chaînes de caractères. Ce n'est absolument pas obligatoire. Vous pouvez utiliser, comme des listes, des entiers comme clé :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span> <span class="o">=</span> <span class="p">{}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">"a"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">"e"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s">"i"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="s">"o"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="s">"u"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="s">"y"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_dictionnaire</span>
<span class="go">{0: 'a', 1: 'e', 2: 'i', 3: 'o', 4: 'u', 5: 'y'}</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On a l'impression de recréer le fonctionnement d'une liste, mais ce n'est pas le cas : rappelez-vous qu'un dictionnaire n'a pas de structure ordonnée. Si vous supprimez par exemple l'indice <span class="italique">2</span>, le dictionnaire, contrairement aux listes, ne va pas décaler toutes les clés d'indice supérieur à l'indice supprimé, il n'a pas été fait pour.<br>
<br>
On peut utiliser quasiment tous les types comme clé, et on peut utiliser absolument tous les types comme valeur.<br>
<br>
Voici un exemple un peu plus atypique de clés : on souhaite représenter un plateau d'échecs. Traditionnellement, on représente une case de l'échiquier par une lettre (de A à H) suivie d'un chiffre (de 1 à 8). La lettre définit la colonne, le chiffre la ligne. Regardez <a href="http://shr.im/qr9">ce schéma</a> si vous n'êtes pas sûr de comprendre.<br>
<br>
Pourquoi ne pas faire un dictionnaire avec, en clé un <span class="italique">tuple</span> contenant la lettre et le chiffre identifiant la case, et en valeur le nom de la pièce ?<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">echiquier</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">echiquier</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">"tour blanche"</span> <span class="c"># en bas à gauche de l'échiquier</span>
<span class="n">echiquier</span><span class="p">[</span><span class="s">'b'</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">"cavalier blanc"</span> <span class="c"># à droite de la tour</span>
<span class="n">echiquier</span><span class="p">[</span><span class="s">'c'</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">"fou blanc"</span> <span class="c"># à droite du cavalier</span>
<span class="n">echiquier</span><span class="p">[</span><span class="s">'d'</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">"reine blanche"</span> <span class="c"># à droite du fou</span>
<span class="c"># ... première ligne des blancs</span>
<span class="n">echiquier</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s">"pion blanc"</span> <span class="c"># devant la tour</span>
<span class="n">echiquier</span><span class="p">[</span><span class="s">'b'</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s">"pion blanc"</span> <span class="c"># devant le cavalier, à droite du pion</span>
<span class="c"># ... seconde ligne des blancs</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Dans cet exemple, nos <span class="italique">tuples</span> sont sous-entendus. On ne les place pas entre parenthèses. Python comprend qu'on veut créer des <span class="italique">tuples</span>, ce qui est bien, mais l'important est que vous le compreniez bien aussi. Certains cours encouragent à toujours placer des parenthèses autour des <span class="italique">tuples</span> quand on les utilise. Pour ma part, je pense que si vous gardez à l'esprit qu'il s'agit de <span class="italique">tuples</span>, que vous n'avez aucune peine à l'identifier, ça suffit. Si vous faites la confusion, mettez des parenthèses autour des tuples en toute circonstance.<br>
<br>
On peut aussi créer des dictionnaires déjà remplis :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">placard</span> <span class="o">=</span> <span class="p">{</span><span class="s">"chemise"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="s">"pantalon"</span><span class="p">:</span><span class="mi">6</span><span class="p">,</span> <span class="s">"tee-shirt"</span><span class="p">:</span><span class="mi">7</span><span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On précise entre accolades la clé, le signe deux points « : » et la valeur correspondante. On sépare les différents couples <span class="italique">clé:valeur</span> par une virgule. C'est d'ailleurs comme ça que Python vous affiche un dictionnaire quand vous lui demandez.<br>
<br>
Certains ont peut-être essayé de créer des dictionnaires déjà remplis avant que je ne le montre. Une petite précision, si vous avez entré une instruction similaire :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">mon_dictionnaire</span> <span class="o">=</span> <span class="p">{</span><span class="s">'pseudo'</span><span class="p">,</span> <span class="s">'mot de passe'</span><span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Dans cette occasion, ce n'est pas un dictionnaire que vous créez, mais un <span class="italique">set</span>.<br>
<br>
Un <span class="italique">set</span> est un objet conteneur, lui aussi, très semblable aux listes, sauf qu'il ne peut contenir deux objets identiques. Vous ne pouvez trouver dans un <span class="italique">set</span> deux fois l'entier <span class="italique">3</span> par exemple. Je vous laisse vous renseigner sur les <span class="italique">sets</span> si vous le désirez.<br>
<br>
<h3>Supprimer des clés d'un dictionnaire</h3><br>
Comme pour les listes, vous avez deux possibilités, mais elles reviennent sensiblement au même :<br>
<br>
<ul>
<li>le mot-clé <span class="italique">del</span> ;</li>
<li>la méthode de dictionnaire <span class="italique">pop</span>.</li>
</ul><br>
<br>
Je ne vais pas m'attarder sur le mot-clé <span class="italique">del</span>, il fonctionne de la même façon que pour les listes :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">placard</span> <span class="o">=</span> <span class="p">{</span><span class="s">"chemise"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="s">"pantalon"</span><span class="p">:</span><span class="mi">6</span><span class="p">,</span> <span class="s">"tee shirt"</span><span class="p">:</span><span class="mi">7</span><span class="p">}</span>
<span class="k">del</span> <span class="n">placard</span><span class="p">[</span><span class="s">"chemise"</span><span class="p">]</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La méthode <span class="italique">pop</span> supprime également la clé précisée, mais elle retourne la valeur supprimée.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">placard</span> <span class="o">=</span> <span class="p">{</span><span class="s">"chemise"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="s">"pantalon"</span><span class="p">:</span><span class="mi">6</span><span class="p">,</span> <span class="s">"tee shirt"</span><span class="p">:</span><span class="mi">7</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">placard</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s">"chemise"</span><span class="p">)</span>
<span class="go">3</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La méthode <span class="italique">pop</span> retourne la valeur qui a été supprimée en même temps que la clé. Ce peut être parfois utile.<br>
<br>
Voilà pour le tour d'horizon. Ce fut bref et vous n'avez pas vu toutes les méthodes, bien entendu. Je vous laisse consulter l'aide pour une liste détaillée.<br>
<br>
<h3>Un peu plus loin</h3><br>
On se sert parfois des dictionnaires pour stocker des fonctions.<br>
<br>
Je vais juste vous montrer rapidement le mécanisme sans trop m'y attarder. Là, je compte sur vous pour faire des tests si vous êtes intéressé. C'est encore un petit quelque chose que vous n'utiliserez peut-être pas tous les jours mais qui peut être utile à connaître.<br>
<br>
Les fonctions sont manipulables comme des variables. Ce sont des objets, un peu particuliers mais des objets tout de même. Donc on peut les prendre pour valeur d'affectation ou les ranger dans des listes ou dictionnaires. C'est pourquoi je présente cette fonctionnalité à présent, auparavant j'aurais manqué d'exemples pratiques.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">print_2</span> <span class="o">=</span> <span class="k">print</span> <span class="c"># l'objet print_2 pointera sur la fonction print</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">print_2</span><span class="p">(</span><span class="s">"Affichons un message"</span><span class="p">)</span>
<span class="go">Affichons un message</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On copie la fonction <span class="italique">print</span> dans une autre variable <span class="italique">print_2</span>. On peut ensuite appeler <span class="italique">print_2</span> et la fonction va afficher le texte entré, tout comme <span class="italique">print</span> l'aurait fait.<br>
<br>
En pratique, on affecte rarement des fonctions comme cela. C'est peu utile. Par contre, on met parfois des fonctions dans des dictionnaires :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">fete</span><span class="p">():</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"C'est la fête."</span><span class="p">)</span>
<span class="gp">... </span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">oiseau</span><span class="p">():</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"Fais comme l'oiseau..."</span><span class="p">)</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fonctions</span> <span class="o">=</span> <span class="p">{}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fonctions</span><span class="p">[</span><span class="s">"fete"</span><span class="p">]</span> <span class="o">=</span> <span class="n">fete</span> <span class="c"># on ne met pas les parenthèses</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fonctions</span><span class="p">[</span><span class="s">"oiseau"</span><span class="p">]</span> <span class="o">=</span> <span class="n">oiseau</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fonctions</span><span class="p">[</span><span class="s">"oiseau"</span><span class="p">]</span>
<span class="go">&lt;function oiseau at 0x00BA5198&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fonctions</span><span class="p">[</span><span class="s">"oiseau"</span><span class="p">]()</span> <span class="c"># on essaye de l'appeler</span>
<span class="go">Fais comme l'oiseau...</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Prenons dans l'ordre si vous le voulez bien :<br>
<br>
<ul>
<li>On commence par définir deux fonctions, <span class="italique">fete</span> et <span class="italique">oiseau</span> (pardonnez l'exemple <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> )</li>
<li>On créée un dictionnaire nommé <span class="italique">fonctions</span></li>
<li>On met dans notre dictionnaire nos fonctions <span class="italique">fete</span> et <span class="italique">oiseau</span>. La clé pointant vers la fonction est le nom de la fonction, tout bêtement, mais on aurait pu lui donner un nom plus original <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> </li>
<li>On essaye d'accéder à notre fonction <span class="italique">oiseau</span> en entrant <span class="italique">fonctions["oiseau"]</span>. Python nous retourne un truc assez moche, <span class="italique">&lt;function oiseau at 0x00BA5198&gt;</span>, mais vous comprenez l'idée : c'est bel et bien notre fonction <span class="italique">oiseau</span>. Mais pour l'appeler, il faut des parenthèses, comme toute fonction qui se respecte</li>
<li>En entrant <span class="code2 python"><span class="n">fonctions</span><span class="p">[</span><span class="s">"oiseau"</span><span class="p">]()</span>
</span>, on accède à la fonction <span class="italique">oiseau</span> et on l'appelle dans la foulée.</li>
</ul><br>
<br>
On peut stocker les références des fonctions dans n'importe quel objet conteneur, des listes, des dictionnaires... et d'autres classes, quand nous apprendrons à en faire. Je ne vous demande pas de comprendre absolument la manipulation des références des fonctions, essayez de retenir cet exemple. Dans tous les cas, nous aurons l'occasion d'y revenir <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_277208">Les méthodes de parcours</h2>
		<div class="ss_part_texte">
		Comme vous pouvez le penser, on ne parcourt pas tout à fait un dictionnaire comme une liste. La différence n'est pas si énorme que ça, mais la plupart du temps, on passe par des méthodes de dictionnaire.<br>
<br>
<h3>Parcours des clés</h3><br>
Peut-être avez-vous déjà essayé par vous-même de parcourir un dictionnaire comme on l'a fait pour les listes :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">{</span><span class="s">"pomme"</span><span class="p">:</span><span class="mi">21</span><span class="p">,</span> <span class="s">"melon"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="s">"poire"</span><span class="p">:</span><span class="mi">31</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">cle</span> <span class="ow">in</span> <span class="n">fruits</span><span class="p">:</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">cle</span><span class="p">)</span>
<span class="gp">... </span>
<span class="go">melon</span>
<span class="go">poire</span>
<span class="go">pomme</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez, si on essaye de parcourir un dictionnaire « simplement », on parcourt en réalité la liste des clés contenues dans le dictionnaire.<br>
<br>
<div class="rmq question">Mais... les clés ne s'affichent pas dans l'ordre dans lesquelles on les a entrées... c'est normal ?</div><br>
<br>
Les dictionnaires n'ont pas de structure ordonnée, gardez-le à l'esprit. Donc en ce sens oui, c'est tout à fait normal.<br>
<br>
Une méthode de la classe <span class="italique">dict</span> permet d'obtenir ce même résultat. Personnellement, je l'utilise plus fréquemment car on est sûr, en lisant l'instruction, que c'est la liste des clés que l'on parcourt :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">{</span><span class="s">"pomme"</span><span class="p">:</span><span class="mi">21</span><span class="p">,</span> <span class="s">"melon"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="s">"poire"</span><span class="p">:</span><span class="mi">31</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">cle</span> <span class="ow">in</span> <span class="n">fruits</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">cle</span><span class="p">)</span>
<span class="gp">... </span>
<span class="go">melon</span>
<span class="go">poire</span>
<span class="go">pomme</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La méthode <span class="italique">keys</span> (« clés » en anglais) retourne la liste des clés contenues dans le dictionnaire. En vérité, ce n'est pas tout à fait une liste (essayez d'entrer dans votre interpréteur <span class="code2 python"><span class="n">fruits</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span>), mais c'est un ensemble qui se parcourt tout à fait comme une liste.<br>
<br>
<h3>Parcours des valeurs</h3><br>
On peut aussi parcourir les valeurs contenues dans un dictionnaire. Pour ce faire, on utilise la méthode <span class="italique">values</span> (« valeurs » en anglais).<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">{</span><span class="s">"pomme"</span><span class="p">:</span><span class="mi">21</span><span class="p">,</span> <span class="s">"melon"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="s">"poire"</span><span class="p">:</span><span class="mi">31</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">valeur</span> <span class="ow">in</span> <span class="n">fruits</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">valeur</span><span class="p">)</span>
<span class="gp">... </span>
<span class="go">3</span>
<span class="go">31</span>
<span class="go">21</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cette méthode est peu utilisée pour un parcours, car il est plus pratique de parcourir la liste des clés, cela suffit pour avoir les valeurs correspondantes. Mais on peut aussi, bien entendu, l'utiliser dans une condition :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">if</span> <span class="mi">21</span> <span class="ow">in</span> <span class="n">fruits</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"Un des fruits se trouve dans la quantité 21."</span><span class="p">)</span>
<span class="gp">... </span>
<span class="go">Un des fruits se trouve dans la quantité 21.</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Parcours des clés et valeurs simultanément</h3><br>
Pour avoir en même temps les indices et les objets d'une liste, on utilise la fonction <span class="italique">enumerate</span>, j'espère que vous vous en souvenez <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Pour faire la même chose avec les dictionnaires, on utilise la méthode <span class="italique">items</span>. Elle retourne une liste, contenant les couples <span class="italique">clé:valeur</span>, sous la forme d'un <span class="italique">tuple</span>. Voyons comment l'utiliser :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">{</span><span class="s">"pomme"</span><span class="p">:</span><span class="mi">21</span><span class="p">,</span> <span class="s">"melon"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="s">"poire"</span><span class="p">:</span><span class="mi">31</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">cle</span><span class="p">,</span><span class="n">valeur</span> <span class="ow">in</span> <span class="n">fruits</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"La clé {0} contient la valeur {1}."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cle</span><span class="p">,</span> <span class="n">valeur</span><span class="p">))</span>
<span class="gp">... </span>
<span class="go">La clé melon contient la valeur 3.</span>
<span class="go">La clé poire contient la valeur 31.</span>
<span class="go">La clé pomme contient la valeur 21.</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il est parfois très pratique de parcourir un dictionnaire avec ses clés et les valeurs associées.<br>
<br>
Entraînez-vous, il n'y a que cela de vrai. Pourquoi pas reprendre l'exercice du chapitre précédent, avec notre inventaire de fruits ? Sauf que le type de l'inventaire ne serait pas une liste mais un dictionnaire associant les noms des fruits aux quantités ?<br>
<br>
Il nous reste une petite fonctionnalité supplémentaire à voir, et on en aura fini avec les dictionnaires.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_277214">Les dictionnaires et paramètres de fonction</h2>
		<div class="ss_part_texte">
		Ça ne vous rappelle pas quelque chose ? J'espère bien que si, on a vu quelque chose similaire dans le chapitre précédent <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Si vous vous souvenez, on avait réussi à intercepter tous les paramètres de notre fonction... sauf les paramètres nommés.<br>
<br>
<h3>Récupérer les paramètres nommés dans un dictionnaire</h3><br>
Il existe aussi une façon de capturer les paramètres nommés d'une fonction. Dans ce cas toutefois, ils sont placés dans un dictionnaire. Si par exemple vous appelez la fonction ainsi : <span class="code2 python"><span class="n">fonction</span><span class="p">(</span><span class="n">parametre</span><span class="o">=</span><span class="s">'a'</span><span class="p">)</span>
</span>, vous aurez, dans le dictionnaire capturant les paramètres nommés, une clé <span class="italique">'parametre'</span> liée à la valeur <span class="italique">'a'</span>. Voyez plutôt :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">fonction_inconnue</span><span class="p">(</span><span class="o">**</span><span class="n">parametres_nommes</span><span class="p">):</span>
<span class="gp">... </span>    <span class="sd">"""Fonction permettant de voir comment récupérer les paramètres nommés</span>
<span class="gp">... </span><span class="sd">    dans un dictionnaire.</span>
<span class="gp">... </span><span class="sd">    """</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"J'ai reçu en paramètres nommés : {0}."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">parametres_nommes</span><span class="p">))</span>
<span class="gp">... </span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fonction_inconnue</span><span class="p">()</span> <span class="c"># aucun paramètre</span>
<span class="go">J'ai reçu en paramètres nommés : {}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fonction_inconnue</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">j</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="go">J'ai reçu en paramètres nommés : {'p': 4, 'j': 8}</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour capturer tous les paramètres nommés non précisés dans un dictionnaire, il faut mettre deux étoiles <span class="italique">**</span> avant le nom du paramètre.<br>
<br>
Si vous passez des paramètres non nommés à cette fonction, Python lèvera une exception.<br>
<br>
Si bien que pour avoir une fonction qui accepte n'importe quel type de paramètres, nommés ou non, dans n'importe quel ordre, dans n'importe quelle quantité, il faut la déclarer ainsi :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">fonction_inconnue</span><span class="p">(</span><span class="o">*</span><span class="n">en_liste</span><span class="p">,</span> <span class="o">**</span><span class="n">en_dictionnaire</span><span class="p">):</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Tous les paramètres non nommés se retrouveront dans la variable <span class="italique">en_liste</span> et les paramètres nommés dans la variable <span class="italique">en_dictionnaire</span>.<br>
<br>
<div class="rmq question">Mais à quoi ça peut bien servir, d'avoir une fonction qui accepte n'importe quel paramètre ?</div><br>
<br>
Pour l'instant à pas grand chose, mais ça viendra. Quand on abordera le chapitre sur les décorateurs, vous vous en souviendrez et vous pourrez vous féliciter de connaître cette fonctionnalité <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
<h3>Transformer un dictionnaire en paramètres nommés d'une fonction</h3><br>
Là encore, on peut faire exactement l'inverse : transformer un dictionnaire en paramètres nommés d'une fonction. Voyons un exemple tout simple :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">parametres</span> <span class="o">=</span> <span class="p">{</span><span class="s">"sep"</span><span class="p">:</span><span class="s">" &gt;&gt; "</span><span class="p">,</span> <span class="s">"end"</span><span class="p">:</span><span class="s">" -</span><span class="se">\n</span><span class="s">"</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="s">"Voici"</span><span class="p">,</span> <span class="s">"un"</span><span class="p">,</span> <span class="s">"exemple"</span><span class="p">,</span> <span class="s">"d'appel"</span><span class="p">,</span> <span class="o">**</span><span class="n">parametres</span><span class="p">)</span>
<span class="go">Voici &gt;&gt; un &gt;&gt; exemple &gt;&gt; d'appel -</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Les paramètres nommés sont transmis à la fonction par un dictionnaire. Pour indiquer à Python que le dictionnaire doit être transmis comme des paramètres nommés, on place deux étoiles avant son nom <span class="italique">**</span> dans l'appel de la fonction.<br>
<br>
Comme vous pouvez le voir, c'est comme si nous avions écrit :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="s">"Voici"</span><span class="p">,</span> <span class="s">"un"</span><span class="p">,</span> <span class="s">"exemple"</span><span class="p">,</span> <span class="s">"d'appel"</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">" &gt;&gt; "</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span> <span class="o">-</span>\<span class="n">n</span><span class="s">")</span>
<span class="go">Voici &gt;&gt; un &gt;&gt; exemple &gt;&gt; d'appel -</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour l'instant, vous devez trouver que c'est bien se compliquer la vie pour si peu. Nous verrons dans la suite de ce cours qu'il n'en est rien, en fait, même si nous n'utilisons pas cette fonctionnalité tous les jours <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Ce chapitre a été moins long et, je pense, moins difficile que les deux derniers. Et ce n'est pas un hasard : vous commencez à vous habituer, du moins je l'espère, à la syntaxe de l'objet. De plus, les fonctionnalités que je décris ici commencent à vous sembler plus familières. Dans le prochain chapitre, nous parlerons des fichiers, un chapitre qui, lui aussi, devrait vous sembler on ne peut plus simple <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Mais aussi, plus on avance, et plus je compte sur vous pour rechercher par vous-même, des informations sur des fonctionnalités, des objets, des méthodes. N'en soyez pas surpris : le but est de vous rendre autonome dans la recherche et, plus vous connaîtrez Python, plus ce sera simple vous verrez <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
	</div>
	
	<hr>
	<h1 id="chap_277215">Les fichiers</h1>
	<div id="chap_intro">
	Poursuivons notre tour d'horizon des principaux objets. Nous allons voir dans ce chapitre les fichiers, comment les ouvrir, les lire, écrire dedans. Et nous verrons également comment sauvegarder nos objets dans des fichiers <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> ... mais avant tout, voyons l'intérêt <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_277213">Avant de commencer</h2>
		<div class="ss_part_texte">
		Nous allons beaucoup travailler sur des répertoires et des fichiers, autrement dit sur votre disque. Donc je vais vous donner quelques informations générales avant de commencer, pour que malgré vos différents systèmes et configurations, vous puissiez essayer les instructions que je vais vous montrer <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Mais d'abord pourquoi lire ou écrire dans des fichiers ?</h3><br>
Peut-être que vous ne voyez pas trop l'intérêt de savoir lire et écrire dans des fichiers, hors quelques applications de temps à autre. Mais souvenez-vous que, quand vous fermez votre programme, aucune de vos variables n'est sauvegardée. Or, les fichiers peuvent être, justement, un excellent moyen de garder les valeurs de certains objets pour pouvoir les récupérer quand vous rouvrirez votre programme. Par exemple, un petit jeu peut enregistrer les scores des joueurs.<br>
<br>
Si dans notre TP <span class="italique">ZCasino</span> nous avions pu enregistrer, au moment de quitter le casino, la somme que nous avions en poche, nous aurions pu rejouer sans repartir de zéro.<br>
<br>
<h3>Changer le répertoire de travail courant</h3><br>
Si vous souhaitez travailler dans l'interpréteur Python, et je vous y encourage, vous devrez changer le répertoire de travail courant. En effet, au lancement de l'interpréteur, le répertoire de travail courant est celui dans lequel se trouve l'exécutable de l'interpréteur. Sous Windows, c'est "C:\Python3X", le X étant différent en fonction de votre version de Python. Dans tous les cas, je vous invite à changer de répertoire de travail courant. Pour cela, vous devez utiliser une fonction du module <span class="italique">os</span>, qui s'appelle <span class="italique">chdir</span> <span class="italique">(Change Directory)</span>.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">os</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">os</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s">"C:/tests python"</span><span class="p">)</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le répertoire doit exister. Modifier la chaîne passée en paramètre de <span class="italique">os.chdir</span> en fonction du dossier dans lequel vous souhaitez vous déplacer.<br>
<br>
<div class="rmq attention">Je vous conseille, que vous soyez sous Windows ou non, d'utiliser le symbole <span class="italique">/</span> pour décrire un chemin.</div><br>
<br>
Vous pouvez utiliser, en le doublant, l'antislash <span class="italique">\\</span> mais si vous oubliez de le doubler, vous aurez des erreurs. Je vous conseille donc d'utiliser le slash <span class="italique">/</span>, cela marche très bien même sous Windows.<br>
<br>
N.B. : quand vous lancez un programme Python directement, en double-cliquant dessus par exemple, le répertoire courant est celui où vous lancez le programme. Si vous avez un fichier <span class="italique">mon_programme.py</span> contenu sur le disque <span class="italique">C:</span>, le répertoire de travail courant quand vous lancerez le programme sera <span class="italique">C:\</span>.<br>
<br>
<h3>Chemins relatifs et absolus</h3><br>
Pour décrire l'arborescence d'un système, on a deux possibilités :<br>
<br>
<ul>
<li>Les chemins absolus</li>
<li>Les chemins relatifs</li>
</ul><br>
<br>
<h4>Le chemin absolu</h4><br>
Quand on décrit une cible (un fichier ou un répertoire) sous la forme d'un chemin absolu, on décrit la suite des répertoires menant au fichier. Sous Windows, on partira du nom de volume (<span class="italique">C:\</span>, <span class="italique">D:\</span>...). Sous les systèmes Unix, ce sera plus vraissemblablement depuis <span class="italique">/</span>.<br>
<br>
Par exemple, sous Windows, si on a un fichier nommé <span class="italique">fic.txt</span>, contenu dans un dossier <span class="italique">test</span>, lui-même présent sur le disque <span class="italique">C:</span>, notre chemin absolu menant à notre fichier sera <span class="italique">C:\test\fic.txt</span>.<br>
<br>
<h4>Le chemin relatif</h4><br>
Quand on décrit la position d'un fichier grâce à un chemin relatif, cela veut dire que l'on tient compte du dossier dans lequel on se trouve actuellement. Ainsi, si on se trouve dans le dossier <span class="italique">C:\test</span> et que l'on souhaite accéder au fichier <span class="italique">fic.txt</span> contenu dans ce même dossier, le chemin relatif menant à ce fichier sera tout simplement <span class="italique">fic.txt</span>.<br>
<br>
Maintenant, si on se trouve dans <span class="italique">C:</span>, notre chemin relatif sera <span class="italique">test\fic.txt</span>.<br>
<br>
Quand on décrit un chemin relatif, on utilise parfois le symbole <span class="italique">..</span> qui désigne le répertoire parent. Voici un nouvel exemple :<br>
<br>
<ul>
<li>C:<br>
<ul>
<li>test<br>
<ul>
<li>rep1<br>
<ul>
<li>fic1.txt</li>
</ul><br>
</li>
<li>rep2<br>
<ul>
<li>fic2.txt</li>
<li>fic3.txt</li>
</ul><br>
</li>
</ul><br>
</li>
</ul><br>
</li>
</ul><br>
<br>
C'est dans notre dossier <span class="italique">test</span> que tout se passe. Nous avons deux sous-répertoires nommés <span class="italique">rep1</span> et <span class="italique">rep2</span>. Dans <span class="italique">rep1</span>, nous avons un seul fichier : <span class="italique">fic1.txt</span>. Dans <span class="italique">rep2</span>, nous avons deux fichiers : <span class="italique">fic2.txt</span> et <span class="italique">fic3.txt</span>.<br>
<br>
Si le répertoire de travail courant est <span class="italique">rep2</span> et que l'on souhaite accéder à <span class="italique">fic1.txt</span>, notre chemin relatif sera donc <span class="italique">..\rep1\fic1.txt</span>.<br>
<br>
N.B. : j'utilise ici des anti-slash parce que l'exemple d'arborescence est un modèle Windows et que ce sont les séparateurs utilisés pour décrire une arborescence Windows. Mais dans votre code je vous conseille quand même d'utiliser un slash <span class="italique">(/)</span>.<br>
<br>
<h4>Résumé</h4><br>
Les chemins absolus et relatifs sont donc deux moyens de décrire le chemin menant à des fichiers ou répertoires. Mais si le résultat est le même, le moyen utilisé n'est pas identique : quand on utilise un chemin absolu, on décrit toute l'arborescence menant au fichier, peu importe l'endroit où on se trouve. Un chemin absolu permet d'accéder à un endroit dans le disque peu importe le répertoire de travail courant. L'inconvénient de cette méthode, c'est qu'on doit savoir en général où se trouvent les fichiers qui nous intéressent sur le disque.<br>
<br>
Le chemin relatif décrit l'arborescence en prenant comme point d'origine non pas la racine, ou le périphérique sur lequel est stocké la cible, mais le répertoire dans lequel on se trouve. Ça a certains avantages quand on code un projet, on est pas obligé de savoir où le projet est stocké pour construire plusieurs répertoires. Mais ce n'est pas forcément la meilleure solution en toute circonstance.<br>
<br>
Comme je l'ai dit, quand on lance l'interpréteur Python, on a bel et bien un répertoire de travail courant. Vous pouvez l'afficher grâce à la fonction <span class="italique">os.getcwd()</span> (CWD = "Current Working Directory").<br>
<br>
Cela devrait vous suffir donc. Pour les démonstrations qui vont suivre, placez-vous à l'aide de <span class="italique">os.chdir</span> dans un répertoire de test créé pour l'occasion.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_277211">Lecture et écriture dans un fichier</h2>
		<div class="ss_part_texte">
		Nous allons commencer à lire avant d'écrire dans un fichier. Pour l'exemple donc, je vous invite à créer un fichier dans le répertoire de travail courant que vous avez choisi. Je suis en manque flagrant d'inspiration, je vais l'appeler <span class="italique">fichier.txt</span> et je vais écrire dedans, à l'aide d'un éditeur sans mise en forme (tel que le bloc-notes Windows) : <span class="italique">« C'est le contenu du fichier. Spectaculaire non ? »</span><br>
<br>
<h3>Ouverture du fichier</h3><br>
D'abord, il nous faut ouvrir le fichier avec Python. On utilise pour ce faire la fonction <span class="italique">open</span>, disponible sans avoir besoin de rien importer. Elle prend en paramètres :<br>
<br>
<ul>
<li>le chemin (absolu ou relatif) menant au fichier à ouvrir ;</li>
<li>le mode d'ouverture.</li>
</ul><br>
<br>
Le mode est donné sous la forme d'une chaîne de caractères. Voici les principaux modes :<br>
<br>
<table class="tab_user">




<thead><tr><th>Mode</th><th>Explications</th></tr></thead><tbody><tr>
<td>'r'</td>
<td>Ouverture en lecture <span class="italique">(Read)</span>.</td>
</tr><tr>
<td>'w'</td>
<td>Ouverture en écriture <span class="italique">(Write)</span>. Le contenu du fichier est écrasé. Si le fichier n'existe pas, il est créé.</td>
</tr><tr>
<td>'a'</td>
<td>Ouverture en écriture en mode ajout <span class="italique">(Append)</span>. On écrit à la fin du fichier sans écraser l'ancien contenu du fichier. Si le fichier n'existe pas, il est créé.</td>
</tr></tbody></table><br>
<br>
On peut ajouter à tous ces modes le signe <span class="italique">b</span> pour ouvrir le fichier en mode binaire. Nous verrons plus loin l'utilité, c'est un mode un peu particulier.<br>
<br>
Ici nous souhaitons lire le fichier. Nous allons donc utilisé le mode <span class="italique">'r'</span>.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mon_fichier</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"fichier.txt"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_fichier</span>
<span class="go">&lt;_io.TextIOWrapper name='fichier.txt' encoding='cp1252'&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">mon_fichier</span><span class="p">)</span>
<span class="go">&lt;class '_io.TextIOWrapper'&gt;</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
L'encodage précisé quand on affiche le fichier dans l'interpréteur peut être très différent en fonction de votre système. Ici je suis dans l'interpréteur Python dans Windows et l'encodage choisi est donc un encodage Windows propre à la console. Ne soyez pas surpris s'il est différent chez vous.<br>
<br>
La fonction <span class="italique">open</span> crée donc un fichier. Elle retourne un objet issue de la classe <span class="italique">TextIoWrapper</span>. Par la suite, nous allons utiliser des méthodes de cette classe pour interragir avec le fichier.<br>
<br>
Le type de l'objet doit vous surprendre quelque peu. Ça aurait très bien pu être un type <span class="italique">file</span> après tout. En fait, <span class="italique">open</span> permet d'ouvrir un fichier, mais <span class="italique">TextIoWrapper</span> est utilisé dans d'autres circonstances, pour afficher du texte à l'écran par exemple. Bon, ça ne nous concerne pas trop ici, je ne vais pas m'y attarder <img src="./Apprendre Python !_files/clin.png" alt=";)"> .<br>
<br>
<h3>Fermer le fichier</h3><br>
N'oubliez pas de fermer un fichier après l'avoir ouvert. Si d'autres applications souhaitent accéder à ce fichier, ou d'autres morceaux de votre propre code, ils ne pourront pas car le fichier sera déjà ouvert. C'est surtout vrai en écriture, mais prenez de bonnes habitudes <img src="./Apprendre Python !_files/heureux.png" alt=":D"> . La méthode à utiliser est <span class="italique">close</span> :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mon_fichier</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Lire l'intégralité du fichier</h3><br>
Pour ce faire, on utilise la méthode <span class="italique">read</span> de la classe <span class="italique">TextIoWrapper</span>. Elle retourne l'intégralité du fichier :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mon_fichier</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"fichier.txt"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">contenu</span> <span class="o">=</span> <span class="n">mon_fichier</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">contenu</span><span class="p">)</span>
<span class="go">C'est le contenu du fichier. Spectaculaire non ?</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_fichier</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Quoi de plus simple ? La méthode <span class="italique">read</span> retourne tout le fichier que l'on capture dans une chaîne de caractères. Notre fichier ne contient pas de saut de ligne, mais si c'était le cas, vous auriez dans votre variable <span class="italique">contenu</span> les signes <span class="italique">\n</span> traduisant un saut de ligne.<br>
<br>
Maintenant que vous avez une chaîne, vous pouvez naturellement tout faire : la convertir, tout entière ou en partie, si c'est nécessaire, <span class="italique">split</span> la chaîne pour parcourir chaque ligne et les traiter... bref, tout est possible <img src="./Apprendre Python !_files/clin.png" alt=";)"> .<br>
<br>
<h3>Écriture dans un fichier</h3><br>
Bien entendu, il nous faut ouvrir le fichier avant tout. Vous pouvez utiliser le mode <span class="italique">w</span> ou le mode <span class="italique">a</span>. Le premier écrase le contenu éventuel du fichier, alors que le second ajoute ce que l'on écrit à la fin du fichier. À vous de voir en fonction de vos besoins <img src="./Apprendre Python !_files/smile.png" alt=":)"> . Dans tous les cas, ces deux modes créent le fichier s'il n'existe pas.<br>
<br>
<h4>Écrire une chaîne</h4><br>
Pour écrire dans un fichier, on utilise la méthode <span class="italique">write</span> en lui passant en paramètre la chaîne à écrire dans le fichier. Elle retourne le nombre de caractères qui ont été écrits. On n'est naturellement pas obligé de récupérer cette valeur, sauf si on en a besoin.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">mon_fichier</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"fichier.txt"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="c"># argh j'ai tout écrasé !</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_fichier</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">"Premier test d'écriture dans un fichier via Python"</span><span class="p">)</span>
<span class="go">50</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_fichier</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous pouvez vérifier que votre fichier contient bien le texte qu'on y a écrit.<br>
<br>
<h3>Écrire d'autres types de données</h3><br>
La méthode <span class="italique">write</span> n'accepte en paramètre que des chaînes de caractères. Si vous voulez écrire dans votre fichier des nombres, des scores par exemple, il vous faudra les convertir en chaîne avant de les écrire, et les convertir en entier après les avoir lu.<br>
<br>
Le module <span class="italique">os</span> contient beaucoup de fonctions intéressantes pour créer et supprimer des fichiers et des répertoires. Je vous laisse regarder l'aide si vous êtes intéressé <img src="./Apprendre Python !_files/clin.png" alt=";)"> .<br>
<br>
<h3>Le mot-clé with</h3><br>
Ne désespérez pas, il ne nous reste plus autant de mots-clés à découvrir... mais quelques-uns tout de même. Et même certains dont je ne parlerai pas...<br>
<br>
On n'est jamais à l'abri d'une erreur. Surtout quand on manipule des fichiers. Il peut se produire des erreurs quand on lit, quand on écrit... et si l'on n'y prend garde, le fichier restera ouvert.<br>
<br>
Comme je vous l'ai dit, c'est plutôt gênant, et ça peut même être grave. Si votre programme souhaite de nouveau utiliser ce fichier, il ne pourra pas forcément y accéder, puisqu'il a déjà été ouvert.<br>
<br>
Il existe un mot-clé qui permet d'éviter cette situation : <span class="italique">with</span>. Voici sa syntaxe :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">mon_fichier</span><span class="p">,</span> <span class="n">mode_ouverture</span><span class="p">)</span> <span class="k">as</span> <span class="n">variable</span><span class="p">:</span>
    <span class="c"># opérations sur le fichier</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On trouve dans l'ordre :<br>
<br>
<ul>
<li>Le mot-clé <span class="italique">with</span>, prélude au bloc dans lequel on va manipuler notre fichier. On peut trouver <span class="italique">with</span> dans la manipulation d'autres objets, mais nous ne le verrons pas ici</li>
<li>Notre objet. Ici, on appelle <span class="italique">open</span> qui va retourner un objet <span class="italique">TextIOWraper</span> (notre fichier)</li>
<li>Le mot-clé <span class="italique">as</span> que nous avons déjà vu dans le mécanisme d'importation et dans les exceptions. Il signifie toujours la même chose : "en tant que"</li>
<li>Notre variable qui contiendra notre objet. Si la variable n'existe pas, Python la créée.</li>
</ul><br>
<br>
Un exemple ?<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'fichier.txt'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">mon_fichier</span><span class="p">:</span>
<span class="gp">... </span>    <span class="n">texte</span> <span class="o">=</span> <span class="n">mon_fichier</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
<span class="gp">... </span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">Cela ne veut pas dire que le bloc d'instructions ne lèvera aucune exception.</div> Cela signifie simplement que, si une exception se produit, le fichier sera tout de même fermé à la fin du bloc.<br>
<br>
Vous pouvez appeler <span class="italique">mon_fichier.closed</span> pour le vérifier. Si le fichier est fermé, <span class="italique">mon_fichier.closed</span> vaudra <span class="italique">True</span>.<br>
<br>
Il est inutile par conséquent de fermer le fichier à la fin du bloc <span class="italique">with</span>. Python va le faire tout seul, qu'une exception soit levée ou non. Je vous encourage à utiliser cette syntaxe, elle est plus sûre et plus facile à comprendre.<br>
<br>
Allez ! Direction le module <span class="italique">pickle</span>, dans lequel nous allons apprendre à sauvegarder dans des fichiers nos objets.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_277212">Enregistrer des objets dans des fichiers</h2>
		<div class="ss_part_texte">
		Dans beaucoup de langages de haut niveau, on peut enregistrer ses objets dans un fichier. Python ne fait pas exception. Grâce au module <span class="italique">pickle</span> que nous allons découvrir, on peut enregistrer n'importe quel objet et le récupérer par la suite, au prochain lancement du programme, par exemple. En outre, le fichier résultant pourra être lu depuis n'importe quel système d'exploitation (supportant Python, naturellement).<br>
<br>
<h3>Enregistrer un objet dans un fichier</h3><br>
Il nous faut naturellement d'abord importer le module <span class="italique">pickle</span>.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">pickle</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On va ensuite utiliser deux classes incluses dans ce module : la classe <span class="italique">Pickler</span> et la classe <span class="italique">Unpickler</span>.<br>
<br>
C'est la première qui nous intéresse dans cette partie.<br>
<br>
Pour créer notre objet <span class="italique">Pickler</span>, on va l'appeler en passant en paramètre le fichier dans lequel on va enregistrer notre objet.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'donnees'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">fichier</span><span class="p">:</span>
<span class="gp">... </span>    <span class="n">mon_pickler</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">Pickler</span><span class="p">(</span><span class="n">fichier</span><span class="p">)</span>
<span class="gp">... </span>    <span class="c"># enregistrement ...</span>
<span class="gp">... </span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Quand on va enregistrer nos objets, ce sera dans le fichier <span class="italique">donnees</span>. Je ne lui ai pas donné d'extension, vous pouvez le faire. Mais évitez de préciser une extension qui est utilisée par un programme.<br>
<br>
Notez le mode d'ouverture : on ouvre le fichier <span class="italique">donnees</span> en mode d'écriture binaire. Il suffit de rajouter derrière le nom du mode la lettre <span class="italique">b</span> pour indiquer un mode binaire.<br>
<br>
Le fichier que Python va écrire ne sera pas très lisible si vous essayez de l'ouvrir, et ce n'est pas le but <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
Bon. Maintenant que notre pickler est créé, on va enregistrer un ou plusieurs objets dans notre fichier. Là, c'est à vous de voir comment vous voulez vous organiser, ça dépend aussi beaucoup du projet. Moi j'ai pris l'habitude de n'enregistrer qu'un objet par fichier, mais il n'y a aucune obligation.<br>
<br>
On utilise la méthode <span class="italique">dump</span> du pickler pour enregistrer notre objet. Son utilisation est des plus simples :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">score</span> <span class="o">=</span> <span class="p">{</span>
<span class="gp">... </span>  <span class="s">"joueur 1"</span><span class="p">:</span>    <span class="mi">5</span><span class="p">,</span>
<span class="gp">... </span>  <span class="s">"joueur 2"</span><span class="p">:</span>   <span class="mi">35</span><span class="p">,</span>
<span class="gp">... </span>  <span class="s">"joueur 3"</span><span class="p">:</span>   <span class="mi">20</span><span class="p">,</span>
<span class="gp">... </span>  <span class="s">"joueur 4"</span><span class="p">:</span>    <span class="mi">2</span><span class="p">,</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'donnees'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">fichier</span><span class="p">:</span>
<span class="gp">... </span>    <span class="n">mon_pickler</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">Pickler</span><span class="p">(</span><span class="n">fichier</span><span class="p">)</span>
<span class="gp">... </span>    <span class="n">mon_pickler</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">score</span><span class="p">)</span>
<span class="gp">... </span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Après l'exécution de ce code, vous avez dans votre dossier de test un fichier <span class="italique">donnees</span> qui contient... eh bien, notre dictionnaire contenant les scores de nos quatre joueurs. Si vous voulez enregistrer plusieurs objets, appelez de nouveau la méthode <span class="italique">dump</span> avec les objets à enregistrer. Ils seront ajoutés dans le fichier dans l'ordre où vous les enregistrez.<br>
<br>
<h3>Récupérer nos objets enregistrés</h3><br>
Nous allons utiliser une autre classe définie dans notre module <span class="italique">pickle</span>. Cette fois, assez logiquement, c'est la classe <span class="italique">Unpickler</span>.<br>
<br>
Commençons par créer notre objet. On lui passe lors de la création notre fichier dans lequel on va lire nos objets. Puisqu'on va lire, on change de mode, on repasse en mode <span class="italique">r</span>, et même <span class="italique">rb</span> puisque le fichier est binaire.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'donnees'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">fichier</span><span class="p">:</span>
<span class="gp">... </span>    <span class="n">mon_depickler</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">Unpickler</span><span class="p">(</span><span class="n">fichier</span><span class="p">)</span>
<span class="gp">... </span>    <span class="c"># lecture des objets contenus dans le fichier...</span>
<span class="gp">... </span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour lire l'objet dans notre fichier, il faut appeler la méthode <span class="italique">load</span> de notre depickler. Elle retourne le premier objet qui a été lu (s'il y en a plusieurs, il faut l'appeler plusieurs fois).<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'donnees'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">fichier</span><span class="p">:</span>
<span class="gp">... </span>    <span class="n">mon_depickler</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">Unpickler</span><span class="p">(</span><span class="n">fichier</span><span class="p">)</span>
<span class="gp">... </span>    <span class="n">score_recupere</span> <span class="o">=</span> <span class="n">mon_depickler</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>
<span class="gp">... </span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et après cet appel, si le fichier a pu être lu, dans votre variable <span class="italique">score_recupere</span>, vous récupérez votre dictionnaire contenant les scores. Là, c'est peut-être peu spectaculaire, mais quand vous utilisez ce module pour sauvegarder des objets qui doivent être conservés alors que votre programme n'est pas lancé, c'est franchement très pratique <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Et voilà <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Nous approchons à grands pas de la fin de cette partie. Dans le prochain chapitre, nous ne découvrirons aucune nouvelle classe, mais nous allons nous intéresser d'un peu plus près au mécanisme des références, un mot que j'ai déjà utilisé dans ce cours mais jamais bien expliqué. Vous ne découvrirez aucune nouvelle classe, et vous pouvez continuer d'apprendre le Python sans lire ce chapitre... mais je vous conseille tout de même d'y passer <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
	</div>
	
	<hr>
	<h1 id="chap_281293">Portée des variables et références</h1>
	<div id="chap_intro">
	Dans ce chapitre, je vais m'attarder sur la portée des variables et sur les références. Je ne vais pas vous faire une visite guidée de la mémoire de votre ordinateur (Python est asssez haut niveau pour, justement, ne pas avoir à descendre aussi bas <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> ), je vais simplement souligner quelques cas intéressants que vous pourriez rencontrer dans vos programmes.<br>
<br>
Ce chapitre n'est pas indispensable, mais je ne l'écris naturellement pas pour le plaisir <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> : vous pouvez très bien continuer à apprendre le Python sans connaître précisément comment Python joue avec les références, mais il peut être utile de le savoir.<br>
<br>
N'hésitez pas à relire ce chapitre si vous avez un peu de mal, les concepts présentés ne sont pas évidents <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_281292">La portée des variables</h2>
		<div class="ss_part_texte">
		En Python, comme dans la plupart des langages, on trouve des règles qui définissent la <span class="souligne">portée des variables</span>. La portée utilisée dans ce sens c'est « quand et comment les variables sont accessibles ». Quand vous définissez une fonction, quelles variables sont utilisables dans son corps ? Uniquement les paramètres ? Est-ce qu'on peut créer dans notre corps de fonction des variables utilisables en dehors ? Si vous ne vous êtes jamais posé ces questions, c'est normal <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Mais je vais tout de même y répondre, car elles ne sont pas dénuées d'intérêt <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
<h3>Dans nos fonctions, quelles variables sont accessibles ?</h3><br>
On ne change pas une équipe qui gagne : passons aux exemples dès à présent.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">print_a</span><span class="p">():</span>
<span class="gp">... </span>    <span class="sd">"""Fonction chargée d'afficher la variable a.</span>
<span class="gp">... </span><span class="sd">    Cette variable a n'est pas passée en paramètre de la fonction.</span>
<span class="gp">... </span><span class="sd">    On suppose qu'elle a été créée en dehors de la fonction, on veut voir</span>
<span class="gp">... </span><span class="sd">    si elle est accessible depuis le corps de la fonction.</span>
<span class="gp">... </span><span class="sd">    """</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"La variable a = {0}."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="gp">... </span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">print_a</span><span class="p">()</span>
<span class="go">La variable a = 5.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="mi">8</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">print_a</span><span class="p">()</span>
<span class="go">La variable a = 8.</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Surprise ! Ou peut-être pas… <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"><br>
<br>
La variable <span class="italique">a</span> n'est pas passée en paramètre de la fonction <span class="italique">print_a</span>. Et pourtant, Python la trouve, tant qu'elle a été définie avant <span class="souligne">l'appel</span> de la fonction.<br>
<br>
C'est là qu'interviennent les différents espaces.<br>
<br>
<h4>L'espace local</h4><br>
Dans votre fonction, quand vous faites référence à une variable <span class="italique">a</span>, Python vérifie dans l'<strong>espace local</strong> de la fonction. Cet espace contient les paramètres qui sont passés à la fonction, et les variables définies dans son corps. Python apprend ainsi que la variable <span class="italique">a</span> n'existe pas dans l'espace local de la fonction. Dans ce cas, il va regarder dans l'espace local dans lequel la fonction a été appelée. Et là, il trouve bien la variable <span class="italique">a</span> et peut donc l'afficher.<br>
<br>
D'une façon générale, je vous conseille d'éviter d'appeler des variables qui ne sont pas dans l'espace local, sauf si c'est nécessaire. Ce n'est pas très clair à la lecture ; dans l'absolu, préférez faire des variables globales, ça reste plus propre (nous verrons ça plus bas). Pour l'instant, on ne s'intéresse qu'aux mécanismes, on cherche juste à savoir quelles variables sont accessibles depuis un corps de fonction, et de quelle façon.<br>
<br>
<h3>La portée de nos variables</h3><br>
Voyons quelques cas concrets. Je vais les expliquer au fur et à mesure, ne vous en faites pas <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h4>Qu'advient-il des variables définies dans un corps de fonction ?</h4><br>
Voyons un nouvel exemple :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">set_var</span><span class="p">(</span><span class="n">nouvelle_valeur</span><span class="p">):</span>
    <span class="sd">"""Fonction nous permettant de tester la portée des variables</span>
<span class="sd">    définies dans notre corps de fonction.</span>
<span class="sd">    """</span>
    <span class="c"># On essaye d'afficher la variable var, si elle existe</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Avant l'affectation, notre variable var vaut {0}."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">var</span><span class="p">))</span>
    <span class="k">except</span> <span class="ne">NameError</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"La variable var n'existe pas encore."</span><span class="p">)</span>
    <span class="n">var</span> <span class="o">=</span> <span class="n">nouvelle_valeur</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Après l'affectation, notre variable var vaut {0}."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">var</span><span class="p">))</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et maintenant, utilisons notre fonction :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">set_var</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="go">La variable var n'existe pas encore.</span>
<span class="go">Après l'affectation, notre variable var vaut 5.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">var</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n-Identifier">&lt;module&gt;</span>
<span class="nc">NameError</span>: <span class="n-Identifier">name 'var' is not defined</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je sens que quelques explications s'imposent :<br>
<br>
<ul>
<li>Lors de notre appel à <span class="italique">set_var</span>, notre variable <span class="italique">var</span> n'a pu être trouvée par Python : c'est normal, nous ne l'avons pas encore définie, ni dans notre corps de fonction, ni dans le corps de notre programme. Python affecte la valeur <span class="italique">5</span> à la variable <span class="italique">var</span>, l'affiche et s'arrête.</li>
<li>Au sortir de la fonction, on essaye d'afficher la variable <span class="italique">var</span>… mais Python ne la trouve pas ! En effet : elle a été définie dans le corps de la fonction (donc dans son espace local) et, à la fin de l'exécution de la fonction, l'espace est détruit… donc la variable <span class="italique">var</span>, définie dans le corps de la fonction, n'existe que dans ce corps et est détruite ensuite.</li>
</ul><br>
<br>
Python a une règle d'accès spécifique aux variables extérieures à l'espace local : on peut les lire, mais pas les modifier. C'est pourquoi, dans notre fonction <span class="italique">print_a</span>, on arrivait à afficher une variable qui n'était pas comprise dans l'espace local de la fonction. En revanche, on ne peut modifier la valeur d'une variable extérieure à l'espace local, par affectation du moins. Si dans votre corps de fonction vous faites <span class="code2 python"><span class="n">var</span> <span class="o">=</span> <span class="n">nouvelle_valeur</span>
</span>, vous n'allez <span class="souligne">en aucun cas</span> modifier une variable extérieure au corps.<br>
<br>
En fait, quand Python trouve une instruction d'affectation, comme <span class="code2 python"><span class="n">var</span> <span class="o">=</span> <span class="n">nouvelle_valeur</span>
</span>, il va changer la valeur de la variable dans l'espace local de la fonction. Et rappelez-vous que cet espace local est détruit après l'appel à la fonction.<br>
<br>
Pour résumer, et c'est ce qu'il faut retenir, <span class="souligne">une fonction ne peut modifier, par affectation, la valeur d'une variable extérieure à son espace local</span>.<br>
<br>
Ça paraît plutôt stupide au premier abord… mais pas d'impatience. Je vais relativiser ça assez rapidement <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
<h4>Une fonction modifiant des objets</h4><br>
J'espère que vous vous en souvenez, <span class="souligne">tout est objet en Python</span>. Quand vous passez des paramètres à votre fonction, ce sont des objets qui sont transmis. Et pas les valeurs des objets, mais bien les objets eux-mêmes, ceci est très important.<br>
<br>
Bon. On ne peut affecter une nouvelle valeur à un paramètre dans le corps de la fonction. Je ne reviens pas là-dessus. En revanche, on pourrait essayer d'appeler une méthode de l'objet qui le modifie… Voyons cela :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">ajouter</span><span class="p">(</span><span class="n">liste</span><span class="p">,</span> <span class="n">valeur_a_ajouter</span><span class="p">):</span>
<span class="gp">... </span>    <span class="sd">"""Cette fonction ajoute la valeur que l'on veut ajouter, à la fin de liste.</span>
<span class="gp">... </span><span class="sd">    """</span>
<span class="gp">... </span>    <span class="n">liste</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">valeur_a_ajouter</span><span class="p">)</span>
<span class="gp">... </span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'e'</span><span class="p">,</span> <span class="s">'i'</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ajouter</span><span class="p">(</span><span class="n">ma_liste</span><span class="p">,</span> <span class="s">'o'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste</span>
<span class="go">['a', 'e', 'i', 'o']</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ça marche ! On passe en paramètres notre objet de type <span class="italique">list</span> avec la valeur à ajouter. Et la fonction appelle la méthode <span class="italique">append</span> de l'objet. Cette fois, au sortir de la fonction, notre objet a bel et bien été modifié.<br>
<br>
<div class="rmq question">Je vois pas pourquoi. Tu as dit qu'une fonction ne pouvait pas affecter de nouvelles valeurs aux paramètres ?</div><br>
<br>
Absolument. Mais c'est ça la petite subtilité dans l'histoire : on ne change pas du tout la valeur du paramètre, on appelle juste une méthode de l'objet. Et ça change tout. Si vous vous embrouillez, retenez que dans le corps de fonction, si vous faites <span class="italique">parametre = nouvelle_valeur</span>, le paramètre ne sera modifié que dans le corps de la fonction. Alors que si vous faites <span class="italique">parametre.methode_pour_modifier(...)</span>, l'objet derrière le paramètre sera bel et bien modifié.<br>
<br>
On peut aussi modifier les attributs d'un objet, par exemple, changer une case de la liste ou d'un dictionnaire, ces changements aussi seront effectifs au-delà de l'appel de la fonction.<br>
<br>
<h4>Et les références, dans tout ça ?</h4><br>
J'ai parlé des références, je dis y consacrer un chapitre, et jusqu'ici… mais c'est maintenant qu'on en parle <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Je vais schématiser volontairement : les variables que nous utilisons depuis le début de ce cours cachent en fait des références vers des objets.<br>
<br>
Concrètement, j'ai présenté les variables comme ceci : un nom identifiant pointant vers une valeur. Par exemple, notre variable nommée <span class="italique">a</span> possède une valeur (0, pourquoi pas).<br>
<br>
En fait, une variable est un nom identifiant, pointant vers une référence d'un objet. La référence, c'est un peu sa position en mémoire. Ça reste plus haut niveau que les pointeurs en C par exemple, ce n'est pas vraiment la mémoire de votre ordinateur. Et on ne manipule pas ces références directement.<br>
<br>
Cela signifie que deux variables peuvent pointer sur le même objet.<br>
<br>
<div class="rmq question">Bah… bien sûr, rien n'empêche de faire deux variables avec la même valeur.</div><br>
<br>
Non non, je ne parle pas de valeurs ici <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> , mais d'objets. Voyons un exemple, vous allez comprendre :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste2</span> <span class="o">=</span> <span class="n">ma_liste1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">ma_liste2</span><span class="p">)</span>
<span class="go">[1, 2, 3, 4]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">ma_liste1</span><span class="p">)</span>
<span class="go">[1, 2, 3, 4]</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous créons une liste dans la variable <span class="italique">ma_liste1</span>. À la ligne 2, nous affectons <span class="italique">ma_liste1</span> à la variable <span class="italique">ma_liste2</span>. On pourrait croire que <span class="italique">ma_liste2</span> est une copie de <span class="italique">ma_liste1</span>. Toutefois, quand on ajoute <span class="italique">4</span> à <span class="italique">ma_liste2</span>, <span class="italique">ma_liste1</span> est aussi modifiée.<br>
<br>
On dit que <span class="italique">ma_liste1</span> et <span class="italique">ma_liste2</span> contiennent une référence vers le même objet : si on modifie l'objet depuis une des deux variables, le changement sera visible depuis les deux variables.<br>
<br>
<div class="rmq question">Euh… j'essaye de faire la même chose avec des variables contenant des entiers… ça ne marche pas.</div><br>
<br>
C'est normal. Les entiers, les flottants, les chaînes de caractères, n'ont aucune méthode travaillant sur l'objet lui-même. Les chaînes de caractères, comme nous l'avons vu, ne modifient pas l'objet appelant mais retournent un nouvel objet modifié. Et comme nous venons de le voir, le processus d'affectation n'est pas du tout identique à un appel de méthode.<br>
<br>
<div class="rmq question">Et si je veux modifier une liste sans toucher à l'autre ?</div><br>
<br>
Eh bien c'est impossible, vu comment nous avons défini nos listes. Les deux variables pointent sur le même objet par jeu de références et donc, inévitablement, si vous modifiez l'objet, vous allez voir le changement depuis les deux variables. Toutefois, il existe un moyen pour créer un nouvel objet depuis un autre :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste2</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">ma_liste1</span><span class="p">)</span> <span class="c"># ça revient à copier le contenu de ma_liste1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">ma_liste2</span><span class="p">)</span>
<span class="go">[1, 2, 3, 4]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">ma_liste1</span><span class="p">)</span>
<span class="go">[1, 2, 3]</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
À la ligne 2, nous avons demandé à Python de créer un nouvel objet en le fondant sur <span class="italique">ma_liste1</span>. Du coup, les deux variables ne contiennent plus la même référence : elles modifient des objets différents. Vous pouvez utiliser la plupart des constructeurs (c'est le nom qu'on donne à <span class="italique">list</span> pour créer une liste par exemple) dans ce but. Pour des dictionnaires, utilisez le constructeur <span class="italique">dict</span> en lui passant en paramètre un dictionnaire déjà construit et vous aurez en retour un dictionnaire, semblable à celui passé en paramètre, mais seulement semblable par le contenu. En fait, il s'agit d'une copie de l'objet, ni plus ni moins.<br>
<br>
Pour approcher de plus près les références, vous avez la fonction <span class="italique">id</span> qui prend en paramètre un objet. Elle retourne la position de l'objet dans la mémoire Python sous la forme d'un entier (plutôt grand <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> ). Je vous invite à faire quelques tests en passant en paramètre de cette fonction plusieurs objets. Sachez au passage que <span class="italique">is</span> compare les ID des objets de part et d'autre et c'est pour cette raison que je vous ais mis en garde quant à son utilisation.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste1</span><span class="o">==</span><span class="n">ma_liste2</span> <span class="c"># on compare le contenu des listes</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_liste1</span> <span class="ow">is</span> <span class="n">ma_liste2</span> <span class="c"># on compare leur référence</span>
<span class="go">False</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je ne peux que vous encourager à faire des tests avec différents objets. Un petit tour du côté des variables globales ? <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies">
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_281290">Les variables globales</h2>
		<div class="ss_part_texte">
		Il existe un moyen de modifier, dans une fonction, des variables extérieures à celle-ci. On utilise pour cela des variables globales.<br>
<br>
Cette distinction entre variables locales et variables globales se retrouve dans d'autres langages et on encourage souvent d'éviter de trop les utiliser. Elles peuvent avoir leurs utilités, toutefois, puisque le mécanisme existe. D'un point de vue strictement personnel, tant que c'est possible je ne travaille qu'avec des variables locales (comme nous l'avons fait depuis le début de ce cours), mais il m'arrive de faire appel à des variables globales quand c'est nécessaire ou bien plus pratique. Mais ne tombez pas dans l'extrême non plus, ni dans un sens ni dans l'autre <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
<h3>Le principe des variables globales</h3><br>
On ne peut faire plus simple. On déclare dans le corps de notre programme, donc en dehors de tout corps de fonction, une variable, tout ce qu'il y a de plus normal. Dans le corps d'une fonction qui doit modifier cette variable (changer sa valeur par affectation), on déclare à Python que la variable qui doit être utilisée dans ce corps est globale.<br>
<br>
Python va regarder dans les différents espaces : celui de la fonction, celui dans lequel la fonction a été appelée… ainsi de suite jusqu'à mettre la main sur notre variable. S'il la trouve, il va nous donner le plein accès à cette variable dans le corps de la fonction.<br>
<br>
Cela signifie que nous pouvons y accéder en lecture (comme c'est le cas sans avoir besoin de la définir comme variable globale) mais aussi en écriture. Une fonction peut donc ainsi changer la valeur d'une variable directement <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Mais assez de théorie, voyons un exemple.<br>
<br>
<h3>Utiliser concrètement les variables globales</h3><br>
Pour déclarer à Python, dans le corps d'une fonction, que la variable qui sera utilisée doit être considérée comme globale, on utilise le mot-clé <span class="italique">global</span>. On le place généralement après la définition de la fonction, juste en-dessous de la <span class="italique">docstring</span>, ça permet de vite retrouver les variables globales sans parcourir tout le code (c'est une simple convention). On précise derrière ce mot-clé le nom de la variable à considérer comme globale :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">i</span> <span class="o">=</span> <span class="mi">4</span> <span class="c"># une variable, nommée i, contenant un entier</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">inc_i</span><span class="p">():</span>
<span class="gp">... </span>    <span class="sd">"""Fonction chargée d'incrémenter i de 1"""</span>
<span class="gp">... </span>    <span class="k">global</span> <span class="n">i</span> <span class="c"># Python recherche i en dehors de l'espace local de la fonction</span>
<span class="gp">... </span>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="gp">... </span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">i</span>
<span class="go">4</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">inc_i</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">i</span>
<span class="go">5</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si vous ne précisez pas à Python que <span class="italique">i</span> doit être considérée comme globale, vous ne pourrez pas modifier réellement sa valeur, comme nous l'avons vu plus haut. En précisant <span class="italique">global i</span>, Python permet l'accès en lecture et en écriture à cette variable, ce qui signifie que vous pouvez changer sa valeur par affectation.<br>
<br>
J'utilise ce mécanisme quand je travaille sur plusieurs classes et fonctions qui doivent s'échanger des informations d'état par exemple. Il existe d'autres moyens, mais vous connaissez celui-ci et tant que vous maîtrisez bien votre code, il n'est pas plus mauvais qu'un autre <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Je vous dispense de QCM sur ce chapitre, vous avez de la chance <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
		</div>
		<hr>
		
	<div id="chap_conclusion">
	J'espère avoir été assez clair dans mes explications. Ne restez pas trop bloqué sur le concept des références, des espaces, des variables locales et globales si vous n'en discernez pas la logique. Le déclic se fera peut-être plus tard, quand vous serez directement confronté à la difficulté, si cela se produit. En attendant, je crois qu'un petit TP s'impose, qu'en pensez-vous ? <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies">
	</div>
	
	<hr>
	<h1 id="chap_281294">TP 2 : un bon vieux petit pendu</h1>
	<div id="chap_intro">
	C'est le moment de mettre en pratique ce que vous avez appris. Vous n'aurez pas besoin de tout, bien entendu, mais je vais essayer de vous faire travailler le maximum de choses <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Nous allons donc faire un jeu de pendu plutôt classique. Ce n'est pas bien original, mais mes autres idées n'étaient pas très adaptées. Mais on va compliquer un peu l'exercice, vous allez voir <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_281289">Votre mission</h2>
		<div class="ss_part_texte">
		Nous y voilà. Je vais vous préciser un peu la mission sans quoi, on va avoir du mal à s'entendre sur la correction <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> .<br>
<br>
<h3>Un jeu du pendu</h3><br>
Le premier point de la mission est de réaliser un jeu du pendu. Je rappelle brièvement la règle, au cas où : l'ordinateur choisit un mot au hasard dans une liste, un mot de huit lettres maximum. Le joueur tente de trouver les lettres composant le mot. À chaque coup, il entre une lettre. Si la lettre est dans le mot, l'ordinateur affiche le mot avec les lettres déjà trouvées. Celles qui ne le sont pas encore sont remplacées par des étoiles (*). Le joueur a 8 chances. Au-delà, il a perdu.<br>
<br>
On va compliquer un peu la règle en faisant en sorte qu'au début de la partie, le joueur doive entrer son nom. Cela permettra au programme d'enregistrer son score.<br>
<br>
Le score du joueur sera simple à calculer : on prend le score courant (0 si le joueur n'a aucun score déjà enregistré) et à chaque partie, on lui ajoute le nombre de coups restants comme points de partie. Si par exemple il me reste trois chances au moment où je trouve le mot, je gagne trois points.<br>
<br>
Par la suite, vous pourrez vous amuser à faire un décompte du score plus poussé, pour l'instant ça suffira bien.<br>
<br>
<h3>Le côté technique du problème</h3><br>
Le jeu du pendu en lui-même, vous ne devriez avoir aucun problème pour le mettre en place. Rappelez-vous que le joueur ne doit entrer qu'une seule lettre à la fois et que le programme doit bien vérifier que c'est le cas avant de continuer. Nous allons découper notre programme en trois fichiers :<br>
<br>
<ul>
<li>Le fichier <span class="italique">donnees.py</span> qui contiendra les variables nécessaires à notre application (la liste des mots, le nombre de chances autorisées…).</li>
<li>Le fichier <span class="italique">fonctions.py</span> qui contiendra les fonctions utiles à notre application. Là, je ne vous fais aucune liste claire, je vous conseille de bien y réfléchir, avec une feuille et un stylo si ça vous aide (Quelles sont les actions de mon programme ? Que puis-je mettre dans des fonctions ?).</li>
<li>Enfin, notre fichier <span class="italique">pendu.py</span> qui contiendra notre jeu du pendu.</li>
</ul><br>
<br>
<h3>Gérer les scores</h3><br>
Vous avez, j'espère, une petite idée de comment faire cela… mais je vais quand même clarifier : on va enregistrer dans un fichier de données, que l'on va appeler <span class="italique">scores</span> (sans aucune extension) les scores du jeu. Ces scores seront sous la forme d'un dictionnaire : en clé, nous aurons les noms des joueurs, et en valeur les scores sous la forme d'entiers.<br>
<br>
Il faut gérer les cas suivants :<br>
<br>
<ul>
<li>Le fichier n'existe pas. Là, on créée un dictionnaire vide, aucun score n'a été trouvé.</li>
<li>Le joueur n'est pas dans le dictionnaire. Dans ce cas, on l'ajoute avec un score de <span class="italique">0</span>.</li>
</ul><br>
<br>
<h3>À vous de jouer</h3><br>
Vous avez l'essentiel. Peut-être pas tout ce dont vous avez besoin, cela dépend de comment vous vous organisez, mais le but est aussi de chercher ce dont vous avez besoin. Encore une fois, c'est un exercice pratique, ne sautez pas à la correction, ça ne vous apprendra pas grand chose <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Bonne chance !
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_281291">Correction proposée</h2>
		<div class="ss_part_texte">
		Voici la correction que je vous propose. J'espère que vous êtes arrivé à un résultat satisfaisant, même si vous n'avez pas forcément réussi à tout faire. Si votre jeu marche, c'est parfait !<br>
<br>
<span class="spoiler_hidden">Secret <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden"><br>
Voici le code des trois fichiers.<br>
<br>
<h3>donnees.py</h3><br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></div></td><td class="code"><div class="syntax"><pre><span class="sd">"""Ce fichier définit quelques données, sous la forme de variables,</span>
<span class="sd">utiles au programme pendu.</span>

<span class="sd">"""</span>

<span class="c"># Nombre de coups par partie</span>
<span class="n">nb_coups</span> <span class="o">=</span> <span class="mi">8</span>

<span class="c"># Nom du fichier stockant les scores</span>
<span class="n">nom_fichier_scores</span> <span class="o">=</span> <span class="s">"scores"</span>

<span class="c"># Liste des mots du pendu</span>
<span class="n">liste_mots</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"armoire"</span><span class="p">,</span>
    <span class="s">"boucle"</span><span class="p">,</span>
    <span class="s">"buisson"</span><span class="p">,</span>
    <span class="s">"bureau"</span><span class="p">,</span>
    <span class="s">"chaise"</span><span class="p">,</span>
    <span class="s">"carton"</span><span class="p">,</span>
    <span class="s">"couteau"</span><span class="p">,</span>
    <span class="s">"fichier"</span><span class="p">,</span>
    <span class="s">"garage"</span><span class="p">,</span>
    <span class="s">"glace"</span><span class="p">,</span>
    <span class="s">"journal"</span><span class="p">,</span>
    <span class="s">"kiwi"</span><span class="p">,</span>
    <span class="s">"lampe"</span><span class="p">,</span>
    <span class="s">"liste"</span><span class="p">,</span>
    <span class="s">"montagne"</span><span class="p">,</span>
    <span class="s">"remise"</span><span class="p">,</span>
    <span class="s">"sandale"</span><span class="p">,</span>
    <span class="s">"taxi"</span><span class="p">,</span>
    <span class="s">"vampire"</span><span class="p">,</span>
    <span class="s">"volant"</span><span class="p">,</span>
<span class="p">]</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>fonctions.py</h3><br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107</pre></div></td><td class="code"><div class="syntax"><pre><span class="sd">"""Ce&nbsp;fichier&nbsp;définit&nbsp;des&nbsp;fonctions&nbsp;utiles&nbsp;pour&nbsp;le&nbsp;programme&nbsp;pendu.</span>

<span class="sd">On&nbsp;utilise&nbsp;les&nbsp;données&nbsp;du&nbsp;programme&nbsp;contenues&nbsp;dans&nbsp;donnees.py.</span>

<span class="sd">"""</span>

<span class="n">import</span>&nbsp;<span class="n">os</span>
<span class="n">import</span>&nbsp;<span class="n">pickle</span>
<span class="n">from</span>&nbsp;<span class="n">random</span>&nbsp;<span class="n">import</span>&nbsp;<span class="n">choice</span>

<span class="n">from</span>&nbsp;<span class="n">donnees</span>&nbsp;<span class="n">import</span>&nbsp;<span class="o">*</span>

<span class="c">#&nbsp;Gestion&nbsp;des&nbsp;scores</span>

<span class="n">def</span>&nbsp;<span class="n">recup_scores</span><span class="p">():</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="s">"""Cette&nbsp;fonction&nbsp;récupère&nbsp;les&nbsp;scores&nbsp;enregistrés&nbsp;si&nbsp;le&nbsp;fichier&nbsp;existe.</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;Dans&nbsp;tous&nbsp;les&nbsp;cas,&nbsp;on&nbsp;retourne&nbsp;un&nbsp;dictionnaire,&nbsp;soit&nbsp;l'objet&nbsp;dépicklé,</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;soit&nbsp;un&nbsp;dictionnaire&nbsp;vide.</span>

<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;On&nbsp;s'appuie&nbsp;sur&nbsp;nom_fichier_scores&nbsp;définit&nbsp;dans&nbsp;donnees.py.</span>

<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;"""</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span>&nbsp;<span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">nom_fichier_scores</span><span class="p">):</span>&nbsp;<span class="c">#&nbsp;le&nbsp;fichier&nbsp;existe</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c">#&nbsp;On&nbsp;le&nbsp;récupère</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">fichier_scores</span>&nbsp;<span class="o">=</span>&nbsp;<span class="nb">open</span><span class="p">(</span><span class="n">nom_fichier_scores</span><span class="p">,</span>&nbsp;<span class="s">"rb"</span><span class="p">)</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mon_depickler</span>&nbsp;<span class="o">=</span>&nbsp;<span class="n">pickle</span><span class="o">.</span><span class="n">Unpickler</span><span class="p">(</span><span class="n">fichier_scores</span><span class="p">)</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">scores</span>&nbsp;<span class="o">=</span>&nbsp;<span class="n">mon_depickler</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">fichier_scores</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">else</span><span class="p">:</span>&nbsp;<span class="c">#&nbsp;le&nbsp;fichier&nbsp;n'existe&nbsp;pas</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">scores</span>&nbsp;<span class="o">=</span>&nbsp;<span class="p">{}</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span>&nbsp;<span class="n">scores</span>

<span class="n">def</span>&nbsp;<span class="n">enregistrer_scores</span><span class="p">(</span><span class="n">scores</span><span class="p">):</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="s">"""Cette&nbsp;fonction&nbsp;se&nbsp;charge&nbsp;d'enregistrer&nbsp;les&nbsp;scores&nbsp;dans&nbsp;le&nbsp;fichier</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;nom_fichier_scores&nbsp;.&nbsp;Elle&nbsp;reçoit&nbsp;en&nbsp;paramètre&nbsp;le&nbsp;dictionnaire&nbsp;des&nbsp;scores</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;à&nbsp;enregistrer.</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;"""</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">fichier_scores</span>&nbsp;<span class="o">=</span>&nbsp;<span class="nb">open</span><span class="p">(</span><span class="n">nom_fichier_scores</span><span class="p">,</span>&nbsp;<span class="s">"wb"</span><span class="p">)</span>&nbsp;<span class="c">#&nbsp;on&nbsp;écrase&nbsp;les&nbsp;anciens&nbsp;scores</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mon_pickler</span>&nbsp;<span class="o">=</span>&nbsp;<span class="n">pickle</span><span class="o">.</span><span class="n">Pickler</span><span class="p">(</span><span class="n">fichier_scores</span><span class="p">)</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mon_pickler</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">fichier_scores</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>


<span class="c">#&nbsp;Fonction&nbsp;gérant&nbsp;les&nbsp;entrées&nbsp;d'utilisateur</span>

<span class="n">def</span>&nbsp;<span class="n">recup_nom_utilisateur</span><span class="p">():</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="s">"""Fonction&nbsp;chargée&nbsp;de&nbsp;récupérer&nbsp;le&nbsp;nom&nbsp;de&nbsp;l'utilisateur.</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;Le&nbsp;nom&nbsp;de&nbsp;l'utilisateur&nbsp;doit&nbsp;être&nbsp;composé&nbsp;de&nbsp;4&nbsp;caractères&nbsp;minimum,</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;chiffres&nbsp;et&nbsp;lettres&nbsp;exclusivement.</span>

<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;Si&nbsp;ce&nbsp;nom&nbsp;n'est&nbsp;pas&nbsp;valide,&nbsp;on&nbsp;appelle&nbsp;récursivement&nbsp;la&nbsp;fonction</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;pour&nbsp;en&nbsp;obtenir&nbsp;un&nbsp;nouveau.</span>

<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;"""</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">nom_utilisateur</span>&nbsp;<span class="o">=</span>&nbsp;<span class="nb">input</span><span class="p">(</span><span class="s">"Entrez&nbsp;votre&nbsp;nom:&nbsp;"</span><span class="p">)</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="c">#&nbsp;On&nbsp;met&nbsp;la&nbsp;première&nbsp;lettre&nbsp;en&nbsp;majuscule&nbsp;et&nbsp;les&nbsp;autres&nbsp;en&nbsp;minuscule</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">nom_utilisateur</span>&nbsp;<span class="o">=</span>&nbsp;<span class="n">nom_utilisateur</span><span class="o">.</span><span class="n">capitalize</span><span class="p">()</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span>&nbsp;<span class="ow">not</span>&nbsp;<span class="n">nom_utilisateur</span><span class="o">.</span><span class="n">isalnum</span><span class="p">()</span>&nbsp;<span class="ow">or</span>&nbsp;<span class="nb">len</span><span class="p">(</span><span class="n">nom_utilisateur</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">:</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">print</span><span class="p">(</span><span class="s">"Ce&nbsp;nom&nbsp;est&nbsp;invalide."</span><span class="p">)</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c">#&nbsp;On&nbsp;appelle&nbsp;de&nbsp;nouveau&nbsp;la&nbsp;fonction&nbsp;pour&nbsp;avoir&nbsp;un&nbsp;autre&nbsp;nom</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span>&nbsp;<span class="n">recup_nom_utilisateur</span><span class="p">()</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">else</span><span class="p">:</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span>&nbsp;<span class="n">nom_utilisateur</span>

<span class="n">def</span>&nbsp;<span class="n">recup_lettre</span><span class="p">():</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="s">"""Cette&nbsp;fonction&nbsp;est&nbsp;chargée&nbsp;de&nbsp;récupérer&nbsp;une&nbsp;lettre&nbsp;entrée&nbsp;par</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;l'utilisateur.&nbsp;Si&nbsp;la&nbsp;chaîne&nbsp;récupérée&nbsp;n'est&nbsp;pas&nbsp;une&nbsp;lettre,</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;on&nbsp;appelle&nbsp;récursivement&nbsp;la&nbsp;fonction&nbsp;jusqu'à&nbsp;obtenir&nbsp;une&nbsp;lettre.</span>

<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;"""</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lettre</span>&nbsp;<span class="o">=</span>&nbsp;<span class="nb">input</span><span class="p">(</span><span class="s">"Entrez&nbsp;une&nbsp;lettre:&nbsp;"</span><span class="p">)</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">lettre</span>&nbsp;<span class="o">=</span>&nbsp;<span class="n">lettre</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span>&nbsp;<span class="nb">len</span><span class="p">(</span><span class="n">lettre</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span>&nbsp;<span class="ow">or</span>&nbsp;<span class="ow">not</span>&nbsp;<span class="n">lettre</span><span class="o">.</span><span class="n">isalpha</span><span class="p">():</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">print</span><span class="p">(</span><span class="s">"Vous&nbsp;n'avez&nbsp;pas&nbsp;entré&nbsp;une&nbsp;lettre&nbsp;valide."</span><span class="p">)</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span>&nbsp;<span class="n">recup_lettre</span><span class="p">()</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">else</span><span class="p">:</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span>&nbsp;<span class="n">lettre</span>


<span class="c">#&nbsp;Fonctions&nbsp;du&nbsp;jeu&nbsp;de&nbsp;pendu</span>

<span class="n">def</span>&nbsp;<span class="n">choisir_mot</span><span class="p">():</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="s">"""Cette&nbsp;fonction&nbsp;retourne&nbsp;le&nbsp;mot&nbsp;choisi&nbsp;dans&nbsp;la&nbsp;liste&nbsp;des&nbsp;mots</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;liste_mots&nbsp;.</span>

<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;On&nbsp;utilise&nbsp;la&nbsp;fonction&nbsp;choice&nbsp;du&nbsp;module&nbsp;random&nbsp;(voir&nbsp;l'aide)</span>

<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;"""</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span>&nbsp;<span class="n">choice</span><span class="p">(</span><span class="n">liste_mots</span><span class="p">)</span>

<span class="n">def</span>&nbsp;<span class="n">recup_mot_masque</span><span class="p">(</span><span class="n">mot_complet</span><span class="p">,</span>&nbsp;<span class="n">lettres_trouvees</span><span class="p">):</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="s">"""Cette&nbsp;fonction&nbsp;retourne&nbsp;un&nbsp;mot&nbsp;masqué&nbsp;tout&nbsp;ou&nbsp;en&nbsp;partie,&nbsp;en&nbsp;fonction&nbsp;:</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;du&nbsp;mot&nbsp;d'origine&nbsp;(type&nbsp;str)</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;des&nbsp;lettres&nbsp;déjà&nbsp;trouvées&nbsp;(type&nbsp;list)</span>

<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;On&nbsp;retourn&nbsp;le&nbsp;mot&nbsp;d'origine&nbsp;avec&nbsp;des&nbsp;*&nbsp;remplaçant&nbsp;les&nbsp;lettres&nbsp;que&nbsp;l'on</span>
<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;n'a&nbsp;pas&nbsp;encore&nbsp;trouvé.</span>

<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;"""</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mot_masque</span>&nbsp;<span class="o">=</span>&nbsp;<span class="s">""</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span>&nbsp;<span class="n">lettre</span>&nbsp;<span class="ow">in</span>&nbsp;<span class="n">mot_complet</span><span class="p">:</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span>&nbsp;<span class="n">lettre</span>&nbsp;<span class="ow">in</span>&nbsp;<span class="n">lettres_trouvees</span><span class="p">:</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mot_masque</span>&nbsp;<span class="o">+=</span>&nbsp;<span class="n">lettre</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">else</span><span class="p">:</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mot_masque</span>&nbsp;<span class="o">+=</span>&nbsp;<span class="s">"*"</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span>&nbsp;<span class="n">mot_masque</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>pendu.py</h3><br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59</pre></div></td><td class="code"><div class="syntax"><pre><span class="sd">"""Ce fichier contient le jeu du pendu.</span>

<span class="sd">Il s'appuie sur les fichiers :</span>
<span class="sd">- donnees.py</span>
<span class="sd">- fonctions.py</span>
<span class="sd">"""</span>

<span class="kn">from</span> <span class="nn">donnees</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">fonctions</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c"># On récupère les scores de la partie</span>
<span class="n">scores</span> <span class="o">=</span> <span class="n">recup_scores</span><span class="p">()</span>

<span class="c"># On récupère un nom d'utilisateur</span>
<span class="n">utilisateur</span> <span class="o">=</span> <span class="n">recup_nom_utilisateur</span><span class="p">()</span>

<span class="c"># Si l'utilisateur n'a pas encore de score, on l'ajoute</span>
<span class="k">if</span> <span class="n">utilisateur</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">scores</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
    <span class="n">scores</span><span class="p">[</span><span class="n">utilisateur</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span> <span class="c"># 0 point pour commencer</span>

<span class="c"># Notre variable pour savoir quand arrêter la partie</span>
<span class="n">continuer_partie</span> <span class="o">=</span> <span class="s">'o'</span>

<span class="k">while</span> <span class="n">continuer_partie</span> <span class="o">!=</span> <span class="s">'n'</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Joueur {0}: {1} point(s)"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">utilisateur</span><span class="p">,</span> <span class="n">scores</span><span class="p">[</span><span class="n">utilisateur</span><span class="p">]))</span>
    <span class="n">mot_a_trouver</span> <span class="o">=</span> <span class="n">choisir_mot</span><span class="p">()</span>
    <span class="n">lettres_trouvees</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">mot_trouve</span> <span class="o">=</span> <span class="n">recup_mot_masque</span><span class="p">(</span><span class="n">mot_a_trouver</span><span class="p">,</span> <span class="n">lettres_trouvees</span><span class="p">)</span>
    <span class="n">nb_chances</span> <span class="o">=</span> <span class="n">nb_coups</span>
    <span class="k">while</span> <span class="n">mot_a_trouver</span><span class="o">!=</span><span class="n">mot_trouve</span> <span class="ow">and</span> <span class="n">nb_chances</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Mot à trouver {0} (encore {1} chances)"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">mot_trouve</span><span class="p">,</span> <span class="n">nb_chances</span><span class="p">))</span>
        <span class="n">lettre</span> <span class="o">=</span> <span class="n">recup_lettre</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">lettre</span> <span class="ow">in</span> <span class="n">lettres_trouvees</span><span class="p">:</span> <span class="c"># la lettre a déjà été entrée</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Vous avez déjà entré cette lettre."</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">lettre</span> <span class="ow">in</span> <span class="n">mot_a_trouver</span><span class="p">:</span> <span class="c"># la lettre est dans le mot à trouver</span>
            <span class="n">lettres_trouvees</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">lettre</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Bien joué."</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">nb_chances</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"... non, cette lettre ne se trouve pas dans le mot ..."</span><span class="p">)</span>
        <span class="n">mot_trouve</span> <span class="o">=</span> <span class="n">recup_mot_masque</span><span class="p">(</span><span class="n">mot_a_trouver</span><span class="p">,</span> <span class="n">lettres_trouvees</span><span class="p">)</span>

    <span class="c"># A-t-on trouvé le mot, ou nos chances sont-elles épuisées ?</span>
    <span class="k">if</span> <span class="n">mot_a_trouver</span><span class="o">==</span><span class="n">mot_trouve</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Félicitation ! Vous avez trouvé le mot {0}."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">mot_a_trouver</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"PENDU !!! Vous avez perdu."</span><span class="p">)</span>

    <span class="c"># On met à jour le score de l'utilisateur</span>
    <span class="n">scores</span><span class="p">[</span><span class="n">utilisateur</span><span class="p">]</span> <span class="o">+=</span> <span class="n">nb_chances</span>

    <span class="n">continuer_partie</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Souhaitez-vous continuer la partie (O/N) ?"</span><span class="p">)</span>
    <span class="n">continuer_partie</span> <span class="o">=</span> <span class="n">continuer_partie</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>

<span class="c"># La partie est finie, on enregistre les scores</span>
<span class="n">enregistrer_scores</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>

<span class="c"># On affiche les scores de l'utilisateur</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Vous finissez la partie avec {0} points."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">scores</span><span class="p">[</span><span class="n">utilisateur</span><span class="p">]))</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Résumé</h3><br>
Vous pouvez voir dans les fonctions demandant à l'utilisateur d'entrer des informations, un bel exemple de <strong>récursivité</strong>. Je ne vais pas détailler ce concept ici, ce n'est pas le sujet, et vous avez pu arriver au même résultat par une autre méthode plus compréhensible pour vous.<br>
<br>
Dans l'ensemble, je ne pense pas que le code soit très délicat à comprendre. Vous pouvez vous rendre compte d'à quel point le code du jeu est facile à lire grâce à nos fonctions. On délègue une partie de l'application à nos fonctions qui s'assurent que les choses sont « bien faites ». Si un bug survient, il est plus facile de modifier une fonction que tout un code sans aucune structure.<br>
<br>
Par cet exemple, j'espère que vous prendrez bien l'habitude de documenter un maximum vos fichiers et fonctions. C'est réellement un bon réflexe à avoir <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<div class="rmq attention">N'oubliez pas la spécification de l'encodage en tête de chaque fichier, ni la mise en pause du programme sous Windows.</div><br>
</div></div><br>

		</div>
		<hr>
		
	<div id="chap_conclusion">
	Le moment de détente est terminé… du moins moi, je m'arrête là <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> . Il est temps de passer aux choses sérieuses… rendez-vous dans la prochaine partie !
	</div>
	
<div>
<br>
Cette partie s'achève ici. Maintenant que vous avez appris à utiliser les objets que Python propose par défaut, il est temps d'apprendre à créer nos premières classes. Rendez-vous dans la prochaine partie !
</div>

<hr>
<h2>Partie 3 : La Programmation Orientée Objet, côté développeur</h2>
<div>
Maintenant que nous avons vu comment utiliser des objets, je crois qu'il est temps d'apprendre à créer nos premières classes, et donc à avoir nos premiers objets personnalisés. Tout au long de cette partie, vous pourrez découvrir les mécanismes qui se cachent derrière les objets que nous avons utilisé (chaîne de caractères, listes, dictionnaires, fichiers...). Je compte même aller un peu plus loin, étant donné l'importance de l'orienté objet en Python.<br>
<br>
C'est un point qui n'est pas toujours bien expliqué, d'une importance cruciale. Je vais donc faire de mon mieux pour vous présenter la programmation orientée objet en Python, en accord avec la philosophie du langage.
</div>
	
	<hr>
	<h1 id="chap_296045">Première approche des classes</h1>
	<div id="chap_intro">
	Dans ce chapitre, sans plus attendre, nous allons créer nos premières classes, nos premiers attributs, nos premières méthodes. Mais nous allons essayer de comprendre les mécanismes de la programmation orientée objet en Python. Restez concentrés, ce langage n'a pas fini de vous étonner <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> !
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_296054">Les classes, tout un monde</h2>
		<div class="ss_part_texte">
		Dans la partie précédente, j'avais brièvement décrit les objets comme des variables pouvant contenir elles-mêmes des fonctions et variables. Nous sommes allés plus loin tout au long de la seconde partie, pour découvrir que nos « fonctions contenues dans nos objets » sont appelées des méthodes. En vérité, je me suis cantonné à une définition « pratique » des objets. Alors que derrière la POO (Programmation Orientée Objet) se cache une véritable philosophie <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Pourquoi utiliser des objets ?</h3><br>
<br>
Les premiers langages de programmation n'incluaient pas l'orienté objet. Le langage C, pour ne citer que lui, n'utilise pas ce concept et il aura fallu attendre le C++ pour utiliser la puissance de l'orienté objet dans une syntaxe proche de celle du C.<br>
<br>
Java, un langage apparu à peu près en même temps que Python, définit une philosophie assez différente de celle du C++ : contrairement à ce dernier, pour coder en Java, il est nécessaire de tout ranger dans des classes. Même l'application standard <span class="italique">Hello World</span> est contenue dans une classe.<br>
<br>
En Python, la liberté est plus grande. Après tout, vous avez pu passer une partie de ce tutoriel sans connaître la façade objet de Python. Et pourtant, le langage Python est totalement orienté objet : <span class="souligne">tout est objet en Python</span>, vous n'avez pas oublié ? Quand vous croyez utiliser une bête variable, un module, une fonction…, ce sont des objets qui se cachent derrière <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Loin de moi l'idée de faire un comparatif entre différents langages. Ce que je tiens à signaler à votre attention, c'est que plusieurs langages intègrent l'orienté objet, chacun avec une philosophie distincte. Autrement dit, si vous avez appris l'orienté objet dans un autre langage, tel que le C++ ou le Java, ne prenez pas pour acquis que vous allez retrouver les même mécanismes et surtout, la même philosophie. Gardez autant que possible l'esprit dégagé de tout préjugé sur la philosophie objet de Python <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Pour l'instant, nous n'avons donc vu qu'un aspect technique de l'objet. J'irais jusqu'à dire que ce qu'on a vu jusqu'ici, ce n'était qu'une façon « un peu plus esthétique » de coder : il est plus simple et plus compréhensible d'écrire <span class="italique">ma_liste.append(5)</span> que <span class="italique">append_to_list(ma_liste, 5)</span>. Mais derrière la POO, il n'y a pas qu'un souci esthétique, loin de là.<br>
<br>
<h3>Choix du modèle</h3><br>
Bon, comme vous vous en souvenez sûrement (du moins, j'espère <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> ), une classe est un peu un modèle sur lequel on va créer des objets. C'est dans la classe qu'on va définir nos méthodes et attributs, les attributs étant des variables contenues dans notre objet.<br>
<br>
Mais qu'allons-nous modéliser ? L'orienté objet est plus qu'utile dès lors que l'on s'en sert pour modéliser, représenter, des données un peu plus complexes qu'un simple nombre, ou qu'une chaîne de caractères. Bien sûr, il existe des classes que Python définit pour nous : les nombres, les chaînes et les listes en font partie. Mais on serait bien limité si on ne pouvait faire nos propres classes.<br>
<br>
Pour l'instant, nous allons modéliser… une personne <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"> . C'est le premier exemple qui me soit venu à l'esprit, nous verrons bien d'autres exemples avant la fin de la partie.<br>
<br>
<h3>Convention de nommage</h3><br>
Loin de moi l'idée de compliquer l'exercice <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies"> , mais si on se réfère à la <a href="http://www.python.org/dev/peps/pep-0020/">PEP 8</a> de Python, il est préférable d'utiliser pour des noms de classe la convention dite <strong>Camel Case</strong>.<br>
<br>
Cette convention n'utilise pas le signe souligné _ pour séparer les mots. Le principe est de mettre chaque lettre débutant un mot par une majuscule. Par exemple : <span class="italique">MaClasse</span>.<br>
<br>
C'est donc cette convention que je vais utiliser pour les noms de classe. Libre à vous d'en changer, encore une fois rien n'est imposé <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Pour définir une nouvelle classe, on utilise le mot-clé <span class="italique">class</span>.<br>
<br>
Sa syntaxe est assez intuitive <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> : <span class="code2 python"><span class="k">class</span> <span class="nc">NomDeLaClasse</span><span class="p">:</span>
</span>.<br>
<br>
N'exécutez pas encore ce code, nous ne savons pas comment définir nos attributs et nos méthodes.<br>
<br>
Petit exercice de modélisation : que va-t-on trouver dans les caractéristiques d'une personne ? Beaucoup de choses, vous en conviendrez. On ne va en retenir que quelques-unes : le nom, le prénom, l'âge, le lieu de résidence… allez, ça suffira.<br>
<br>
Ça nous fait donc quatre attributs. Ce sont les variables internes à notre objet qui vont le caractériser. Une personne telle que nous la modélisons sera caractérisée par son nom, son prénom, son âge et son lieu de résidence.<br>
<br>
Pour définir les attributs de notre objet, il faut définir un constructeur dans notre classe. Voyons cela de plus près.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_296044">Nos premiers attributs</h2>
		<div class="ss_part_texte">
		Nous avons défini les attributs qui allaient caractériser notre objet de classe <span class="italique">Personne</span>. Maintenant, il faut définir dans notre classe une méthode spéciale, appelée un <strong>constructeur</strong>, qui est appelée invariablement quand on souhaite créer un objet depuis notre classe.<br>
<br>
Concrètement, un constructeur est une méthode de notre objet se chargeant de créer nos attributs. En vérité c'est même la méthode qui sera appelée quand on voudra créer notre objet.<br>
<br>
Voyons le code, ce sera plus parlant :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Personne</span><span class="p">:</span> <span class="c"># Définition de notre classe Personne</span>
    <span class="sd">"""Classe définissant une personne caractérisée par :</span>
<span class="sd">    — son nom</span>
<span class="sd">    — son prénom</span>
<span class="sd">    — son âge</span>
<span class="sd">    — son lieu de résidence</span>

<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c"># notre méthode constructeur</span>
        <span class="sd">"""Pour l'instant, on ne va définir qu'un seul attribut"""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">nom</span> <span class="o">=</span> <span class="s">"Dupont"</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Voyons en détail :<br>
<br>
<ul>
<li>D'abord, la définition de la classe. Elle est constituée du mot-clé <span class="italique">class</span>, du nom de la classe et des rituels deux points  « : »</li>
<li>Une <span class="italique">docstring</span> commentant la classe. Encore une fois, c'est une excellente habitude à prendre et je vous encourage à le faire systématiquement. Ce pourra être plus qu'utile quand vous vous lancerez dans de grands projets, d'autant à plusieurs. <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> </li>
<li>La définition de notre constructeur. Comme vous le voyez, il s'agit d'une définition presque « classique » d'une fonction. Elle a pour nom <span class="italique">__init__</span>, c'est invariable : tous les constructeurs en Python s'appellent ainsi. Nous verrons plus tard que les noms de méthodes entourés de part et d'autre de deux signes soulignés <span class="italique">(__nommethode__)</span> sont des <span class="souligne">méthodes spéciales</span>. Notez que dans notre définition de méthode, on passe un premier paramètre nommé <span class="italique">self</span>.</li>
<li>Une nouvelle <span class="italique">docstring</span>. Je ne complique pas inutilement, je précise donc qu'on va simplement définir un seul attribut pour l'instant dans notre constructeur.</li>
<li>Dans notre constructeur, nous trouvons l'instanciation de notre attribut <span class="italique">nom</span>. On crée une variable <span class="italique">self.nom</span> et on lui donne comme valeur <span class="italique">Dupont</span>. Je vais détailler un peu plus bas ce qui se passe ici.</li>
</ul><br>
<br>
Avant tout, pour voir le résultat en action, essayons de créer un objet issu de notre classe :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">bernard</span> <span class="o">=</span> <span class="n">Personne</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">bernard</span>
<span class="go">&lt;__main__.Personne object at 0x00B42570&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">bernard</span><span class="o">.</span><span class="n">nom</span>
<span class="go">'Dupont'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Quand on demande à l'interpréteur d'afficher directement notre objet <span class="italique">bernard</span>, il nous sort quelque chose d'un peu imbuvable… Bon, l'essentiel est la mention précisant la classe dont l'objet est issu. On peut donc vérifier que c'est bien notre classe <span class="italique">Personne</span> dont est issu notre objet. On essaye ensuite d'afficher l'attribut <span class="italique">nom</span> de notre objet <span class="italique">bernard</span> et on obtient <span class="italique">'Dupont'</span> (la valeur définie dans notre constructeur). Notez qu'on utilise le point (.), encore et toujours utilisé pour une relation d'appartenance (<span class="italique">nom</span> est un attribut de l'objet <span class="italique">bernard</span>). Encore un peu d'explications <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> :<br>
<br>
<h3>Quand on créée notre objet…</h3><br>
Quand on entre <span class="italique">Personne()</span>, on appelle le constructeur de notre classe <span class="italique">Personne</span>, d'une façon quelque peu indirecte que je ne détaillerai pas ici. Celui-ci prend en paramètre une variable un peu mystérieuse : <span class="italique">self</span>. En fait, il s'agit tout bêtement de notre objet en train de se créer. On écrit dans cet objet l'attribut <span class="italique">nom</span> le plus simplement du monde : <span class="code2 python"><span class="bp">self</span><span class="o">.</span><span class="n">nom</span> <span class="o">=</span> <span class="s">"Dupont"</span>
</span>. À la fin de l'appel au constructeur, Python retourne notre objet <span class="italique">self</span> modifié, avec notre attribut. On va réceptionner le tout dans notre variable <span class="italique">bernard</span>.<br>
<br>
Si ce n'est pas très clair, pas de panique ! Vous pouvez vous contenter de vous familiariser avec la syntaxe du constructeur Python qui sera souvent la même, et laisser l'aspect un peu théorique de côté, pour plus tard. Nous aurons l'occasion d'y revenir avant la fin du chapitre.<br>
<br>
<h3>Étoffons un peu notre constructeur</h3><br>
<div class="rmq question">Bon, on avait dit quatre attributs, on n'en a fait qu'un. Et puis notre constructeur pourrait éviter de donner toujours les mêmes valeurs par défaut à chaque fois, tout de même ! <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"> </div><br>
<br>
C'est juste. Dans un premier temps, on va se contenter de définir nos autres attributs, le prénom, l'âge, le lieu de résidence. Essayez de le faire, normalement vous ne devriez éprouver aucune difficulté.<br>
<br>
Voici le code, au cas où :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Personne</span><span class="p">:</span>
    <span class="sd">"""Classe définissant une personne caractérisée par :</span>
<span class="sd">    — son nom</span>
<span class="sd">    — son prénom</span>
<span class="sd">    — son âge</span>
<span class="sd">    — son lieu de résidence</span>

<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c"># notre méthode constructeur</span>
        <span class="sd">"""Constructeur de notre classe. Chaque attribut va être instancié</span>
<span class="sd">        avec une valeur par défaut… originale.</span>

<span class="sd">        """</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">nom</span> <span class="o">=</span> <span class="s">"Dupont"</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">prenom</span> <span class="o">=</span> <span class="s">"Jean"</span> <span class="c"># quelle originalité</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">33</span> <span class="c"># ça n'engage à rien</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">lieu_residence</span> <span class="o">=</span> <span class="s">"Paris"</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ça vous paraît évident ? Encore un petit code d'exemple <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">jean</span> <span class="o">=</span> <span class="n">Personne</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">jean</span><span class="o">.</span><span class="n">nom</span>
<span class="go">'Dupont'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">jean</span><span class="o">.</span><span class="n">prenom</span>
<span class="go">'Jean'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">jean</span><span class="o">.</span><span class="n">age</span>
<span class="go">33</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">jean</span><span class="o">.</span><span class="n">lieu_residence</span>
<span class="go">'Paris'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c"># Jean déménage…</span>
<span class="gp">... </span><span class="n">jean</span><span class="o">.</span><span class="n">lieu_residence</span> <span class="o">=</span> <span class="s">"Berlin"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">jean</span><span class="o">.</span><span class="n">lieu_residence</span>
<span class="go">'Berlin'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je sens un courant d'air… les habitués de l'objet, une minute <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
Cet exemple me paraît assez clair, sur le principe de définition des attributs, accès aux attributs d'un objet créé, modification des attributs d'un objet.<br>
<br>
Une toute petite explication en ce qui concerne la ligne 11 : dans beaucoup de tutoriels, on déconseille de modifier un attribut d'objet comme on vient de le faire, en faisant simplement <span class="italique">objet.attribut = valeur</span>. Si vous venez d'un autre langage, vous pourrez avoir entendu parler des accesseurs et mutateurs. Ces concepts sont repris dans certains tutoriels Python. Mais ils n'ont pas précisément lieu d'être dans ce langage. Tout ça, je le détaillerai dans le chapitre suivant. Pour l'instant, qu'il vous suffise de savoir que quand vous voulez modifier un attribut d'un objet, vous faites <span class="italique">objet.attribut = nouvelle_valeur</span>. Nous verrons les cas particuliers plus loin.<br>
<br>
Bon. Il nous reste encore à faire un constructeur un peu plus intelligent. Pour l'instant, quel que soit l'objet créé, il possède le même nom, prénom, âge et lieu de résidence. On peut les modifier par la suite, bien entendu, mais on peut aussi faire en sorte que le constructeur prenne plusieurs paramètres, disons... le nom et le prénom, pour commencer.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Personne</span><span class="p">:</span>
    <span class="sd">"""Classe définissant une personne caractérisée par :</span>
<span class="sd">    — son nom</span>
<span class="sd">    — son prénom</span>
<span class="sd">    — son âge</span>
<span class="sd">    — son lieu de résidence</span>

<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom</span><span class="p">,</span> <span class="n">prenom</span><span class="p">):</span>
        <span class="sd">"""Constructeur de notre classe."""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">nom</span> <span class="o">=</span> <span class="n">nom</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">prenom</span> <span class="o">=</span> <span class="n">prenom</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">33</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">lieu_residence</span> <span class="o">=</span> <span class="s">"Paris"</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et en image <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">bernard</span> <span class="o">=</span> <span class="n">Personne</span><span class="p">(</span><span class="s">"Micado"</span><span class="p">,</span> <span class="s">"Bernard"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">bernard</span><span class="o">.</span><span class="n">nom</span>
<span class="go">'Micado'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">bernard</span><span class="o">.</span><span class="n">prenom</span>
<span class="go">'Bernard'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">bernard</span><span class="o">.</span><span class="n">age</span>
<span class="go">33</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
N'oubliez pas que le premier paramètre doit être <span class="italique">self</span>. En dehors de ça, un constructeur est une fonction plutôt classique, vous pouvez définir des paramètres, par défaut ou non, nommés ou non. Quand vous voudrez créer votre objet, vous appellerez le nom de la classe en passant entre parenthèses les paramètres à entrer. Faites quelques tests, avec plus ou moins de paramètres, je pense que vous saisirez très rapidement le principe.<br>
<br>
<h3>Attributs de classe</h3><br>
Dans les exemples que nous avons vus jusqu'à présent, nos attributs sont contenus dans notre objet. Ils sont propres à l'objet : si vous créez plusieurs objets, les attributs <span class="italique">nom</span>, <span class="italique">prenom</span>, … de chacun ne seront pas forcément identiques d'un objet à l'autre. Mais on peut aussi définir des attributs dans notre classe. Voyons un exemple :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Compteur</span><span class="p">:</span>
    <span class="sd">"""Cette classe possède un attribut de classe qui s'incrémente à chaque</span>
<span class="sd">    fois que l'on crée un objet de ce type.</span>

<span class="sd">    """</span>
    <span class="n">objets_crees</span> <span class="o">=</span> <span class="mi">0</span> <span class="c"># le compteur vaut 0 au départ</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""À chaque fois qu'on créée un objet, on incrémente le compteur."""</span>
        <span class="n">Compteur</span><span class="o">.</span><span class="n">objets_crees</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On définit notre attribut de classe directement dans le corps de la classe, sous la définition et la <span class="italique">docstring</span>, avant la définition du constructeur. Quand on veut l'appeler dans le constructeur, on préfixe le nom de l'attribut de classe par le nom de la classe. Et on y accède de cette façon également, en dehors de la classe. Voyez plutôt :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">Compteur</span><span class="o">.</span><span class="n">objets_crees</span>
<span class="go">0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="n">Compteur</span><span class="p">()</span> <span class="c"># on crée un premier objet</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Compteur</span><span class="o">.</span><span class="n">objets_crees</span>
<span class="go">1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="n">Compteur</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Compteur</span><span class="o">.</span><span class="n">objets_crees</span>
<span class="go">2</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
À chaque fois qu'on crée un objet de type <span class="italique">Compteur</span>, l'attribut de classe <span class="italique">objets_crees</span> s'incrémente de 1. Ce peut être utile d'avoir des attributs de classe, quand tous nos objets doivent avoir certaines données identiques. Nous aurons l'occasion d'en reparler par la suite <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_296051">Les méthodes, la recette</h2>
		<div class="ss_part_texte">
		Les attributs sont des variables propres à notre objet, qui servent à le caractériser. Les méthodes sont plutôt des actions, comme nous l'avons vu dans la partie précédente, agissant sur l'objet. Par exemple, la méthode <span class="italique">append</span> de la classe <span class="italique">list</span> permet d'ajouter un élément dans l'objet <span class="italique">list</span> manipulé.<br>
<br>
Pour créer nos premières méthodes, nous allons modéliser… un tableau <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"> . Un tableau noir, oui c'est très bien.<br>
<br>
Notre tableau va posséder une surface (un attribut) sur lequel on pourra écrire, que l'on pourra lire et effacer. Pour créer notre classe <span class="italique">TableauNoir</span> et notre attribut <span class="italique">surface</span>, vous ne devriez pas avoir de problème :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">TableauNoir</span><span class="p">:</span>
    <span class="sd">"""Classe définissant une surface sur laquelle on peut écrire,</span>
<span class="sd">    que l'on peut lire et effacer, par jeu de méthodes. L'attribut modifié</span>
<span class="sd">    est 'surface'.</span>

<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Par défaut, notre surface est vide."""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">surface</span> <span class="o">=</span> <span class="s">""</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous avons déjà créé une méthode, aussi vous ne devriez pas être trop surpris par la syntaxe que nous allons voir. Notre constructeur est une méthode en effet, elle en garde la syntaxe. Nous allons donc écrire notre méthode <span class="italique">ecrire</span> pour commencer.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">TableauNoir</span><span class="p">:</span>
    <span class="sd">"""Classe définissant une surface sur laquelle on peut écrire,</span>
<span class="sd">    que l'on peut lire et effacer, par jeu de méthodes. L'attribut modifié</span>
<span class="sd">    est 'surface'.</span>

<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Par défaut, notre surface est vide."""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">surface</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">def</span> <span class="nf">ecrire</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message_a_ecrire</span><span class="p">):</span>
        <span class="sd">"""Méthode permettant d'écrire sur la surface du tableau.</span>
<span class="sd">        Si la surface n'est pas vide, on saute une ligne avant de rajouter</span>
<span class="sd">        le message à écrire.</span>

<span class="sd">        """</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">surface</span> <span class="o">!=</span> <span class="s">""</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">surface</span> <span class="o">+=</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">surface</span> <span class="o">+=</span> <span class="n">message_a_ecrire</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Passons aux tests :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span> <span class="o">=</span> <span class="n">TableauNoir</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span><span class="o">.</span><span class="n">surface</span>
<span class="go">''</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span><span class="o">.</span><span class="n">ecrire</span><span class="p">(</span><span class="s">"Coooool ! Ce sont les vacances !"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span><span class="o">.</span><span class="n">surface</span>
<span class="go">"Coooool ! Ce sont les vacances !"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span><span class="o">.</span><span class="n">ecrire</span><span class="p">(</span><span class="s">"Joyeux Noël !"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span><span class="o">.</span><span class="n">surface</span>
<span class="go">"Coooool ! Ce sont les vacances !\nJoyeux Noël !"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">tab</span><span class="o">.</span><span class="n">surface</span><span class="p">)</span>
<span class="go">Coooool ! Ce sont les vacances !</span>
<span class="go">Joyeux Noël !</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Notre méthode <span class="italique">ecrire</span> se charge d'écrire sur notre surface, en rajoutant un saut de ligne pour séparer chaque message.<br>
<br>
On retrouve notre paramètre <span class="italique">self</span> ici. Il est temps de voir un peu plus en détail à quoi il sert.<br>
<br>
<h3>Le paramètre self</h3><br>
Dans nos méthodes d'objet, qu'on appelle également des <strong>méthodes d'instance</strong>, on trouve dans la définition ce paramètre <span class="italique">self</span>. L'heure est venue de comprendre ce qu'il signifie :<br>
<br>
Une chose qui a son importance : quand vous créez un nouvel objet, ici un tableau noir, les attributs de l'objet sont propres à l'objet créé. C'est logique : si vous créez plusieurs tableaux noirs, ils ne vont pas tous avoir la même surface. Donc les attributs sont contenus dans l'objet.<br>
<br>
En revanche, les méthodes, elles, sont contenues dans la classe qui définit notre objet. C'est très important. Quand vous entrez <span class="italique">tab.ecrire(...)</span>, Python va chercher la méthode <span class="italique">ecrire</span> non pas dans l'objet <span class="italique">tab</span>, mais dans la classe <span class="italique">TableauNoir</span>.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span><span class="o">.</span><span class="n">ecrire</span>
<span class="go">&lt;bound method TableauNoir.ecrire of &lt;__main__.TableauNoir object at 0x00B3F3F0&gt;&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">TableauNoir</span><span class="o">.</span><span class="n">ecrire</span>
<span class="go">&lt;function ecrire at 0x00BA5810&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="n">TableauNoir</span><span class="o">.</span><span class="n">ecrire</span><span class="p">)</span>
<span class="go">Help on function ecrire in module __main__:</span>
<span class="go">ecrire(self, message_a_ecrire)</span>
<span class="go">    Méthode permettant d'écrire sur la surface du tableau.</span>
<span class="go">    Si la surface n'est pas vide, on saute une ligne avant de rajouter</span>
<span class="go">    le message à écrire.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">TableauNoir</span><span class="o">.</span><span class="n">ecrire</span><span class="p">(</span><span class="n">tab</span><span class="p">,</span> <span class="s">"essai"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span><span class="o">.</span><span class="n">surface</span>
<span class="go">'essai'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez, quand vous entrez <span class="italique">tab.ecrire(…</span> ça revient au même que si vous écrivez <span class="italique">TableauNoir.ecrire(tab, …)</span>. Votre paramètre <span class="italique">self</span>, c'est l'objet qui appelle la méthode. C'est pour cette raison que vous modifiez la surface de l'objet en appelant <span class="italique">self.surface</span>.<br>
<br>
Pour résumer, quand vous devez travailler dans une méthode de l'objet sur l'objet lui-même, vous allez passer par <span class="italique">self</span>.<br>
<br>
Le nom <span class="italique">self</span> est une très forte convention de nommage. Je vous déconseille de changer ce nom. Certains programmeurs, trouvant qu'écrire <span class="italique">self</span> à chaque fois est excessivement long, l'abrègent en une unique lettre <span class="italique">s</span>. <span class="souligne">Evitez ce raccourci</span>. D'une manière générale, évitez de changer le nom. Une méthode d'objet travaille avec le paramètre <span class="italique">self</span>.<br>
<br>
<div class="rmq question">N'est-ce pas effectivement plutôt long, de devoir toujours travailler avec <span class="italique">self</span> à chaque fois qu'on souhaite faire appel à l'objet ?</div><br>
<br>
Ca peut le sembler, oui. C'est d'ailleurs l'un des reproches qu'on fait au langage Python. Certains langages travaillent implicitement sur les attributs et méthodes d'un objet sans avoir besoin de les appeler spécifiquement. Mais c'est moins clair, et peut susciter la confusion. En Python, dès qu'on voit <span class="italique">self</span>, on sait que c'est un attribut ou une méthode interne à l'objet qui va être appelé.<br>
<br>
Bon, voyons nos autres méthodes. Nous devons encore coder <span class="italique">lire</span> qui va se charger d'afficher notre surface, et <span class="italique">effacer</span> qui va effacer le contenu de notre surface. Si vous avez compris ce qui vient de suivre, vous devriez écrire ces méthodes sans aucun problème, elles sont très simples. Sinon, n'hésitez pas à relire, jusqu'à ce que le déclic se fasse.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">TableauNoir</span><span class="p">:</span>
    <span class="sd">"""Classe définissant une surface sur laquelle on peut écrire,</span>
<span class="sd">    que l'on peut lire et effacer, par jeu de méthodes. L'attribut modifié</span>
<span class="sd">    est 'surface'.</span>

<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Par défaut, notre surface est vide."""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">surface</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">def</span> <span class="nf">ecrire</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message_a_ecrire</span><span class="p">):</span>
        <span class="sd">"""Méthode permettant d'écrire sur la surface du tableau.</span>
<span class="sd">        Si la surface n'est pas vide, on saute une ligne avant de rajouter</span>
<span class="sd">        le message à écrire.</span>

<span class="sd">        """</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">surface</span> <span class="o">!=</span> <span class="s">""</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">surface</span> <span class="o">+=</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">surface</span> <span class="o">+=</span> <span class="n">message_a_ecrire</span>
    <span class="k">def</span> <span class="nf">lire</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Cette méthode se charge tout bêtement d'afficher, grâce à print,</span>
<span class="sd">        la surface du tableau.</span>

<span class="sd">        """</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">surface</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">effacer</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Cette méthode permet d'effacer la surface du tableau."""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">surface</span> <span class="o">=</span> <span class="s">""</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et encore une fois, le code de test :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span> <span class="o">=</span> <span class="n">TableauNoir</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span><span class="o">.</span><span class="n">lire</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span><span class="o">.</span><span class="n">ecrire</span><span class="p">(</span><span class="s">"Salut tout le monde."</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span><span class="o">.</span><span class="n">ecrire</span><span class="p">(</span><span class="s">"La forme ?"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span><span class="o">.</span><span class="n">lire</span><span class="p">()</span>
<span class="go">Salut tout le monde.</span>
<span class="go">La forme ?</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span><span class="o">.</span><span class="n">effacer</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tab</span><span class="o">.</span><span class="n">lire</span><span class="p">()</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Voilà ! Tout est bon. Et avec nos méthodes bien documentées, un petit coup de <span class="code2 python"><span class="n">help</span><span class="p">(</span><span class="n">TableauNoir</span><span class="p">)</span>
</span> et vous obtenez une belle description de l'utilité de votre classe. C'est très pratique, n'oubliez pas les docstrings <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Des méthodes de classe</h3><br>
Comme on trouve des attributs propres à la classe, on trouve aussi des méthodes de classe, qui ne sont donc pas appelable depuis l'objet mais depuis la classe. C'est un peu plus rare, mais ça peut être utile parfois. Notre méthode de classe se définit exactement comme une méthode d'objet, à la différence qu'elle ne prend pas en premier paramètre <span class="italique">self</span>, puisqu'elle ne travaille sur aucun objet, mais sur la classe. Reprenons notre exemple de tout à l'heure :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Compteur</span><span class="p">:</span>
    <span class="sd">"""Cette classe possède un attribut de classe qui s'incrémente à chaque</span>
<span class="sd">    fois que l'on créée un objet de ce type.</span>

<span class="sd">    """</span>
    <span class="n">objets_crees</span> <span class="o">=</span> <span class="mi">0</span> <span class="c"># le compteur vaut 0 au départ</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""A chaque fois qu'on créée un objet, on incrémente le compteur."""</span>
        <span class="n">Compteur</span><span class="o">.</span><span class="n">objets_crees</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">def</span> <span class="nf">combien</span><span class="p">():</span>
        <span class="sd">"""Méthode de classe affichant combien d'objets ont été créés."""</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Jusqu'à présent, {0} objets ont été créés."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> \
                <span class="n">Compteur</span><span class="o">.</span><span class="n">objets_crees</span><span class="p">))</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Là encore, pour l'appeler, on ne passe pas par l'objet mais par le nom de la classe :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">Compteur</span><span class="o">.</span><span class="n">combien</span><span class="p">()</span>
<span class="go">Jusqu'à présent, 0 objets ont été créés.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="n">Compteur</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Compteur</span><span class="o">.</span><span class="n">combien</span><span class="p">()</span>
<span class="go">Jusqu'à présent, 1 objets ont été créés.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="n">Compteur</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Compteur</span><span class="o">.</span><span class="n">combien</span><span class="p">()</span>
<span class="go">Jusqu'à présent, 2 objets ont été créés.</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si vous vous emmêlez un peu avec les attributs et méthodes de classe, ce n'est pas bien grave. Retenez surtout les attributs et méthodes d'objet, c'est surtout sur ceux-ci que je me suis attardé et c'est ceux que vous retrouverez la plupart du temps <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<div class="rmq attention">Rappel</div><br>
<br>
Les noms de méthode encadrés par deux soulignés de part et d'autre sont des <strong>méthodes spéciales</strong>. Ne nommez pas vos méthodes ainsi. Nous découvrirons plus tard ces méthodes particulières.<br>
<br>
Exemple de nom de méthode à éviter : <span class="italique">__mamethode__</span>.
		</div>
		<hr>
		
	<div id="chap_conclusion">
	J'espère que cette première approche des classes vous a plu. Dans le prochain chapitre, nous allons regarder le mécanisme des propriétés et parler de l'encapsulation, pour éviter les pièges que l'on peut faire en Python. N'hésitez pas à tenter de modéliser grâce à des classes d'autres objets, ceux qui vous passent par la tête (un four à micro-onde, un fauteuil, un escalier, une chaussette...) l'océan des objets s'ouvre à vous à présent <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Évitez de passer au chapitre suivant s'il reste des zones d'ombre dans votre esprit. Prenez le temps de relire ce chapitre si cela est nécessaire.
	</div>
	
	<hr>
	<h1 id="chap_296043">Les propriétés</h1>
	<div id="chap_intro">
	Dans le chapitre précédent, nous avons appris à créer nos premiers attributs et méthodes. Mais nous avons encore assez peu parlé de la philosophie objet. Il existe quelques confusions que je vais éclaircir de mon mieux. Nous allons découvrir dans ce chapitre les propriétés, un concept propre à Python et à quelques autres langages tel le Ruby. C'est une fonctionnalité qui, à elle seule, change l'approche objet et le principe d'encapsulation. Nous allons découvrir tout cela ici <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_296049">Que dit l'encapsulation ?</h2>
		<div class="ss_part_texte">
		L'encapsulation est un principe qui consiste à cacher ou protéger certaines données de notre objet. Dans la plupart des langages orientés objet, tels le C++, le Java ou le PHP, on va considérer que nos attributs d'objet ne doivent pas être accessibles depuis l'extérieur de la classe. Autrement dit, vous n'avez pas le droit de faire, depuis l'extérieur de la classe, <span class="italique">mon_objet.mon_attribut</span>.<br>
<br>
<div class="rmq question">Mais c'est stupide ! Comment on fait pour accéder aux attributs ?</div><br>
<br>
On va définir des méthodes un peu particulières, appelées des <strong>accesseurs</strong> et <strong>mutateurs</strong>. Les accesseurs donnent accès à l'attribut. Les mutateurs permettent de le modifier. Concrètement, au lieu d'entrer <span class="italique">mon_objet.mon_attribut</span>, vous allez entrer <span class="italique">mon_objet.get_mon_attribut()</span> (<span class="souligne">get</span> signifie « récupérer », c'est le préfixe généralement utilisé pour un accesseur). Et pour modifier l'attribut, vous n'allez pas entrer <span class="italique">mon_objet.mon_attribut = valeur</span> mais <span class="italique">mon_objet.set_mon_attribut(valeur)</span> (<span class="souligne">set</span> signifie dans ce contexte « modifier », c'est le préfixe usuel pour un mutateur).<br>
<br>
<div class="rmq question">C'est bien tordu tout ça ! Pourquoi ne peut-on pas accéder aux attributs directement, comme on l'a fait dans le chapitre précédent ?</div><br>
<br>
Ah mais d'abord, je n'ai pas dit que vous ne <span class="souligne">pouviez</span> pas. Vous pouvez très bien accéder aux attributs d'un objet directement, comme on l'a fait dans le chapitre précédent. Je ne fais ici que résumer le principe d'encapsulation tel qu'on peut le trouver dans d'autres langages. En Python, c'est un peu plus subtil.<br>
<br>
Mais pour répondre à la question, il peut être très pratique de « sécuriser » certaines données de notre objet. Par exemple, faire en sorte qu'un attribut de notre objet ne soit pas modifiable. Ou alors, que dès que l'on modifie un attribut, ça mette à jour un autre attribut. Les cas sont multiples, et c'est très utile de pouvoir contrôler l'accès en lecture ou en écriture sur certains attributs de notre objet.<br>
<br>
L'inconvénient de devoir écrire des accesseurs et mutateurs, comme vous l'aurez sans doute compris, c'est qu'il faut créer deux méthodes pour chaque attribut de notre classe. D'abord, c'est assez lourd. Ensuite nos méthodes se ressemblent plutôt. Certains environnements de développement proposent, il est vrai, de créer ces accesseurs et mutateurs pour nous, automatiquement. Mais ça ne résout pas vraiment le problème, vous en conviendrez <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Python a une philosophie un peu différente : pour tous les objets dont on n'attend pas une action particulière, on va y accéder directement, comme nous l'avons fait dans le chapitre précédent. On peut y accéder et les modifier en entrant simplement <span class="italique">mon_objet.mon_attribut</span>. Et pour certains, on va créer des propriétés.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_296055">Les propriétés à la casserole</h2>
		<div class="ss_part_texte">
		Pour commencer, une petite précision : en C++ ou en Java par exemple, dans notre définition de classe, on va préciser des principes d'accès qui vont dire si l'attribut (ou le groupe d'attributs) est privé ou public. Pour schématiser, si l'attribut est public, on peut y accéder depuis l'extérieur de la classe et le modifier. S'il est privé, on ne peut pas. On doit passer par des accesseurs ou mutateurs.<br>
<br>
En Python, il n'y a pas d'attributs privés. Tout est public. Cela signifie que si vous voulez modifier un attribut depuis l'extérieur de la classe, vous le pouvez. Pour faire respecter l'encapsulation propre au langage, on va la fonder sur des conventions que nous allons découvrir un peu plus bas, mais surtout sur le bon sens de l'utilisateur de notre classe (à savoir, si j'ai écrit que cet attribut est inaccessible depuis l'extérieur de la classe, ne pas y accéder depuis l'extérieur de la classe <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> ).<br>
<br>
Les propriétés sont un moyen transparent de manipuler des attributs d'objet. Elles permettent de dire à Python : « Quand un utilisateur souhaite modifier cet attribut, fais cela. » De cette façon, on peut rendre certains attributs tout à fait inaccessibles depuis l'extérieur de la classe, ou dire qu'un attribut ne sera visible qu'en lecture et non modifiable. Ou encore, on peut faire en sorte que si on modifie un attribut, Python recalcule la valeur d'un autre attribut de l'objet.<br>
<br>
Pour l'utilisateur, c'est absolument transparent : il croit avoir, dans tous les cas, un accès direct à l'attribut. C'est dans la définition de la classe que vous allez préciser que tel ou tel attribut doit être accessible ou modifiable grâce à certaines propriétés.<br>
<br>
<div class="rmq question">Mais ces propriétés, c'est quoi ?</div><br>
<br>
Hum… eh bien je pense que pour le comprendre, il vaut mieux les voir en action <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Les propriétés sont des objets de Python un peu particuliers. Elles prennent la place d'un attribut et agissent différemment en fonction du contexte dans lequel elles sont appelées. Si on les appelle pour modifier l'attribut par exemple, elles vont rediriger vers une méthode que nous avons créée, qui gère le cas où « on souhaite modifier l'attribut ». Mais trêve de théorie <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_296048">Les propriétés en action</h2>
		<div class="ss_part_texte">
		Une propriété ne se crée pas dans le constructeur mais dans le corps de la classe. J'ai dit qu'il s'agissait d'une classe, son nom est <span class="italique">property</span>. Elle attend quatre paramètres, tous optionnels :<br>
<br>
<ul>
<li>la méthode donnant accès à l'attribut ;</li>
<li>la méthode modifiant l'attribut ;</li>
<li>la méthode appelée quand on souhaite supprimer l'attribut ;</li>
<li>la méthode appelée quand on demande de l'aide sur l'attribut.</li>
</ul><br>
<br>
En pratique, on utilise surtout les deux premiers paramètres : ceux définissant la méthode d'accès et de modification, autrement dits notre accesseur et mutateur d'objet.<br>
<br>
Mais j'imagine que ce n'est pas très clair dans votre esprit. Considérez le code suivant, je le détaillerai plus bas comme d'habitude :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Personne</span><span class="p">:</span>
    <span class="sd">"""Classe définissant une personne caractérisée par :</span>
<span class="sd">    — son nom ;</span>
<span class="sd">    — son prénom ;</span>
<span class="sd">    — son âge ;</span>
<span class="sd">    — son lieu de résidence.</span>

<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom</span><span class="p">,</span> <span class="n">prenom</span><span class="p">):</span>
        <span class="sd">"""Constructeur de notre classe."""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">nom</span> <span class="o">=</span> <span class="n">nom</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">prenom</span> <span class="o">=</span> <span class="n">prenom</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">33</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_lieu_residence</span> <span class="o">=</span> <span class="s">"Paris"</span> <span class="c"># notez le souligné _ devant le nom</span>
    <span class="k">def</span> <span class="nf">_get_lieu_residence</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Méthode qui sera appelée quand on souhaite accéder en lecture</span>
<span class="sd">        à l'attribut 'lieu_residence'.</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"On accède à l'attribut lieu_residence !"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_lieu_residence</span>
    <span class="k">def</span> <span class="nf">_set_lieu_residence</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nouvelle_residence</span><span class="p">):</span>
        <span class="sd">"""Méthode appelée quand on souhaite modifier le lieu de résidence."""</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Attention, il semble que {0} déménage à {1}."</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> \
                <span class="bp">self</span><span class="o">.</span><span class="n">prenom</span><span class="p">,</span> <span class="n">nouvelle_residence</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_lieu_residence</span> <span class="o">=</span> <span class="n">nouvelle_residence</span>
    <span class="c"># On va dire à Python que notre attribut lieu_residence pointe vers une</span>
    <span class="c"># propriété</span>
    <span class="n">lieu_residence</span> <span class="o">=</span> <span class="nb">property</span><span class="p">(</span><span class="n">_get_lieu_residence</span><span class="p">,</span> <span class="n">_set_lieu_residence</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La syntaxe générale de la classe, vous devriez (j'espère <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> ) la reconnaître. C'est concernant le lieu de résidence que ça change un peu :<br>
<br>
<ul>
<li>Tout d'abord dans le constructeur, on ne crée pas un attribut <span class="italique">self.lieu_residence</span> mais <span class="italique">self._lieu_residence</span>. Il n'y a qu'un petit caractère de différence, le signe souligné _ placé en tête du nom de l'attribut. Et pourtant ce signe change beaucoup de choses. La convention veut qu'on n'accède pas, depuis l'extérieur de la classe, à un attribut commençant par un souligné _. C'est une convention, rien ne vous l'interdit… sauf encore une fois le bon sens. <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> </li>
<li>On définit une première méthode, commençant elle aussi par un souligné _, nommée <span class="italique">_get_lieu_residence</span>. C'est la même règle que pour les attributs : on n'accède pas à une méthode commençant par un souligné _ depuis l'extérieur de la classe. Si vous avez compris ma petite explication sur les accesseurs et mutateurs, vous devriez comprendre rapidement à quoi sert cette méthode : elle se contente de retourner le lieu de résidence. Là encore, l'attribut manipulé n'est pas <span class="italique">lieu_residence</span> mais <span class="italique">_lieu_residence</span>. Comme on est dans la classe, on a le droit de le manipuler.</li>
<li>La seconde méthode a la forme d'un mutateur. Elle se nomme <span class="italique">_set_lieu_residence</span>, doit donc être aussi inaccessible depuis l'extérieur de la classe. À la différence de l'accesseur, elle prend un paramètre : le nouveau lieu de résidence. En effet, c'est une méthode qui doit être appelée quand on cherche à modifier le lieu de résidence, il lui faut donc le nouveau lieu de résidence qu'on souhaite voir attribué à l'objet.</li>
<li>Enfin, la dernière ligne de la classe est très intéressante. Il s'agit de la définition d'une propriété. On lui dit que l'attribut <span class="italique">lieu_residence</span> (cette fois, sans signe souligné _) doit être une propriété. On définit dans notre propriété la méthode d'accès (l'accesseur) et de modification (le mutateur), dans l'ordre.</li>
</ul><br>
<br>
Quand on va vouloir accéder à <span class="italique">objet.lieu_residence</span>, Python va tomber sur une propriété redirigeant vers la méthode <span class="italique">_get_lieu_residence</span>. Quand on souhaite modifier la valeur de l'attribut, en entrant <span class="italique">objet.lieu_residence = valeur</span>, Python va appeler la méthode <span class="italique">_set_lieu_residence</span> en lui passant en paramètre la nouvelle valeur.<br>
<br>
Ce n'est pas clair ? Voyez cet exemple :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">jean</span> <span class="o">=</span> <span class="n">Personne</span><span class="p">(</span><span class="s">"Micado"</span><span class="p">,</span> <span class="s">"Jean"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">jean</span><span class="o">.</span><span class="n">nom</span>
<span class="go">'Micado'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">jean</span><span class="o">.</span><span class="n">prenom</span>
<span class="go">'Jean'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">jean</span><span class="o">.</span><span class="n">age</span>
<span class="go">33</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">jean</span><span class="o">.</span><span class="n">lieu_residence</span>
<span class="go">On accède à l'attribut lieu_residence !</span>
<span class="go">'Paris'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">jean</span><span class="o">.</span><span class="n">lieu_residence</span> <span class="o">=</span> <span class="s">"Berlin"</span>
<span class="go">Attention, il semble que Jean déménage à Berlin.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">jean</span><span class="o">.</span><span class="n">lieu_residence</span>
<span class="go">On accède à l'attribut lieu_residence !</span>
<span class="go">'Berlin'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Notre accesseur et notre mutateur se contentent d'afficher un message, pour bien qu'on se rende compte que ce sont eux qui sont appelés quand on souhaite manipuler l'attribut <span class="italique">lieu_residence</span>. Vous pouvez aussi ne définir qu'un accesseur, dans ce cas l'attribut ne pourra pas être modifié.<br>
<br>
Il est aussi possible de définir en troisième position du constructeur <span class="italique">property</span> une méthode qui sera appelée quand on fera <span class="italique">del objet.lieu_residence</span>, et en quatrième position une méthode qui sera appelée quand on fera <span class="italique">help(objet.lieu_residence)</span>. Ces deux dernières fonctionnalités sont un peu moins utilisées, mais elles existent.<br>
<br>
Voilà, vous connaissez à présent la syntaxe pour créer des propriétés. Entraînez-vous, ce n'est pas toujours évident au début. C'est un concept très puissant, il serait dommage de passer à côté.<br>
<br>
<h3>Résumons le principe d'encapsulation en Python</h3><br>
<br>
Je vais condenser un peu tout le chapitre ici. Nous avons vu qu'en Python, quand on souhaitait accéder à un attribut d'un objet, on fait tout bêtement <span class="italique">objet.attribut</span>. Par contre, on doit éviter d'accéder ainsi à des attributs ou des méthodes commençant par un signe souligné _, question de convention. Si par hasard une action particulière doit être faite quand on accède à un attribut, pour le lire simplement, pour le modifier, le supprimer…, on fait appel à des propriétés. Pour l'utilisateur de la classe, ça revient au même : il entre toujours <span class="italique">objet.attribut</span>. Mais dans la définition de notre classe, on fait en sorte que l'attribut visé soit une propriété avec certaines méthodes, accesseurs, mutateurs ou autre, qui définissent ce que Python doit faire quand on souhaite lire, modifier, supprimer l'attribut.<br>
<br>
Avec ce concept, on perd beaucoup moins de temps. On ne fait pas systématiquement un accesseur et un mutateur pour chaque attribut, et le code est bien plus lisible. Autant de gagné <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
Certaines classes ont besoin qu'un traitement récurrent soit effectué sur leurs attributs. Par exemple, quand je souhaite modifier un attribut de l'objet (n'importe quel attribut), l'objet doit être enregistré dans un fichier. Dans ce cas, on n'utilisera pas les propriétés, qui sont plus utiles pour des cas particuliers, mais plutôt des méthodes spéciales, que nous découvrirons dans le chapitre suivant.
		</div>
		<hr>
		
	<div id="chap_conclusion">
	C'est fini ! Vous avez découvert l'encapsulation façon Python qui est un peu différente des autres langages. Malheureusement, beaucoup de tutoriels rédigés pour le Python prennent pour base l'encapsulation des autres langages. Ce n'est absolument pas interdit hein <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> , mais c'est un peu dommage, quand un système tel que les propriétés existe. Vous n'avez peut-être pas encore appréhendé toute la puissance de ce concept, mais nous aurons l'occasion d'y revenir.<br>
<br>
Pour l'instant, jetons un œil aux méthodes spéciales, encore un mécanisme puissant <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> (oui oui il en reste beaucoup <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> ).
	</div>
	
	<hr>
	<h1 id="chap_296050">Les méthodes spéciales</h1>
	<div id="chap_intro">
	Les méthodes spéciales sont des méthodes d'instance que Python reconnaît et sait utiliser, dans certains contextes. Elles peuvent servir à « dire quoi faire à Python » quand il se retrouve devant une expression comme <span class="italique">mon_objet1 + mon_objet2</span>, voire <span class="italique">mon_objet[indice]</span>. Et, encore plus fort, elles contrôlent comment un objet se crée et comment accéder à ses attributs.<br>
<br>
Bref, encore une fonctionnalité puissante et utile du langage que je vous invite à découvrir <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Prenez note du fait que je ne peux pas expliquer dans ce chapitre la totalité des méthodes spéciales. Il y en a qui ne sont pas de notre niveau, il y en a sur lesquelles je passerai plus vite que d'autres. En cas de doute, ou si vous êtes curieux, je vous encourage d'autant plus à aller faire un tour du côté de la documentation de Python, disponible sur <a href="http://www.python.org/">le site officiel</a>.<br>

	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_296053">Édition de l'objet et accès aux attributs</h2>
		<div class="ss_part_texte">
		Vous avez déjà vu, dès la première partie de ce chapitre, un exemple de <strong>méthode spéciale</strong>. Pour ceux qui ont la mémoire courte <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies"> , il s'agit de notre constructeur. Une méthode spéciale en Python est entourée de part et d'autre de deux signes souligné (_). Le nom d'une méthode spéciale est donc sous cette forme : <span class="italique">__methodespeciale__</span>.<br>
<br>
Pour commencer, nous allons voir les méthodes qui travaillent directement sur l'objet. Nous verrons ensuite, plus spécifiquement, les méthodes qui permettent d'accéder aux attributs.<br>
<br>
<h3>Édition de l'objet</h3><br>
Les méthodes que nous allons voir permettent de travailler sur l'objet. Elles interviennent au moment de le créer et au moment de le supprimer. La première, vous devriez la reconnaître : c'est notre constructeur. Elle s'appelle <span class="italique">__init__</span>, prend un nombre variable d'arguments et permet de contrôler la création de nos attributs.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Exemple</span><span class="p">:</span>
    <span class="sd">"""Un petit exemple de classe"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom</span><span class="p">):</span>
        <span class="sd">"""Exemple de constructeur"""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">nom</span> <span class="o">=</span> <span class="n">nom</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">autre_attribut</span> <span class="o">=</span> <span class="s">"une valeur"</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour créer notre objet, on utilise le nom de la classe et on passe, entre parenthèses, les informations qu'attend notre constructeur :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">mon_objet</span> <span class="o">=</span> <span class="n">Exemple</span><span class="p">(</span><span class="s">"un premier exemple"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
J'ai un peu simplifié ce qui se passe, mais pour l'instant c'est ce qu'il y a à retenir. Comme vous l'avez vu ensuite, on peut, dès le moment où on a créé l'objet, accéder à ses attributs grâce à <span class="italique">mon_objet.nom_attribut</span> et exécuter ses méthodes grâce à <span class="italique">mon_objet.nom_methode(...)</span>.<br>
<br>
Il existe également une autre méthode, <span class="italique">__del__</span>, qui va être appelée au moment de la destruction de l'objet.<br>
<br>
<div class="rmq question">La destruction ? Quand un objet se détruit-il ?</div><br>
<br>
Bonne question. Il y a plusieurs cas : d'abord, quand vous voulez le supprimer explicitement, grâce au mot-clé <span class="italique">del</span> (<span class="code2 python"><span class="k">del</span> <span class="n">mon_objet</span></span>). Ensuite, si l'espace de nom contenant l'objet est détruit, l'objet l'est également. Par exemple, si vous instanciez l'objet dans un corps de fonction : à la fin de l'appel à la fonction, la méthode <span class="italique">__del&lt;__</span> de l'objet sera appelée. Enfin, si votre objet résiste envers et contre tout pendant l'exécution du programme, il sera supprimé à la fin de l'exécution.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">def</span>&nbsp;<span class="n">__del__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s">"""Méthode&nbsp;appelée&nbsp;quand&nbsp;l'objet&nbsp;est&nbsp;supprimé"""</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">print</span><span class="p">(</span><span class="s">"C'est&nbsp;la&nbsp;fin&nbsp;!&nbsp;On&nbsp;me&nbsp;supprime&nbsp;!"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">À quoi ça peut bien servir, de contrôler la destruction d'un objet ?</div><br>
<br>
Souvent, à rien. Python s'en sort comme un grand garçon <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> , il n'a pas besoin d'aide. Parfois, on peut vouloir récupérer des informations d'état sur l'objet au moment de sa suppression. Mais ce n'est qu'un exemple : les méthodes spéciales sont un moyen d'exécuter des actions personnalisées sur certains objets, dans un cas précis. Si l'utilité ne saute pas aux yeux, vous pourrez en trouver une un beau jour, en codant votre projet <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Souvenez-vous que si vous ne définissez pas de méthode spéciale pour telle ou telle action, Python aura un comportement par défaut dans le contexte où cette méthode est appelée. Écrire une méthode spéciale permet de modifier ce comportement par défaut. Dans l'absolu, vous n'êtes même pas obligé d'écrire un constructeur, même si c'est un peu plus tordu <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
<h3>Représentation de l'objet</h3><br>
Nous allons voir deux méthodes spéciales qui permettent de contrôler comment l'objet est représenté et affiché. Vous avez sûrement déjà pu constater que quand on instancie des objets de nos propres classes, si on essaye de les afficher, directement dans l'interpréteur ou grâce à <span class="italique">print</span>, on obtient quelque chose assez laide :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="go">&lt;__main__.XXX object at 0x00B46A70&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On a certes les informations utiles, mais pas forcément celles qu'on veut, et l'ensemble n'est pas magnifique, il faut bien le reconnaître <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
La première méthode permettant de remédier à cet état de fait est <span class="italique">__repr__</span>. Elle affecte la façon dont est affiché l'objet quand on l'entre directement. On la redéfinit quand on souhaite faciliter le <span class="italique">debug</span> sur certains objets :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Personne</span><span class="p">:</span>
    <span class="sd">"""Classe représentant une personne"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom</span><span class="p">,</span> <span class="n">prenom</span><span class="p">):</span>
        <span class="sd">"""Constructeur de notre classe"""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">nom</span> <span class="o">=</span> <span class="n">nom</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">prenom</span> <span class="o">=</span> <span class="n">prenom</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">33</span>
    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Quand on entre notre objet dans l'interpréteur"""</span>
        <span class="k">return</span> <span class="s">"Personne: nom({0}), prénom({1}), âge({2})"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> \
                <span class="bp">self</span><span class="o">.</span><span class="n">nom</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">prenom</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">age</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et le résultat en image <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">p1</span> <span class="o">=</span> <span class="n">Personne</span><span class="p">(</span><span class="s">"Micado"</span><span class="p">,</span> <span class="s">"Jean"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p1</span>
<span class="go">Personne: nom(Micado), prénom(Jean), âge(33)</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez, la méthode <span class="italique">__repr__</span> ne prend aucun paramètre (sauf, bien entendu <span class="italique">self</span>), et retourne une chaîne de caractères : la chaîne à afficher quand on entre l'objet directement dans l'interpréteur.<br>
<br>
On peut obtenir cette chaîne grâce, également, à la fonction <span class="italique">repr</span> qui se contente d'appeler la méthode spéciale <span class="italique">__repr__</span> de l'objet passé en paramètre :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">p1</span> <span class="o">=</span> <span class="n">Personne</span><span class="p">(</span><span class="s">"Micado"</span><span class="p">,</span> <span class="s">"Jean"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">repr</span><span class="p">(</span><span class="n">p1</span><span class="p">)</span>
<span class="go">'Personne: nom(Micado), prénom(Jean), âge(33)'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il existe une seconde méthode spéciale, <span class="italique">__str__</span>, spécialement utilisée pour afficher l'objet, avec <span class="italique">print</span>. Par défaut, si aucune méthode <span class="italique">__str__</span> n'est définie, Python appelle la méthode <span class="italique">__repr__</span> de l'objet. La méthode <span class="italique">__str__</span> est également appelée si vous désirez convertir votre objet en chaîne avec le constructeur <span class="italique">str</span>.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Personne</span><span class="p">:</span>
    <span class="sd">"""Classe représentant une personne"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom</span><span class="p">,</span> <span class="n">prenom</span><span class="p">):</span>
        <span class="sd">"""Constructeur de notre classe"""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">nom</span> <span class="o">=</span> <span class="n">nom</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">prenom</span> <span class="o">=</span> <span class="n">prenom</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">33</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Méthode permettant d'afficher plus joliment notre objet"""</span>
        <span class="k">return</span> <span class="s">"{0} {1}, âgé de {2} ans"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> \
                <span class="bp">self</span><span class="o">.</span><span class="n">prenom</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">nom</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">age</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et en pratique :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">p1</span> <span class="o">=</span> <span class="n">Personne</span><span class="p">(</span><span class="s">"Micado"</span><span class="p">,</span> <span class="s">"Jean"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">p1</span><span class="p">)</span>
<span class="go">Jean Micado, âgé de 33 ans</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">chaine</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">p1</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">chaine</span>
<span class="go">'Jean Micado, âgé de 33 ans'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Accès aux attributs de notre objet</h3><br>
Nous allons découvrir trois méthodes permettant de définir comment accéder et modifier nos attributs.<br>
<br>
<h4>La méthode __getattr__</h4><br>
La méthode spéciale <span class="italique">__getattr__</span> permet de définir une méthode d'accès à nos attributs plus large que celle que Python propose par défaut. En fait, cette méthode est appelée quand vous entrez <span class="italique">objet.attribut</span> (non pas pour modifier l'attribut, simplement pour y accéder). Python recherche l'attribut et, s'il ne le trouve pas dans l'objet, et si une méthode <span class="italique">__getattr__</span> existe, il va l'appeler en passant en paramètre le nom de l'attribut recherché, sous la forme d'une chaîne de caractères.<br>
<br>
Un petit exemple ?<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">class</span> <span class="nc">Protege</span><span class="p">:</span>
<span class="gp">... </span>    <span class="sd">"""Classe possédant une méthode d'accès à ses attributs particulière :</span>
<span class="gp">... </span><span class="sd">    Si l'attribut n'est pas trouvé, on affiche une alerte et retourne None.</span>
<span class="gp">...</span>
<span class="gp">... </span><span class="sd">    """</span>
<span class="gp">... </span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="gp">... </span>        <span class="sd">"""On crée quelques attributs par défaut"""</span>
<span class="gp">... </span>        <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="gp">... </span>        <span class="bp">self</span><span class="o">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">2</span>
<span class="gp">... </span>        <span class="bp">self</span><span class="o">.</span><span class="n">c</span> <span class="o">=</span> <span class="mi">3</span>
<span class="gp">... </span>    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom</span><span class="p">):</span>
<span class="gp">... </span>        <span class="sd">"""Si Python ne trouve pas l'attribut nommé nom, il appelle</span>
<span class="gp">... </span><span class="sd">        cette méthode. On affiche une alerte.</span>
<span class="gp">...</span>
<span class="gp">... </span><span class="sd">        """</span>
<span class="gp">... </span>        <span class="k">print</span><span class="p">(</span><span class="s">"Alerte ! Il n'y a pas d'attribut {0} ici !"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">nom</span><span class="p">))</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pro</span> <span class="o">=</span> <span class="n">Protege</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pro</span><span class="o">.</span><span class="n">a</span>
<span class="go">1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pro</span><span class="o">.</span><span class="n">c</span>
<span class="go">3</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pro</span><span class="o">.</span><span class="n">e</span>
<span class="go">Alerte ! Il n'y a pas d'attribut e ici !</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous comprenez le principe ? Si l'attribut auquel on souhaite accéder existe, notre méthode n'est pas appelée. En revanche, si l'attribut n'existe pas, notre méthode <span class="italique">__getattr__</span> est appelée. On lui passe en paramètre le nom de l'attribut auquel Python essaye d'accéder. Ici, on se contente d'afficher une alerte. Mais on pourrait tout aussi bien rediriger vers un autre attribut. Par exemple, si on essaye d'accéder à un attribut qui n'existe pas, on redirige vers <span class="italique">self.c</span>. Je vous laisse faire l'essai, ça n'a rien de difficile <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h4>La méthode __setattr__</h4><br>
Cette méthode définit l'accès à un attribut destiné à être modifié. Si vous entrez <span class="italique">objet.nom_attribut = nouvelle_valeur</span>, la méthode spéciale <span class="italique">__setattr__</span> sera appelée ainsi : <span class="code2 python"><span class="n">objet</span><span class="o">.</span><span class="n">__setattr__</span><span class="p">(</span><span class="s">"nom_attribut"</span><span class="p">,</span> <span class="n">nouvelle_valeur</span><span class="p">)</span></span>. Là encore, le nom de l'attribut recherché est passé sous la forme d'une chaîne de caractères. Cette méthode permet de faire une action dès qu'un attribut est modifié, par exemple enregistrer l'objet :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom_attr</span><span class="p">,</span> <span class="n">val_attr</span><span class="p">):</span>
        <span class="sd">"""Méthode appelée quand on fait objet.nom_attr = val_attr.</span>
<span class="sd">        On se charge d'enregistrer l'objet.</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="nb">object</span><span class="o">.</span><span class="n">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom_attr</span><span class="p">,</span> <span class="n">val_attr</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">enregistrer</span><span class="p">()</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Une explication s'impose concernant la ligne <span class="italique">6</span>, je pense. Je vais faire de mon mieux, sachant que j'expliquerai bien plus en détail, dans le chapitre suivant, le concept d'héritage. Pour l'instant, il vous suffit de savoir que toutes les classes que nous créons sont héritées de la classe <span class="italique">object</span>. Cela veut dire essentiellement qu'elles reprennent les mêmes méthodes. La classe <span class="italique">object</span> est définie par Python. Quand je disais plus haut que, si vous ne définissiez pas une certaine méthode spéciale, Python avait un comportement par défaut, ce comportement est défini par la classe <span class="italique">object</span>.<br>
<br>
Toutes les méthodes spéciales sont déclarées dans <span class="italique">object</span>. Si vous faites par exemple <span class="italique">objet.attribut = valeur</span> sans avoir défini, dans votre classe, de méthode <span class="italique">__setattr__</span>, c'est la méthode <span class="italique">__setattr</span> de la classe <span class="italique">object</span> qui sera appelée.<br>
<br>
Mais si vous redéfinissez la méthode <span class="italique">__setattr__</span> dans votre classe, ce sera celle que vous définissez, et non celle de <span class="italique">object</span> qui sera appelée. Oui mais… vous ne savez pas comment Python fait, réellement, pour modifier la valeur d'un attribut. Le mécanisme derrière la méthode vous est inconnu.<br>
<br>
Si vous essayez, dans la méthode <span class="italique">__setattr__</span>, de faire quelque chose comme <span class="italique">self.attribut = valeur</span>, vous allez créer une jolie erreur : Python va vouloir modifier un attribut, il appelle <span class="italique">__setattr__</span> de la classe que vous avez définie, il tombe dans cette méthode sur nouvelle affectation d'attribut, il rappelle donc de nouveau <span class="italique">__setattr__</span>... et tout ça, jusqu'à l'infini ou presque. Python met une protection pour éviter qu'une méthode ne s'appelle elle-même à l'infini, mais ça ne règle pas le problème <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
Tout ça pour dire que dans votre méthode <span class="italique">__setattr__</span>, vous ne pouvez modifier d'attribut de la façon que vous connaissez. Si vous le faites, <span class="italique">__setattr__</span> appellera <span class="italique">__setattr__</span> qui appellera <span class="italique">__setattr__</span>… à l'infini. Donc si on souhaite modifier un attribut, on va se référer à la méthode <span class="italique">__setattr__</span> définie dans la classe <span class="italique">object</span>, la classe mère dont toutes nos classes héritent.<br>
<br>
Si toutes ces explications vous ont paru plutôt dures, ne vous en faites pas trop : je détaillerai dans le chapitre suivant ce qu'est l'héritage, vous comprendrez sûrement mieux à ce moment <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h4>La méthode __delattr__</h4><br>
Cette méthode spéciale est appelée quand on souhaite supprimer un attribut de l'objet, en faisant <span class="code2 python"><span class="k">del</span> <span class="n">objet</span><span class="o">.</span><span class="n">attribut</span></span> par exemple. Elle prend en paramètre, outre <span class="italique">self</span>, le nom de l'attribut que l'on souhaite supprimer. Voici un exemple d'une classe dont on ne peut supprimer aucun attribut :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">__delattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom_attr</span><span class="p">):</span>
        <span class="sd">"""On ne peut supprimer d'attributs, on lève l'exception</span>
<span class="sd">        AttributeError</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="k">raise</span> <span class="ne">AttributeError</span><span class="p">(</span><span class="s">"Vous ne pouvez supprimer aucun attribut de cette classe"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Là encore, si vous voulez supprimer un attribut, n'utilisez pas dans votre méthode <span class="italique">del self.attribut</span>. Sinon, vous allez mettre Python en colère <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> . Passez par <span class="italique">object.__delattr__</span> qui sait mieux que nous comment tout cela fonctionne.<br>
<br>
<h4>Un petit bonus</h4><br>
Voici quelques fonctions qui font à peu près ce que nous avons fait, mais en utilisant des chaînes de caractères pour nom d'attribut. Vous pourrez en avoir l'usage :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="go">objet = MaClasse() # On crée une instance de notre classe</span>
<span class="go">getattr(objet, "nom") # semblable à objet.nom</span>
<span class="go">setattr(objet, "nom", val) # = objet.nom = val ou objet.__setattr__("nom, val)</span>
<span class="go">delattr(objet, "nom") # = del objet.nom ou objet.__delattr__("nom")</span>
<span class="go">hasattr(objet, "nom") # renvoie True si l'attribut "nom" existe, False sinon</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Peut-être ne voyez-vous pas trop l'intérêt de ces fonctions qui prennent toutes, en premier paramètre, l'objet sur lequel travailler et en second le nom de l'attribut (sous la forme d'une chaîne), mais ce peut être très pratique parfois de travailler plutôt avec des chaînes de caractères à la place de noms d'attribut. D'ailleurs, c'est un peu ce que nous venons de faire, dans nos redéfinitions de méthodes accédant aux attributs.<br>
<br>
Là encore, si l'intérêt ne saute pas aux yeux, laissez ces fonctions de côté. Vous pourrez les retrouver par la suite <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_296047">Les méthodes de conteneur</h2>
		<div class="ss_part_texte">
		Nous allons commencer à travailler sur ce que l'on appelle la <strong>surcharge d'opérateurs</strong>. Il s'agit assez simplement d'expliquer à Python quoi faire quand on utilise tel ou tel opérateur. Nous allons ici voir quatre méthodes spéciales qui interviennent quand on travaille sur des objets conteneurs.<br>
<br>
<h3>Accès aux éléments d'un conteneur</h3><br>
Les objets conteneurs, j'espère que vous vous en souvenez <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> , ce sont les chaînes de caractères, les listes et les dictionnaires entre autre. Tous ont un point commun : ils contiennent d'autres objets, et on peut accéder à ces objets contenus grâce à l'opérateur <span class="italique">[]</span>.<br>
<br>
Les trois premières méthodes que nous allons voir sont <span class="italique">__getitem__</span>, <span class="italique">__setitem__</span> et <span class="italique">__delitem__</span>. Elles servent respectivement à définir :<br>
<br>
<ul>
<li>Quoi faire quand on entre <span class="code2 python"><span class="n">objet</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span></li>
<li>Quoi faire quand on entre <span class="code2 python"><span class="n">objet</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">valeur</span>
</span></li>
<li>Quoi faire quand on entre <span class="code2 python"><span class="k">del</span> <span class="n">objet</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span></li>
</ul><br>
<br>
Pour cet exemple, nous allons voir une classe enveloppe de dictionnaire. Les classes enveloppes sont des classes qui ressemblent à d'autres classes, mais n'en sont pas réellement. Ca vous avance ? <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"><br>
<br>
Nous allons créer une classe que nous allons appeler <span class="italique">ZDict</span>. Elle va posséder un attribut auquel on ne devra pas accéder de l'extérieur de la classe, un dictionnaire que nous appelerons <span class="italique">_dictionnaire</span>. Quand on créera un objet de type <span class="italique">ZDict</span> et qu'on voudra faire <span class="italique">objet[index]</span>, à l'intérieur de la classe on fera <span class="italique">self._dictionnaire[index]</span>. En réalité, notre classe fera semblant d'être un dictionnaire, elle réagira pareil, mais elle n'en sera pas réellement un.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">ZDict</span><span class="p">:</span>
    <span class="sd">"""Classe enveloppe d'un dictionnaire"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Notre classe n'accepte aucun paramètre"""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_dictionnaire</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
        <span class="sd">"""Cette méthode spéciale est appelée quand on fait objet[index]</span>
<span class="sd">        Elle redirige vers self._dictionnaire[index]</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_dictionnaire</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="n">valeur</span><span class="p">):</span>
        <span class="sd">"""Cette méthode est appelée quand on entre objet[index] = valeur</span>
<span class="sd">        On redirige vers self._dictionnaire[index] = valeur</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_dictionnaire</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">valeur</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous avez un exemple d'utilisation des deux méthodes <span class="italique">__getitem__</span> et <span class="italique">__setitem__</span> qui, je pense, est assez clair. Pour <span class="italique">__delitem__</span>, je pense que c'est assez évident, elle ne prend qu'un seul paramètre qui est l'index que l'on souhaite supprimer. Vous pouvez étendre cet exemple avec d'autres méthodes que nous avons vu plus haut, notamment <span class="italique">__repr__</span> et <span class="italique">__str__</span>. N'hésitez pas, entraînez-vous, tout ça peut vous servir <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>La méthode spéciale derrière le mot-clé in</h3><br>
Il existe une quatrième méthode, appelée <span class="italique">__contains__</span>, qui est utilisée quand on souhaite savoir si un objet se trouve dans un conteneur.<br>
<br>
Exemple classique :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">ma_liste</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="mi">8</span> <span class="ow">in</span> <span class="n">ma_liste</span> <span class="c"># revient au même que ...</span>
<span class="n">ma_liste</span><span class="o">.</span><span class="n">__contains__</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ainsi, si vous voulez que votre classe enveloppe puisse utiliser le mot-clé <span class="italique">in</span> comme une liste ou un dictionnaire, vous devez redéfinir cette méthode <span class="italique">__contains__</span> qui prend en paramètre, outre <span class="italique">self</span>, l'objet qui nous intéresse. Si l'objet est dans le conteneur, on doit retourner <span class="italique">True</span>, et <span class="italique">False</span> sinon.<br>
<br>
Je vous laisse redéfinir cette méthode, vous avez toutes les indications nécessaires <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Connaître la taille d'un conteneur</h3><br>
Il existe enfin une méthode spéciale <span class="italique">__len__</span>, appelée quand on souhaite connaître la taille d'un objet conteneur, grâce à la fonction <span class="italique">len</span>.<br>
<br>
<span class="italique">len(objet)</span> équivaut à <span class="italique">objet.__len__()</span>. Cette méthode spéciale ne prend aucun paramètre et retourne une taille, sous la forme d'un entier. Là encore, je vous laisse faire l'essai <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_296046">Les méthodes mathématiques</h2>
		<div class="ss_part_texte">
		Pour cette sous-partie, nous allons continuer à voir les méthodes spéciales permettant la surcharge d'opérateurs mathématiques, comme <span class="italique">+</span>, <span class="italique">-</span>, <span class="italique">*</span> et j'en passe.<br>
<br>
<h3>Ce qu'il faut savoir</h3><br>
Pour cette sous-partie, nous allons utiliser un nouvel exemple, une classe capable de contenir des durées. Ces durées seront contenues sous la forme d'un nombre de minutes et un nombre de secondes.<br>
<br>
Voici le corps de la classe, gardez-le sous la main :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Duree</span><span class="p">:</span>
    <span class="sd">"""Classe contenant des durées sous la forme d'un nombre de minutes</span>
<span class="sd">    et de secondes</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">min</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">sec</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
        <span class="sd">"""Constructeur de la classe"""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">min</span> <span class="o">=</span> <span class="nb">min</span> <span class="c"># nombre de minutes</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">sec</span> <span class="o">=</span> <span class="n">sec</span> <span class="c"># nombre de secondes</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Affichage un peu plus joli de nos objets"""</span>
        <span class="k">return</span> <span class="s">"{0:02}:{1:02}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">min</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">sec</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On définit simplement deux attributs contenant notre nombre de minutes et notre nombre de secondes, ainsi qu'une méthode pour afficher tout cela un peu mieux. Si vous vous interrogez sur l'utilisation de la méthode <span class="italique">format</span> dans la méthode <span class="italique">__str__</span>, sachez simplement que le but est de voir la durée sous la forme MM:SS (voir <a href="http://docs.python.org/py3k/library/string.html#string-formatting">la documentation de Python concernant le formatage des chaînes</a> pour plus d'informations).<br>
<br>
Créons un premier objet <span class="italique">Duree</span> que nous appelons <span class="italique">d1</span>.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">d1</span> <span class="o">=</span> <span class="n">Duree</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">d1</span><span class="p">)</span>
<span class="go">03:05</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si vous essayez de faire <span class="italique">d1 + 4</span> par exemple, vous allez obtenir une erreur. Python ne sait pas comment additionner un type <span class="italique">Duree</span> et un <span class="italique">int</span>. Il ne sait même pas comment ajouter deux durées ! Nous allons donc lui expliquer.<br>
<br>
La méthode spéciale à redéfinir est <span class="italique">__add__</span>. Elle prend en paramètre l'objet que l'on souhaite ajouter. Voici deux lignes de code qui reviennent au même :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">d1</span> <span class="o">+</span> <span class="mi">4</span>
<span class="n">d1</span><span class="o">.</span><span class="n">__add__</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez, quand vous utilisez le symbole <span class="italique">+</span> ainsi, c'est en fait la méthode <span class="italique">__add__</span> de l'objet <span class="italique">Duree</span> qui est appelée. Elle prend en paramètre l'objet que l'on souhaite ajouter, peu importe le type de l'objet en question. Et elle doit retourner un objet exploitable, ici il serait plus logique que ce soit une nouvelle durée.<br>
<br>
Si vous devez faire différentes actions en fonction du type de l'objet à ajouter, testez le résultat de <span class="italique">type(objet_a_ajouter)</span>.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">__add__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">objet_a_ajouter</span><span class="p">):</span>
        <span class="sd">"""L'objet à ajouter est un entier, le nombre de secondes"""</span>
        <span class="n">nouvelle_duree</span> <span class="o">=</span> <span class="n">Duree</span><span class="p">()</span>
        <span class="c"># On va copier self dans l'objet créé pour avoir la même durée</span>
        <span class="n">nouvelle_duree</span><span class="o">.</span><span class="n">min</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">min</span>
        <span class="n">nouvelle_duree</span><span class="o">.</span><span class="n">sec</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sec</span>
        <span class="c"># On ajoute la durée</span>
        <span class="n">nouvelle_duree</span><span class="o">.</span><span class="n">sec</span> <span class="o">+=</span> <span class="n">objet_a_ajouter</span>
        <span class="c"># Si le nombre de secondes &gt;= 60</span>
        <span class="k">if</span> <span class="n">nouvelle_duree</span><span class="o">.</span><span class="n">sec</span> <span class="o">&gt;=</span> <span class="mi">60</span><span class="p">:</span>
            <span class="n">nouvelle_duree</span><span class="o">.</span><span class="n">min</span> <span class="o">+=</span> <span class="n">nouvelle_duree</span><span class="o">.</span><span class="n">sec</span> <span class="o">//</span> <span class="mi">60</span>
            <span class="n">nouvelle_duree</span><span class="o">.</span><span class="n">sec</span> <span class="o">=</span> <span class="n">nouvelle_duree</span><span class="o">.</span><span class="n">sec</span> <span class="o">%</span> <span class="mi">60</span>
        <span class="c"># On retourne la nouvelle durée</span>
        <span class="k">return</span> <span class="n">nouvelle_duree</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Prenez le temps de comprendre le mécanisme et le petit calcul pour vous assurer d'avoir une durée cohérente. D'abord, on crée une nouvelle durée qui est l'équivalent de notre durée contenue dans <span class="italique">self</span>. On lui ajoute le nombre de secondes à ajouter et on s'assure que le temps est cohérent (le nombre de secondes n'atteint pas 60). Si le temps n'est pas cohérent, on le corrige. On retourne enfin notre nouvel objet modifié. Voici un petit code qui montre comment utiliser notre méthode :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">d1</span> <span class="o">=</span> <span class="n">Duree</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">d1</span><span class="p">)</span>
<span class="go">12:08</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">d2</span> <span class="o">=</span> <span class="n">d1</span> <span class="o">+</span> <span class="mi">54</span> <span class="c"># d1 + 54 secondes</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">d2</span><span class="p">)</span>
<span class="go">13:02</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour mieux comprendre, vous pouvez remplacer <span class="code2 python"><span class="n">d2</span> <span class="o">=</span> <span class="n">d1</span> <span class="o">+</span> <span class="mi">54</span>
</span> par <span class="code2 python"><span class="n">d2</span> <span class="o">=</span> <span class="n">d1</span><span class="o">.</span><span class="n">__add__</span><span class="p">(</span><span class="mi">54</span><span class="p">)</span>
</span>, cela revient au même. Ce remplacement n'est que pour bien comprendre le mécanisme. Il va de soi que ces méthodes spéciales ne sont pas à appeler directement depuis l'extérieur de la classe, les opérateurs n'ont pas été inventés pour rien <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
Sachez que sur le même modèle, il existe les méthodes :<br>
<br>
<ul>
<li><span class="italique">__sub__</span> : surcharge de l'opérateur <span class="italique">-</span> ;</li>
<li><span class="italique">__mul__</span> : surcharge de l'opérateur <span class="italique">*</span> ;</li>
<li><span class="italique">__truediv__</span> : surcharge de l'opérateur <span class="italique">/</span> ;</li>
<li><span class="italique">__floordiv__</span> : surcharge de l'opérateur <span class="italique">//</span> (division entière) ;</li>
<li><span class="italique">__mod__</span> : surcharge de l'opérateur <span class="italique">%</span> (modulo) ;</li>
<li><span class="italique">__pow__</span> : surcharge de l'opérateur <span class="italique">**</span> (puissance) ;</li>
<li>…</li>
</ul><br>
<br>
Il y en a d'autres que vous pouvez consulter sur la documentation de votre version de Python, sur le <a href="http://www.python.org/">site officiel</a>.<br>
<br>
<h3>Tout dépend du sens</h3><br>
Vous l'avez peut-être remarqué, et c'est assez logique si vous avez suivi mes explications, mais écrire <span class="italique">objet1 + objet2</span> ne revient pas au même qu'écrire <span class="italique">objet2 + objet1</span>, si les deux objets ont des types différents.<br>
<br>
En effet, ce sont les méthodes <span class="italique">__add__</span> de chacun des objets qui sont appelées, dans un cas ou dans l'autre.<br>
<br>
Cela signifie que quand on utilise notre classe <span class="italique">Duree</span>, si nous entrons <span class="code2 python"><span class="n">d1</span> <span class="o">+</span> <span class="mi">4</span>
</span> cela marche, alors que <span class="code2 python"><span class="mi">4</span> <span class="o">+</span> <span class="n">d1</span>
</span> ne marche pas. En effet, la class <span class="italique">int</span> ne sait pas quoi faire de votre objet <span class="italique">Duree</span>.<br>
<br>
Il existe cependant une panoplie de méthodes spéciales pour faire le travail de <span class="italique">__add__</span> mais si vous entrez l'opération dans l'autre sens. Il suffit de préfixer le nom des méthodes spéciales par un <span class="italique">r</span>.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">__radd__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">objet_a_ajouter</span><span class="p">):</span>
        <span class="sd">"""Cette méthode est appelée si on entre 4 + objet et que</span>
<span class="sd">        l'objet à ajouter (4 dans cet exemple) ne sait pas comment ajouter</span>
<span class="sd">        notre donnée. On se contente de rediriger sur __add__, puisque</span>
<span class="sd">        ici ça revient au même, l'opération doit avoir le même résultat,</span>
<span class="sd">        posée dans un sens où dans l'autre.</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="k">return</span> <span class="bp">self</span> <span class="o">+</span> <span class="n">objet_a_ajouter</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
À présent, on peut entrer <span class="italique">4 + d1</span>, ça revient au même que <span class="italique">d1 + 4</span>.<br>
<br>
N'hésitez pas à relire ces exemples s'ils vous paraissent peu clairs.<br>
<br>
<h3>D'autres opérateurs</h3><br>
Il est également possible de surcharger les opérateurs <span class="italique">+=</span>, <span class="italique">-=</span>… On préfixe les noms de méthode que nous avons vus par un <span class="italique">i</span> cette fois.<br>
<br>
Exemple de méthode <span class="italique">__iadd__</span> pour notre classe <span class="italique">Duree</span> :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">__iadd__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">objet_a_ajouter</span><span class="p">):</span>
        <span class="sd">"""L'objet à ajouter est un entier, le nombre de secondes"""</span>
        <span class="c"># On travaille directement sur self cette fois</span>
        <span class="c"># On ajoute la durée</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">sec</span> <span class="o">+=</span> <span class="n">objet_a_ajouter</span>
        <span class="c"># Si le nombre de secondes &gt;= 60</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">sec</span> <span class="o">&gt;=</span> <span class="mi">60</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">min</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sec</span> <span class="o">//</span> <span class="mi">60</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">sec</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sec</span> <span class="o">%</span> <span class="mi">60</span>
        <span class="c"># On retourne self</span>
        <span class="k">return</span> <span class="bp">self</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et en image <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">d1</span> <span class="o">=</span> <span class="n">Duree</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">d1</span> <span class="o">+=</span> <span class="mi">128</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">d1</span><span class="p">)</span>
<span class="go">10:13</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je ne peux que vous encourager à faire des tests, pour être bien sûr de comprendre le mécanisme. Je vous ai donné ici une façon de faire en la commentant, mais si vous ne pratiquez pas, ou n'essayez pas par vous-même, vous n'allez pas la retenir et vous n'allez pas forcément comprendre la logique.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_296056">Les méthodes de comparaison</h2>
		<div class="ss_part_texte">
		Pour finir, nous allos voir la surcharge des opérateurs de comparaison que vous connaissez depuis quelques temps maintenant : <span class="italique">==</span>, <span class="italique">!=</span>, <span class="italique">&lt;</span>, <span class="italique">&gt;</span>, <span class="italique">&lt;=</span>, <span class="italique">&gt;=</span>.<br>
<br>
Ces méthodes sont donc appelées si vous tentez de comparer deux objets entre eux. Comment Python sait-il que 3 est inférieur à 18 ? Une méthode spéciale de la classe <span class="italique">int</span> le permet, en simplifiant. Donc si vous voulez comparer des durées par exemple, vous allez devoir redéfinir certaines méthodes que je vais présenter plus bas. Elles devront prendre en paramètre l'objet à comparer à <span class="italique">self</span>, et doivent retourner un booléen (<span class="italique">True</span> ou <span class="italique">False</span>).<br>
<br>
Je vais me contenter de vous faire un petit tableau récapitulatif des méthodes à redéfinir pour comparer deux objets entre eux :<br>
<br>
<table class="tab_user">







<thead><tr><th>Opérateur</th><th>Méthode spéciale</th><th>Résumé</th></tr></thead><tbody><tr>
<td><span class="italique">==</span></td>
<td><span class="code2 python"><span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">objet_a_comparer</span><span class="p">):</span></span></td>
<td>Opérateur d'égalité (equal). Retourne <span class="italique">True</span> si <span class="italique">self</span> et <span class="italique">objet_a_comparer</span> sont égaux, <span class="italique">False</span> sinon</td>
</tr><tr>
<td><span class="italique">!=</span></td>
<td><span class="code2 python"><span class="k">def</span> <span class="nf">__ne__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">objet_a_comparer</span><span class="p">):</span></span></td>
<td>Différent de (non equal). Retourne <span class="italique">True</span> si <span class="italique">self</span> et <span class="italique">objet_a_comparer</span> sont différents, <span class="italique">False</span> sinon</td>
</tr><tr>
<td><span class="italique">&gt;</span></td>
<td><span class="code2 python"><span class="k">def</span> <span class="nf">__gt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">objet_a_comparer</span><span class="p">):</span></span></td>
<td>Test si <span class="italique">self</span> est strictement supérieur (greather than) à <span class="italique">objet_a_comparer</span></td>
</tr><tr>
<td><span class="italique">&gt;=</span></td>
<td><span class="code2 python"><span class="k">def</span> <span class="nf">__ge__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">objet_a_comparer</span><span class="p">):</span></span></td>
<td>Test si <span class="italique">self</span> est supérieur ou égal (greater or equal) à <span class="italique">objet_a_comparer</span></td>
</tr><tr>
<td><span class="italique">&lt;</span></td>
<td><span class="code2 python"><span class="k">def</span> <span class="nf">__lt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">objet_a_comparer</span><span class="p">):</span></span></td>
<td>Test si <span class="italique">self</span> est strictement inférieur (lower than) à <span class="italique">objet_a_comparer</span></td>
</tr><tr>
<td><span class="italique">&lt;=</span></td>
<td><span class="code2 python"><span class="k">def</span> <span class="nf">__le__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">objet_a_comparer</span><span class="p">):</span></span></td>
<td>Test si <span class="italique">self</span> est inférieur ou égal (lower or equal) à <span class="italique">objet_a_comparer</span></td>
</tr></tbody></table><br>
<br>
Sachez que ce sont ces méthodes spéciales qui sont appelées si vous voulez trier une liste qui contiendra vos objets, par exemple.<br>
<br>
Sachez également que, si Python n'arrive pas à faire <span class="italique">objet1 &lt; objet2</span>, il essayera l'opération inverse, soit <span class="italique">objet2 &gt;= objet1</span>. Cela est vrai pour les autres opérateurs de comparaison que nous venons de voir.<br>
<br>
Aller, je vais vous mettre deux exemples malgré tout, il ne tient qu'à vous de redéfinir les autres méthodes présentées plus haut <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> :<br>
<br>
<span class="spoiler_hidden">Secret <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden"><br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">autre_duree</span><span class="p">):</span>
        <span class="sd">"""Test si self et autre_duree sont égales"""</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">sec</span> <span class="o">==</span> <span class="n">autre_duree</span><span class="o">.</span><span class="n">sec</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">min</span> <span class="o">==</span> <span class="n">autre_duree</span><span class="o">.</span><span class="n">min</span>
    <span class="k">def</span> <span class="nf">__gt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">autre_duree</span><span class="p">):</span>
        <span class="sd">"""Test si self &gt; autre_duree"""</span>
        <span class="c"># On calcule le nombre de secondes de self et autre_duree</span>
        <span class="n">nb_sec1</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sec</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">min</span> <span class="o">*</span> <span class="mi">60</span>
        <span class="n">nb_sec2</span> <span class="o">=</span> <span class="n">autre_duree</span><span class="o">.</span><span class="n">sec</span> <span class="o">+</span> <span class="n">autre_duree</span><span class="o">.</span><span class="n">min</span> <span class="o">*</span> <span class="mi">60</span>
        <span class="k">return</span> <span class="n">nb_sec1</span> <span class="o">&gt;</span> <span class="n">nb_sec2</span>
</pre></div>
</td></tr></tbody></table></div><br>
</div></div><br>
<br>
Ces exemples devraient vous suffir, je pense <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Ouf ! Ce fut long, mais indispensable <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Ce chapitre présentait pas mal de méthodes. Vous ne devez pas toutes les retenir, simplement savoir où chercher dans un contexte où vous pensez en avoir besoin.<br>
<br>
Pour une liste exhaustive des méthodes spéciales, je vous renvoie à la documentation officielle de votre version de Python. Pour la V3.X, vous pouvez trouver cette liste à l'adresse <a href="http://docs.python.org/py3k/reference/datamodel.html#special-method-names">http://docs.python.org/py3k/reference/ [...] -method-names</a>. N'hésitez pas à y jeter un coup d'œil, ou à lire plus complètement la documentation, voire le tutoriel mis à votre disposition, c'est peut-être en anglais, mais c'est bien plus complet que ce que je pourrais transmettre <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
En attendant, nous allons jeter un œil du côté de l'<span class="souligne">héritage</span>, quelque chose que vous devez absolument connaître !
	</div>
	
	<hr>
	<h1 id="chap_306699">L'héritage</h1>
	<div id="chap_intro">
	J'entends souvent dire qu'un langage de programmation orienté objet n'incluant pas l'héritage serait incomplet, sinon inutile. Après avoir découvert par moi-même cette fonctionnalité, et les techniques qui en découlent, je suis forcé de reconnaître que sans l'héritage, le monde serait moins beau <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> .<br>
<br>
<div class="rmq question">Qu'a cette fonctionnalité a de si utile ?</div><br>
<br>
Nous allons le voir, bien entendu. Et je vais surtout essayer de vous montrer des exemples d'application. Car très souvent, quand on découvre l'héritage, on ne sait pas trop quoi en faire... avant qu'il ne soit trop tard <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"> .<br>
<br>
Ne vous attendez donc pas à un chapitre où vous n'allez faire que coder. Vous allez devoir vous pencher sur de la théorie et travailler sur quelques exemples de modélisation. Mais je vous guide, n'en doutez pas <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_306698">Pour bien commencer</h2>
		<div class="ss_part_texte">
		Je ne vais pas faire durer le suspense plus longtemps : l'héritage est une fonctionnalité objet qui permet de déclarer que telle classe sera elle-même modelée sur une autre classe, qu'on appelle la classe parente, ou la <strong>classe-mère</strong>. Concrètement, si une classe <span class="italique">b</span> <strong>hérite</strong> de la classe <span class="italique">a</span>, les objets créés sur le modèle de la classe <span class="italique">b</span> auront accès aux méthodes et attributs de la classe <span class="italique">a</span>.<br>
<br>
<div class="rmq question">Et c'est tout ? Ca ne sert à rien !</div><br>
<br>
Non, ce n'est pas tout, et si, ça sert énormément <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> , mais vous allez devoir me laisser un peu de temps pour vous montrer l'intérêt <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies"> .<br>
<br>
La première chose, c'est que la classe <span class="italique">b</span> dans notre exemple ne se contente pas seulement de reprendre les méthodes et attributs de la classe <span class="italique">a</span>. Elle va pouvoir en définir d'autres. D'autres méthodes et d'autres attributs qui lui seront propres, en plus des méthodes et attributs de la classe <span class="italique">a</span>. Et elle va pouvoir redéfinir les méthodes de la classe-mère, également.<br>
<br>
Prenons un petit exemple : vous définissez une classe particulière qui va implémenter, disons, certaines méthodes pour pouvoir être enregistrée dans des fichiers et lu depuis ces fichiers. Vous voulez utiliser cette classe dans une application qui contiendra beaucoup d'autres classes, dont certaines devront être enregistrées dans des fichiers. Le plus simple est de faire hériter de la classe que vous venez de coder toutes les classes qui devront produire des objets destinés à être enregistrés dans des fichiers. Si vous vous rendez compte qu'un bug se produit lors de l'enregistrement, vous n'aurez à modifier que la classe-mère, au lieu de modifier toutes les classes-filles.<br>
<br>
Cet exemple est un exemple d'utilisation de l'héritage. On peut le retrouver dans beaucoup de schémas différents cependant.<br>
<br>
Autre exemple, un programme gérant des animaux : les naturalistes ont passé des siècles à répertorier les animaux connus et à les regrouper selon une classification rigoureuse, comprenant des règnes, des embranchements, des classes, des groupes... pour finalement arriver aux espèces et aux variétés (j'en oublie, naturellement). La classe des mammifères, par exemple, comprend plusieurs sous-classes, comprenant elles-mêmes plusieurs ordres... vous saisissez l'idée. Chaque point de cette classification possède ainsi certaines caractéristiques propres que l'on retrouve dans les divisions de la classification.<br>
<br>
Ici, on pourrait construire une classe <span class="italique">Mammifere</span>, avec comme attributs particulier "l'allaitement des petits". Ensuite, il faudrait définir d'autres classes, héritées de Mammifere, possédant des attributs propres à cette subdivision des mammifères. <br>
<br>
Ces classes seraient aussi amenées à être héritées. Quand on a réussi le tour de force de représenter la classification utilisée par les naturalistes dans une hiérarchie d'objets hérités, il suffit de créer un animal, par exemple un éléphant de savane, qui reprendra les attributs de son règne animal, de sa classe mammifère, de la famille des éléphantidés (il en manque pas mal mais c'est pour l'idée <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> ).<br>
<br>
Un autre exemple ? On se rapproche de mon terrain de chasse <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> . Imaginons un jeu en ligne, un jeu de rôle pour plus de facilité. Vous n'ignorez sans doute pas que ce type de jeu permet à plusieurs joueurs, se connectant de tous les coins du monde <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> d'incarner un personnage. Ce personnage peut interragir avec les autres joueurs connectés, mais aussi avec l'univers hébergé par le serveur de jeu en ligne. On se retrouve donc avec plusieurs types de personnage :<br>
<br>
<ul>
<li>Les bots ou NPCs (Non-Playing Character) qui sont des personnages dirigés par une intelligence artificielle. Ils ne représentent pas des joueurs connectés mais des personnages de l'univers virtuel, dirigés par l'ordinateur</li>
<li>Les joueurs, comme vous et moi, qui sont connectés au jeu en ligne et interragissent avec l'univers et les autres connectés</li>
<li>Les administrateurs, en charge de construire l'univers, de veiller au bon fonctionnement du jeu voire de coder de nouvelles choses <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .</li>
</ul><br>
<br>
C'est une liste sommaire, très incomplète des différents objets que nous pourrions avoir. Si vous essayez de trier les choses dans votre esprit (ou sur papier), vous pouvez vous rendre compte que beaucoup de ces personnages reprennent des caractéristiques identiques. Par exemple, les NPCs, tout comme les joueurs et les administrateurs, doivent pouvoir se déplacer dans l'univers, lancer des sorts, combattre... mais les administrateurs auront probablement une puissance infinie et ne pourront pas être tués. De même, l'intelligence artificielle qui se cache derrière les NPCs ne doit pas s'appliquer à des joueurs connectés, puisque ce sont eux qui contrôlent leur personnage.<br>
<br>
Pour résumer, tous ces objets ont des points communs et des différences. Nous pourrions donc modéliser notre programme avec une hiérarchie d'héritage ressemblant à celle-ci :<br>
<br>
<ul>
<li>Une classe <span class="italique">Personnage</span> qui contiendra les attributs et méthodes communs à tous les personnages que nous avons vu. La capacité de se déplacer, combattre, lancer des sorts, et bien d'autres, seront définies dans cette classe.<br>
<ul>
<li>Une classe <span class="italique">NPC</span>, héritée de <span class="italique">Personnage</span>. Elle reprendra les méthodes et attributs de la classe <span class="italique">Personnage</span> en se dotant de nouveaux attributs et méthodes, comme par exemple un mécanisme d'intelligence artificielle</li>
<li>Une classe <span class="italique">Joueur</span>, héritée de <span class="italique">Personnage</span>. Tout comme <span class="italique">NPC</span>, elle reprend les mécanismes de déplacement, de combat définis dans <span class="italique">Personnage</span> mais elle ajoutera d'autres attributs et méthodes qui seront liés au fait que c'est un joueur connecté. Il n'aura pas besoin d'intelligence artificielle, puisqu'il est contrôlé à la souris et au clavier <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> <br>
<ul>
<li>Une classe <span class="italique">Administrateur</span> héritée de <span class="italique">Joueur</span>. Elle reprendra non seulement les attributs et méthodes de <span class="italique">Joueur</span>, mais aussi ceux de <span class="italique">Personnage</span> dont <span class="italique">Joueur</span> est héritée. Cette classe donnera accès à certaines fonctionnalités inaccessibles aux joueurs. On peut imaginer faire hériter cette classe de plusieurs autres qui représenteront différents niveaux d'administrateur.</li>
</ul><br>
</li>
</ul><br>
</li>
</ul><br>
<br>
La hiérarchie que je propose est loin d'être la seule possible. J'ai surtout essayé de vous montrer l'intérêt de l'héritage dans des situations assez diverses et concrètes, pour que vous vous fassiez votre idée. Les mécanismes de l'héritage, que nous allons voir maintenant, ne sont pas bien compliqués. En général, c'est surtout les idées d'application qui manquent au début. Et un programme avec beaucoup de classes sans relation d'héritage entre elles sera, d'une façon générale, moins modulable qu'un programme bien hiérarchisé.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_306701">L'héritage simple</h2>
		<div class="ss_part_texte">
		On oppose l'<strong>héritage simple</strong> que nous venons de voir théoriquement dans la sous-partie précédente, à l'<strong>héritage multiple</strong> que nous verrons dans la sous-partie suivante.<br>
<br>
Il est temps de voir la syntaxe de l'héritage. Nous allons définir une première classe <span class="italique">A</span> et une seconde classe <span class="italique">B</span>, héritée de <span class="italique">A</span>.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="sd">"""Classe A, pour illustrer notre exemple d'héritage."""</span>
    <span class="k">pass</span> <span class="c"># on laisse notre définition vide, ce n'est qu'un exemple</span>

<span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
    <span class="sd">"""Classe B, héritée de A.</span>
<span class="sd">    Elle reprend les mêmes méthodes et attributs (dans cet exemple, la classe</span>
<span class="sd">    A ne possède de toute façon ni méthodes ni attributs).</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="k">pass</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous pourrez expérimenter par la suite des exemples plus constructifs <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> . Pour l'instant, l'important est de bien noter la syntaxe, qui comme vous le voyez est des plus simple : <span class="code2 python"><span class="k">class</span> <span class="nc">MaClasse</span><span class="p">(</span><span class="n">MaClasseMere</span><span class="p">):</span></span>. Dans la définition de la classe, entre le nom et les deux points, vous précisez entre parenthèses la classe de laquelle elle doit hériter. Comme je l'ai dit, dans un premier temps toutes les méthodes de la classe <span class="italique">A</span> se retrouveront dans la classe <span class="italique">B</span>.<br>
<br>
<div class="rmq question">J'ai essayé de mettre des constructeurs dans les deux classes, mais dans la classe héritée je ne retrouve pas les attributs déclarés dans ma classe-mère, c'est normal ?</div><br>
<br>
Tout à fait. Vous vous souvenez quand je vous ai dit que les méthodes étaient définies dans la classe, alors que les attributs étaient directement déclarés dans l'instance d'objet ? Vous le voyez bien de toute façon : c'est dans notre constructeur qu'on déclare nos attributs, et on les écrit tous dans l'instance <span class="italique">self</span>.<br>
<br>
Quand une classe <span class="italique">B</span> hérite d'une classe <span class="italique">A</span>, les objets de type <span class="italique">B</span> reprennent bel et bien les méthodes de la classe <span class="italique">A</span> en même temps que celles de la classe <span class="italique">B</span>. Mais, assez logiquement, ce sont celles de la classe <span class="italique">B</span> qui sont  appelées d'abord :<br>
<br>
Si vous faites <span class="italique">objet_de_type_b.ma_methode()</span>, Python va d'abord chercher la méthode <span class="italique">ma_methode</span> dans la classe <span class="italique">B</span> dont l'objet est directement issu. Si il ne trouve pas, il va chercher récursivement dans les classes dont hérite <span class="italique">B</span>, c'est-à-dire <span class="italique">A</span> dans notre exemple. Ce mécanisme est très important : il induit que si aucune méthode n'a été redéfinie dans la classe, on cherche dans la classe-mère. On peut ainsi redéfinir dans une classe une certaine méthode, et laisser d'autres directement héritées de la classe-mère.<br>
<br>
Petit code d'exemple :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Personne</span><span class="p">:</span>
    <span class="sd">"""Classe représentant une personne."""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom</span><span class="p">):</span>
        <span class="sd">"""Constructeur de notre classe."""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">nom</span> <span class="o">=</span> <span class="n">nom</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">prenom</span> <span class="o">=</span> <span class="s">"Martin"</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Méthode appelée lors d'une conversion de l'objet en chaîne"""</span>
        <span class="k">return</span> <span class="s">"{0} {1}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">prenom</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">nom</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">AgentSpecial</span><span class="p">(</span><span class="n">Personne</span><span class="p">):</span>
    <span class="sd">"""Classe définissant un agent spécial.</span>
<span class="sd">    Elle hérite de la classe Personne.</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom</span><span class="p">,</span> <span class="n">matricule</span><span class="p">):</span>
        <span class="sd">"""Un agent se définit par son nom et son matricule"""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">nom</span> <span class="o">=</span> <span class="n">nom</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">matricule</span> <span class="o">=</span> <span class="n">matricule</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Méthode appelée lors d'une conversion de l'objet en chaîne"""</span>
        <span class="k">return</span> <span class="s">"Agent {0}, matricule {1}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">nom</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">matricule</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous voyez ici un exemple d'héritage simple. Seulement, si vous essayez de créer des agents spéciaux, vous risquez d'avoir de drôles de surprises :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">agent</span> <span class="o">=</span> <span class="n">AgentSpecial</span><span class="p">(</span><span class="s">"Fisher"</span><span class="p">,</span> <span class="s">"18327-121"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">agent</span><span class="o">.</span><span class="n">nom</span>
<span class="go">'Fisher'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">agent</span><span class="p">)</span>
<span class="go">Agent Fisher, matricule 18327-121</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">agent</span><span class="o">.</span><span class="n">prenom</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n-Identifier">&lt;module&gt;</span>
<span class="nc">AttributeError</span>: <span class="n-Identifier">'AgentSpecial' object has no attribute 'prenom'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Argh... mais tu avais pas dit qu'une classe reprenait les méthodes et attributs de sa classe-mère ?</div><br>
<br>
Si. Mais en suivant bien l'exécution, vous allez comprendre : tout commence à la création de l'objet. Quel constructeur appeler ? Si il n'y avait pas de constructeur défini dans notre classe <span class="italique">AgentSpecial</span>, Python appellerait celui de <span class="italique">Personne</span>. Mais il en existe bel et bien un dans la classe <span class="italique">AgentSpecial</span> et c'est donc celui-ci qui est appelé. Dans ce constructeur, on définit deux attributs, <span class="italique">nom</span> et <span class="italique">matricule</span>. Mais c'est tout : le constructeur de la classe <span class="italique">Personne</span> n'est pas appelé, sauf si vous l'appelez explicitement dans le constructeur d'<span class="italique">AgentSpecial</span>.<br>
<br>
Dans le premier chapitre, je vous ai expliqué que <span class="italique">mon_objet.ma_methode()</span> revenait au même que <span class="italique">MaClasse.ma_methode(mon_objet)</span>. Dans notre méthode <span class="italique">ma_methode</span>, le premier paramètre <span class="italique">self</span> sera <span class="italique">mon_objet</span>. Nous allons nous servir de cette équivalence. La plupart du temps, faire <span class="italique">mon_objet.ma_methode()</span> suffit. Mais dans une relation d'héritage, il peut y avoir, comme nous l'avons vu, plusieurs méthodes du même nom définies dans différentes classes. Laquelle appeler ? Python choisit, si il la trouve, celle définie directement dans la classe dont est issu l'objet, et sinon parcourt la hiérarchie de l'héritage jusqu'à tomber sur la méthode. Mais on peut aussi se servir de la notation <span class="italique">MaClasse.ma_methode(mon_objet)</span> pour appeler une méthode précise d'une classe précise. Et cela est utile dans notre cas <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Personne</span><span class="p">:</span>
    <span class="sd">"""Classe représentant une personne."""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom</span><span class="p">):</span>
        <span class="sd">"""Constructeur de notre classe."""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">nom</span> <span class="o">=</span> <span class="n">nom</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">prenom</span> <span class="o">=</span> <span class="s">"Martin"</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Méthode appelée lors d'une conversion de l'objet en chaîne"""</span>
        <span class="k">return</span> <span class="s">"{0} {1}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">prenom</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">nom</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">AgentSpecial</span><span class="p">(</span><span class="n">Personne</span><span class="p">):</span>
    <span class="sd">"""Classe définissant un agent spécial.</span>
<span class="sd">    Elle hérite de la classe Personne.</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom</span><span class="p">,</span> <span class="n">matricule</span><span class="p">):</span>
        <span class="sd">"""Un agent se définit par son nom et son matricule"""</span>
        <span class="c"># on appelle explicitement le constructeur de Personne :</span>
        <span class="n">Personne</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">matricule</span> <span class="o">=</span> <span class="n">matricule</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Méthode appelée lors d'une conversion de l'objet en chaîne"""</span>
        <span class="k">return</span> <span class="s">"Agent {0}, matricule {1}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">nom</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">matricule</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si ça vous paraît encore un peu vague, expérimentez : c'est toujours le meilleur moyen. Entraînez-vous, contrôlez l'écriture des attributs, ou revenez au premier chapitre de cette partie pour vous raffraîchir la mémoire au sujet du paramètre <span class="italique">self</span>, bien qu'à force de manipulations vous avez du comprendre l'idée.<br>
<br>
Reprenons notre code de tout à l'heure qui, cette fois, passe sans problème :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">agent</span> <span class="o">=</span> <span class="n">AgentSpecial</span><span class="p">(</span><span class="s">"Fisher"</span><span class="p">,</span> <span class="s">"18327-121"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">agent</span><span class="o">.</span><span class="n">nom</span>
<span class="go">'Fisher'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">agent</span><span class="p">)</span>
<span class="go">Agent Fisher, matricule 18327-121</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">agent</span><span class="o">.</span><span class="n">prenom</span>
<span class="go">'Martin'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cette fois, notre attribut <span class="italique">prenom</span> se trouve bien dans notre agent spécial, car le constructeur de la classe <span class="italique">AgentSpecial</span> appelle explicitement celui de <span class="italique">Personne</span>.<br>
<br>
Vous pouvez noter également que dans notre constructeur d'<span class="italique">AgentSpecial</span>, on n'instancie pas notre attribut <span class="italique">nom</span>. Celui-ci est en effet écrit par le constructeur de la classe <span class="italique">Personne</span> que nous appelons en lui passant en paramètre le nom de notre agent.<br>
<br>
<h3>Petite précision</h3><br>
Dans le chapitre précédent, je suis passé très rapidement sur l'héritage, ne voulant pas trop m'y attarder et brouiller les cartes inutilement <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> . Mais j'ai expliqué brièvement que toutes les classes que vous créez héritent de la classe <span class="italique">object</span>. C'est elle, notamment, qui définit toutes les méthodes spéciales que nous avons vu dans le chapitre précédent et qui connaît, bien mieux que nous, le mécanisme interne de l'objet. Vous devriez un peu mieux, à présent, comprendre le code du chapitre précédent. Le voici, en substance :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom_attribut</span><span class="p">,</span> <span class="n">valeur_attribut</span><span class="p">):</span>
        <span class="sd">"""Méthode appelée quand on fait objet.attribut = valeur"""</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Attention, on modifie l'attribut {0} de l'objet !"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">nom_attribut</span><span class="p">))</span>
        <span class="nb">object</span><span class="o">.</span><span class="n">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nom_attribut</span><span class="p">,</span> <span class="n">valeur_attribut</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
En redéfinissant notre méthode <span class="italique">__setattr__</span>, on ne peut, dans le corps de cette méthode, modifier les valeurs de nos attributs comme on le fait habituellement (<span class="italique">self.attribut = valeur</span>) car alors, la méthode s'appellerait elle-même. Donc on fait appel à la méthode <span class="italique">__setattr__</span> de la classe <span class="italique">object</span>, cette classe dont héritent implicitement toutes nos classes. On est sûr que la méthode de cette classe sait écrire une valeur dans un attribut, alors que nous ignorons le mécanisme et que nous n'avons pas besoin de le connaître : c'est la magie du procédé, une fois qu'on a bien compris le principe <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Deux fonctions très pratiques</h3><br>
Python définit deux fonctions qui peuvent s'avérer utiles dans bien des cas : <span class="italique">issubclass</span> et <span class="italique">isinstance</span>.<br>
<br>
<h4>issubclass</h4><br>
<br>
Comme son nom l'indique, elle vérifie si une classe est une sous-classe d'une autre classe. Elle retourne <span class="italique">True</span> si c'est le cas, <span class="italique">False</span> sinon :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="nb">issubclass</span><span class="p">(</span><span class="n">AgentSpecial</span><span class="p">,</span> <span class="n">Personne</span><span class="p">)</span> <span class="c"># AgentSpecial hérite de Personne</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">issubclass</span><span class="p">(</span><span class="n">AgentSpecial</span><span class="p">,</span> <span class="nb">object</span><span class="p">)</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">issubclass</span><span class="p">(</span><span class="n">Personne</span><span class="p">,</span> <span class="nb">object</span><span class="p">)</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">issubclass</span><span class="p">(</span><span class="n">Personne</span><span class="p">,</span> <span class="n">AgentSpecial</span><span class="p">)</span> <span class="c"># Personne n'hérite pas d'AgentSpecial</span>
<span class="go">False</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h4>isinstance</h4><br>
<br>
<span class="italique">isinstance</span> permet de savoir si un objet est issu d'une classe ou de ses classe-filles :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">agent</span> <span class="o">=</span> <span class="n">AgentSpecial</span><span class="p">(</span><span class="s">"Fisher"</span><span class="p">,</span> <span class="s">"18327-121"</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span> <span class="n">AgentSpecial</span><span class="p">)</span> <span class="c"># agent est une instance d'AgentSpecial</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span> <span class="n">Personne</span><span class="p">)</span> <span class="c"># agent est une instance héritée de Personne</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ces quelques exemples suffisent, je pense. Peut-être devrez-vous attendre un peu avant de trouver une utilité à ces deux fonctions, mais ce moment viendra <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_306700">L'héritage multiple</h2>
		<div class="ss_part_texte">
		Python inclut un mécanisme permettant l'<strong>héritage multiple</strong>. L'idée est en substance très simple : au lieu d'hériter d'une seule classe, on peut en hériter de plusieurs.<br>
<br>
<div class="rmq question">Ce n'est pas ce qui se passe, quand on hérite d'une classe qui hérite elle-même d'une autre classe ?</div><br>
<br>
Pas tout à fait. La hiérarchie de l'héritage simple permet d'étendre des méthodes et attributs d'une classe à plusieurs autres, mais la structure reste fermée. Pour mieux comprendre, considérez cet exemple :<br>
<br>
On peut s'asseoir dans un fauteuil. On peut dormir dans un lit. Mais on peut s'asseoir et dormir dans certains canapés (la plupart en fait, avec un peu de bonne volonté <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies"> ). Notre classe <span class="italique">Fauteuil</span> pourra hériter de la classe <span class="italique">ObjetPourSAsseoir</span> et notre classe <span class="italique">Lit</span>, de notre classe <span class="italique">ObjetPourDormir</span>. Mais notre classe <span class="italique">Canape</span> alors ? Elle devra logiquement hériter de nos deux classes <span class="italique">ObjetPourSAsseoir</span> et <span class="italique">ObjetPourDormir</span>. C'est un cas où l'héritage multiple pourrait s'avérer utile.<br>
<br>
Assez souvent, on utilisera l'héritage multiple pour des classes qui ont besoin de certaines fonctionnalités, définies dans une classe-mère. Par exemple, une classe peut produire des objets destinés à être enregistrés dans des fichiers. On peut faire hériter de cette classe toutes celles qui produiront des objets à enregistrer dans des fichiers. Mais ces mêmes classes pourront hériter d'autres classes, incluant, pourquoi pas, d'autres fonctionnalités.<br>
<br>
C'est une des utilisations de l'héritage multiple, et il en existe d'autres. Bien souvent, l'utilisation de cette fonctionnalité ne vous semblera évidente qu'en vous penchant sur la hiérarchie d'héritage de votre programme. Pour l'instant, je vais me contenter de vous donner la syntaxe et un peu de théorie supplémentaire, en vous encourageant à essayer par vous-même :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">MaClasseHeritee</span><span class="p">(</span><span class="n">MaClasseMere1</span><span class="p">,</span> <span class="n">MaClasseMere2</span><span class="p">):</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous pouvez faire hériter votre classe de plus de deux autres classes. Au lieu de préciser, comme dans les cas d'héritage simple, une seule classe-mère entre parenthèses, vous en précisez plusieurs, séparées par des virgules.<br>
<br>
<h3>Recherche des méthodes</h3><br>
La recherche des méthodes se fait dans l'ordre de la définition de la classe. Dans l'exemple ci-dessus, si on appelle une méthode d'un objet issu de <span class="italique">MaClasseHeritee</span>, on va d'abord chercher dans la classe <span class="italique">MaClasseHeritee</span>. Si la méthode n'est pas trouvée, on la cherche d'abord dans <span class="italique">MaClasseMere1</span>. Encore une fois, si la méthode n'est pas trouvée, on cherche dans toutes les classe-mères de la classe <span class="italique">MaClasseMere1</span>, si elle en a, et selon le même système. Si, encore et toujours, on ne trouve pas la méthode, on la recherche dans <span class="italique">MaClasseMere2</span> et ses classe-mères successives, ainsi de suite.<br>
<br>
C'est donc l'ordre de définition des classe-mères qui importe. On va chercher la méthode dans les classe-mères de gauche à droite. Dans chaque classe dans laquelle on recherche, si la méthode n'est pas trouvée, on va chercher dans ses classe-mères, et ainsi de suite.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_306697">Retour sur les exceptions</h2>
		<div class="ss_part_texte">
		Nous ne sommes pas revenu depuis la première partie sur les exceptions. Toutefois, ce chapitre me donne une opportunité d'aller un peu plus loin <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Les exceptions sont non seulement des classes, mais des classes hiérarchisées selon une relation d'héritage précise.<br>
<br>
Cette relation d'héritage devient importante quand vous utilisez le mot-clé <span class="italique">except</span>. En effet, le type de l'exception que vous précisez après est intercepté... ainsi que toutes les classes qui héritent de ce type.<br>
<br>
<div class="rmq question">Mais comment fait-on pour savoir qu'une exception hérite d'autres exceptions ?</div><br>
<br>
Il y a plusieurs possibilités. Si vous vous intéressez à une exception en particulier, consultez l'aide qui est liée.<br>
<br>
<span class="code">Code : Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Help&nbsp;on&nbsp;class&nbsp;AttributeError&nbsp;in&nbsp;module&nbsp;builtins:

class&nbsp;AttributeError(Exception)
&nbsp;|&nbsp;&nbsp;Attribute&nbsp;not&nbsp;found.
&nbsp;|
&nbsp;|&nbsp;&nbsp;Method&nbsp;resolution&nbsp;order:
&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AttributeError
&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exception
&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BaseException
&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;object</pre></div></td></tr></tbody></table></div><br>
<br>
Vous apprenez ici que l'exception <span class="italique">AttributeError</span> hérite de <span class="italique">Exception</span>, qui hérite elle-même de <span class="italique">BaseException</span>.<br>
<br>
Vous pouvez également retrouver la hiérarchie des exceptions built-in à l'adresse <a href="http://docs.python.org/py3k/library/exceptions.html#exception-hierarchy">http://docs.python.org/py3k/library/ex [...] ion-hierarchy</a>.<br>
<br>
Ne sont répertoriées ici que les exceptions dites <span class="souligne">built-in</span>. D'autres peuvent être définies dans des modules que vous utiliserez, et vous pouvez même en créer vous-même (nous allons voir ça un peu plus bas).<br>
<br>
Pour l'instant, souvenez-vous que quand vous entrez <span class="italique">except TypeException</span>, vous pourrez intercepter toutes les exceptions du type <span class="italique">TypeException</span> mais aussi celles des classes héritées de <span class="italique">TypeException</span>.<br>
<br>
La plupart des exceptions sont levées pour signaler une erreur... mais pas toutes. L'exception <span class="italique">KeyboardInterupt</span> est levée quand vous interrompez votre programme, par exemple par CTRL + C. Si bien que quand on souhaite intercepter toutes les erreurs potentielles, on évitera de rentrer un simple <span class="italique">except:</span> et on le remplacera par <span class="italique">except Exception:</span>, toutes les exceptions "d'erreurs" étant dérivées de <span class="italique">Exception</span>.<br>
<br>
<h3>Création d'exceptions personnalisées</h3><br>
Il peut vous être utile de créer vos propres exceptions. Puisque les exceptions sont des classes, comme nous venons de le voir, rien ne vous empêche de créer les vôtre. Vous pourrez les lever avec <span class="italique">raise</span>, les intercepter avec <span class="italique">except</span>.<br>
<br>
<h4>Se positionner dans la hiérarchie</h4><br>
Vos exceptions doivent hériter d'une exception <span class="souligne">built-in</span> proposée par Python. Commencez par parcourir la <a href="http://docs.python.org/py3k/library/exceptions.html#exception-hierarchy">hiérarchie des exceptions built-in</a> pour voir si votre exception peut être dérivée d'une exception qui lui serai proche. La plupart du temps, vous devrez choisir entre ces deux exceptions :<br>
<br>
<ul>
<li><span class="italique">BaseException</span> : la classe-mère de <span class="souligne">toutes</span> les exceptions. La plupart du temps si vous faites hériter votre classe de <span class="italique">BaseException</span>, ce sera pour modéliser une exception qui ne sera pas foncièrement une erreur, par exemple une interruption dans le traitement de votre programme</li>
<li><span class="italique">Exception</span> : c'est de cette classe que vos exceptions hériteront la plupart du temps. C'est la classe-mère de toutes les exceptions "d'erreurs"</li>
</ul><br>
<br>
Si vous pouvez trouver, dans le contexte, une exception qui se trouve plus bas dans la hiérarchie, c'est toujours mieux <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<div class="rmq question">Que doit contenir notre classe exception ?</div><br>
<br>
Deux choses : un constructeur <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> , et une méthode <span class="italique">__str__</span> car au moment où l'exception est levée, elle doit être affichée. Souvent, votre constructeur ne prendra en paramètre que le message d'erreur, et la méthode <span class="italique">__str__</span> retournera ce message :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">MonException</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
    <span class="sd">"""Exception levée dans un certain contexte... qui reste à définir"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="sd">"""On se contente de stocker le message d'erreur"""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">message</span> <span class="o">=</span> <span class="n">message</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""On retourne le message"""</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">message</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cette exception s'utilisera le plus simplement du monde :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5</pre></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">raise</span> <span class="n">MonException</span><span class="p">(</span><span class="s">"OUPS... j'ai tout cassé"</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n-Identifier">&lt;module&gt;</span>
<span class="nc">__main__.MonException</span>: <span class="n-Identifier">OUPS... j'ai tout cassé</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Mais vos exceptions peuvent aussi prendre plusieurs paramètres à l'instanciation :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">ErreurAnalyseFichier</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
    <span class="sd">"""Cette exception est levée quand un fichier (de configuration)</span>
<span class="sd">    n'a pas pu être analysé.</span>
<span class="sd">    </span>
<span class="sd">    Attributs :</span>
<span class="sd">        fichier -- le nom du fichier posant problème</span>
<span class="sd">        ligne -- le numéro de la ligne posant problème</span>
<span class="sd">        message -- le problème proprement dit</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fichier</span><span class="p">,</span> <span class="n">ligne</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="sd">"""Constructeur de notre exception"""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">fichier</span> <span class="o">=</span> <span class="n">fichier</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ligne</span> <span class="o">=</span> <span class="n">ligne</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">message</span> <span class="o">=</span> <span class="n">message</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Affichage de l'exception"""</span>
        <span class="k">return</span> <span class="s">"[{0}:{1}]: {2}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">fichier</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">ligne</span><span class="p">,</span> \
                <span class="bp">self</span><span class="o">.</span><span class="n">message</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et pour lever cette exception :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">raise</span> <span class="n">ErreurAnalyseFichier</span><span class="p">(</span><span class="s">"plop.conf"</span><span class="p">,</span> <span class="mf">34</span><span class="p">,</span> \
<span class="gp">... </span>        <span class="s">"il manque une parenthèse à la fin de l'expression"</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">2</span>, in <span class="n-Identifier">&lt;module&gt;</span>
<span class="nc">__main__.ErreurAnalyseFichier: [plop.conf:34]</span>: <span class="n-Identifier">il manque une parenthèse à la fin de l'expression</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Voilà, ce petit retour sur les exceptions est achevé. Si vous voulez en savoir plus, n'hésitez pas à consulter <a href="http://docs.python.org/py3k/tutorial/errors.html">la partie du tutoriel Python officiel consacrée aux exceptions</a> et <a href="http://docs.python.org/py3k/tutorial/classes.html#exceptions-are-classes-too">celle consacrée aux exceptions personnalisées</a>.
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Notre tour d'horizon de l'héritage est achevé. C'est un chapitre un peu particulier car on a bien plus travaillé sur des exemples de modélisation que sur du code Python. C'est toutefois un point essentiel et je vous invite à bien y réfléchir avant de vous lancer dans un programme d'une certaine taille <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . C'est encore plus vrai ici que dans les chapitres précédents : c'est en pratiquant que vous pourrez bien comprendre l'utilité et maîtriser le concept.<br>
<br>
Dans le chapitre suivant, nous allons revenir sur le parcours d'objet, jeter un oeil du côté des itérateurs et des générateurs. Encore un effort et vous allez vous jeter droit dans le TP <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
	</div>
	
	<hr>
	<h1 id="chap_323952">Derrière la boucle for</h1>
	<div id="chap_intro">
	Voilà pas mal de chapitres, nous avons étudié les boucles. Ne vous alarmez pas, ce que nous avons vu est toujours d'actualité <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"> ... mais nous allons un peu approfondir, maintenant que nous explorons le monde de l'objet <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Nous allons découvrir ces concepts du plus simple au plus complexe, et de telle sorte que chacun des concepts abordés reprenne les précédents. N'hésitez pas, par la suite, à revenir sur ce chapitre et à le relire, partiellement ou intégralement si nécessaire <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_323950">Les itérateurs</h2>
		<div class="ss_part_texte">
		Nous utilisons des itérateurs sans le savoir depuis le moment où nous avons abordé les boucles et surtout depuis que nous utilisons le mot-clé <span class="italique">for</span> pour parcourir des objets conteneurs.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">ma_liste</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">ma_liste</span><span class="p">:</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Utiliser les itérateurs</h3><br>
C'est sur la seconde ligne que nous allons nous attarder : à force d'utiliser ce type de syntaxe, vous avez dû vous y habituer et ce type de parcours doit vous être familier. Mais il se cache bel et bien un mécanisme derrière cette instruction.<br>
<br>
Quand Python tombe sur une ligne du type <span class="code2 python"><span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">ma_liste</span><span class="p">:</span>
</span>, il va appeler l'itérateur de <span class="italique">ma_liste</span>. L'itérateur, c'est un objet qui va être chargé de parcourir l'objet conteneur, une liste ici.<br>
<br>
L'itérateur est créé dans la méthode spéciale <span class="italique">__iter__</span> de l'objet. Ici, c'est donc la méthode <span class="italique">__iter__</span> de la classe <span class="italique">list</span> qui est appelée et qui retourne un itérateur permettant de parcourir la liste.<br>
<br>
À chaque tour de boucle, Python appelle la méthode spéciale <span class="italique">__next__</span> de l'itérateur qui doit retourner l'élément suivant du parcours ou lever l'exception <span class="italique">StopIteration</span> si le parcours touche à sa fin.<br>
<br>
Ce n'est peut-être pas très clair… alors voyons un exemple.<br>
<br>
Sachez avant de plonger dans le code que Python utilise deux fonctions pour appeler et manipuler les itérateurs : <span class="italique">iter</span> permet d'appeler la méthode spéciale <span class="italique">__iter__</span> de l'objet passé en paramètre et <span class="italique">next</span> appelle la méthode spéciale <span class="italique">__next__</span> de l'itérateur passé en paramètre.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_chaine</span> <span class="o">=</span> <span class="s">"test"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">iterateur_de_ma_chaine</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">ma_chaine</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">iterateur_de_ma_chaine</span>
<span class="go">&lt;str_iterator object at 0x00B408F0&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">iterateur_de_ma_chaine</span><span class="p">)</span>
<span class="go">'t'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">iterateur_de_ma_chaine</span><span class="p">)</span>
<span class="go">'e'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">iterateur_de_ma_chaine</span><span class="p">)</span>
<span class="go">'s'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">iterateur_de_ma_chaine</span><span class="p">)</span>
<span class="go">'t'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">iterateur_de_ma_chaine</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n-Identifier">&lt;module&gt;</span>
<span class="nc">StopIteration</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<br>
— On commence par créer une chaîne de caractère (jusque là, rien de compliqué <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies"> ).<br>
— On appelle ensuite la fonction <span class="italique">iter</span> en lui passant en paramètre notre chaîne. Cette fonction appelle la méthode spéciale <span class="italique">__iter__</span> de notre chaîne qui retourne l'itérateur permettant de parcourir <span class="italique">ma_chaine</span>.<br>
— On va ensuite appeler plusieurs fois la fonction <span class="italique">next</span> en lui passant en paramètre notre itérateur. Cette fonction appelle la méthode spéciale <span class="italique">__next__</span> de notre itérateur. Elle retourne successivement chaque lettre contenue dans notre chaîne et lève une exception <span class="italique">StopIteration</span> quand la chaîne a été parcourue entièrement.<br>
<br>
Quand on parcourt une chaîne grâce à une boucle <span class="italique">for</span> (<span class="code2 python"><span class="k">for</span> <span class="n">lettre</span> <span class="ow">in</span> <span class="n">chaine</span><span class="p">:</span>
</span>), c'est ce mécanisme d'itérateur qui est appelé. Chaque lettre retournée par notre itérateur se retrouve dans la variable <span class="italique">lettre</span> et la boucle s'arrête quand l'exception <span class="italique">StopIteration</span> est levée.<br>
<br>
Vous pouvez reprendre ce code avec d'autres objets conteneurs, des listes par exemple.<br>
<br>
<h3>Créons nos itérateurs</h3><br>
Pour notre exemple, nous allons créer deux classes :<br>
<br>
<br>
— <span class="italique">RevStr</span> : une classe héritée de <span class="italique">str</span> qui se contentra de redéfinir la méthode <span class="italique">__iter__</span>. Son mode de parcours sera ainsi altéré : au lieu de parcourir la chaîne de gauche à droite, on la parcourera de droite à gauche (de la dernière lettre à la première).<br>
— <span class="italique">ItRevStr</span> : notre itérateur. Il sera créé depuis la méthode <span class="italique">__iter__</span> de <span class="italique">RevStr</span> et devra parcourir notre chaîne du dernier caractère au premier.<br>
<br>
<br>
Ce mécanisme est un peu nouveau, je vous mets le code sans trop de suspense. Si vous vous sentez de faire l'exercice, n'hésitez pas, mais je vous donnerai l'occasion de pratiquer dès le prochain chapitre, ne vous inquiétez pas <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies"> .<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">RevStr</span><span class="p">(</span><span class="nb">str</span><span class="p">):</span>
    <span class="sd">"""Classe reprenant les méthodes et attributs des chaînes construites</span>
<span class="sd">    depuis 'str'. On se contente de définir une méthode de parcours</span>
<span class="sd">    différente : au lieu de parcourir notre chaîne de la première à la dernière</span>
<span class="sd">    lettre, on la parcourt de la dernière à la première.</span>
<span class="sd">    </span>
<span class="sd">    Les autres méthodes, y compris le constructeur, n'ont pas besoin</span>
<span class="sd">    d'être redéfinies.</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Cette méthode retourne un itérateur parcourant la chaîne</span>
<span class="sd">        dans le sens inverse de celui de 'str'.</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="k">return</span> <span class="n">ItRevStr</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="c"># on retourne l'itérateur créé pour l'occasion</span>

<span class="k">class</span> <span class="nc">ItRevStr</span><span class="p">:</span>
    <span class="sd">"""Un itérateur permettant de parcourir une chaîne de la dernière lettre</span>
<span class="sd">    à la première. On stocke dans des attributs la position courante et la</span>
<span class="sd">    chaîne à parcourir.</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">chaine_a_parcourir</span><span class="p">):</span>
       <span class="sd">"""On se positionne à la fin de la chaîne"""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">chaine_a_parcourir</span> <span class="o">=</span> <span class="n">chaine_a_parcourir</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">chaine_a_parcourir</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Cette méthode doit retourner l'élément suivant dans le parcours,</span>
<span class="sd">        ou lever l'exception 'StopIteration' si le parcours est fini.</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="c"># fin du parcours</span>
            <span class="k">raise</span> <span class="ne">StopIteration</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">position</span> <span class="o">-=</span> <span class="mi">1</span> <span class="c"># on décrémente la position</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">chaine_a_parcourir</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="p">]</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
À présent, vous pouvez créer des chaînes devant se parcourir du dernier caractère vers le premier.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ma_chaine</span> <span class="o">=</span> <span class="n">RevStr</span><span class="p">(</span><span class="s">"Bonjour"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ma_chaine</span>
<span class="go">'Bonjour'</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">lettre</span> <span class="ow">in</span> <span class="n">ma_chaine</span><span class="p">:</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">lettre</span><span class="p">)</span>
<span class="gp">... </span>
<span class="go">r</span>
<span class="go">u</span>
<span class="go">o</span>
<span class="go">j</span>
<span class="go">n</span>
<span class="go">o</span>
<span class="go">B</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Sachez qu'il est aussi possible d'implémenter directement la méthode <span class="italique">__next__</span> dans notre objet conteneur. Dans ce cas, la méthode <span class="italique">__iter__</span> pourra retourner <span class="italique">self</span>. Vous pouvez voir un exemple, dont le code ci-dessus est inspiré, dans <a href="http://docs.python.org/py3k/tutorial/classes.html#iterators">le tutoriel officiel consacré aux itérateurs</a>.<br>
<br>
<div class="rmq question"> Ça reste quand même plutôt lourd non, de devoir faire des itérateurs à chaque fois ? Surtout si nos objets conteneurs doivent se parcourir de plusieurs façons, comme les dictionnaires par exemple.</div><br>
<br>
Oui, il subsiste quand même beaucoup de répétitions dans le code que nous devons produire, surtout si nous devons faire plusieurs itérateurs pour un même objet. Souvent, on utilisera des itérateurs existants, par exemple celui des listes. Mais il existe aussi un autre mécanisme, plus simple et plus intuitif : la raison pour laquelle je ne vous montre pas cette autre façon de faire en premier, c'est que cette autre façon passe quand même par des itérateurs, même si c'est implicite, et qu'il n'est pas mauvais de savoir comment cela marche en coulisse <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Il est temps à présent de jeter un oeil du côté des générateurs <img src="./Apprendre Python !_files/pirate.png" alt=":pirate:" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_323951">Les générateurs</h2>
		<div class="ss_part_texte">
		Les générateurs sont avant tout un moyen plus pratique de créer et manipuler des itérateurs. Vous verrez un peu plus loin dans ce chapitre qu'ils permettent des choses assez complexes, mais leur puissance tient surtout en leur simplicité et leur petite taille <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Les générateurs simples</h3><br>
Pour créer des générateurs, nous allons découvrir un nouveau mot-clé <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> : <span class="italique">yield</span>. Ce mot-clé ne peut s'utiliser que dans le corps d'une fonction et est suivi d'une valeur à retourner.<br>
<br>
<div class="rmq question">Attends un peu… une valeur ? à retourner ?</div><br>
<br>
Oui. Le principe des générateurs étant un peu particulier, il nécessite un mot-clé pour lui tout seul. L'idée est de ne définir une fonction pour un type de parcours. Quand on demande le premier élément du parcours (grâce à <span class="italique">next</span>), la fonction commence son exécution. Dès qu'elle rencontre une instruction <span class="italique">yield</span>, elle retourne la valeur qui suit et se met en pause. Quand on demande l'élément suivant de l'objet (grâce, une nouvelle fois, à <span class="italique">next</span>), l'exécution reprend à l'endroit où elle s'était arrêtée et s'interrompt au <span class="italique">yield</span> suivant… ainsi de suite. À la fin de l'exécution de la fonction, l'exception <span class="italique">StopIteration</span> est automatiquement levée par Python.<br>
<br>
Nous allons prendre un exemple très simple pour commencer :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">mon_generateur</span><span class="p">():</span>
<span class="gp">... </span>    <span class="sd">"""Notre premier générateur. Il va simplement retourner 1, 2 et 3"""</span>
<span class="gp">... </span>    <span class="k">yield</span> <span class="mi">1</span>
<span class="gp">... </span>    <span class="k">yield</span> <span class="mi">2</span>
<span class="gp">... </span>    <span class="k">yield</span> <span class="mi">3</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_generateur</span>
<span class="go">&lt;function mon_generateur at 0x00B494F8&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_generateur</span><span class="p">()</span>
<span class="go">&lt;generator object mon_generateur at 0x00B9DC88&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">mon_iterateur</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">mon_generateur</span><span class="p">())</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">mon_iterateur</span><span class="p">)</span>
<span class="go">1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">mon_iterateur</span><span class="p">)</span>
<span class="go">2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">mon_iterateur</span><span class="p">)</span>
<span class="go">3</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">mon_iterateur</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n-Identifier">&lt;module&gt;</span>
<span class="nc">StopIteration</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je pense que ça vous rappelle quelque chose <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> . Notre fonction, à part l'utilisation de <span class="italique">yield</span>, est plutôt classique. Quand on l'exécute, on se retrouve avec un générateur. Ce générateur est un objet créé par Python qui définit sa propre méthode spéciale <span class="italique">__iter__</span> et donc son propre itérateur. Nous aurions tout aussi bien pu faire :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">for</span> <span class="n">nombre</span> <span class="ow">in</span> <span class="n">mon_generateur</span><span class="p">():</span> <span class="c"># attention on exécute la fonction</span>
    <span class="k">print</span><span class="p">(</span><span class="n">nombre</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cela rend quand même le code bien plus simple à comprendre.<br>
<br>
Notez qu'on doit exécuter notre fonction <span class="italique">mon_generateur</span> pour obtenir un générateur. Si vous essayez de parcourir notre fonction (<span class="code2 python"><span class="k">for</span> <span class="n">nombre</span> <span class="ow">in</span> <span class="n">mon_generateur</span>
</span>), ça ne marchera pas <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Bien entendu, la plupart du temps, on ne se contentera pas d'appeler <span class="italique">yield</span> comme ceci. Notre générateur d'exemples n'a pas beaucoup d'intérêt, il faut bien le reconnaître.<br>
<br>
Essayons de faire une chose un peu plus utile : un générateur prenant en paramètres deux entiers, une borne inférieure et une borne supérieure, et retournant chaque entier compris entre ces bornes. Si on entre par exemple <span class="italique">intervalle(5, 25)</span>, on pourra parcourir les entiers de 6 à 24.<br>
<br>
Le résultat attendu est donc :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">nombre</span> <span class="ow">in</span> <span class="n">intervalle</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">nombre</span><span class="p">)</span>
<span class="gp">... </span>
<span class="go">6</span>
<span class="go">7</span>
<span class="go">8</span>
<span class="go">9</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous pouvez essayer de faire l'exercice, c'est un bon entraînement et pas très compliqué de surcroît.<br>
<br>
Au cas où, voici la correction :<br>
<br>
<span class="spoiler_hidden">Secret <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden"><br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">intervalle</span><span class="p">(</span><span class="n">borne_inf</span><span class="p">,</span> <span class="n">borne_sup</span><span class="p">):</span>
    <span class="sd">"""Générateur parcourant la série des entiers entre borne_inf et borne_sup.</span>
<span class="sd">    </span>
<span class="sd">    Note: borne_inf doit être inférieure à borne_sup</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="n">borne_inf</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">borne_inf</span> <span class="o">&lt;</span> <span class="n">borne_sup</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">borne_inf</span>
        <span class="n">borne_inf</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></div>
</td></tr></tbody></table></div><br>
</div></div><br>
<br>
Là encore, vous pouvez améliorer cette fonction. Pourquoi ne pas faire en sorte que si la borne inférieure est supérieure à la borne supérieure, le parcours se fasse dans l'autre sens ?<br>
<br>
L'important est que vous compreniez bien l'intérêt et le mécanisme derrière. Je vous encourage, là encore, à tester, à disséquer cette fonctionnalité, à essayer de reprendre les exemples d'itérateurs et à les convertir en générateurs.<br>
<br>
Si dans une classe quelconque la méthode spéciale <span class="italique">__iter__</span> contient un appel à <span class="italique">yield</span>, alors ce sera ce générateur qui sera appelé quand on voudra parcourir la boucle. Même quand Python passe par des générateurs, comme vous l'avez vu, il utilise (implicitement) des itérateurs. C'est juste plus confortable pour le codeur, on n'a pas besoin de créer une classe par itérateur ni de coder une méthode <span class="italique">__next__</span>, ni même de lever l'exception <span class="italique">StopIteration</span>, Python fait tout ça pour nous. Pratique non ?<br>
<br>
<h3>Les générateurs comme co-routines</h3><br>
Jusqu'ici, que ce soit avec les itérateurs ou les générateurs, nous créons un moyen de parcourir notre objet au début de la boucle <span class="italique">for</span>, en sachant que nous ne pourrons pas modifier le comportement du parcours par la suite. Mais les générateurs possèdent un certain nombre de méthodes permettant, justement, d'interragir avec eux pendant le parcours.<br>
<br>
Malheureusement à notre niveau, les idées d'application <span class="souligne">utiles</span> me manquent et je vais me contenter de vous montrer la syntaxe et un petit exemple. Peut-être trouverez-vous par la suite une application utile des <strong>co-routines</strong> quand vous vous lancerez dans des programmes conséquents, ou que vous aurez été plus loin dans l'apprentissage du Python <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Les <strong>co-routines</strong> sont un moyen d'altérer le parcours... pendant le parcours. Par exemple, on pourrait vouloir que dans notre générateur <span class="italique">intervalle</span>, on passe directement de 5 à 10.<br>
<br>
Le système des co-routines en Python est contenu dans le mot-clé <span class="italique">yield</span> que nous avons vu plus haut et l'utilisation de certaines méthodes de notre générateur.<br>
<br>
<h4>Interrompre la boucle</h4><br>
La première méthode que nous allons voir est <span class="italique">close</span>. Elle permet d'interrompre prématurément la boucle, comme le mot-clé <span class="italique">break</span> en somme.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">generateur</span> <span class="o">=</span> <span class="n">intervalle</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="k">for</span> <span class="n">nombre</span> <span class="ow">in</span> <span class="n">generateur</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">nombre</span> <span class="o">&gt;</span> <span class="mi">17</span><span class="p">:</span>
        <span class="n">generateur</span><span class="o">.</span><span class="n">close</span><span class="p">()</span> <span class="c"># interruption de la boucle</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez, pour appeler les méthodes du générateur, on doit le stocker dans une variable avant la boucle. Si vous aviez fait directement <span class="italique">for nombre in intervalle(5, 20)</span>, vous n'auriez pas pu appeler la méthode <span class="italique">close</span> du générateur.<br>
<br>
<h4>Envoyer des données à notre générateur</h4><br>
Pour cet exemple, nous allons étendre notre générateur pour qu'il accepte de recevoir des données pendant son exécution.<br>
<br>
Le point d'échange de données se fait au mot-clé <span class="italique">yield</span>. <span class="code2 python"><span class="k">yield</span> <span class="n">valeur</span>
</span> "retourne" <span class="italique">valeur</span> qui deviendra donc la valeur courante du parcours. La fonction se met ensuite en pause. On peut, à cet instant, envoyer une valeur à notre générateur. Cela permet d'altérer le fonctionnement de notre générateur pendant le parcours.<br>
<br>
Reprenons notre exemple en intégrant cette fonctionnalité :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">intervalle</span><span class="p">(</span><span class="n">borne_inf</span><span class="p">,</span> <span class="n">borne_sup</span><span class="p">):</span>
    <span class="sd">"""Générateur parcourant la série des entiers entre borne_inf et borne_sup.</span>
<span class="sd">    Notre générateur doit pouvoir "sauter" une certaine plage de nombres</span>
<span class="sd">    en fonction d'une valeur qu'on lui donne pendant le parcours. La</span>
<span class="sd">    valeur qu'on lui passe est la nouvelle valeur de borne_inf.</span>
<span class="sd">    </span>
<span class="sd">    Note: borne_inf doit être inférieure à borne_sup</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="n">borne_inf</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">borne_inf</span> <span class="o">&lt;</span> <span class="n">borne_sup</span><span class="p">:</span>
        <span class="n">valeur_recue</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">borne_inf</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">valeur_recue</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span> <span class="c"># notre générateur a reçu quelque chose</span>
            <span class="n">borne_inf</span> <span class="o">=</span> <span class="n">valeur_recue</span>
        <span class="n">borne_inf</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous configurons notre générateur pour qu'il accepte une valeur éventuelle au cours du parcours. Si il reçoit une valeur, il va l'attribuer au point du parcours.<br>
<br>
Autrement dit, au cours de la boucle, vous pouvez demander que si le nombre est à 15, le générateur saute tout de suite à 20.<br>
<br>
Tout se passe sur, et au-dessous, de la ligne du <span class="italique">yield</span>. Au lieu de simplement renvoyer une valeur à notre boucle, on capture une éventuelle valeur dans <span class="italique">valeur_recue</span>. La syntaxe est simple : <span class="code2 python"><span class="n">variable</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="n">valeur_a_retourner</span><span class="p">)</span>
</span> (n'oubliez pas les parenthèses autour de <span class="italique">yield valeur</span>).<br>
<br>
Si aucune valeur n'a été passée à notre générateur, notre <span class="italique">valeur_recue</span> vaudra <span class="italique">None</span>. On vérifie donc si elle ne vaut pas <span class="italique">None</span> et, dans ce cas, on attribue la nouvelle valeur à <span class="italique">borne_inf</span>.<br>
<br>
Voici le code permettant d'interragir avec notre générateur. On utilise la méthode <span class="italique">send</span> pour envoyer une valeur à notre générateur :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="go">generateur = intervalle(10, 25)</span>
<span class="go">for nombre in generateur:</span>
<span class="go">    if nombre == 15: # on saute à 20</span>
<span class="go">        generateur.send(20)</span>
<span class="go">    print(nombre, end=" ")</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il existe d'autres méthodes permettant d'interragir avec notre générateur. Vous pouvez les retrouver, ainsi que des explications supplémentaires, sur la documentation officielle <a href="http://docs.python.org/py3k/reference/expressions.html?highlight=generator#yield-expressions">traitant du mot-clé yield</a>.<br>
<br>
<h3>Voir aussi</h3><br>
<br>
<ul>
<li><a href="http://www.python.org/dev/peps/pep-0255/">PEP 255 -- simple Generators</a></li>
<li><a href="http://www.python.org/dev/peps/pep-0342/">PEP 342 -- Coroutines via Enhanced Generators</a></li>
</ul>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Vous savez mieux à présent comment définir des méthodes de parcours pour nos objets conteneurs. Et je dirai que ça tombe à point nommé pour le chapitre suivant... qui est un TP, un TP un peu différent dans son énoncé, mais qui va vous faire pratiquer beaucoup de choses que nous venons de voir dans cette partie <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . En avant !
	</div>
	
	<hr>
	<h1 id="chap_323953">TP 3 : un dictionnaire ordonné</h1>
	<div id="chap_intro">
	Enfin le temps de la pratique. Vous avez appris pas mal de choses dans la partie courante, beaucoup de concepts, souvent théoriques. Il est temps de les mettre en application, dans un contexte un peu différent des TP précédents : on ne va pas créer un jeu mais plutôt un objet conteneur tenant à la fois du dictionnaire et de la liste.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_323959">Notre mission</h2>
		<div class="ss_part_texte">
		Notre énoncé va être un peu différent de ceux dont vous avez l'habitude. On ne va pas ici créer un jeu, simplement une classe, destinée à produire des objets conteneurs, des dictionnaires ordonnés.<br>
<br>
Peut-être ne vous souvenez-vous pas, je vous ai dit dans le chapitre consacré aux dictionnaires que c'était un type non-ordonné. L'ordre dans lequel vous entrez les données n'a pas d'importance, par exemple. On ne peut ni les trier, ni les inverser, tout cela n'aurai aucun sens pour ce type particulier.<br>
<br>
Mais nous allons profiter de l'occasion pour créer une forme de dictionnaire ordonné. L'idée, assez simplement, est de stocker nos données dans deux listes :<br>
<br>
<ul>
<li>La première contenant nos clés</li>
<li>La seconde contenant les valeurs correspondantes.</li>
</ul><br>
<br>
L'ordre d'ajout sera ainsi important, on pourra trier et inverser ce type de dictionnaires.<br>
<br>
<h3>Spécifications</h3><br>
Voici la liste de ce que notre classe devra implémenter comme mécanisme. Un peu plus bas, vous trouverez un exemple de manipulation de l'objet qui reprend ces spécifications :<br>
<br>
<ol class="liste_1">
<li>On doit pouvoir créer notre dictionnaire de plusieurs façons :<br>
<ul>
<li>Vide : on appelle le constructeur sans lui passer aucun paramètre et le dictionnaire créé sera donc vide</li>
<li>Copié depuis un dictionnaire : on passe en paramètre du constructeur un dictionnaire que l'on copie dans notre objet. On peut ainsi entrer <span class="italique">constructeur(dictionnaire)</span> et les clés et valeurs contenues dans le dictionnaire sont copiées dans l'objet construit</li>
<li>Pré-rempli grâce à des clés et valeurs passées en paramètre : comme les dictionnaires usuels, on doit pouvoir pré-remplir notre objet avec des couples clés-valeurs passés en paramètre (<span class="italique">constructeur(cle1 = valeur1, cle2 = valeur2, ...)</span>).</li>
</ul><br>
</li>
<li>Les clés et valeurs doivent être couplées. Autrement dit, si on cherche à supprimer une clé, la valeur correspondante doit être également supprimée. Les clés et valeurs se trouvant dans des listes de même taille, il suffira de prendre l'indice dans une liste pour savoir quel objet correspond dans l'autre. Par exemple, la clé d'indice <span class="italique">0</span> est couplée avec la valeur d'indice <span class="italique">0</span></li>
<li>On doit pouvoir interragir avec notre objet conteneur grâce aux crochets, pour récupérer une valeur (<span class="italique">objet[cle]</span>), ou pour la modifier (<span class="italique">objet[cle] = valeur</span>) ou pour la supprimer (<span class="italique">del objet[cle]</span>)</li>
<li>Quand on cherche à modifier une valeur, si la clé existe on écrase l'ancienne valeur, si elle n'existe pas on ajoute le couple clé-valeur à la fin du dictionnaire</li>
<li>On doit pouvoir savoir grâce au mot-clé <span class="italique">in</span> si une clé se trouve dans notre dictionnaire (<span class="italique">cle in dictionnaire</span>)</li>
<li>On doit pouvoir demander la taille du dictionnaire grâce à la fonction <span class="italique">len</span></li>
<li>On doit pouvoir afficher notre dictionnaire, directement dans l'interpréteur ou grâce à la fonction <span class="italique">print</span>. L'affichage doit être similaire à celui des dictionnaires usuels (<span class="italique">{cle1: valeur1, cle2: valeur2, ...}</span>)</li>
<li>L'objet doit définir les méthodes <span class="italique">sort</span> pour le trier et <span class="italique">reverse</span> pour l'inverser. Le tri de l'objet doit se faire en fonction des clés</li>
<li>L'objet doit pouvoir être parcouru. Quand on entre <span class="italique">for cle in dictionnaire</span>, on doit parcourir la liste des clés contenues dans le dictionnaire</li>
<li>A l'instar des dictionnaires, trois méthodes <span class="italique">keys()</span> (retournant la liste des clés), <span class="italique">values()</span> (retournant la liste des valeurs) et <span class="italique">items()</span> (retournant les couples (clé, valeur)) doivent être implémentées. Le type de retour de ces méthodes est laissé à votre initiative : ce peut être des itérateurs ou des générateurs (tant qu'on peut les parcourir)</li>
<li>On doit pouvoir ajouter deux dictionnaires ordonnés (<span class="italique">dico1 + dico2</span>). les clés et valeurs du second dictionnaire sont ajoutées au premier.</li>
</ol><br>
<br>
Ca vous en fait, du boulot <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> !<br>
<br>
Et vous pourrez encore trouver le moyen d'améliorer votre classe par la suite, si vous le désirez <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Exemple de manipulation</h3><br>
Ci-dessous se trouve un exemple de manipulation de notre dictionnaire ordonné. Quand vous aurez codé le vôtre, vous pourrez ainsi voir si il réagit de la même façon que le mien <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="n">DictionnaireOrdonne</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span>
<span class="go">{}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span><span class="p">[</span><span class="s">"pomme"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">52</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span><span class="p">[</span><span class="s">"poire"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">34</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span><span class="p">[</span><span class="s">"prune"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">128</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span><span class="p">[</span><span class="s">"melon"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">15</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span>
<span class="go">{'pomme': 52, 'poire': 34, 'prune': 128, 'melon': 15}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">fruits</span><span class="p">)</span>
<span class="go">{'melon': 15, 'poire': 34, 'pomme': 52, 'prune': 128}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">legumes</span> <span class="o">=</span> <span class="n">DictionnaireOrdonne</span><span class="p">(</span><span class="n">carotte</span> <span class="o">=</span> <span class="mi">26</span><span class="p">,</span> <span class="n">haricot</span> <span class="o">=</span> <span class="mi">48</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">legumes</span><span class="p">)</span>
<span class="go">{'carotte': 26, 'haricot': 48}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">legumes</span><span class="p">)</span>
<span class="go">2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">legumes</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="n">fruits</span> <span class="o">+</span> <span class="n">legumes</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span>
<span class="go">{'melon': 15, 'poire': 34, 'pomme': 52, 'prune': 128, 'haricot': 48, 'carotte':</span>
<span class="go">26}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">del</span> <span class="n">fruits</span><span class="p">[</span><span class="s">'haricot'</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s">'haricot'</span> <span class="ow">in</span> <span class="n">fruits</span>
<span class="go">False</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">legumes</span><span class="p">[</span><span class="s">'haricot'</span><span class="p">]</span>
<span class="go">48</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">cle</span> <span class="ow">in</span> <span class="n">legumes</span><span class="p">:</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">cle</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">haricot</span>
<span class="go">carotte</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">legumes</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
<span class="go">['haricot', 'carotte']</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">legumes</span><span class="o">.</span><span class="n">values</span><span class="p">()</span>
<span class="go">[48, 26]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">nom</span><span class="p">,</span> <span class="n">qtt</span> <span class="ow">in</span> <span class="n">legumes</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"{0} ({1})"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">nom</span><span class="p">,</span> <span class="n">qtt</span><span class="p">))</span>
<span class="gp">...</span>
<span class="go">haricot (48)</span>
<span class="go">carotte (26)</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Tous au départ !</h3><br>
Je vous ai donné le nécessaire, c'est maintenant à vous de jouer. Concernant l'implémentation, les fonctionnalités, il reste des zones obscures, c'est volontaire. Tout ce qui n'est pas clairement dit est à votre initiative. Tant que ça marche et que l'exemple de manipulation ci-dessus affiche la même chose chez vous, c'est parfait. Si vous voulez implémenter d'autres fonctionnalités, méthodes ou attributs, ne vous gênez pas... mais n'oubliez pas d'y aller progressivement <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
C'est parti ! <img src="./Apprendre Python !_files/pirate.png" alt=":pirate:" class="smilies">
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_323956">Correction proposée</h2>
		<div class="ss_part_texte">
		Voici la correction que je vous propose. Vous avez du de votre côté arriver à quelque chose, même si tout ne marche pas parfaitement. Certaines fonctionnalités, comme le tri, l'affichage..., sont un peu complexes. Ne sautez pas trop vite à la correction cependant et essayez au moins d'obtenir un dictionnaire ordonné avec l'ajout, la consultation et la suppression d'éléments opérationnels.<br>
<br>
<div class="rmq attention">ATTENTION LES YEUX...</div><br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">DictionnaireOrdonne</span><span class="p">:</span>
    <span class="sd">"""Notre dictionnaire ordonné. L'ordre des données est maintenu</span>
<span class="sd">    et il peut donc, contrairement aux dictionnaires usuels, être trié</span>
<span class="sd">    ou voir l'ordre de ses données inversées.</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">base</span><span class="o">=</span><span class="p">{},</span> <span class="o">**</span><span class="n">donnees</span><span class="p">):</span>
        <span class="sd">"""Constructeur de notre objet. Il peut ne prendre aucun paramètre</span>
<span class="sd">        (dans ce cas, le dictionnaire sera vide) ou construire un</span>
<span class="sd">        dictionnaire remplis grâce :</span>
<span class="sd">        -   au dictionnaire 'base' passé en premier paramètre</span>
<span class="sd">        -   aux valeurs que l'on retrouve dans 'donnees'.</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_cles</span> <span class="o">=</span> <span class="p">[]</span> <span class="c"># liste contenant nos clés</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_valeurs</span> <span class="o">=</span> <span class="p">[]</span> <span class="c"># liste contenant les valeurs correspondantes à nos clés</span>
        
        <span class="c"># on vérifie que 'base' est un dictionnaire exploitable</span>
        <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">base</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="nb">dict</span><span class="p">,</span> <span class="n">DictionnaireOrdonne</span><span class="p">):</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span> \
                <span class="s">"le type attendu est un dictionnaire (usuel ou ordonne)"</span><span class="p">)</span>
        
        <span class="c"># on récupère les données de 'base'</span>
        <span class="k">for</span> <span class="n">cle</span> <span class="ow">in</span> <span class="n">base</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">[</span><span class="n">cle</span><span class="p">]</span> <span class="o">=</span> <span class="n">base</span><span class="p">[</span><span class="n">cle</span><span class="p">]</span>
        
        <span class="c"># on récupère les données de 'donnees'</span>
        <span class="k">for</span> <span class="n">cle</span> <span class="ow">in</span> <span class="n">donnees</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">[</span><span class="n">cle</span><span class="p">]</span> <span class="o">=</span> <span class="n">donnees</span><span class="p">[</span><span class="n">cle</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Représentation de notre objet. C'est cette chaîne qui sera affichée</span>
<span class="sd">        quand on entrera directement le dictionnaire dans l'interpréteur, ou en</span>
<span class="sd">        utilisant la fonction 'repr'.</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="n">chaine</span> <span class="o">=</span> <span class="s">"{"</span>
        <span class="n">premier_passage</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">for</span> <span class="n">cle</span><span class="p">,</span> <span class="n">valeur</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">premier_passage</span><span class="p">:</span>
                <span class="n">chaine</span> <span class="o">+=</span> <span class="s">", "</span> <span class="c"># on ajoute la virgule comme séparateur</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">premier_passage</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="n">chaine</span> <span class="o">+=</span> <span class="nb">repr</span><span class="p">(</span><span class="n">cle</span><span class="p">)</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="nb">repr</span><span class="p">(</span><span class="n">valeur</span><span class="p">)</span>
        <span class="n">chaine</span> <span class="o">+=</span> <span class="s">"}"</span>
        <span class="k">return</span> <span class="n">chaine</span>
    
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Fonction appelée quand on souhaite afficher le dictionnaire grâce</span>
<span class="sd">        à la fonction 'print' ou le convertir en chaîne grâce au constructeur</span>
<span class="sd">        'str'. On redirige sur __repr__.</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="k">return</span> <span class="nb">repr</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Retourne la taille du dictionnaire"""</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_cles</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">__contains__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cle</span><span class="p">):</span>
        <span class="sd">"""Retourne True si la clé est dans la liste des clés, False sinon"""</span>
        <span class="k">return</span> <span class="n">cle</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_cles</span>
    
    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cle</span><span class="p">):</span>
        <span class="sd">"""Retourne la valeur correspondante à la clé si elle existe, lève</span>
<span class="sd">        une exception KeyError sinon.</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="k">if</span> <span class="n">cle</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_cles</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">KeyError</span><span class="p">(</span> \
                <span class="s">"la clé {0} ne se trouve pas dans le dictionnaire"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> \
                <span class="n">cle</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">indice</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_cles</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">cle</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_valeurs</span><span class="p">[</span><span class="n">indice</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cle</span><span class="p">,</span> <span class="n">valeur</span><span class="p">):</span>
        <span class="sd">"""Méthode spéciale appelée quand on cherche à modifier une clé</span>
<span class="sd">        présente dans le dictionnaire. Si la clé n'est pas présente, on l'ajoute</span>
<span class="sd">        à la fin du dictionnaire.</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="k">if</span> <span class="n">cle</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_cles</span><span class="p">:</span>
            <span class="n">indice</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_cles</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">cle</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_valeurs</span><span class="p">[</span><span class="n">indice</span><span class="p">]</span> <span class="o">=</span> <span class="n">valeur</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_cles</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cle</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_valeurs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">valeur</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">__delitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cle</span><span class="p">):</span>
        <span class="sd">"""Méthode appelée quand on souhaite supprimer une clé"""</span>
        <span class="k">if</span> <span class="n">cle</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_cles</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">KeyError</span><span class="p">(</span> \
                <span class="s">"la clé {0} ne se trouve pas dans le dictionnaire"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> \
                <span class="n">cle</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">indice</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_cles</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">cle</span><span class="p">)</span>
            <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">_cles</span><span class="p">[</span><span class="n">indice</span><span class="p">]</span>
            <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">_valeurs</span><span class="p">[</span><span class="n">indice</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Méthode de parcours de l'objet. On retourne l'itérateur des clés"""</span>
        <span class="k">return</span> <span class="nb">iter</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_cles</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">__add__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">autre_objet</span><span class="p">):</span>
        <span class="sd">"""On retourne un nouveau dictionnaire contenant les deux</span>
<span class="sd">        dictionnaires mis bout à bout (d'abord self puis autre_objet)</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">autre_objet</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span> \
                <span class="s">"impossible de concaténer {0} et {1}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> \
                <span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="p">),</span> <span class="nb">type</span><span class="p">(</span><span class="n">autre_objet</span><span class="p">)))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">nouveau</span> <span class="o">=</span> <span class="n">DictionnaireOrdonne</span><span class="p">()</span>
            
            <span class="c"># on commence par copier self dans le dictionnaire</span>
            <span class="k">for</span> <span class="n">cle</span><span class="p">,</span> <span class="n">valeur</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
                <span class="n">nouveau</span><span class="p">[</span><span class="n">cle</span><span class="p">]</span> <span class="o">=</span> <span class="n">valeur</span>
            
            <span class="c"># on copie ensuite autre_objet</span>
            <span class="k">for</span> <span class="n">cle</span><span class="p">,</span> <span class="n">valeur</span> <span class="ow">in</span> <span class="n">autre_objet</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
                <span class="n">nouveau</span><span class="p">[</span><span class="n">cle</span><span class="p">]</span> <span class="o">=</span> <span class="n">valeur</span>
            <span class="k">return</span> <span class="n">nouveau</span>
    
    <span class="k">def</span> <span class="nf">items</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Retourne un générateur contenant les couples (cle, valeur)"""</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">cle</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_cles</span><span class="p">):</span>
            <span class="n">valeur</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_valeurs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">yield</span> <span class="p">(</span><span class="n">cle</span><span class="p">,</span> <span class="n">valeur</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">keys</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Cette méthode retourne la liste des clés"""</span>
        <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_cles</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">values</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Cette méthode retourne la liste des valeurs"""</span>
        <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_valeurs</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Inversion du dictionnaire"""</span>
        <span class="c"># On créée deux listes vides qui contiendront le nouvel ordre des clés</span>
        <span class="c"># et valeurs</span>
        <span class="n">cles</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">valeurs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">cle</span><span class="p">,</span> <span class="n">valeur</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
            <span class="c"># On ajoute les clés et valeurs au début de la liste</span>
            <span class="n">cles</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">cle</span><span class="p">)</span>
            <span class="n">valeurs</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">valeur</span><span class="p">)</span>
        <span class="c"># On met ensuite à jour nos listes</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_cles</span> <span class="o">=</span> <span class="n">cles</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_valeurs</span> <span class="o">=</span> <span class="n">valeurs</span>
    
    <span class="k">def</span> <span class="nf">sort</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">"""Méthode permettant de trier le dictionnaire en fonction de ses clés"""</span>
        <span class="c"># On tri les clés</span>
        <span class="n">cles_triees</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_cles</span><span class="p">)</span>
        <span class="c"># On créée une liste de valeurs, encore vide</span>
        <span class="n">valeurs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="c"># On parcourt ensuite la liste des clés triées</span>
        <span class="k">for</span> <span class="n">cle</span> <span class="ow">in</span> <span class="n">cles_triees</span><span class="p">:</span>
            <span class="n">valeur</span> <span class="o">=</span> <span class="bp">self</span><span class="p">[</span><span class="n">cle</span><span class="p">]</span>
            <span class="n">valeurs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">valeur</span><span class="p">)</span>
        <span class="c"># enfin, on met à jour notre liste de clés et de valeurs</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_cles</span> <span class="o">=</span> <span class="n">cles_triees</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_valeurs</span> <span class="o">=</span> <span class="n">valeurs</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Le mot de la fin</h3><br>
Le but de l'exercice était de présenter un énoncé à la fois simple et laissant pas mal de place aux choix de programmation. Ce que je vous propose n'est, une fois encore, pas l'unique façon de faire, ni la meilleure. L'exercice vous a surtout permi de travailler sur des notions concrètes que nous avons vu depuis le début de la partie courante, et de construire un objet conteneur qui n'est pas tout à fait dépourvu d'utilité <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> .<br>
<br>
N'hésitez pas à passer un peu de temps sur l'amélioration de notre objet, il n'en sera que plus joli et utile ( <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies"> ) avec quelques fonctionnalités supplémentaires.<br>
<br>
Ne vous alarmez pas trop si vous n'avez pas réussi à coder quelques aspects de notre dictionnaire. Au reste, l'essentiel est d'avoir essayé, puis d'avoir compris la correction, dans l'idéal ensuite être capable de l'améliorer.
		</div>
		<hr>
		
	<div id="chap_conclusion">
	J'espère que cette petite pause pratique vous a plu.<br>
<br>
Le chapitre qui va suivre n'est pas obligatoire. Il présente des concepts plutôt avancés que vous n'êtes pas obligés de comprendre ou maîtriser pour coder en Python, loin de là. En fait, les chapitres cessent d'être obligatoires, ou à lire dans l'ordre, à partir de ce point.<br>
<br>
Vous pouvez dors et déjà passer à la partie traitant de la librairie standard, si vous le désirez, et lire les chapitres qui vous intéressent particulièrement, ou basculer sur un autre tutoriel, voire une documentation <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Et pour ceux qui souhaitent aller jusqu'au bout et découvrir la fin de cette partie sur les classes et objets, rendez-vous au prochain chapitre <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies"> !
	</div>
	
	<hr>
	<h1 id="chap_323958">Les décorateurs</h1>
	<div id="chap_intro">
	Nous allons ici nous intéresser à un concept fascinant de Python, un concept de programmation assez avancé. Vous n'êtes pas obligé de lire ce chapitre pour continuer le tutoriel, ni même connaître cette fonctionnalité pour coder en Python. Il s'agit d'un plus que j'ai voulu détailler, mais certainement pas indispensable <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Les décorateurs sont un moyen simple de modifier les comportements "par défaut" de fonctions. C'est un exemple assez flagrant de ce qu'on appelle la <strong>métaprogrammation</strong>, que je vais résumer assez brièvement comme l'écriture de programmes manipulant... d'autres programmes.<br>
<br>
Ca donne faim non ? <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies">
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_323954">Qu'est-ce que c'est ?</h2>
		<div class="ss_part_texte">
		Les décorateurs sont des fonctions de Python dont le rôle est de modifier le comportement par défaut d'autres fonctions ou classes. Pour schématiser, une fonction modifiée par un décorateur ne s'exécutera pas elle-même, mais appellera le décorateur. C'est au décorateur de décider si il veut exécuter la fonction, et dans quelle condition.<br>
<br>
<div class="rmq question">Mais quel est l'intérêt ? Si on veut juste qu'une fonction fasse quelque chose de différent, il suffit de la modifier non ? Pourquoi s'encombrer la tête avec une nouvelle fonctionnalité plus complexe ?</div><br>
<br>
Il peut y avoir de nombreux cas dans lesquels les décorateurs sont un choix intéressant. Pour comprendre l'idée, je vais prendre un unique exemple :<br>
<br>
On souhaite faire quelques tests de performance sur certaines de nos fonctions. En l'occurence, calculer combien de temps elles mettent pour s'exécuter.<br>
<br>
Une possibilité, effectivement, est de modifier chacune des fonctions devant intégrer ce test. Mais ce n'est pas très élégant, ni très pratique, ni très sûr... bref ce n'est pas la meilleure solution.<br>
<br>
Une possibilité est d'utiliser un décorateur. Ce décorateur se chargera d'exécuter notre fonction en calculant le temps qu'elle met et pourra afficher une alerte si le temps est trop important, par exemple.<br>
<br>
Pour spécifier qu'une fonction doit intégrer ce test, il suffira de rajouter une simple ligne avant la définition de la fonction à tester. C'est bien plus simple, clair et adapté à la situation.<br>
<br>
Et ce n'est qu'un exemple d'application.<br>
<br>
Les décorateurs sont des fonctions standard de Python, mais leur construction est parfois complexe. Quand il s'agit de décorateurs prenant des arguments en paramètre, ou des décorateurs devant tenir compte des paramètres de la fonction, le code est plus complexe, moins intuitif.<br>
<br>
Je vais faire mon possible pour que vous compreniez bien le principe. N'hésitez pas à y revenir à tête reposée, une, deux, trois fois pour que cela soit bien clair <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_323955">En théorie</h2>
		<div class="ss_part_texte">
		Une fois n'est pas coutume, je vais vous montrer les différentes constructions possibles, en théorie, avec quelques exemples, mais je vais consacrer une sous-partie entière aux exemples d'utilisation, pour expliciter cette partie théorique mais indispensable.<br>
<br>
<h3>Format le plus simple</h3><br>
Comme je l'ai dit, les décorateurs sont des fonctions "classiques" de Python, dans leur définition. Ils ont une petite subtilité, en ce qu'ils prennent en paramètre une fonction, et retournent une fonction.<br>
<br>
On déclare qu'une fonction doit être modifiée par un (ou plusieurs) décorateurs grâce à une (ou plusieurs) lignes au-dessus de la définition de fonction, comme ceci :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="nd">@nom_du_decorateur</span>
<span class="k">def</span> <span class="nf">ma_fonction</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le décorateur s'exécute au moment de la définition de fonction, non pas lors de l'appel. Ceci est important. Il prend en paramètre, comme je l'ai dit, une fonction (celle qu'il modifie) et retourne une fonction (ce peut être la même).<br>
<br>
Voyez plutôt :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">mon_decorateur</span><span class="p">(</span><span class="n">fonction</span><span class="p">):</span>
<span class="gp">... </span>    <span class="sd">"""Premier exemple de décorateur"""</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"Notre décorateur est appelé avec en paramètre la fonction {0}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">fonction</span><span class="p">))</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">fonction</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nd">@mon_decorateur</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">salut</span><span class="p">():</span>
<span class="gp">... </span>    <span class="sd">"""Fonction modifiée par notre décorateur"""</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"Salut !"</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">Notre décorateur est appelé avec en paramètre la fonction &lt;function salut at 0x0</span>
<span class="go">0BA5198&gt;</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Euuuuh qu'est-ce qu'on a fait là ?</div><br>
<br>
<ul>
<li>D'abord, on crée notre décorateur. Il prend en paramètre, comme je vous l'ai dit, la fonction qu'il modifie. Il se contente d'afficher cette fonction dans notre exemple, puis la retourne</li>
<li>On crée ensuite notre fonction <span class="italique">salut</span>. On précise avant la définition la ligne <span class="code2 python"><span class="nd">@mon_decorateur</span>
</span> qui précise à Python qu'on souhaite que cette fonction soit modifiée par notre décorateur. Notre fonction est très utile <img src="./Apprendre Python !_files/langue.png" alt=":p" class="smilies"> : elle affiche "Salut !" et c'est tout</li>
<li>A la fin de la définition de notre fonction, on peut voir que le décorateur est appelé. Si vous regardez plus attentivement la ligne affichée, vous vous rendez compte qu'il est appelé avec, en paramètre, la fonction <span class="italique">salut</span> que nous venons de définir.</li>
</ul><br>
<br>
Intéressons-nous un peu plus à la structure de notre décorateur. Il prend en paramètre la fonction à modifier (celle que l'on définit sous la ligne du <span class="italique">@</span>), je pense que vous avez pu le constater. Mais il retourne cette fonction, également, et ça c'est un peu moins évident.<br>
<br>
En fait, la fonction retournée remplace la fonction définie. Ici, on retourne la fonction définie, c'est donc la même. Mais on peut demander à Python d'exécuter une autre fonction à la place, pour modifier son comportement. Nous allons voir ça un peu plus bas.<br>
<br>
Pour l'heure, souvenez-vous que les deux codes ci-dessous sont identiques :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># exemple avec décorateur</span>
<span class="nd">@decorateur</span>
<span class="k">def</span> <span class="nf">fonction</span><span class="p">(</span><span class="o">...</span><span class="p">):</span>
    <span class="o">...</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># exemple équivalent, sans décorateur</span>
<span class="k">def</span> <span class="nf">fonction</span><span class="p">(</span><span class="o">...</span><span class="p">):</span>
    <span class="o">...</span>

<span class="n">fonction</span> <span class="o">=</span> <span class="n">decorateur</span><span class="p">(</span><span class="n">fonction</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Relisez bien ces deux codes, ils font la même chose. Le second est là pour que vous compreniez ce que Python fait quand il manipule des fonctions modifiées par un (ou plusieurs) décorateur(s).<br>
<br>
Quand vous exécutez <span class="italique">salut</span>, vous ne voyez aucun changement. Et c'est normal, puisque nous retournons la même fonction. Le seul moment où notre décorateur est appelé a été lors de la définition de notre fonction. Notre fonction <span class="italique">salut</span> n'a pas été modifiée par notre décorateur, on s'est contenté de la retourner tel qu'elle.<br>
<br>
<h3>Modifier le comportement de notre fonction</h3><br>
Vous l'aurez deviné, un décorateur comme nous l'avons créé plus haut n'est pas bien utile <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Les décorateurs sont surtout utiles pour modifier le comportement d'une fonction. Je vous montre cependant pas à pas comment cela fonctionne, sinon vous risquez de vite vous perdre <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
<div class="rmq question">Comment faire pour modifier le comportement de notre fonction ?</div><br>
<br>
En fait, vous avez un élément de réponse un peu plus haut. J'ai dit que notre décorateur prenait en paramètre la fonction définie, et retournait une fonction (peut-être la même, peut-être une autre). C'est cette fonction retournée qui sera directement affectée à notre fonction définie. Si vous aviez retourné une autre fonction que <span class="italique">salut</span> dans notre exemple ci-dessus, la fonction <span class="italique">salut</span> aurai redirigée vers cette fonction retournée.<br>
<br>
<div class="rmq question">Mais alors... il faut définir encore une fonction ?</div><br>
<br>
Et oui. Je vous avais prévenu (et ce n'est que le début), notre construction se complexifie au fur et à mesure : on va devoir créer une nouvelle fonction qui va être chargée de modifier le comportement de la fonction définie. Et, parce que notre décorateur sera le seul à utiliser cette fonction, on va la définir directement dans le corps de notre décorateur.<br>
<br>
<div class="rmq question">Je suis perdu. Comment ça marche, concrètement ?</div><br>
<br>
Je vais vous mettre le code, cela vaudra mieux que des tonnes d'explications. Je le commente un peu plus bas, ne vous inquiétez pas <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">mon_decorateur</span><span class="p">(</span><span class="n">fonction</span><span class="p">):</span>
    <span class="sd">"""Notre décorateur : il va afficher un message avant l'appel de la</span>
<span class="sd">    fonction définie</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">fonction_modifiee</span><span class="p">():</span>
        <span class="sd">"""Fonction que l'on va retourner. Il s'agit en fait d'une version</span>
<span class="sd">        un peu modifiée de notre fonction originellement définie. On se</span>
<span class="sd">        contente d'afficher un avertissement avant d'exécuter notre fonction</span>
<span class="sd">        originellement définie.</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Attention ! On appelle {0}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">fonction</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">fonction</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">fonction_modifiee</span>

<span class="nd">@mon_decorateur</span>
<span class="k">def</span> <span class="nf">salut</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Salut !"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Voyons l'effet, avant les explications. Aucun message ne s'affiche en entrant ce code. Par contre, si vous exécutez votre fonction <span class="italique">salut</span> :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">salut</span><span class="p">()</span>
<span class="go">Attention ! On appelle &lt;function salut at 0x00BA54F8&gt;</span>
<span class="go">Salut !</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et si vous affichez la fonction <span class="italique">salut</span> dans l'interpréteur, vous obtenez quelque chose de surprenant :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">salut</span>
<span class="go">&lt;function fonction_modifiee at 0x00BA54B0&gt;</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour comprendre, revenons sur le code de notre décorateur :<br>
<br>
<ul>
<li>Comme toujours, il prend en paramètre une fonction. Cette fonction, quand on place l'appel au décorateur au-dessus de <span class="italique">def salut</span>, c'est <span class="italique">salut</span> (la fonction définie à l'origine)</li>
<li>Dans le corps-même de notre décorateur, on définit une nouvelle fonction, <span class="italique">fonction_modifiee</span>. Elle ne prend aucun paramètre, elle n'en a pas besoin. Dans son corps, on affiche une ligne avertissant qu'on va exécuter la fonction <span class="italique">fonction</span> (là encore, il s'agit de <span class="italique">salut</span>). A la ligne suivante, on l'exécute effectivement et on retourne le résultat de son exécution (dans le cas de <span class="italique">salut</span>, il n'y en a pas mais d'autres fonctions pourraient retourner des informations)</li>
<li>De retour dans notre décorateur, on indique devoir retourner <span class="italique">fonction_modifiee</span>.</li>
</ul><br>
<br>
Lors de la définition de notre fonction <span class="italique">salut</span>, on appelle notre décorateur. Python lui passe en paramètre la fonction <span class="italique">salut</span>. Cette fois, notre décorateur ne retourne pas <span class="italique">salut</span> mais <span class="italique">fonction_modifiee</span>. Et notre fonction <span class="italique">salut</span> que nous venons de définir sera donc remplacée par notre fonction <span class="italique">fonction_modifiee</span>, définie dans notre décorateur.<br>
<br>
Vous le voyez bien d'ailleurs : quand on cherche à afficher <span class="italique">salut</span> dans l'interpréteur, on obtient <span class="italique">fonction_modifiee</span>.<br>
<br>
Souvenez-vous bien que le code :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="nd">@mon_decorateur</span>
<span class="k">def</span> <span class="nf">salut</span><span class="p">():</span>
    <span class="o">...</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
revient au même, pour Python, que le code :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">salut</span><span class="p">():</span>
    <span class="o">...</span>

<span class="n">salut</span> <span class="o">=</span> <span class="n">mon_decorateur</span><span class="p">(</span><span class="n">salut</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce n'est peut-être pas plus clair. Prenez le temps de lire et de bien comprendre l'exemple. Ce n'est pas simple, la logique est bel et bien là mais il faut tester un certain temps avant d'en être sûr <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Pour résumer, notre décorateur retourne une fonction de substitution. Quand on appelle <span class="italique">salut</span>, on appelle en fait notre fonction modifiée qui appelle également <span class="italique">salut</span> après avoir affiché un petit message d'avertissement.<br>
<br>
Autre exemple : un décorateur chargé tout simplement d'empêcher l'exécution de la fonction. Au lieu d'exécuter la fonction d'origine, on lève une exception pour avertir l'utilisateur qu'il utilise une fonctionnalité obsolète.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">obsolete</span><span class="p">(</span><span class="n">fonction_origine</span><span class="p">):</span>
    <span class="sd">"""Décorateur levant une exception pour noter que la fonction_origine</span>
<span class="sd">    est obsolète.</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">fonction_modifiee</span><span class="p">():</span>
        <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">"la fonction {0} est obsolète !"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">fonction_origine</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">fonction_modifiee</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Là encore, faites quelques essais, tout deviendra limpide après quelques manipulations <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Un décorateur avec des paramètres</h3><br>
Toujours plus dur ! On voudrait maintenant passer des paramètres à notre décorateur. Nous allons essayer de coder un décorateur chargé d'exécuter une fonction en contrôlant le temps qu'elle met à s'exécuter. Si elle met un temps supérieur au temps passé en paramètre du décorateur, on affiche une alerte.<br>
<br>
La ligne appelant notre décorateur, au-dessus de la définition de notre fonction, sera donc sous la forme :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="nd">@controler_temps</span><span class="p">(</span><span class="mf">2.5</span><span class="p">)</span> <span class="c"># 2,5 secondes maximum pour la fonction ci-dessous</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Jusqu'ici nos décorateurs ne prenaient aucune parenthèse après leur appel. Ces deux parenthèses sont très importantes : notre fonction de décorateur prendra en paramètre, non pas une fonction, mais les paramètres du décorateur (ici, le temps maximum autorisé pour la fonction). Elle ne retournera pas une fonction de substitution, mais un décorateur <img src="./Apprendre Python !_files/blink.gif" alt="o_O" class="smilies"> .<br>
<br>
<div class="rmq question">Encore et toujours perdu. Pourquoi est-ce si compliqué de passer des paramètres à notre décorateur ?</div><br>
<br>
En fait... ce n'est pas si compliqué que ça mais c'est dûr à saisir au début. Pour mieux comprendre, essayez encore une fois de vous souvenir que ces deux codes reviennent au même :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="nd">@decorateur</span>
<span class="k">def</span> <span class="nf">fonction</span><span class="p">(</span><span class="o">...</span><span class="p">):</span>
    <span class="o">...</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">fonction</span><span class="p">(</span><span class="o">...</span><span class="p">):</span>
    <span class="o">...</span>

<span class="n">fonction</span> <span class="o">=</span> <span class="n">decorateur</span><span class="p">(</span><span class="n">fonction</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
C'est la dernière ligne du second exemple que vous devez retenir et essayer de comprendre : <span class="code2 python"><span class="n">fonction</span> <span class="o">=</span> <span class="n">decorateur</span><span class="p">(</span><span class="n">fonction</span><span class="p">)</span>
</span>.<br>
<br>
On remplace la fonction que nous avons définie au-dessus par la fonction que retourne notre décorateur.<br>
<br>
C'est le mécanisme qui se cache derrière notre <span class="italique">@decorateur</span>.<br>
<br>
Maintenant, si notre décorateur attend des paramètres. On se retrouve avec une ligne comme celle-ci :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="nd">@decorateur</span><span class="p">(</span><span class="n">parametre</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">fonction</span><span class="p">(</span><span class="o">...</span><span class="p">):</span>
    <span class="o">...</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et si vous avez compris l'exemple ci-dessus, ce code revient au même que :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">fonction</span><span class="p">(</span><span class="o">...</span><span class="p">):</span>
    <span class="o">...</span>

<span class="n">fonction</span> <span class="o">=</span> <span class="n">decorateur</span><span class="p">(</span><span class="n">parametre</span><span class="p">)(</span><span class="n">fonction</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je vous avais prévenu, ce n'est pas très intuitif. Mais relisez bien ces exemples, le déclic devrait se faire tôt ou tard <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Comme vous le voyez (du moins, j'espère <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies"> ), on doit définir, comme décorateur, une fonction qui prend en paramètre les paramètres du décorateur (ici, le temps attendu) et qui retourne un décorateur. Autrement dit on se retrouve encore une fois avec un niveau supplémentaire dans notre fonction.<br>
<br>
Je vous donne le code sans trop insister. Si vous arrivez à comprendre la logique qui se trouve derrière, c'est tant mieux, sinon n'hésitez pas à y revenir plus tard <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></div></td><td class="code"><div class="syntax"><pre><span class="sd">"""Pour gérer le temps, on importe le module time</span>
<span class="sd">On va utiliser surtout la fonction time() de ce module qui retourne le nombre</span>
<span class="sd">de secondes depuis le premier janvier 1970 (habituellement).</span>
<span class="sd">On va s'en servir pour calculer le temps mis par notre fonction pour</span>
<span class="sd">s'exécuter.</span>

<span class="sd">"""</span>

<span class="kn">import</span> <span class="nn">time</span>

<span class="k">def</span> <span class="nf">controler_temps</span><span class="p">(</span><span class="n">nb_secs</span><span class="p">):</span>
    <span class="sd">"""Contrôle le temps mis par une fonction pour s'exécuter.</span>
<span class="sd">    Si le temps d'exécution est supérieur à nb_secs, on affiche une alerte.</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">decorateur</span><span class="p">(</span><span class="n">fonction_a_executer</span><span class="p">):</span>
        <span class="sd">"""Notre décorateur. C'est lui qui est appelé directement LORS</span>
<span class="sd">        DE LA DEFINITION de notre fonction (fonction_a_executer)</span>
<span class="sd">        </span>
<span class="sd">        """</span>
        <span class="k">def</span> <span class="nf">fonction_modifiee</span><span class="p">():</span>
            <span class="sd">"""Fonction retournée par notre décorateur. Elle se charge</span>
<span class="sd">            de calculer le temps mis par la fonction à exécuter.</span>
<span class="sd">            </span>
<span class="sd">            """</span>
            <span class="n">tps_avant</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="c"># avant d'exécuter la fonction</span>
            <span class="n">valeur_retournee</span> <span class="o">=</span> <span class="n">fonction_a_executer</span><span class="p">()</span> <span class="c"># on exécute la fonction</span>
            <span class="n">tps_apres</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
            <span class="n">tps_execution</span> <span class="o">=</span> <span class="n">tps_apres</span> <span class="o">-</span> <span class="n">tps_avant</span>
            <span class="k">if</span> <span class="n">tps_execution</span> <span class="o">&gt;=</span> <span class="n">nb_secs</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"La fonction {0} a mis {1} pour s'exécuter"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> \
                        <span class="n">fonction_a_executer</span><span class="p">,</span> <span class="n">tps_execution</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">valeur_retournee</span>
        <span class="k">return</span> <span class="n">fonction_modifiee</span>
    <span class="k">return</span> <span class="n">decorateur</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ouf ! Trois niveaux dans notre fonction ! D'abord <span class="italique">controler_temps</span> qui définit dans son corps notre décorateur <span class="italique">decorateur</span> qui définit lui-même dans son corps notre fonction modifiée <span class="italique">fonction_modifiee</span>.<br>
<br>
J'espère que vous n'êtes pas trop embrouillé. Je le répète, il s'agit d'une fonctionnalité très puissante mais qui n'est pas très intuitive, quand on n'y est pas habitué. Jetez un oeil du côté des exemples au-dessus si vous êtes un peu perdu.<br>
<br>
Nous pouvons maintenant utiliser notre décorateur. J'ai fait une petite fonction pour tester qu'un message s'affiche bien si notre fonction met du temps à s'exécuter. Voyez plutôt :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="nd">@controler_temps</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">attendre</span><span class="p">():</span>
<span class="gp">... </span>    <span class="nb">input</span><span class="p">(</span><span class="s">"Appuyez sur Entrée..."</span><span class="p">)</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">attendre</span><span class="p">()</span> <span class="c"># je vais appuyer sur Entrée presque tout de suite</span>
<span class="go">Appuyez sur Entrée...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">attendre</span><span class="p">()</span> <span class="c"># Cette fois, j'attend plus longtemps</span>
<span class="go">Appuyez sur Entrée...</span>
<span class="go">La fonction &lt;function attendre at 0x00BA5810&gt; a mis 4.14100003242 pour s'exécute</span>
<span class="go">r</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ca marche ! Et, même si vous devez passer un peu de temps sur votre décorateur vu ses différents niveaux, vous êtes obligé de reconnaître qu'il s'utilise des plus simplement <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Il est quand même plus intuitif d'écrire :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="nd">@controler_temps</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">attendre</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
    <span class="o">...</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
plutôt que :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">attendre</span><span class="p">(</span><span class="o">...</span><span class="p">):</span>
    <span class="o">...</span>

<span class="n">attendre</span> <span class="o">=</span> <span class="n">controler_temps</span><span class="p">(</span><span class="mi">4</span><span class="p">)(</span><span class="n">attendre</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ces deux codes reviennent au même, mais le premier est quand même plus intuitif <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> . Je vous met le second pour vous aider à comprendre ce que nous avons fait, et pourquoi.<br>
<br>
<h3>Tenir compte des paramètres de notre fonction</h3><br>
Jusqu'ici, nous n'avons travaillé qu'avec des fonctions ne prenant aucun paramètre. C'est pourquoi notre fonction <span class="italique">fonction_modifiee</span> n'en prenait pas non plus.<br>
<br>
Oui mais... tenir compte des paramètres, ce peut être utile. Sans quoi on ne pourrait construire des décorateurs ne s'appliquant qu'à des fonctions sans paramètre.<br>
<br>
Il faut, pour tenir compte des paramètres de la fonction, modifier ceux de notre fonction <span class="italique">fonction_modifiee</span>. Là encore, je vous invite à regarder les exemples ci-dessus, explicitant ce que Python fait implicitement quand on définit un décorateur avant une fonction. Vous pourrez vous rendre compte que <span class="italique">fonction_modifiee</span> remplace notre fonction et que donc, elle doit prendre des paramètres, si notre fonction définie prend également des paramètres.<br>
<br>
C'est dans ce cas en particulier que nous allons pouvoir réutiliser la notation spéciale pour nos fonctions attendant un nombre d'arguments variable. En effet, le décorateur que nous avons créé un peu plus haut devrait pouvoir s'appliquer à des fonctions ne prenant aucun paramètre, ou en prenant un, ou plusieurs... au fond notre décorateur ne doit pas savoir combien de paramètres sont fournis à notre fonction, et ne doit pas s'en soucier.<br>
<br>
Là encore, je vous place le code modifié de notre fonction modifiée (souvenez-vous qu'elle est définie dans notre <span class="italique">decorateur</span>, lui-même défini dans <span class="italique">controler_temps</span> (je ne vous remet le code que de <span class="italique">fonction_modifiee</span>).<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="syntax"><pre><span class="o">...</span>
        <span class="k">def</span> <span class="nf">fonction_modifiee</span><span class="p">(</span><span class="o">*</span><span class="n">parametres_non_nommes</span><span class="p">,</span> <span class="o">**</span><span class="n">parametres_nommes</span><span class="p">):</span>
            <span class="sd">"""Fonction retournée par notre décorateur. Elle se charge</span>
<span class="sd">            de calculer le temps mis par la fonction à exécuter.</span>
<span class="sd">            </span>
<span class="sd">            """</span>
            <span class="n">tps_avant</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="c"># avant d'exécuter la fonction</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="n">fonction_a_executer</span><span class="p">(</span><span class="o">*</span><span class="n">parametres_non_nommes</span><span class="p">,</span> <span class="o">**</span><span class="n">parametres_nommes</span><span class="p">)</span>
            <span class="n">tps_apres</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
            <span class="n">tps_execution</span> <span class="o">=</span> <span class="n">tps_apres</span> <span class="o">-</span> <span class="n">tps_avant</span>
            <span class="k">if</span> <span class="n">tps_execution</span> <span class="o">&gt;=</span> <span class="n">nb_secs</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"La fonction {0} a mis {1} pour s'exécuter"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> \
                        <span class="n">fonction_a_executer</span><span class="p">,</span> <span class="n">tps_execution</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">ret</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
A présent, vous pouvez appliquer ce décorateur à des fonctions ne prenant aucun paramètre, ou en prenant un certain nombre, des nommés ou des non nommés. Pratique non ? <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"><br>
<br>
<h3>Des décorateurs s'appliquant aux définitions de classes</h3><br>
Vous pouvez également appliquer des décorateurs à la définition des classes. Nous verrons un exemple d'application dans la sous-partie suivante. Au lieu de recevoir en paramètre la fonction, vous allez recevoir la classe.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">decorateur</span><span class="p">(</span><span class="n">classe</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"Définition de la classe {0}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">classe</span><span class="p">))</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">classe</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nd">@decorateur</span>
<span class="gp">... </span><span class="k">class</span> <span class="nc">Test</span><span class="p">:</span>
<span class="gp">... </span>    <span class="k">pass</span>
<span class="gp">...</span>
<span class="go">Définition de la classe &lt;class '__main__.Test'&gt;</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Voilà. Vous verrez dans la sous-partie suivante quel peut être l'intérêt de manipuler nos définitions de classes grâce à des décorateurs. Il existe d'autres exemples que celui que je vais vous montrer, bien entendu <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Chaîner nos décorateurs</h3><br>
Vous pouvez modifier une fonction ou une définition de classe par plusieurs décorateurs, sous la forme :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="nd">@decorateur1</span>
<span class="nd">@decorateur2</span>
<span class="k">def</span> <span class="nf">fonction</span><span class="p">():</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce n'est pas plus compliqué que ce que vous venez de faire. Je vous le montre pour que ne subsiste aucun doute dans votre esprit, vous pouvez tester à loisir cette possibilité, par vous-même <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Je vais à présent vous montrer quelques idées d'application des décorateurs, inspirées en grande partie de la <a href="http://www.python.org/dev/peps/pep-0318/">PEP 318 -- Decorators for Functions and Methods</a>.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_323957">Exemples d'application</h2>
		<div class="ss_part_texte">
		Nous allons voir deux exemples d'application des décorateurs dans cette sous-partie. Vous en avez également vu quelques uns, plus ou moins utilisables, dans la sous-partie précédente <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Des classes singleton</h3><br>
Certains reconnaîtront sûrement cette appellation. Pour les autres, sachez qu'une classe dite <strong>singleton</strong> est une classe qui ne peut être instanciée qu'une fois.<br>
<br>
Autrement dit, on ne peut créer qu'un seul objet de cette classe.<br>
<br>
Cela peut-être utile parfois, quand vous voulez être absolument certain qu'une classe ne produira qu'un seul objet, qu'il est inutile (voire dangereux) d'avoir plusieurs objets de cette classe. La première fois que vous appelez le constructeur de ce type de classe, on obtient le premier et l'unique objet nouvellement instancié. La seconde fois, comme toutes les autres fois par la suite, qu'on appelle ce constructeur, on obtient le même objet (le premier créé).<br>
<br>
Ceci est très facile à modéliser grâce à des décorateurs.<br>
<br>
<h4>Code de l'exemple</h4><br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">singleton</span><span class="p">(</span><span class="n">classe_definie</span><span class="p">):</span>
    <span class="n">instances</span> <span class="o">=</span> <span class="p">{}</span> <span class="c"># dictionnaire de nos instances singleton</span>
    <span class="k">def</span> <span class="nf">get_instance</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">classe_definie</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">instances</span><span class="p">:</span>
            <span class="c"># on crée notre premier objet de classe_definiee</span>
            <span class="n">instances</span><span class="p">[</span><span class="n">classe_definie</span><span class="p">]</span> <span class="o">=</span> <span class="n">classe_definie</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">instances</span><span class="p">[</span><span class="n">classe_definie</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">get_instance</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h4>Explications</h4><br>
D'abord, pour utiliser notre décorateur. C'est très simple, il suffit de mettre l'appel à notre décorateur avant la définition des classes que nous souhaitons singleton :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="nd">@singleton</span>
<span class="gp">... </span><span class="k">class</span> <span class="nc">Test</span><span class="p">:</span>
<span class="gp">... </span>    <span class="k">pass</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="n">Test</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="n">Test</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
<span class="go">True</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Quand on crée notre premier objet (celui se trouvant dans <span class="italique">a</span>), notre constructeur est bien appelé. Quand on souhaite créer un second objet, c'est celui contenu dans <span class="italique">a</span> qui est retourné. Ainsi, <span class="italique">a</span> et <span class="italique">b</span> pointent vers le même objet <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Intéressons-nous maintenant à notre décorateur. Il définit dans son corps un dictionnaire. Ce dictionnaire contient en clé la classe singleton, et en valeur l'objet créé correspondant. Il retourne notre fonction interne <span class="italique">get_instance</span> qui va remplacer notre classe. Ainsi, quand on voudra créer un nouvel objet, ce sera <span class="italique">get_instance</span> qui sera appelée. Cette fonction vérifie si notre classe se trouve dans le dictionnaire. Si ce n'est pas le cas, on crée notre premier objet correspondant et on l'ajoute dans le dictionnaire. Dans tous les cas, on retourne l'objet correspondant dans le dictionnaire (il vient soit d'être créé, soit c'est notre objet créé au premier appel du constructeur).<br>
<br>
Grâce à ce système, on peut avoir plusieurs classes déclarées comme des singleton, et on est sûr que pour chacune de ces classes <span class="souligne">un seul</span> objet sera créé.<br>
<br>
<h3>Contrôler les types passés à notre fonction</h3><br>
Vous l'avez déjà observé dans Python : aucun contrôle n'est fait sur le type des données passées en paramètre de nos fonctions. Certaines, comme <span class="italique">print</span>, acceptent n'importe quel type. D'autres lèvent des exceptions quand un paramètre d'un type incorrect leur est fourni.<br>
<br>
Il pourrait être utile de coder un décorateur qui vérifie les types passés en paramètre de notre fonction et qui lève une exception si les types attendus ne correspondent pas à ceux reçus lors de l'appel à la fonction.<br>
<br>
Voici notre définition de fonction, pour vous donner une idée :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="nd">@controler_types</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">intervalle</span><span class="p">(</span><span class="n">base_inf</span><span class="p">,</span> <span class="n">base_sup</span><span class="p">):</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Notre décorateur <span class="italique">controler_types</span> doit s'assurer qu'à chaque fois qu'on appelle la fonction <span class="italique">intervalle</span>, ce sont des entiers qui sont passés en paramètre en tant que <span class="italique">base_inf</span> et <span class="italique">base_sup</span>.<br>
<br>
Ce décorateur est plus complexe, bien que j'ai simplifié au maximum l'exemple de la <a href="http://www.python.org/dev/peps/pep-0318/">PEP 318</a>.<br>
<br>
Encore une fois, si il est un peu long à écrire, il est d'une simplicité enfantine à utiliser <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h4>Code de l'exemple</h4><br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">def</span> <span class="nf">controler_types</span><span class="p">(</span><span class="o">*</span><span class="n">a_args</span><span class="p">,</span> <span class="o">**</span><span class="n">a_kwargs</span><span class="p">):</span>
    <span class="sd">"""On attend en paramètre du décorateur les types attendus. On accepte</span>
<span class="sd">    une liste de paramètres indéterminés, étant donné que notre fonction</span>
<span class="sd">    définie pourra être appelée avec un nombre variable de paramètres, et que</span>
<span class="sd">    chacun doit être contrôlé.</span>
<span class="sd">    </span>
<span class="sd">    """</span>
    <span class="k">def</span> <span class="nf">decorateur</span><span class="p">(</span><span class="n">fonction_a_executer</span><span class="p">):</span>
        <span class="sd">"""Notre décorateur. Il doit retourner fonction_modifiee"""</span>
        <span class="k">def</span> <span class="nf">fonction_modifiee</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
            <span class="sd">"""Notre fonction modifiée. Elle se charge de contrôler</span>
<span class="sd">            les types qu'on lui passe en paramètre.</span>
<span class="sd">            </span>
<span class="sd">            """</span>
            <span class="c"># la liste des paramètres attendus (a_args) doit être de même</span>
            <span class="c"># longueur que celle reçue (args)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_args</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
                <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s">"le nombre d'arguments attendu n'est pas égal "</span> \
                        <span class="s">"au nombre reçu"</span><span class="p">)</span>
            <span class="c"># on parcourt la liste des arguments reçus et non nommés</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">arg</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">a_args</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="ow">not</span> <span class="nb">type</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="n">i</span><span class="p">]):</span>
                    <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s">"l'argument {0} n'est pas du type "</span> \
                            <span class="s">"{1}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">a_args</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
            
            <span class="c"># on parcourt à présent la liste des paramètres reçus et nommés</span>
            <span class="k">for</span> <span class="n">cle</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">cle</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">a_kwargs</span><span class="p">:</span>
                    <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s">"l'argument {0} n'a aucun type "</span> \
                            <span class="s">"précisé"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">cle</span><span class="p">)))</span>
                <span class="k">if</span> <span class="n">a_kwargs</span><span class="p">[</span><span class="n">cle</span><span class="p">]</span> <span class="ow">is</span> <span class="ow">not</span> <span class="nb">type</span><span class="p">(</span><span class="n">kwargs</span><span class="p">[</span><span class="n">cle</span><span class="p">]):</span>
                    <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s">"l'argument {0} n'est pas de type"</span> \
                            <span class="s">"{1}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">cle</span><span class="p">),</span> <span class="n">a_kwargs</span><span class="p">[</span><span class="n">cle</span><span class="p">]))</span>
            <span class="k">return</span> <span class="n">fonction_a_executer</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">fonction_modifiee</span>
    <span class="k">return</span> <span class="n">decorateur</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h4>Explications</h4><br>
C'est un décorateur assez complexe (et pourtant croyez-moi je l'ai simplifié autant que possible). Nous allons d'abord voir comment l'utiliser <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="nd">@controler_types</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">intervalle</span><span class="p">(</span><span class="n">base_inf</span><span class="p">,</span> <span class="n">base_sup</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">"Intervalle de {0} à {1}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">base_inf</span><span class="p">,</span> <span class="n">base_sup</span><span class="p">))</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">intervalle</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
<span class="go">Intervalle de 1 à 8</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">intervalle</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s">"oups!"</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n-Identifier">&lt;module&gt;</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">24</span>, in <span class="n-Identifier">fonction_modifiee</span>
<span class="nc">TypeError</span>: <span class="n-Identifier">l'argument 1 n'est pas du type &lt;class 'int'&gt;</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Là encore, l'utilisation est des plus simple. Intéressons-nous au décorateur proprement dit c'est déjà un peu plus complexe <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> ):<br>
<br>
Notre décorateur doit prendre des paramètres (une liste de paramètres indéterminés d'ailleurs, car notre fonction doit prendre une liste indéterminée de paramètres également et qu'on doit contrôler chaque paramètre). On définit donc un paramètre <span class="italique">a_args</span> qui contient la liste des types des paramètres non nommés attendus, et un second paramètre <span class="italique">a_kwargs</span> qui contient le dictionnaire des types des paramètres nommés attendus.<br>
<br>
Vous suivez toujours ? <img src="./Apprendre Python !_files/heureux.png" alt=":D" class="smilies"><br>
<br>
Vous devriez comprendre la construction d'ensemble, nous l'avons vu un peu plus haut. Elle comprend trois niveaux, puisque nous devons influer sur le comportement de la fonction et que notre décorateur prend des paramètres. Notre code de contrôle se trouve, comme il se doit, dans notre fonction <span class="italique">fonction_modifiee</span> (qui va prendre la place de notre <span class="italique">fonction_a_executer</span>).<br>
<br>
On commence par vérifier que la liste des paramètres non nommés attendus est bien égale à la liste des paramètres non nommés reçus, en taille. On vérifie ensuite individuellement chaque paramètre reçu, en contrôlant son type. Si le type reçu est égal au type attendu, tout va bien. Sinon, on lève une exception. On répète l'opération sur les paramètres nommés (avec une petite différence, puisqu'il s'agit de paramètres nommés ils sont contenus dans un dictionnaire, pas une liste).<br>
<br>
Si tout va bien (aucune exception n'a été levée), on exécute notre fonction en retournant son résultat.<br>
<br>
Voilà nos exemples d'application. Il y en a bien d'autres, vous pouvez en retrouver plusieurs sur la <a href="http://www.python.org/dev/peps/pep-0318/">PEP 318</a> consacrée aux décorateurs, ainsi que des informations supplémentaires, n'hésitez pas à y faire un petit tour <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Vous savez à présent comment utiliser les décorateurs. Ce n'est pas un chapitre très simple, n'hésitez pas à y revenir si le sujet vous intéresse et que vous n'avez pas tout saisi. Je pense qu'il est nécessaire de lire ce chapitre a tête reposée et ne pas hésiter à faire pas mal d'essais de son côté avant de bien maîtriser le sujet.<br>
<br>
Ce chapitre conclut cette troisième partie consacrée aux objets. Non pas que vous ayez tout vu... mais je m'arrête ici, pour ma part. Vous trouverez d'autres tutoriels pour aller plus loin, et, surtout, <a href="http://docs.python.org/py3k/">la documentation de Python</a>, qui sera bien plus complète que ce que je pourrais jamais écrire. Bonne chance, et rendez-vous dans la prochaine partie, à lire dans le désordre si vous le désirez <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> , présentant quelques modules intéressants de la librairie standard.
	</div>
	
<div>
<br>
Encore un tour d'horizon bouclé <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> . Vous avez à présent un niveau suffisant en Python pour vous lancer dans de nombreux projets. La prochaine partie est là pour vous y aider, mais vous devrez tôt ou tard vous pencher sur des documentations si vous voulez progresser.<br>
<br>
Tout ce que vous avez appris jusqu'à présent vous sera utile d'une façon générale. Pour vous spécialiser, je vous propose un petit tour du côté de la librairie standard. Vous pourrez également consulter d'autres tutoriels ou documentations sur des librairies tierces. Mais dors et déjà, vos connaissances sont suffisantes pour programmer en Python à un bon niveau et avec des bons réflexes <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Sachez enfin que je n'ai pas pu traiter tout l'orienté objet côté développeur dans cette partie. Il vous reste des choses à apprendre, même si elles sont moins utilisées, ou moins utiles dans un contexte général. Les connaissances que j'ai essayé de vous transmettre vous suffiront largement pour aller plus loin, si vous le désirez.
</div>

<hr>
<h2>Partie 4 : Les merveilles de la librairie standard</h2>
<div>
Cette partie consiste en une présentation de quelques modules intéressants de la librairie standard que j'ai voulu souligner. Vous n'y apprendrez pas à installer et contrôler des librairies tierces, et cette partie ne se veut pas une présentation exaustive de tous les modules de la librairie standard : ce serai trop long, et la documentation officielle est faite pour ça <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
En attendant je vous propose d'aborder quelques thèmes intéressants, organisés en chapitre que vous pouvez lire dans le désordre. En début de chaque chapitre je préciserai les points que vous devez maîtriser pour vous lancer dans l'approche du sujet. Je ne vous conseille pas de lire ces chapitres avant d'avoir lu la première partie de ce tutoriel.<br>
<br>
De plus, je vous donnerai souvent des moyens d'aller plus loin si ce sujet vous intéresse, en vous renvoyant la plupart du temps à la documentation officielle, en anglais mais, encore une fois, bien plus complète que ce que vous pouvez espérer trouver ailleurs.
</div>
	
	<hr>
	<h1 id="chap_338030">Les expressions régulières</h1>
	<div id="chap_intro">
	Dans ce chapitre, je vais m'attarder sur les <strong>expressions régulières</strong> et sur le module <span class="italique">re</span> qui permet de les manipuler. Si vous ne savez pas ce que sont les expressions régulières, je l'explique un peu plus bas.<br>
<br>
Il existe, naturellement, bien d'autres modules permettant de manipuler du texte. C'est toutefois sur celui-ci que je vais m'attarder aujourd'hui, mais je vais vous donner les moyens d'aller plus loin si vous le désirez <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_338029">Que sont les expressions régulières ?</h2>
		<div class="ss_part_texte">
		Les <strong>expressions régulières</strong> sont un puissant moyen de rechercher et isoler des expressions d'une chaîne de caractère.<br>
<br>
Pour simplifier, imaginez que vous faites un programme qui demande un certain nombre d'informations à l'utilisateur pour, par exemple, les stocker dans un fichier. Pour demander son nom, son prénom et quelques autres informations, ce n'est pas bien difficile : on va utiliser la fonction <span class="italique">input</span> et récupérer le résultat. Jusqu'ici rien de nouveau.<br>
<br>
Mais si on demande à l'utilisateur d'entrer un numéro de téléphone ? Qu'est-ce qui l'empêche d'entrer n'importe quoi ? Si on lui demande d'entrer une adresse e-mail et qu'il en entre une invalide, comme par exemple <span class="italique">"je_te_donnerai_pas_mon_adresse_mail"</span> et qu'on souhaite envoyer automatiquement un mail à cette personne ? Que va-t-il se passer ?<br>
<br>
Si ce cas n'est pas géré, vous risquez d'avoir un problème. Les expressions régulières sont un moyen de rechercher, isoler ou remplacer des expressions dans une chaîne. Ici, elles nous permettraient de vérifier que le numéro de téléphone entré compte bien dix chiffres, qu'il commence par un 0 et qu'il compte éventuellement des séparateurs tous les deux chiffres. Si ce n'est pas le cas, on demande à l'utilisateur de l'entrer de nouveau.<br>
<br>
<h3>Quelques syntaxes pour les expressions régulières</h3><br>
Si vous connaissez déjà les expressions régulières et leur syntaxe, vous pouvez passer au point sur le module <span class="italique">re</span>. Sinon, sachez que je me contenterais d'une approche des expressions régulières. C'est un sujet trop vaste pour que j'y passe si peu de temps. Ne paniquez pas toutefois, je vais vous donner quelques exemples concrets et vous pourrez toujours trouvez d'autres explications de part le Web <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Concrètement, ça se présente comment ?</h3><br>
Le module <span class="italique">re</span> que nous allons découvrir un peu plus bas nous permet de rechercher de façon très précise dans des chaînes de caractères et de remplacer des éléments de nos chaînes en fonction de critères particuliers. Ces critères, ce sont nos <strong>expressions régulières</strong>. Elles vont être pour nous sous la forme de chaînes de caractères. Les expressions régulières deviennent assez rapidement dures à lire, mais ne vous en faites pas : nous allons y aller petit à petit <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<h3>Des caractères ordinaires</h3><br>
Quand on forme une expression régulière, on peut utiliser des caractères spéciaux et d'autres qui ne le sont pas. Par exemple, si nous recherchons le mot <span class="italique">chat</span> dans notre chaîne, nous pouvons entrer comme expression régulière la chaîne <span class="italique">"chat"</span>. Jusque-là, rien de très compliqué <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Mais vous vous doutez bien que les expressions régulières ne se limitent pas à ce type de recherche extrêmement simple, sans quoi les méthodes <span class="italique">find</span> et <span class="italique">replace</span> de la classe <span class="italique">str</span> auraient suffis.<br>
<br>
<h3>Rechercher au début ou à la fin de la chaîne</h3><br>
Vous pouvez rechercher au début de la chaîne en plaçant au début de votre regex (abréviation de <strong>Regular Expression</strong>) le signe d'accent circonflexe <span class="italique">^</span>. Si par exemple vous voulez rechercher la syllabe <span class="italique">cha</span> en début de votre chaîne, vous entrerez l'expression <span class="italique">^cha</span>. Cette expression sera trouvée dans la chaîne <span class="italique">'chaton'</span>, mais pas dans la chaîne <span class="italique">'achat'</span>.<br>
<br>
Pour matérialiser la fin de la chaîne, vous utiliserez le signe <span class="italique">$</span>. L'expression <span class="italique">q$</span> sera trouvée uniquement si votre chaîne se termine par la lettre q minuscule.<br>
<br>
<h3>Contrôler le nombre d'occurences</h3><br>
Les caractères spéciaux que nous allons découvrir permettent de contrôler le nombre de fois où notre expression apparaît dans notre chaîne.<br>
<br>
Regardez l'exemple ci-dessous :<br>
<br>
<span class="code">Code : Autre - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
</pre></td><td class="code"><div class="syntax"><pre>chat*</pre></div></td></tr></tbody></table></div><br>
<br>
Nous avons rajouté un signe astérisque (<span class="italique">*</span>) après notre <span class="italique">t</span> de <span class="italique">chat</span>. Cela signifie que notre lettre <span class="italique">t</span> pourra se retrouver 0, 1, 2, ... fois dans notre chaîne. Autrement dit, notre expression <span class="italique">chat*</span> sera trouvée dans les chaînes suivantes : <span class="italique">'chat'</span>, <span class="italique">'chaton'</span>, <span class="italique">'chateau'</span>, <span class="italique">'herbe à chat'</span>, <span class="italique">'chapeau'</span>, <span class="italique">'chatterton'</span>, <span class="italique">'chattttttttt'</span>...<br>
<br>
Regardez un à un les exemples ci-dessus pour vérifier que vous les comprenez bien. On trouvera dans chacune des chaînes ci-dessus l'expression régulière <span class="italique">chat*</span>. Traduit en français cette expression signifie : une lettre <span class="italique">c</span> suivie d'une lettre <span class="italique">h</span> suivie d'une lettre <span class="italique">a</span> suivie, éventuellement, d'une lettre <span class="italique">t</span> qu'on peut trouver zéro, une ou plusieurs fois. Peu importe que ces lettres soient trouvées au début, à la fin ou au milieu de la chaîne.<br>
<br>
Un autre exemple ? Considérez l'expression régulière ci-dessous et essayez de la comprendre :<br>
<br>
<span class="code">Code : Autre - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
</pre></td><td class="code"><div class="syntax"><pre>bat*e</pre></div></td></tr></tbody></table></div><br>
<br>
Cette expression est trouvée dans les chaînes suivantes : <span class="italique">'bateau'</span>, <span class="italique">'batteur'</span> et <span class="italique">'joan baez'</span> <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Dans nos exemples, le signe <span class="italique">*</span> n'agit que sur la lettre qui le précède, pas sur les autres avant ni sur celles après.<br>
<br>
Il existe d'autres signes permettant de contrôler l'occurence :<br>
<br>
<table class="tab_user">




<thead><tr><th>Signe</th><th>Explication</th><th>Exemple d'expression</th><th>Exemples de chaînes contenant l'expression</th></tr></thead><tbody><tr>
<td>*</td>
<td>Vous venez de le voir. Il signifie 0, 1 ou plus</td>
<td>abc*</td>
<td><span class="italique">'ab'</span>, <span class="italique">'abc'</span>, <span class="italique">'abcc'</span>, <span class="italique">'abcccccc'</span></td>
</tr><tr>
<td>+</td>
<td>1 ou +</td>
<td>abc+</td>
<td><span class="italique">'abc'</span>, <span class="italique">'abcc'</span>, <span class="italique">'abccc'</span></td>
</tr><tr>
<td>?</td>
<td>0 ou 1</td>
<td>abc?</td>
<td><span class="italique">'ab'</span>, <span class="italique">'abc'</span></td>
</tr></tbody></table><br>
<br>
Vous pouvez également contrôler précisément le nombre d'occurences grâce aux accolades :<br>
<br>
<ul>
<li><span class="italique">E{4}</span> : signifie 4 fois la lettre E majuscule</li>
<li><span class="italique">E{2,4}</span> : signifie de 2 à 4 fois la lettre E majuscule</li>
<li><span class="italique">E{,5}</span> : signifie de 0 à 5 fois la lettre E majuscule</li>
<li><span class="italique">E{8,}</span> : signifie 8 fois minimum la lettre E majuscule.</li>
</ul><br>
<br>
<h3>Les classes de caractères</h3><br>
Vous pouvez préciser entre crochets plusieurs caractères ou classes de caractères. Par exemple, si vous entrez <span class="italique">[abcd]</span> cela signifie : soit la lettre <span class="italique">a</span>, <span class="italique">b</span>, <span class="italique">c</span> ou <span class="italique">d</span>.<br>
<br>
Pour exprimer des classes, vous pouvez utiliser le tiret <span class="italique">-</span> entre deux lettres. Par exemple, l'expression <span class="italique">[A-Z]</span> signifie "une lettre majuscule". Vous pouvez préciser plusieurs classes ou possibilités dans votre expression.<br>
<br>
Par exemple l'expression <span class="italique">[A-Za-z0-9]</span> signifie "une lettre, majuscule ou minuscule, ou un chiffre".<br>
<br>
Vous pouvez aussi contrôler l'occurence des classes comme nous l'avons vu juste au-dessus. Si vous voulez par exemple rechercher 5 lettres majuscules se suivant dans une chaîne, votre expression sera <span class="italique">[A-Z]{5}</span>.<br>
<br>
<h3>Les groupes</h3><br>
Je vous donne beaucoup de choses à retenir et vous n'avez pas encore l'occasion de pratiquer. C'est le dernier point sur lequel je vais m'attarder et il va être rapide : comme je l'ai dit plus haut si vous voulez par exemple contrôler l'occurence d'un caractère, vous ajoutez derrière un signe particulier (un astérisque, un point d'interrogation, des accolades...). Mais si vous voulez appliquer ce contrôle d'occurence sur plusieurs caractères, vous allez mettre ces caractères entre parenthèses.<br>
<br>
<span class="code">Code : Autre - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
</pre></td><td class="code"><div class="syntax"><pre>(cha){2,5}</pre></div></td></tr></tbody></table></div><br>
<br>
Cette expression sera vraie pour les chaînes contenant <span class="italique">'cha'</span> répétée entre deux et cinq fois. Les <span class="italique">'cha'</span> doivent se suivre naturellement <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Les groupes sont également utiles pour remplacer des portions de notre chaîne mais nous y reviendront plus tard, quand sera venue l'heure de la pratique... hum ? C'est l'heure ? Ah bah c'est parti, alors <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> !
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_338036">Le module re</h2>
		<div class="ss_part_texte">
		Le module <span class="italique">re</span> a été spécialement conçu pour travailler avec les expressions régulières (<strong>Regular Expressions</strong>). Il définit plusieurs fonctions utiles, que nous allons découvrir, ainsi que des objets propres, pour modéliser des expressions.<br>
<br>
<h3>Chercher dans une chaîne</h3><br>
Nous allons pour ce faire utiliser la fonction <span class="italique">search</span> du module <span class="italique">re</span>. Bien entendu  , pour pouvoir l'utiliser il faut l'importer.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">re</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cette fonction attend deux paramètres obligatoires : l'expression régulière, sous la forme d'une chaîne, et la chaîne dans laquelle on recherche cette expression. Si l'expression est trouvée, la fonction retourne un objet symbolisant l'expression recherchée. Sinon, elle retourne <span class="italique">None</span>.<br>
<br>
<div class="rmq attention">Note importante :</div><br>
<br>
Certains caractères spéciaux dans nos expressions régulières sont modélisés par l'anti-slash <span class="italique">\</span>. Vous n'êtes pas sans savoir que, de son côté, Python représente d'autres caractères avec ce symbole. Si vous entrez dans une chaîne <span class="italique">\n</span>, cela voudra dire pour Python un saut de ligne.<br>
<br>
Pour symboliser les caractères spéciaux dans les expressions régulières, il est nécessaire d'échapper l'anti-slash en mettant un autre anti-slash devant. Cela veut dire que pour écrire le caractère spécial <span class="italique">\w</span>, vous allez devoir écrire <span class="italique">\\w</span>.<br>
<br>
C'est assez peu pratique et parfois c'est gênant pour la lisibilité. C'est pourquoi je vous conseille d'utiliser un format de chaîne que nous n'avons pas vu jusqu'à présent : en mettant un <span class="italique">r</span> avant le délimiteur ouvrant notre chaîne, tous les anti-slashes la contenant sont échappés.<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="s">r'\n'</span>
<span class="go">'\\n'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si vous avez du mal à voir l'intérêt, je vous conseille simplement de vous rappeler de mettre un <span class="italique">r</span> avant d'écrire des chaînes contenant des expressions, comme vous allez le voir dans les exemples que je vais vous donner.<br>
<br>
Mais revenons à notre fonction <span class="italique">search</span>. Nous allons mettre en pratique ce que nous avons vu au-dessus :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r"abc"</span><span class="p">,</span> <span class="s">"abcdef"</span><span class="p">)</span>
<span class="go">&lt;_sre.SRE_Match object at 0x00AC1640&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r"abc"</span><span class="p">,</span> <span class="s">"abacadaeaf"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r"abc*"</span><span class="p">,</span> <span class="s">"ab"</span><span class="p">)</span>
<span class="go">&lt;_sre.SRE_Match object at 0x00AC1800&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r"abc*"</span><span class="p">,</span> <span class="s">"abccc"</span><span class="p">)</span>
<span class="go">&lt;_sre.SRE_Match object at 0x00AC1640&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r"chat*"</span><span class="p">,</span> <span class="s">"chateau"</span><span class="p">)</span>
<span class="go">&lt;_sre.SRE_Match object at 0x00AC1800&gt;</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez, si l'expression est trouvée dans la chaîne, un objet de la classe <span class="italique">_sre.SRE_Match</span> est retourné. Si l'expression n'est pas trouvée, la fonction retourne <span class="italique">None</span>.<br>
<br>
Ce qui fait qu'il est extrêmement facile de savoir si une expression est contenue dans une chaîne :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">if</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">chaine</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
    <span class="c"># si l'expression est dans la chaîne</span>
    <span class="c"># ou alors, plus intuitivement</span>
<span class="k">if</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">chaine</span><span class="p">):</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
N'hésitez pas à tester des syntaxes plus complexes et plus utiles. Tiens, par exemple, comment obliger l'utilisateur à entrer un numéro de téléphone ?<br>
<br>
Avec le bref descriptif que je vous ai donné dans ce chapitre, vous pouvez, théoriquement, y arriver. Mais c'est quand même une regex assez complexe, je vous la donne, prenez le temps de la décortiquer si vous le souhaitez :<br>
<br>
Notre regex doit vérifier qu'une chaîne est un numéro de téléphone. L'utilisateur peut entrer un numéro de différentes façons :<br>
<br>
<ul>
<li>0X XX XX XX XX</li>
<li>0X-XX-XX-XX-XX</li>
<li>0X.XX.XX.XX.XX</li>
<li>0XXXXXXXXX</li>
</ul><br>
<br>
Autrement dit :<br>
<br>
<ul>
<li>Le premier chiffre doit être un 0</li>
<li>Le second chiffre, ainsi que tous ceux qui suivent (9 en tout, sans compter le 0 d'origine) doivent être entre 0 et 9</li>
<li>Tous les deux chiffres, on peut avoir un délimiteur optionnel (un tiret, un point ou un espace).</li>
</ul><br>
<br>
Voici la regex que je vous propose :<br>
<br>
<span class="code">Code : Autre - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
</pre></td><td class="code"><div class="syntax"><pre>^0[0-9]([&nbsp;.-]?[0-9]{2}){4}$</pre></div></td></tr></tbody></table></div><br>
<br>
<div class="rmq question">ARGH ! C'est illisible ton truc !</div><br>
<br>
Je reconnais que c'est assez peu clair. Je la décompose petit à petit :<br>
<br>
<ul>
<li>D'abord, le signe d'accent circonflexe <span class="italique">^</span> qui veut dire qu'on cherche l'expression au début de la chaîne. Vous pouvez voir le symbole <span class="italique">$</span> qui veut dire que l'expression doit être à la fin de la chaîne. Si l'expression doit être au début et à la fin de la chaîne, cela signifie que la chaîne dans laquelle on recherche ne doit contenir que l'expression</li>
<li>Nous avons ensuite le <span class="italique">0</span> qui veut simplement dire que le premier caractère de notre chaîne doit être un <span class="italique">0</span> <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> </li>
<li>Nous avons ensuite une classe de caractère <span class="italique">[0-9]</span>. Cela signifie qu'après le <span class="italique">0</span>, on doit trouver un nombre entre 0 et 9 (peut-être 0, peut-être 1, peut-être 2...)</li>
<li>Ensuite ça se complique. Vous avez une parenthèse qui matérialise le début d'un groupe. Dans ce groupe, nous trouvons, dans l'ordre :<br>
<br>
<ul>
<li>D'abord une classe <span class="italique">[ .-]</span> qui veut dire "soit un espace, soit un point, soit un tiret". Juste après cette classe vous avez un signe <span class="italique">?</span> qui dit que cette classe est optionnelle</li>
<li>Après la définition de notre délimiteur, nous trouvons une classe <span class="italique">[0-9]</span> qui signifie encore une fois "un chiffre entre 0 et 9". Après cette classe, entre accolades, vous pouvez voir le nombre de chiffres attendus (2).</li>
</ul><br>
<br>
Ce groupe, contenant un séparateur optionnel et deux chiffres, doit se retrouver quatre fois dans notre expression (après la parenthèse fermante, vous trouvez entre accolades le contrôle du nombre d'occurences).</li>
</ul><br>
<br>
Si vous regardez bien nos numéros de téléphone, vous vous rendez compte que notre regex s'applique aux différents cas présentés. La définition de notre numéro de téléphone n'est pas vraie pour tous les numéros. Cette regex est un exemple et même une base pour vous permettre de saisir le concept.<br>
<br>
Si vous voulez que l'utilisateur entre un numéro de téléphone, voici le code auquel vous pourriez arriver :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="kn">import</span> <span class="nn">re</span>
<span class="n">chaine</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">expression</span> <span class="o">=</span> <span class="s">r"^0[0-9]([ .-]?[0-9]{2}){4}$"</span>
<span class="k">while</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">chaine</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">chaine</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Entrez un numéro de téléphone (valide) :"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Remplacer une expression</h3><br>
Le remplacement est un peu plus complexe. Je ne vais pas vous montrer d'exemples réellement utiles, car ils s'appuient en général sur des expressions assez difficiles à comprendre.<br>
<br>
Pour remplacer des parties de nos expressions par d'autres, nous allons utiliser la fonction <span class="italique">sub</span> du module <span class="italique">re</span>.<br>
<br>
Elle prend trois paramètres :<br>
<br>
<ul>
<li>L'expression à rechercher</li>
<li>Par quoi remplacer cette expression</li>
<li>La chaîne d'origine.</li>
</ul><br>
<br>
Elle retourne la chaîne modifiée.<br>
<br>
<h4>Des groupes numérotés</h4><br>
Pour remplacer une partie de l'expression, on doit d'abord utiliser des groupes. Si vous vous rappelez, les groupes sont indiqués entre parenthèses.<br>
<br>
<span class="code">Code : Autre - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
</pre></td><td class="code"><div class="syntax"><pre>(a)b(cc)</pre></div></td></tr></tbody></table></div><br>
<br>
Dans cet exemple, <span class="italique">(a)</span> est le premier groupe et <span class="italique">(cd)</span> est le second.<br>
<br>
L'ordre des groupes est important dans cet exemple. Dans notre expression de remplacement, on peut appeler nos groupes grâce à <span class="italique">\&lt;numéro du groupe&gt;</span>. Pour une fois, on compte à partir de 1 <img src="./Apprendre Python !_files/clin.png" alt=";)" class="smilies"> .<br>
<br>
Ce n'est pas très clair ? Regardez cet exemple simple :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">r"(ab)"</span><span class="p">,</span> <span class="s">r" \1 "</span><span class="p">,</span> <span class="s">"abcdef"</span><span class="p">)</span>
<span class="go">' ab cdef'</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On se contente dans cet exemple de remplacer <span class="italique">'ab'</span> par <span class="italique">' ab '</span>.<br>
<br>
Je vous l'accorde, on serait parvenu au même résultat en utilisant la méthode <span class="italique">replace</span> de notre chaîne. Mais les expressions régulières sont bien plus précises que ça <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> , vous commencez à vous en rendre compte je pense.<br>
<br>
Je vous laisse le soin de creuser la question, je ne préfère pas vous présenter tout de suite des expressions trop complexes <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies"> .<br>
<br>
<h4>Donner des noms à nos groupes</h4><br>
On peut également donner des noms à nos groupes. Cela peut être plus clair que de compter sur des numéros. Il faut pour cela faire suivre la parenthèse ouvrant le groupe d'un point d'interrogation, d'un P majuscule et du nom du groupe entre chevrons <span class="italique">&lt;&gt;</span>.<br>
<br>
<span class="code">Code : Autre - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
</pre></td><td class="code"><div class="syntax"><pre>(?P&lt;id&gt;[0-9]{2})</pre></div></td></tr></tbody></table></div><br>
<br>
Dans l'expression de remplacement, on utilisera l'expression <span class="italique">\g&lt;nom du groupe&gt;</span> pour symboliser le groupe. Prenons un exemple :<br>
<br>
<span class="code">Code : Python Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 pycon"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="syntax"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">texte</span> <span class="o">=</span> <span class="s">"""</span>
<span class="gp">... </span><span class="s">nom='Task1', id=8</span>
<span class="gp">... </span><span class="s">nom='Task2', id=31</span>
<span class="gp">... </span><span class="s">nom='Task3', id=127</span>
<span class="gp">... </span><span class="s">...</span>
<span class="gp">... </span><span class="s">"""</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">r"id=(?P&lt;id&gt;[0-9]+)"</span><span class="p">,</span> <span class="s">r"id[\g&lt;id&gt;]"</span><span class="p">,</span> <span class="n">texte</span><span class="p">))</span>
<span class="go">nom='Task1', id[8]</span>
<span class="go">nom='Task2', id[31]</span>
<span class="go">nom='Task3', id[127]</span>
<span class="gp">...</span>
<span class="go">&gt;&gt;&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Des expressions compilées</h3><br>
Si vous utilisez plusieurs fois dans votre programme les mêmes expressions régulières, il peut être utile de les compiler. Le module <span class="italique">re</span> propose en effet de conserver votre expression régulière sous la forme d'un objet que vous pouvez stocker dans votre programme. Si vous devez chercher cette expression dans une chaîne, vous passez par des méthodes de l'expression. Cela vous fait gagner en performance si vous faites beaucoup appel à cette expression.<br>
<br>
Par exemple, j'ai une expression qui est appelée quand l'utilisateur entre son mot de passe. Je veux vérifier que son mot de passe fait bien six caractères au minimum et ne contient que des lettres majuscules, minuscules et des chiffres. Voici l'expression à laquelle j'arrive :<br>
<br>
<span class="code">Code : Autre - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
</pre></td><td class="code"><div class="syntax"><pre>^[A-Za-z0-9]{6,}$</pre></div></td></tr></tbody></table></div><br>
<br>
A chaque fois qu'un utilisateur entre un mot de passe, le programme va appeler <span class="italique">re.search</span> pour vérifier que le mot de passe respecte bien les critères de l'expression. Il serait plus judicieux de conserver l'expression en mémoire.<br>
<br>
On utilise pour ce faire la méthode <span class="italique">compile</span> du module <span class="italique">re</span>. On stocke la valeur retournée (une expression régulière compilée) dans une variable, c'est un objet standard pour le reste.<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">chn_mdp</span> <span class="o">=</span> <span class="s">r"^[A-Za-z0-9]{6,}$"</span>
<span class="n">exp_mdp</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">chn_mdp</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ensuite, vous pouvez utiliser cette expression compilée directement. Elle possède plusieurs méthodes utiles, dont <span class="italique">search</span> et <span class="italique">sub</span> que nous avons vu plus haut. A la différence des fonctions du module <span class="italique">re</span> portant le même nom, elles ne prennent pas en premier paramètre l'expression (celle-ci se trouve dans l'objet directement).<br>
<br>
Voyez plutôt :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">chn_mdp</span> <span class="o">=</span> <span class="s">r"^[A-Za-z0-9]{6,}$"</span>
<span class="n">exp_mdp</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">chn_mdp</span><span class="p">)</span>
<span class="n">mot_de_passe</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">while</span> <span class="n">exp_mdp</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">mot_de_passe</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">mot_de_passe</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Entrez votre mot de passe : "</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Je n'ai pas pu faire le tour de ce module. Il reste bien des choses à découvrir, d'abord dans la syntaxes des expressions régulières, ensuite dans le module <span class="italique">re</span>.<br>
<br>
Si vous souhaitez en apprendre d'avantage, je vous renvoie à la documentation officielle de Python et plus précisément à la partie <a href="http://docs.python.org/py3k/library/re.html">traitant du module re</a>. Bonne lecture ! <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies">
	</div>
	
<div>
<br>
Encore une fois, je ne vous ai montré que quelques modules intéressants de la librairie standard. Vous pouvez retrouver une liste complète des modules de cette fameuse librairie standard, classés par thème, à l'adresse <a href="http://docs.python.org/py3k/library/index.html">http://docs.python.org/py3k/library/index.html</a>.<br>
<br>
N'hésitez pas à y jeter un coup d'oeil, d'autant si vous cherchez quelque chose de précis <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
</div>

<hr>
<h2>Partie 5 : Récapitulatif et annexes</h2>
<div>
Cette partie constitue une forme d'annexe récapitulant de façon sommaire ce que vous avez vu dans les parties précédentes. Il s'agit d'une série de résumés, très condensés, qui pourraient s'avérer utile si vous avez oublié à quoi sert tel mot-clé ou comment faire telle chose.<br>
<br>
Il ne s'agira que d'un résumé : si il ne suffit pas, reportez-vous aux parties précédentes <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Je vous donnerai également quelques conseils, quelques réponses à la grande question <span class="souligne">comment continuer</span> et quelques petites indications sur des fonctionnalités annexes qui sortent un peu du cadre de ce cours
</div>
	
	<hr>
	<h1 id="chap_338034">Écrire nos programmes Python dans des fichiers</h1>
	<div id="chap_intro">
	Ce petit chapitre vous explique comment mettre votre code Python dans un fichier pour l'exécuter. Vous pouvez lire ce chapitre très rapidement tant que vous savez à quoi sert la fonction <span class="italique">print</span>, c'est tout ce dont vous avez besoin. <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies">
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_338035">Mettre le code dans un fichier</h2>
		<div class="ss_part_texte">
		Pour mettre du code dans un fichier que nous pourrons ensuite exécuter, la démarche est très simple :<br>
<br>
Ouvrez un éditeur standard sans mise en forme (<a href="http://fr.wikipedia.org/wiki/Notepad2">Notepad2</a>, <a href="http://fr.wikipedia.org/wiki/Notepad%2B%2B">Notepad++</a>, <a href="http://fr.wikipedia.org/wiki/VIM">VIM</a>, <a href="http://fr.wikipedia.org/wiki/Emacs">Emacs</a>…). Dans l'absolu, le bloc-notes Windows est aussi candidat, mais il reste moins agréable pour programmer (pas de coloration syntaxique du code, notamment).<br>
<br>
Dans ce fichier, recopiez simplement la ligne :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">print</span><span class="p">(</span><span class="s">"Bonjour le monde !"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Enregistrez ce code dans un fichier à l'extension <span class="italique">.py</span>. Cela est surtout utile sous Windows. <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"><br>
<br>
<h3>Exécuter notre code sous Windows</h3><br>
Dans l'absolu, vous pouvez double-cliquer sur le fichier à l'extension <span class="italique">.py</span>, dans l'explorateur de fichiers. Mais la fenêtre s'ouvre et se referme très rapidement. Vous avez trois possibilités pour l'éviter :<br>
<br>
<ul>
<li>Mettre en pause le programme (voir la dernière sous-partie de ce chapitre)</li>
<li>Lancer le programme depuis la console Windows (je ne m'y attarderai pas ici)</li>
<li>Exécuter le programme avec <strong>IDLE</strong>.</li>
</ul><br>
<br>
C'est cette dernière opération que je vais détailler brièvement. Faites un clic droit sur le fichier <span class="italique">.py</span>. Vous devriez avoir quelque chose comme <span class="italique">edit with IDLE</span>. Cliquez dessus.<br>
<br>
La fenêtre d'IDLE devrait alors s'afficher :<br>
<br>
Vous pouvez voir votre code, ainsi que plusieurs boutons. Cliquez sur <span class="italique">run</span> puis sur <span class="italique">run module</span> (ou appuyez sur F5 directement).<br>
<br>
Le code du programme devrait se lancer. Cette fois, la fenêtre console reste ouverte pour que vous puissiez voir le résultat ou les erreurs éventuelles.<br>
<br>
<h3>Sous les systèmes Unix</h3><br>
Il est nécessaire d'ajouter une ligne tout en haut de votre programme indiquant le chemin menant vers l'interpréteur. Elle se présente sous la forme : <span class="italique">#!/adresse</span>.<br>
<br>
Les habitués du BASH devraient reconnaître cette ligne assez rapidement. <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> Pour les autres, sachez qu'il suffit de mettre à la place de « adresse » le chemin absolu de l'interpréteur (le chemin qui en partant de la racine, mène à l'interpréteur Python). Par exemple :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="c">#!/usr/bin/python3.1</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
En changeant les droits d'accès en exécution sur le fichier, vous devriez pouvoir le lancer directement.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_338032">Préciser l'encodage de travail</h2>
		<div class="ss_part_texte">
		A partir du moment où vous mettez des accents dans votre programme, vous devrez préciser l'encodage que vous utilisez pour écrire votre programme.<br>
<br>
Décrit très brièvement, l'encodage est une table contenant une série de codes symbolisant différents accents. Il existe deux encodages très utilisés : l'encodage <span class="italique">Latin-1</span> sous Windows et l'encodage <span class="italique">Utf-8</span> que l'on retrouve surtout sous les machines Unix.<br>
<br>
Vous devez préciser à Python dans quel encodage vous écrivez votre programme. La plupart du temps, sous Windows, ce sera donc <span class="italique">Latin-1</span>, alors que sous Linux et Mac ce sera plus vraissemblablement <span class="italique">Utf-8</span>.<br>
<br>
Une ligne de commentaire doit être ajoutée tout en haut de votre code (si vous êtes sous Unix, sous la ligne précisant le chemin menant vers l'interpréteur). Cette ligne s'écrit ainsi :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># -*-coding:encodage -*</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Remplacez <span class="italique">encodage</span> par l'encodage que vous utilisez en fonction de votre système.<br>
<br>
Sous Windows, on trouvera donc plus vraissemblablement : <span class="code2 python"><span class="c"># -*-coding:Latin-1 -*</span>
</span><br>
<br>
Sous Linux ou Mac, ce sera plus vraissemblablement : <span class="code2 python"><span class="c"># -*-coding:Utf-8 -*</span>
</span><br>
<br>
Gardez la ligne qui marche chez vous et n'oubliez pas de la mettre en tête de chacun de vos fichiers exécutables Python.<br>
<br>
Pour en savoir plus sur l'encodage, je vous renvoie à l'adresse <a href="http://www.siteduzero.com/tutoriel-3-120328-passer-du-latin1-a-l-unicode.html">http://www.siteduzero.com/tutoriel-3-1 [...] -unicode.html</a> . Vous y trouverez plein d'informations utiles <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_338031">Mettre en pause notre programme</h2>
		<div class="ss_part_texte">
		Sous Windows se pose un problème : si vous lancez votre programme en double-cliquant dessus directement dans l'interpréteur, il aura tendance à s'ouvrir et se fermer très rapidement. Python exécute bel et bien le code, affiche le résultat, mais tout ça très rapidement. Et une fois que la dernière ligne de code a été exécutée, Windows ferme la console <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
Pour pallier ce problème, on peut demander à Python de se mettre en pause à la fin de l'exécution du code.<br>
<br>
Il va falloir rajouter deux lignes, l'une au début de notre programme et l'autre toute à la fin. La première importe le module <span class="italique">os</span> et la seconde utilise une fonction de ce module pour mettre en pause le programme. Si vous ne savez pas ce qu'est un module, ne vous en faites pas : le code suffira, un chapitre dans la première partie vous expliquera de ce dont il s'agit <img src="./Apprendre Python !_files/smile.png" alt=":)" class="smilies"> .<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="c"># -*-coding:Latin-1 -*</span>
<span class="kn">import</span> <span class="nn">os</span> <span class="c"># on importe le module os</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Bonjour le monde !"</span><span class="p">)</span>
<span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">"pause"</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce sont la ligne 2 et la ligne 4 qui sont nouvelles pour nous et que vous devez retenir. Quand vous exécutez ce code, vous obtenez :<br>
<br>
<span class="code">Code : Console - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Bonjour&nbsp;le&nbsp;monde&nbsp;!
Appuyez&nbsp;sur&nbsp;une&nbsp;touche&nbsp;pour&nbsp;continuer...</pre></div></td></tr></tbody></table></div><br>
<br>
Vous pouvez donc lancer ce programme en double-cliquant directement dessus dans l'explorateur de fichier.<br>
<br>
<div class="rmq attention">Ce code ne marche que sous Windows !</div><br>
<br>
Si vous voulez mettre en pause votre programme sous Linux ou Mac, vous devrez utiliser un autre moyen. Ce n'est pas le mieux, car la fonction <span class="italique">input</span> n'est pas fait pour, mais vous pouvez conclure votre programme par la ligne :<br>
<br>
<span class="code">Code : Python - <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="select_code">Sélectionner</a></span><div class="code2 python"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="nb">input</span><span class="p">(</span><span class="s">"Appuyez sur ENTREE pour fermer ce programme..."</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Vous savez à présent comment mettre votre code Python dans un fichier et comment exécuter ce fichier. Si vous n'arrivez pas à bien exécuter le fichier, n'hésitez pas à demander de l'aide sur <a href="http://www.siteduzero.com/forum-81-407-langage-python.html">le forum</a>.<br>
<br>
Je vous conseille également de passer par IDLE plutôt que de double-cliquer directement sur le fichier <span class="italique">.py</span>. S'il existe des erreurs dans votre code, IDLE vous les indiquera, ce qui n'est pas négligeable. <img src="./Apprendre Python !_files/hihi.png" alt="^^" class="smilies">
	</div>
	
<div>
<br>
Cette fois, c'est la fin des fins. Je vous souhaite un bon développement et une bonne exploration des fonctionnalités, modules, librairies qu'il vous reste à découvrir. Pas de quartier ! <img src="./Apprendre Python !_files/pirate.png" alt=":pirate:" class="smilies">
</div>


<hr>

<div id="btuto_conclusion">
	Vous aurez pu le constater, ce tutoriel est en cours de rédaction&nbsp;<img src="./Apprendre Python !_files/clin.png" alt=";)">. J'ai eu très rapidement beaucoup de messages d'encouragement, ce qui est aussi bien, vu le pavé que j'ai prévu. On m'a demandé une petite table des matières présentant les notions que je vais aborder par la suite, la voici :<br>
<br>
<ol class="liste_1">
<li>La première partie, finie à présent, expose tous les concepts de base que je considère comme <strong>essentiels</strong> avant d'attaquer la POO.</li>
<li>La seconde partie, finie également, est consacrée aux objets. J'aborde la programmation orientée objet du point de vue de l'utilisateur. On n'y crée pas de classes, mais on s'attarde sur les objets couramments utilisés en Python, chaînes de caractères, listes, dictionnaires, fichiers…</li>
<li>La troisième partie aborde la programmation orientée objet du point de vue de la création (classes, héritages, redéfinitions, méthodes spéciales…). Autrement dit, je vous donne toutes les clés pour créer vos propres types de données.</li>
<li>La quatrième partie sera consacrée à la librairie standard. Je vais mettre en lumière quelques modules intéressants de cette librairie, sous la forme de chapitres facultatifs, que les intéressés pourront lire s'ils souhaitent avancer dans un domaine particulier. Je ne compte pas aborder de librairies tierces, je laisse ça à d'autres qui s'en sortent très bien&nbsp;<img src="./Apprendre Python !_files/smile.png" alt=":)">.<br>
</li></ol><br>
<br>
Il y a beaucoup de choses en projet. Comme vous le constatez je n'aborderai pas directement la 2D avec Pygame ou la constitution de fenêtres avec une librairie&nbsp;: j'estime ne pas avoir les compétences nécessaires pour cela. En étant le plus clair possible dans mes explications et en laissant quelques liens, peut-être en annexe, j'espère que ceux qui voudront aller plus loin que mes explications le pourront sans difficultés, c'est tout l'intérêt d'un tutoriel de Zéro à mon sens&nbsp;<img src="./Apprendre Python !_files/clin.png" alt=";)">.<br>
<br>
Bonne lecture à tous&nbsp;<img src="./Apprendre Python !_files/heureux.png" alt=":D">.
</div>

<div class="clearer"></div>

<div class="infobox cadre_auteur_date" id="tuto_details">
  <form action="http://www.siteduzero.com/tutoriel-54-223267.html" method="post">
    <div class="dnone"><input type="hidden" value="7297721f270eb1023794efafd96f8c66acb25dcd" name="challenge"></div>

    <h3 class="special">Informations sur le tutoriel</h3>
   
    <div class="conteneur_infobox">
	<a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#onglets_tutos">Retour en haut <img src="./Apprendre Python !_files/fleche_haut.png" alt="Retour en haut" title="Retour en haut"></a>
	<br>
   	<br>			
<strong>Créé</strong> : Le 14/03/2009 à 17:16:53<br>
<strong>Modifié</strong> : Le 23/09/2010 à 12:47:16<br>

<strong>Avancement</strong> : 65%<br>

<br>


<a href="http://www.siteduzero.com/tutoriel-50-223267-71572-apprendre-python.html#r71572">160 commentaires</a><br>

  <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html">Revenir au sommaire du tutoriel</a><br>


    </div>
  </form>
</div>



                </div>
            </div>

            <div id="footer">
                <ul>
                    <li>
                        Le Site du Zéro
                        <ul>
                            <li><a href="http://www.siteduzero.com/plan.html">Plan du site</a></li>
                            <li><a href="http://www.siteduzero.com/membres-304.html">L'équipe</a></li>
                            <li><a href="http://www.siteduzero.com/mentions.html">Mentions légales</a></li>
                            <li><a href="http://www.siteduzero.com/accessibilite.html" accesskey="0">Accessibilité</a></li>
                            <li><a href="http://www.siteduzero.com/livreor.html">Livre d'or</a></li>
                            <li><a href="http://suggestions.siteduzero.com/"><img alt="logo_user_voice" src="./Apprendre Python !_files/ico_uservoice.png"> Suggestions <img alt="Nouveau" src="./Apprendre Python !_files/iconouveau.png"></a></li>
                        </ul>
                    </li>
                    <li>
                        Simple IT
                        <ul>
                            <li><a href="http://www.siteduzero.com/simpleit.html">Qui sommes-nous ? </a></li>
                            
                                <li><a href="http://www.siteduzero.com/formations.html">Formation professionnelle</a></li>
                                <li><a href="http://www.siteduzero.com/recrutement.html">Recrutement</a></li>
                            
                            <li><a href="http://www.simple-it.fr/blog/">Notre blog</a></li>
                        </ul>
                    </li>
                    <li>
                        Contacts
                        <ul>
                            <li><a href="http://www.siteduzero.com/publicite-440.html">Espace annonceurs</a></li>
                            <li><a href="http://www.siteduzero.com/presse.html">Espace presse</a></li>
                            <li><strong><a href="http://www.siteduzero.com/contact.html" accesskey="7">Nous contacter</a></strong></li>
                            <li><a href="http://www.siteduzero.com/promouvoir.html">Promouvoir le site</a></li>
                            <li><a href="http://suggestions.siteduzero.com/forums/97879-rapports-de-bugs">Signaler un bug</a></li>
                        </ul>
                    </li>
                    
                        <li>
                            Partenaires 
                            <ul>
                                <li><a href="http://www.planethoster.net/Site-du-Zero">Hébergement web</a></li>
                                <li><a href="http://www.zcorrecteurs.fr/">Correction tutoriels</a></li>
                            </ul>
                        </li>
                    
                    <li>
                        Suivez-nous
                        <ul class="dernier">
                            <li><a href="http://www.siteduzero.com/Templates/xml/news_fr.xml"><img src="./Apprendre Python !_files/rss_mini.png" alt="Flux RSS"> Flux RSS News</a>, <a href="http://www.siteduzero.com/Templates/xml/tutoriels_fr.xml">Cours</a>, <a href="http://www.simple-it.fr/blog/index.php?feed/atom">Blog</a></li>
                            <li><a href="http://www.siteduzero.com/twitter.html"><img src="./Apprendre Python !_files/twitter_mini.png" alt="Twitter"> Twitter</a></li>
                            <li><a href="http://www.facebook.com/siteduzero"><img src="./Apprendre Python !_files/fb_mini.png" alt="Facebook"> Facebook</a></li>
                        </ul>
                    </li>
                </ul>

                
            </div>

            


            
            <script type="text/javascript" src="./Apprendre Python !_files/scripts_lang.min.js"></script>
            <script type="text/javascript" src="./Apprendre Python !_files/scripts.min.js"></script>
            <script type="text/javascript" src="./Apprendre Python !_files/lib.min.js"></script>

            
                <script type="text/javascript">
    var addthis_config = {  ui_508_compliant: true,
                            ui_cobrand: "Site du Zéro",
                            ui_header_color: "#ffffff",
                            ui_header_background: "#7AB7FC",
                            username: "simpleit",
                            services_exclude: 'print,pdfonline,email,twitter,facebook,myspace,googlebuzz,blogger,buzz,live',
                            data_track_clickback: true  };
                        
    var addthis_share = {templates: { twitter:'{{title}} {{url}} #SdZ' } };

    $('div.slidable').hide();
    $('a.expend').show();
    $('a.expend').removeAttr('style');
    
    $('.expend').click(function(e)
    {
        e.preventDefault();
        $(this).hide('fast');
        $(this).next('div.slidable').slideToggle('fast');
    });
   
</script>
<script type="text/javascript" src="./Apprendre Python !_files/addthis_widget.js"></script>
            

            <div class="droite printnone">
                <a href="http://www.xiti.com/xiti.asp?s=129196" title="WebAnalytics">
                    <script type="text/javascript">
                        <!--
                        Xt_param = 's=129196&p=%2Ftutoriel-3-223267-apprendre-python.html%3Fall%3D1';
                        try {Xt_r = top.document.referrer;}
                        catch(e) {Xt_r = document.referrer; }
                        Xt_h = new Date();
                        Xt_i = '<img width="80" height="15" border="0" ';
                        Xt_i += 'src="http://logv23.xiti.com/g.xiti?'+Xt_param;
                        Xt_i += '&hl='+Xt_h.getHours()+'x'+Xt_h.getMinutes()+'x'+Xt_h.getSeconds();
                        if(parseFloat(navigator.appVersion)>=4)
                        {
                        Xt_s=screen;Xt_i+='&r='+Xt_s.width+'x'+Xt_s.height+'x'+Xt_s.pixelDepth+'x'+Xt_s.colorDepth;
                        }
                        document.write(Xt_i+'&ref='+Xt_r.replace(/[<>"]/g, '').replace(/&/g, '$')+'">');
                        //-->
                    </script><img width="80" height="15" border="0" src="./Apprendre Python !_files/g.xiti">
                    <object>
                        <noscript>
                            &lt;p&gt;&lt;img width="80" height="15" src="http://logv23.xiti.com/g.xiti?s=129196&amp;amp;p=&amp;amp;" alt="WebAnalytics" /&gt;&lt;/p&gt;
                        </noscript>
                    </object>
                </a>
                <script type="text/javascript">
                    var _gaq = _gaq || [];
                    _gaq.push(['_setAccount', 'UA-19807070-2']);
                    _gaq.push(['_trackPageview']);

                    (function() {
                    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
                    })();
                </script>
            </div>

            <!-- /#3 231/#2.0082/#1.9486/# -->
	
    


<div style="display: none; position: absolute; overflow-x: hidden; overflow-y: hidden; z-index: 1000; outline-width: 0px; outline-style: initial; outline-color: initial; " class="ui-dialog ui-widget ui-widget-content ui-corner-all " tabindex="-1" role="dialog" aria-labelledby="ui-dialog-title-dialog_bientot"><div class="ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix" unselectable="on"><span class="ui-dialog-title" id="ui-dialog-title-dialog_bientot" unselectable="on">Bientôt sur le Site du Zéro.</span><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html?all=1#" class="ui-dialog-titlebar-close ui-corner-all" role="button" unselectable="on"><span class="ui-icon ui-icon-closethick" unselectable="on">close</span></a></div><div id="dialog_bientot" style="" class="ui-dialog-content ui-widget-content">
                <p>Le Site du Zéro vous proposera bientôt de nouveaux cours partant de Zéro dans d'autres domaines que l'informatique ! </p>
                 <a style="color:#2677C9;text-decoration:none;" href="http://www.siteduzero.com/tutoriel-1-433-sciences.html">Découvrir les cours scientifiques</a>
            </div><div class="ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"><button type="button" class="ui-state-default ui-corner-all">Ok</button></div></div><div id="tooltip" style="display: none; "><h3></h3><div class="body"></div><div class="url"></div></div></body></html>