<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0081)?all=1#chap_8937 -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link rel="stylesheet" type="text/css" href="./cpp2_files/widget51.css" media="all">

        


        
        <meta name="keywords" content="tutoriels, concernant, programmation, c++">
        <meta name="description" content="Tutoriels concernant la programmation en C++">
        <meta name="robots" content="index,follow">
        <meta name="verify-v1" content="UL/4+QUCNTv1xBkNcC4sv4EjPUAoVj1yE+fMZClqLsc=">

        <title>
            [C++] Notions avancées
        </title>

        <link rel="shortcut icon" type="image/x-icon" href="http://www.siteduzero.com/Templates/images/designs/2/favicon.ico">
        <link rel="alternate" type="application/rss+xml" title="News du Site du Zéro" href="http://www.siteduzero.com/Templates/xml/news_fr.xml">
        
        <link rel="alternate" type="application/rss+xml" title="Derniers tutoriels du Site du Zéro" href="http://www.siteduzero.com/Templates/xml/tutoriels_fr.xml">
        

        <link rel="index" href="http://www.siteduzero.com/plan.html">
        <link rel="start" title="Accueil" href="http://www.siteduzero.com/">
        <link rel="search" type="application/opensearchdescription+xml" title="Site Du Zero" href="http://www.siteduzero.com/Templates/xml/xpi/fr/siteduzero.xpi">
        <link rel="search" href="http://www.siteduzero.com/recherche.html" title="Rechercher">
        <link rel="help" title="Accessibilité" href="http://www.siteduzero.com/accessibilite.html">
        <link rel="accesskeys" title="Raccourcis et Accesskeys" href="http://www.siteduzero.com/accessibilite.html">


        <link href="./cpp2_files/design.min.css" rel="stylesheet" type="text/css" media="screen, handheld, tv, projection">
        <link href="./cpp2_files/zcode.min.css" rel="stylesheet" type="text/css" media="screen, handheld, tv, projection">
        <link href="./cpp2_files/impression.min.css" rel="stylesheet" type="text/css" media="print">


        

        

        <!--[if lt IE 8]>
            <link href="/css/ie_old.min.css?1296830240" rel="stylesheet" type="text/css" media="screen" />
        <![endif]-->

        
            <style type="text/css">
                .spoiler3
                {
                        visibility: hidden;
                }
                .spoiler3_hidden
                {
                        display: none;
                }
            </style>
        
        <script type="text/javascript" async="" src="./cpp2_files/ga.js"></script><script type="text/javascript" src="./cpp2_files/jquery.min.js"></script>
        <script type="text/javascript" src="./cpp2_files/jqueryui.min.js"></script>
    </head>

    <body><div style="visibility: hidden; height: 1px; width: 1px; position: absolute; z-index: 100000; " id="_atssh"><iframe id="_atssh599" style="height: 1px; width: 1px; position: absolute; z-index: 100000; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; left: 0px; top: 0px; " src="./cpp2_files/sh31.htm"></iframe></div>
		
            <div id="acces_rapide">
                <a href="?all=1#menu">Aller au menu</a> - <a href="?all=1#corps">Aller au contenu</a>
            </div>

            <div id="top">
                <ul class="intersites">
                    
                    <li class="selected"><a href="http://www.siteduzero.com/">Informatique</a></li>
                    <li><a href="?all=1#" id="bientot_lien">Bientôt...</a></li>
                </ul>

		<ul class="stats_sites">
                    
                    <li class="last_items"><a href="http://www.siteduzero.com/connectes.html">3 685 Zéros connectés</a> - </li>
                    <li class="last_items"><a href="http://www.siteduzero.com/membres-292.html">225 127 Membres inscrits</a></li>
		</ul>
            </div>

            <div id="header">
                <div class="header_gauche">
                    <a href="http://www.siteduzero.com/"><img src="./cpp2_files/logo_sdz_fr.png" alt=""></a>
                </div>

                <div class="header_droit">
                    <div class="fr">
                        <div id="logbox">
                            
                                <p class="bloc_inscription">
                                    <a href="http://www.siteduzero.com/membres-315.html">
                                        <strong class="liens_invites">Inscription</strong><br>
                                        Inscription rapide en 2 minutes
                                    </a>
                                </p>
                                <p class="bloc_connexion">
                                    <a href="http://www.siteduzero.com/connexion.html">
                                        <strong class="liens_invites">Connexion</strong><br>
                                        Utilisez votre compte
                                    </a>
                                    <a class="rpxnow" onclick="return false;" href="https://site-du-zero.rpxnow.com/openid/v2/signin?token_url=http%3A%2F%2Fwww.siteduzero.com%2Fmembres-348-1.html%3Freferer%3Dtutoriel-3-8965-c-notions-avancees.html%3Fall%3D1"><img src="./cpp2_files/rpx_icons.png" alt="connexion_rpx"></a>
                                    <script type="text/javascript">
                                        var rpxJsHost = (("https:" == document.location.protocol) ? "https://" : "http://static.");
                                        document.write(unescape("%3Cscript src='" + rpxJsHost +
                                        "rpxnow.com/js/lib/rpx.js' type='text/javascript'%3E%3C/script%3E"));
                                    </script><script src="./cpp2_files/rpx.js" type="text/javascript"></script>
                                    <script type="text/javascript">
                                        RPXNOW.overlay = true;
                                        RPXNOW.language_preference = 'fr';
                                    </script>
                                </p>
                            
                        </div>

                        
                    </div>


                        <div id="publicite_banniere" class="publicite">
                            <script type="text/javascript">
                                <!--
                                ord=Math.random();
                                ord=ord*10000000000000000000;
                                document.write('<scr'+'ipt type="text/javascript" src="pub.js.php?cb='+ord+'&amp;l=468&amp;h=60&amp;age=0&amp;pays=0&amp;cid=261"><\/scr'+'ipt>');
                                -->
                            </script><script type="text/javascript" src="./cpp2_files/pub.js.php"></script>
                        </div>
                    </div>
                </div>

                    <div id="speedbarre">
                            <ul class="smenu">
                                <li id="speed_accueil" class="home">
                                    <a href="http://www.siteduzero.com/" accesskey="1" class="">
                                        <span title="Accueil">Accueil</span>
                                    </a>
                                </li>
                                
                                <li id="speed_cours" class="">
                                    <a href="http://www.siteduzero.com/tutoriel.html" class="">
                                        <span>Cours</span>
                                    </a>
                                    <span class="speedbarre_arrow"></span>
                                </li>
                                <li id="speed_forum" class="">
                                    <a href="http://www.siteduzero.com/forum.html" class="">
                                        <span>Forums</span>
                                    </a>
                                    <span class="speedbarre_arrow"></span>
                                </li>
                                
                                    <li id="speed_concours" class="">
                                        <a href="http://www.siteduzero.com/participez.html" class="">
                                            <span>Participez</span>
                                        </a>
                                        <span class="speedbarre_arrow"></span>
                                    </li>
                                    <li id="speed_etudes" class="">
                                        <a href="http://www.siteduzero.com/etudes.html" class="last_item">
                                            <span>Études</span>
                                        </a>
                                        <span class="speedbarre_arrow"></span>
                                    </li>
                                    <li id="speed_job" class="">
                                        <a href="http://www.siteduzero.com/emploi.html" class="last_item">
                                            <span>Emploi</span>
                                        </a>
                                        <span class="speedbarre_arrow"></span>
                                    </li>

                                    <li id="speed_boutique" class="">
                                    <a href="http://www.siteduzero.com/boutique.html" class="last_item">
                                            <span>Boutique</span>
                                        </a>
                                        <span class="speedbarre_arrow"></span>
                                        <img id="discount_teaser" style="position:absolute; top:-10px; left: 80px; " src="./cpp2_files/soldes.png" alt="Les soldes du Site du Zéro">
                                    </li>
                                
                            </ul>

                            <div id="speedbar_expand" class="menuh" style="display:none;">
                                <div class="menuh_content">
                                    <div id="menuh_tutorials" style="display: none; ">
                                        

                                        <div id="menu_tutorials">
                                            <div class="menu_prim">
                                                <h5>Les cours phares</h5>
                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><img src="./cpp2_files/67.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><strong>Site Web</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-13666-apprenez-a-creer-votre-site-web.html"><span style="display:block">XHTML / CSS</span></a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-309961-dynamisez-vos-sites-web-avec-javascript.html">Javascript</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-14668-concevez-votre-site-web-avec-php-et-mysql.html">PHP / MySQL</a>
                                                            <a href="http://www.siteduzero.com/boutique-614-107-concevez-votre-site-web-avec-php-et-mysql.html">
                                                                <span class="in_book"><img src="./cpp2_files/ico_livre.png" alt=""></span>
                                                                <span style="display:none">Ce cours existe en livre :<br>(Concevez votre site web avec PHP et MySQL)</span>
                                                            </a>
                                                        </li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-112219-apprenez-a-creer-des-applications-web-dynamiques-avec-jee.html">Java EE (J2EE)</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html"><img src="./cpp2_files/57.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html"><strong>Programmation</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-14189-apprenez-a-programmer-en-c.html">Langage C</a>
                                                            <a href="http://www.siteduzero.com/boutique-614-65-apprenez-a-programmer-en-c.html">
                                                                <span class="in_book"><img src="./cpp2_files/ico_livre.png" alt=""></span>
                                                                <span style="display:none">Ce cours existe en livre :<br>(Apprenez à programmer en C)</span>
                                                            </a>
                                                        </li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-11406-apprenez-a-programmer-en-c.html">Langage C++</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-10601-programmation-en-java.html">Java</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-119239-programmation-en-java-api.html">Java (API)</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html">Python</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-134798-visual_basic_net.html">VB .NET </a></li>
                                                    </ul>
                                                </div>


                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><img src="./cpp2_files/60.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><strong>Systèmes d'exploitation</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-12827-reprenez-le-controle-a-l-aide-de-linux.html">Linux</a>
                                                            <a href="http://www.siteduzero.com/boutique-614-171-reprenez-le-controle-a-l-aide-de-linux.html">
                                                                <span class="in_book"><img src="./cpp2_files/ico_livre.png" alt=""></span>
                                                                <span style="display:none">Ce cours existe en livre :<br>(Reprenez le contrôle a l'aide de Linux)</span>
                                                            </a>
                                                        </li>                                                    
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-273305-freebsd-et-l-envers-du-decor.html">FreeBSD</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html"><img src="./cpp2_files/56.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html"><strong>Graphisme</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-351765-debuter-sur-adobe-photoshop.html">Photoshop</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html"><img src="./cpp2_files/58.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html"><strong>Infographie 3D</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-11714-debutez-dans-la-3d-avec-blender.html">Blender</a></li>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-228998-apprenez-a-modeliser-en-3d-avec-autodesk-maya.html">Maya </a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><img src="./cpp2_files/55.png" alt=""></a></div>
                                                    <h6><a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><strong>Bureautique</strong></a></h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/tutoriel-3-258577-redigez-des-documents-de-qualite-professionnelle-avec-latex.html">LaTeX</a>
                                                            <a href="http://www.siteduzero.com/boutique-614-207-redigez-des-documents-de-qualite-professionnelle-avec-latex.html">
                                                                <span class="in_book"><img src="./cpp2_files/ico_livre.png" alt=""></span>
                                                                <span style="display:none">Ce cours existe en livre :<br>(Rédigez des documents de qualité avec LaTeX)</span>
                                                            </a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                            
                                            <div class="menu_princi menuhcattuto ">
                                                <h5>Tous les cours par catégories</h5>
                                                <div class="menuh_princi_col">
                                                    
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><img src="./cpp2_files/67.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html">Site Web <span style="font-weight:normal;">(206 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-69-xhtml-css.html">XHTML / CSS</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-210-php.html">PHP</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-71-divers.html">Divers</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-73-forums.html">Forums</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-77-hebergement.html">Hébergement</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-70-javascript.html">Javascript</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-74-serveur.html">Serveur</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-309-ide.html">IDE</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><img src="./cpp2_files/60.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html">Systèmes d'exploitation <span style="font-weight:normal;">(96 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-96-linux.html">Linux</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-147-macos.html">MacOS</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-97-windows.html">Windows</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-408-bsd.html">BSD</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-54-mapping.html"><img src="./cpp2_files/54.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-54-mapping.html">Mapping <span style="font-weight:normal;">(31 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-63-half-life.html">Half-Life</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-66-half-life.html">Half-Life²</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-173-warcraft.html">Warcraft</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-188-autres.html">Autres</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><img src="./cpp2_files/55.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html">Bureautique <span style="font-weight:normal;">(29 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-290-microsoft-office.html">Microsoft Office</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-291-openoffice-org.html">OpenOffice.org</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-87-firefox.html">Firefox</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-195-irc.html">IRC</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-192-divers.html">Divers</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-59-jeux-video.html"><img src="./cpp2_files/59.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-59-jeux-video.html">Jeux Vidéo <span style="font-weight:normal;">(22 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-102-hl-ses-mods.html">HL &amp; ses mods</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-185-autres-jeux.html">Autres jeux</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-61-materiel.html"><img src="./cpp2_files/61.png" alt=""></a></div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-61-materiel.html">Matériel <span style="font-weight:normal;">(11 Cours)</span></a></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-101-general.html">Général</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        

                                                    <div class="menuh_list_category">
                                                        <div class="ico"><img src="./cpp2_files/tuto_cat_thb.png" alt=""></div>
                                                        <h6>Autres</h6>
                                                        <ul>
                                                            
                                                                <li>
                                                                    <a style="display:block" href="http://www.siteduzero.com/tutoriel-2-404-bases-de-donnees.html">Bases de données</a>
                                                                </li>
                                                            
                                                                <li>
                                                                    <a style="display:block" href="http://www.siteduzero.com/tutoriel-2-403-mobiles.html">Mobiles</a>
                                                                </li>
                                                            
                                                                <li>
                                                                    <a style="display:block" href="http://www.siteduzero.com/tutoriel-2-141-site-du-zero.html">Site du Zéro</a>
                                                                </li>
                                                            
                                                        </ul>
                                                    </div>
                                                </div>

                                                <div class="menuh_princi_col">
                                                    
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html">
                                                                    <img src="./cpp2_files/57.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html">Programmation</a> <span style="font-weight:normal;">(244 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-91-as-flash-flex.html">AS / Flash / Flex</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-217-algorithmique.html">Algorithmique</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-254-basic-et-derives.html">Basic et dérivés</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-344-bibliotheques.html">Bibliothèques</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-262-c.html">C</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-261-c.html">C++</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-201-c-net.html">C# / .NET</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-1-258-calculatrices.html">Calculatrices</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-242-ide.html">IDE</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-336-erlang.html">Erlang</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-227-general.html">Général</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-178-java.html">Java</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-93-mirc.html">mIRC</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-196-python.html">Python</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-355-caml-ocaml.html">Caml / OCaml</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-386-cocoa-objective-c.html">Cocoa / Objective-C</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-253-autres-langages.html">Autres langages</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html">
                                                                    <img src="./cpp2_files/56.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html">Graphisme</a> <span style="font-weight:normal;">(27 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-176-dessin.html">Dessin</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-177-divers.html">Divers</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-79-flash.html">Flash</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-157-gimp.html">Gimp</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-153-dessin-vectoriel.html">Dessin vectoriel</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-190-photofiltre.html">PhotoFiltre</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-78-photoshop.html">Photoshop</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-197-pov-ray.html">POV-Ray</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html">
                                                                    <img src="./cpp2_files/58.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html">Infographie 3D</a> <span style="font-weight:normal;">(25 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-95-3d-studio-max.html">3D Studio Max</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-152-blender.html">Blender</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-296-maya.html">Maya</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-62-multimedia.html">
                                                                    <img src="./cpp2_files/62.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-62-multimedia.html">Multimédia</a> <span style="font-weight:normal;">(24 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-99-audio.html">Audio</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-100-video.html">Vidéo</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-382-after-effects.html">After Effects</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        
                                                            <div class="menuh_list_category">
                                                                <div class="ico"><a href="http://www.siteduzero.com/tutoriel-1-182-reseaux.html">
                                                                    <img src="./cpp2_files/182.png" alt=""></a>
                                                                </div>
                                                                <h6><a href="http://www.siteduzero.com/tutoriel-1-182-reseaux.html">Réseaux</a> <span style="font-weight:normal;">(18 Cours)</span></h6>
                                                                <ul>
                                                                    <li>
                                                                        
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-183-general.html">Général</a>,
                                                                            <a href="http://www.siteduzero.com/tutoriel-2-189-securite.html">Sécurité</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        

                                                    <div class="menuh_list_category">
                                                        <div id="create_tutorials_button">
                                                            
                                                                <div><a href="http://www.siteduzero.com/connexion.html"><img src="./cpp2_files/redigercours.png" alt=""></a></div>
                                                            
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="clear"></div>
                                            </div>
                                            <div class="clear"></div>
                                        </div>
                                    </div>
                                    
                                    <div id="menuh_forum" style="display: none; ">
                                        <div class="menu_princi">
                                            <a class="button_all_forums" href="http://www.siteduzero.com/forum.html">Accueil des forums</a>
                                            <div class="menuh_princi_col">
                                                
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-121-site-web.html"><img src="./cpp2_files/121.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-121-site-web.html">Site Web</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-122-xhtml-css.html">XHTML / CSS</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-338-javascript.html">Javascript</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-123-php.html">PHP</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-128-mapping.html"><img src="./cpp2_files/128.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-128-mapping.html">Mapping</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-129-goldsource-hl1.html">GoldSource (HL1)</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-130-source-hl2.html">Source (HL2)</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-24-communaute-des-zeros.html"><img src="./cpp2_files/24.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-24-communaute-des-zeros.html">Communauté des zéros</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-28-discussions-generales.html">Discussions générales</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-278-vos-etudes.html">Vos études</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-239-presentation-de-vos-projets.html">Présentation de vos projets</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-200-recrutements-pour-vos-projets.html">Recrutements pour vos projets</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-440-sciences.html"><img src="./cpp2_files/440.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-440-sciences.html">Sciences</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-441-mathematiques.html">Mathématiques</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-442-physique-chimie.html">Physique - Chimie</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-443-biologie-et-geologie.html">Biologie et Géologie</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-444-autres-sciences.html">Autres sciences</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                            </div>

                                            <div class="menuh_princi_col">
                                                
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-125-programmation.html"><img src="./cpp2_files/125.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-125-programmation.html">Programmation</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-126-langage-c.html">Langage C</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-237-langage-c.html">Langage C++</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-305-langage-java.html">Langage Java</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-407-langage-python.html">Langage Python</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-406-bases-de-donnees.html">Bases de données</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-127-autres-langages-outils-et-approches.html">Autres langages, outils et approches</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-219-materiel-et-logiciels.html"><img src="./cpp2_files/219.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-219-materiel-et-logiciels.html">Matériel et logiciels</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-339-discussions-informatiques.html">Discussions informatiques</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-220-linux-mac-et-bsd.html">Linux, Mac et *BSD</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-221-windows.html">Windows</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-116-jeux-video.html">Jeux vidéo</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-117-graphisme.html">Graphisme</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-223-materiel.html">Matériel</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-310-concours.html"><img src="./cpp2_files/310.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-310-concours.html">Concours</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-435-innov-game-2011-a-la-gloire-de.html">Innov'Game 2011 : A la gloire de</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-447-atelier-de-noel-faites-votre-jeu.html">Atelier de noël : "Faites votre jeu"</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                                        <div class="menuh_list_category">
                                                            <div class="ico"><a href="http://www.siteduzero.com/forum-89-143-le-site-du-zero.html"><img src="./cpp2_files/143.png" alt=""></a></div>
                                                            <h6><a href="http://www.siteduzero.com/forum-89-143-le-site-du-zero.html">Le Site du Zéro</a></h6>
                                                            <ul>
                                                                <li>
                                                                    
                                                                            <a href="http://www.siteduzero.com/forum-81-144-suggestions-et-commentaires.html">Suggestions et Commentaires</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-145-designs-du-site-du-zero.html">Designs du Site du Zéro</a>
                                                                        
                                                                            <a href="http://www.siteduzero.com/forum-81-429-tutoriels-du-site-du-zero.html">Tutoriels du Site du Zéro</a>
                                                                        
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    
                                            </div>
                                        </div>

                                        
                                    <div class="clear"></div>
                                    </div>
                                    <div id="menuh_collaborate" style="display: none; ">
                                        <div class="menuh_list_category">
                                            
                                                <div class="ico"><a href="http://www.siteduzero.com/membres-315.html"><img src="./cpp2_files/tuto_cat_thb.png" alt=""></a></div>
                                                <h6><a href="http://www.siteduzero.com/membres-315.html">Cours</a></h6>
                                                <ul>
                                                    <li style="font-style:italic;">Pour rédiger et participer à la rédaction d'un tutoriel, <a style="display:inline; font-style:normal" href="http://www.siteduzero.com/membres-315.html">rejoignez-nous !</a></li>
                                                </ul>
                                            
                                        </div>

                                        <div class="menuh_list_category">
                                            
                                                <div class="ico"><a href="http://www.siteduzero.com/membres-315.html"><img src="./cpp2_files/defaut_thb.png" alt=""></a></div>
                                                <h6><a href="http://www.siteduzero.com/membres-315.html">News</a></h6>
                                                <ul>
                                                    <li style="font-style:italic;">Pour partager ou participer à la rédaction d'une news, <a style="display:inline; font-style:normal" href="http://www.siteduzero.com/membres-315.html"> rejoignez-nous !</a></li>
                                                </ul>
                                            
                                        </div>

                                        <div class="menuh_list_category">
                                            <div class="ico"><a href="http://www.siteduzero.com/concours.html"><img src="./cpp2_files/cup_thb.png" alt=""></a></div>
                                            <h6><a href="http://www.siteduzero.com/concours.html">Concours</a></h6>
                                            <ul>
                                                
                                                            <li><a href="http://www.siteduzero.com/forum-81-435-innov-game-2011-a-la-gloire-de.html">Innov'Game 2011 : A la gloire de</a></li>
                                                        
                                                            <li><a href="http://www.siteduzero.com/forum-81-447-atelier-de-noel-faites-votre-jeu.html">Atelier de noël : "Faites votre jeu"</a></li>
                                                        
                                            </ul>
                                        </div>
                                        <div class="clear"></div>
                                    </div>


                                    <div id="menuh_job" style="display: none; ">
                                        <div class="menu_princi">
                                            <div class="menuh_princi_col">
                                                <div class="menuh_list_category">
                                                    <h6>Dernières annonces</h6>
                                                    <div class="menuh_list_category_job">
                                                        
                                                            <a title="Consulter le poste : Formateur sur les technologi…" href="http://www.siteduzero.com/emploi/34/formateur-sur-les-technologies-du-web" class="corpsmenu">
                                                                <span class="last_jobs">
                                                                    <span title="CDD" class="job_type jobtypes2">CDD</span>
                                                                </span>
                                                                <span>
                                                                    <span class="job_title">Formateur sur les technologi…</span>
                                                                    <span style="color:#000000;">Simple IT</span>
                                                                </span>
                                                            </a>
                                                        
                                                            <a title="Consulter le poste : Ingénieur d’études et de…" href="http://www.siteduzero.com/emploi/31/ingenieur-d-etudes-et-de-developpement-c" class="corpsmenu">
                                                                <span class="last_jobs">
                                                                    <span title="CDI" class="job_type jobtypes1">CDI</span>
                                                                </span>
                                                                <span>
                                                                    <span class="job_title">Ingénieur d’études et de…</span>
                                                                    <span style="color:#000000;">INVIVOO</span>
                                                                </span>
                                                            </a>
                                                        
                                                            <a title="Consulter le poste : Ingénieur d’études et de…" href="http://www.siteduzero.com/emploi/30/ingenieur-d-etudes-et-de-developpement-c" class="corpsmenu">
                                                                <span class="last_jobs">
                                                                    <span title="CDI" class="job_type jobtypes1">CDI</span>
                                                                </span>
                                                                <span>
                                                                    <span class="job_title">Ingénieur d’études et de…</span>
                                                                    <span style="color:#000000;">INVIVOO</span>
                                                                </span>
                                                            </a>
                                                        
                                                    </div>
                                                </div>
                                            </div>
                                                
                                                <div class="menuh_princi_col">
                                                    <div class="menuh_list_category">
                                                        <h6>Annonces à la une</h6>
                                                        <div class="menuh_list_category_job">
                                                            
                                                                <a title="Consulter le poste : Chargé(e) de clientèle for…" href="http://www.siteduzero.com/emploi/10/charge-e-de-clientele-formations-professionnelles" class="corpsmenu">

                                                                    <span class="last_jobs">
                                                                        <span title="Stage" class="job_type jobtypes3">Stage</span>
                                                                    </span>
                                                                    <span>
                                                                        <span class="job_title">Chargé(e) de clientèle for…</span>
                                                                        <span style="color:#000000;">Simple IT</span>
                                                                    </span>
                                                                </a>
                                                            
                                                                <a title="Consulter le poste : Ingénieur Etudes et Dévelo…" href="http://www.siteduzero.com/emploi/5/ingenieur-etudes-et-developpements-java-j2ee-finance-de-marche" class="corpsmenu">

                                                                    <span class="last_jobs">
                                                                        <span title="CDI" class="job_type jobtypes1">CDI</span>
                                                                    </span>
                                                                    <span>
                                                                        <span class="job_title">Ingénieur Etudes et Dévelo…</span>
                                                                        <span style="color:#000000;">TEAM TRADE GROUPE</span>
                                                                    </span>
                                                                </a>
                                                            
                                                        </div>
                                                    </div>
                                                    <div class="menuh_list_category">
                                                        <div>
                                                            <div><a href="http://www.siteduzero.com/emploi.html"><img src="./cpp2_files/speed_barre_btn_recherche_emploi.png" alt=""></a></div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="menuh_more2">
                                                        <a href="http://www.siteduzero.com/emploi/liste.html">Toutes les annonces<img src="./cpp2_files/fleche_droite.png" alt="►"></a>
                                                </div>
                                            </div>
                                        <div class="clear"></div>
                                    </div>

                                    <div id="menuh_study" style="padding-left: 15px; display: none; ">
                                        <div class="menu_princi">
                                            <div class="ico_study"><img src="./cpp2_files/ico_etude.png" width="50" alt="icon etude"></div>
                                            <div class="menuh_princi_col">
                                                <div class="menuh_list_category">
                                                    <h6>Recrutement à Bac / Bac +1</h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-280-bts.html">BTS</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-269-ecoles-d-ing%C3%A9nieurs-en-informatique.html">Ecoles d'ingénieurs en informatique</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-274-ecoles-d-ing%C3%A9nieurs-generalistes.html">Ecoles d'ingénieurs généralistes</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-283-iut.html">IUT</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-300-universites.html">Universités</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-287-autre-formation-diplomantes.html">Autres formations diplômantes</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-448-cpge.html">CPGE</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <h6>Recrutement à Bac +2</h6>
                                                    <ul>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-270-ecoles-d-ing%C3%A9nieurs-en-informatique.html">Ecoles d'ingénieurs en informatique</a></li>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-273-ecoles-d-ing%C3%A9nieurs-generalistes.html">Ecoles d'ingénieurs généralistes</a></li>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-289-autre-formation-diplomantes.html">Autres formations diplômantes</a></li>
                                                    </ul>
                                                </div>
                                            </div>

                                            <div class="menuh_princi_col">
                                                <div class="menuh_list_category">
                                                    <h6>Recrutement à Bac +3 / Bac +4</h6>
                                                    <ul>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-388-ecoles-d-ing%C3%A9nieurs-en-informatique.html">Ecoles d'ingénieurs en informatique</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-389-ecoles-d-ing%C3%A9nieurs-generalistes.html">Ecoles d'ingénieurs généralistes</a></li>
                                                        <li><a href="http://www.siteduzero.com/etudes-550-390-autre-formation-diplomantes.html">Autres formations diplômantes</a></li>
                                                    </ul>
                                                </div>

                                                <div class="menuh_list_category">
                                                    <h6>Recrutement à Bac +5</h6>
                                                    <ul>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-299-doctorats.html">Doctorats</a></li>
                                                       <li><a href="http://www.siteduzero.com/etudes-550-391-autre-formation-diplomantes.html">Autres formations diplômantes</a></li>
                                                    </ul>
                                                    <div class="menuh_list_category">
                                                        <div id="find_training">
                                                            <div><a href="http://www.siteduzero.com/etudes.html"><img src="./cpp2_files/ico_recherche_cours.png" alt=""><strong>Trouvez une formation</strong></a></div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="clear"></div>
                                    </div>

                                    <div id="menuh_shop" style="display: none; ">
                                        <div style="float: left; background-image:url(&#39;/images/designs/2/boutique/soldes/soldes_speed.png&#39;); width:296px; height:362px;">
                                            <a href="http://www.siteduzero.com/boutique-614-188-cle-usb-du-site-du-zero-8-go.html" style="display:block; height:240px;"></a>
                                            <div class="discount_product_high">
                                                <h5 style="font-size:16px; font-weight: bold">4 Go</h5>
                                                <span class="min_price" style="font-size:14px; background: transparent url(&#39;/images/designs/2/boutique/soldes/old.png&#39;) no-repeat center center;">15,20 €</span>
                                                <span class="price" style="color:#008000; font-size:18px;">9,90 €</span>
                                                <span><a class="link_contextual buy" href="http://www.siteduzero.com/boutique-614-184-cle-usb-du-site-du-zero-4-go.html">Acheter</a></span>
                                            </div>

                                            <div class="discount_product_high">
                                                <h5 style="font-size:16px; font-weight: bold">8 Go</h5>
                                                <span class="min_price" style="font-size:14px; background: transparent url(&#39;/images/designs/2/boutique/soldes/old.png&#39;) no-repeat center center;">23,20 €</span>
                                                <span class="price" style="color:#008000; font-size:18px;">14,90 €</span>
                                                <span><a class="link_contextual buy" href="http://www.siteduzero.com/boutique-614-188-cle-usb-du-site-du-zero-8-go.html">Acheter</a></span>
                                            </div>

                                            <div class="discount_product_high">
                                                <h5 style="font-size:16px; font-weight: bold">16 Go</h5>
                                                <span class="min_price" style="font-size:14px; background: transparent url(&#39;/images/designs/2/boutique/soldes/old.png&#39;) no-repeat center center;">39,20 €</span>
                                                <span class="price" style="color:#008000; font-size:18px;">24,90 €</span>
                                                <span><a class="link_contextual buy" href="http://www.siteduzero.com/boutique-614-191-cle-usb-du-site-du-zero-16-go.html">Acheter</a></span>
                                            </div>
                                        </div>

                                    <div class="other_products">
                                        <span>Concevez votre site web avec PHP et MySQL<br>
                                        <a href="http://www.siteduzero.com/boutique-614-107-concevez-votre-site-web-avec-php-et-mysql.html">En savoir plus ►</a></span>
                                        <a href="http://www.siteduzero.com/boutique-614-107-concevez-votre-site-web-avec-php-et-mysql.html">
                                        <img style="margin:13px 0 0 22px" alt="Concevez votre site web avec php et mysql" src="./cpp2_files/livre_cours_php_2d.png"></a>
                                    </div>

                                    <div class="other_products">
                                        <span>Apprenez à programmer en C <br>
                                        <a href="http://www.siteduzero.com/boutique-614-65-apprenez-a-programmer-en-c.html">En savoir plus ►</a></span>
                                        <a href="http://www.siteduzero.com/boutique-614-65-apprenez-a-programmer-en-c.html">
                                        <img style="margin:13px 0 0 22px" alt="Apprenez à programmer en C" src="./cpp2_files/livre_cours_c_2d.png"></a>
                                    </div>
                                    <div class="other_products">
                                        <span>Reprenez le contrôle à l'aide de Linux <br>
                                        <a href="http://www.siteduzero.com/boutique-614-171-reprenez-le-controle-a-l-aide-de-linux.html">En savoir plus ►</a></span>
                                        <a href="http://www.siteduzero.com/boutique-614-171-reprenez-le-controle-a-l-aide-de-linux.html">
                                        <img style="margin:13px 0 0 22px" alt="Reprenez le contrôle à l&#39;aide de Linux" src="./cpp2_files/livre_cours_linux_2d.png"></a>
                                    </div>

                                    <div class="other_products">
                                        <span>Rédigez des documents de qualité avec LaTeX<br>
                                        <a href="http://www.siteduzero.com/boutique-614-207-redigez-des-documents-de-qualite-avec-latex.html">En savoir plus ►</a></span>
                                        <a href="http://www.siteduzero.com/boutique-614-207-redigez-des-documents-de-qualite-avec-latex.html">
                                        <img style="margin:13px 0 0 22px" alt="Rédigez des documents de qualité avec LaTeX" src="./cpp2_files/livre_cours_latex_2d.png"></a>
                                    </div>
                                      
                                    <div class="menuh_more">
                                        <a href="http://www.siteduzero.com/boutique.html">Tous les produits <img src="./cpp2_files/fleche_droite(1).png" alt="►"></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="search_bar">
                        <div class="ard"></div>
                        <form method="get" action="http://www.siteduzero.com/recherche.html" id="recherche">
                            <p>
                                <input type="text" name="src" id="champ_recherche" accesskey="4" value="Rechercher">
                                <select name="c" id="section_recherche">
                                    <option value="3" selected="selected">Cours</option>
                                    <option value="6">Forums</option>
                                    <option value="4">News</option>
                                    <option value="mbr">Membres</option>
                                    <option value="formation">Études</option>
                                    <option value="codeweb">Code web</option>
                                    <option value="mp">MP</option>
                                </select>
                                <input class="button_go_search" value="Go" type="submit">
                                <a class="button_more_search" href="http://www.siteduzero.com/recherche.html">+</a>
                            </p>
                        </form>
                        </div>

                    </div>

<script type="text/javascript">

    
        //On Hover

    var keyCodeEscape = 27;
    $(document).keyup(function(f) {
        if (f.keyCode == keyCodeEscape)
        {
            hideBlocMenu();
        }
    });


    /* Var for speedbar*/
    showDelay = 300;
    hiddenDelay = 367;
    fadeInDelay = 100
    fadeOutDelay = 100
    timer = null;
    hideTimeOut = null
    // speedbar function
    function speedShowDelay(){
        if($('.menuh_content > div').is(':visible'))
        {
            showDelay = null;
        }
        else
        {
            showDelay = 300;
        }
    }
    
    $("body").mouseleave(function(){
        $('.menuh_content > div').hide();
        $('#speedbarre .smenu>li a').removeClass("smenu_hover");
    });
    
    function showMenu(id, id2){

        $(id2).click(function(){
            clearInterval(timer);
            hideBlocMenu();
            return;
        });

        speedShowDelay();

        $("body").unbind('click');

        clearInterval(timer);
        if(!$(id).is(':visible'))
        {
            $('.menuh_content > div').hide();

            $('#speedbarre .smenu>li a').removeClass("smenu_hover");
            $('#speedbarre .smenu > li > .speedbarre_arrow').hide();

            timer=setInterval(function(){
                $(id+' ,#speedbar_expand').fadeIn(fadeInDelay);
                $(id2+' a').addClass('smenu_hover')
                clearInterval(timer);

                // Discount
                if(id == '#menuh_shop')
                {
                    $.get('http://www.siteduzero.com/soldes/affichage');
                    $('#discount_teaser').remove();
                }

                },showDelay);
        }
    }

    function hideMenu(id, id2){

        clearInterval(timer);
        clearTimeout(hideTimeOut);

        $("body").bind('click',function(){
            hideBlocMenu();
        });

        timer=setInterval(function(){
            $(id).fadeOut(fadeOutDelay,function(){
                $('#speedbar_expand').hide();
                $(id2+' a').removeClass("smenu_hover");
            });
            clearInterval(timer);
        },hiddenDelay)
    }

    function hideBlocMenu(){
        $('.menuh_content > div').fadeOut(fadeOutDelay, function(){
            $('#speedbar_expand').hide();
            $('#speedbarre .smenu>li a').removeClass("smenu_hover");})
    }

        /* speedbar */


    $("#speed_cours").addClass('hideOnLoad');
    $("#speed_forum").addClass('hideOnLoad');
    $("#speed_concours").addClass('hideOnLoad');
    $("#speed_job").addClass('hideOnLoad');
    $("#speed_etudes").addClass('hideOnLoad');
    $("#speed_boutique").addClass('hideOnLoad');



    $(document).mousemove(function(){
        $("#speed_cours").removeClass('hideOnLoad');
        $("#speed_forum").removeClass('hideOnLoad');
        $("#speed_concours").removeClass('hideOnLoad');
        $("#speed_job").removeClass('hideOnLoad');
        $("#speed_etudes").removeClass('hideOnLoad');
        $("#speed_boutique").removeClass('hideOnLoad');
    })


    //TUTORIALS
    $("#speed_cours, #menuh_tutorials").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_tutorials';
        id2 = '#speed_cours';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_tutorials';
        id2 = '#speed_cours';
        hideMenu(id, id2);
    });
    //FORUMS
    $("#speed_forum, #menuh_forum").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_forum';
        id2 = '#speed_forum';

        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_forum';
        id2 = '#speed_forum';
        hideMenu(id, id2);
    });

    //COLLABORATE
    $("#speed_concours, #menuh_collaborate").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_collaborate';
        id2 = '#speed_concours';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_collaborate';
        id2 = '#speed_concours';
        hideMenu(id, id2);
    });

    //JOB
    $("#speed_job, #menuh_job").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_job';
        id2 = '#speed_job';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_job';
        id2 = '#speed_job';
        hideMenu(id, id2);
    });

    //STUDY
    $("#speed_etudes, #menuh_study").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_study';
        id2 = '#speed_etudes';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_study';
        id2 = '#speed_etudes';
        hideMenu(id, id2);
    });

    //SHOP
    $("#speed_boutique, #menuh_shop").hover(function(){
        clearTimeout(hideTimeOut);
        id = '#menuh_shop';
        id2 = '#speed_boutique';
        if(!$(id2).hasClass('hideOnLoad'))
        {
            hideTimeOut = setTimeout(function(){
                showMenu(id, id2);
            },100);
        }

    ;},function(){

        id = '#menuh_shop';
        id2 = '#speed_boutique';
        hideMenu(id, id2);
    });

    

</script>
            
            <div class="contenu">
                <div id="menu">
                    

                    <div class="box_menu">
                        <h5>Cours</h5>

                        <div class="corpsmenu">
                            <ul>
                                
                                    <li style="border-bottom: 0 none; padding: 0 0 2px 0; background-color: #e2f0ff">
                                        <a href="http://www.siteduzero.com/tutoriel-3-361996-par-ou-commencer.html"><img style="padding-left:5px;" src="./cpp2_files/compass.png" class="fl" alt=""></a>
                                        <span class="liste_cours_menu" style="margin-left: 43px;">
                                            <a href="http://www.siteduzero.com/tutoriel-3-361996-par-ou-commencer.html"><strong class="menu_cours_section">Nouveau ?</strong></a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-361996-par-ou-commencer.html">Suivez le guide !</a><br>
                                        </span>
                                    </li>
                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><img src="./cpp2_files/67.png" class="fl" alt=""></a>
                                        <span class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-67-site-web.html"><strong class="menu_cours_section">Site Web</strong></a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-13666-apprenez-a-creer-votre-site-web.html">XHTML / CSS</a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-309961-dynamisez-vos-sites-web-avec-javascript.html">Javascript</a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-14668-concevez-votre-site-web-avec-php-et-mysql.html">PHP / MySQL</a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-112219-apprenez-a-creer-des-applications-web-dynamiques-avec-jee.html">Java EE (J2EE)</a>
                                        </span>
                                    </li>
                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html"><img src="./cpp2_files/57.png" class="fl" alt=""></a>
                                        <span class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html"><strong class="menu_cours_section">Programmation</strong></a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-14189-apprenez-a-programmer-en-c.html">Langage C</a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-11406-apprenez-a-programmer-en-c.html">Langage C++</a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-10601-programmation-en-java.html">Java</a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-119239-programmation-en-java-api.html">Java (API)</a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-223267-apprendre-python.html">Python </a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-134798-visual_basic_net.html">VB .NET</a>
                                        </span>
                                    </li>
                                    <li>                                        
                                        <a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><img src="./cpp2_files/60.png" class="fl" alt=""></a>
                                        <span class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-60-systemes-d-exploitation.html"><strong class="menu_cours_section">Systèmes d'exploitation</strong></a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-12827-reprenez-le-controle-a-l-aide-de-linux.html">Linux</a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-273305-freebsd-et-l-envers-du-decor.html">FreeBSD</a>
                                        </span>
                                    </li>
                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html"><img src="./cpp2_files/56.png" class="fl" alt=""></a>
                                        <span class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-56-graphisme.html"><strong class="menu_cours_section">Graphisme</strong></a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-351765-debuter-sur-adobe-photoshop.html">Photoshop</a><br>
                                        </span>
                                    </li>
                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html"><img src="./cpp2_files/58.png" class="fl" alt=""></a>
                                        <span class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-58-infographie-3d.html"><strong class="menu_cours_section">Infographie 3D</strong></a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-11714-debutez-dans-la-3d-avec-blender.html">Blender</a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-228998-apprenez-a-modeliser-en-3d-avec-autodesk-maya.html">Maya</a>
                                        </span>
                                    </li>

                                    <li>
                                        <a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><img src="./cpp2_files/55.png" class="fl" alt=""></a>
                                        <span class="liste_cours_menu">
                                            <a href="http://www.siteduzero.com/tutoriel-1-55-bureautique.html"><strong class="menu_cours_section">Bureautique</strong></a><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-258577-redigez-des-documents-de-qualite-professionnelle-avec-latex.html">LaTeX </a>
                                        </span>
                                        
                                    </li>
                                    
                                    
                                    <li class="last_idem_liste">
                                        <img src="./cpp2_files/die.png" class="fl" alt="">
                                        <span class="liste_cours_menu">
                                            <strong class="menu_cours_section">Tutoriel du jour</strong><br>
                                            <a href="http://www.siteduzero.com/tutoriel-3-38890-la-cross-compilation-d-applications-qt-depuis-linux.html">La cross compilation d'applications Qt depuis Linux</a><br>
                                        </span>
                                        <div id="menu_ajout_cours">
                                            
                                                <a href="http://www.siteduzero.com/tutoriel-3-256867-devenez-auteur-de-cours-sur-le-site-du-zero-et-le-livre-du-zero.html">
                                            
                                            Rédigez un cours <img src="./cpp2_files/add.png" alt="">&nbsp;</a>
                                        </div>
                                        <a href="http://www.siteduzero.com/tutoriel.html" class="fr">Tous les cours  <img src="./cpp2_files/fleche_droite.png" alt="">&nbsp;</a><br>
                                    </li>
                                
                            </ul>
                        </div>
                    </div>
                </div>

                <div id="corps">
                    <div id="zozor_position">
                        <div id="zozor">
                            <div class="centre"><img src="./cpp2_files/zozor6.png" alt=" Zozor" title=" Zozor"></div>
                       </div>
                    </div>

                    <div id="container_bulle_zozor">
                        
                    </div>

                    <div id="arbre">
                        
			&gt;  <a href="http://www.siteduzero.com/">Le Site du Zéro</a>
		
			&gt;  <a href="http://www.siteduzero.com/tutoriel.html">Cours</a>
			 &gt;  <a href="http://www.siteduzero.com/tutoriel-1-352-tutoriels.html">Tutoriels</a>
		 &gt;  <a href="http://www.siteduzero.com/tutoriel-1-57-programmation.html">Programmation</a>
		 &gt;  <a href="http://www.siteduzero.com/tutoriel-2-261-c.html">C++</a>
		&gt;  <a href="">[C++] Notions avancées</a> 

&gt; Lecture du tutoriel

                    </div>

                    


<h1>[C++] Notions avancées</h1>


<div id="onglets_tutos" class="onglets_tutos">
  <ul>
    
      <li class="selected">
      <a href="">Tutoriel</a></li>
    
      <li>
      <a href="http://www.siteduzero.com/tutoriel-50-8965-p2-c-notions-avancees.html#r67287">46 commentaires</a></li>
    
      <li>
      <a href="http://www.siteduzero.com/tutoriel-21-8965-c-notions-avancees.html">Historique</a></li>
    
  </ul>
</div>
<hr class="bas_onglets">





<div class="cadre_auteur_date">
  <form action="http://www.siteduzero.com/tutoriel-54-8965.html" method="post">
    <div class="dnone"><input type="hidden" value="abfda77e3dd1909dd157b2cde15a2bbb105518e0" name="challenge"></div>

    <div class="infobox">
<h3 class="special">Informations sur le tutoriel</h3>
<div class="conteneur_infobox">
<table>
  <tbody><tr>
    <td>
    <div class="boite_avatar_100px">
      <img src="./cpp2_files/92161.png" style="width:100px; height:100px; display: block;" alt="Avatar" class="avatar" id="avatar49110">  
     </div>
    </td>
    <td>
     
      <strong>Auteur</strong> :
      
    
	    <a class="auteur_tut" href="http://www.siteduzero.com/membres-294-49110.html">Nanoc</a>
    
      <br>
    
      
		  <strong>Difficulté</strong> :
		  
			<img src="./cpp2_files/niveau_3.png" alt="Difficile">
		  
		  <br>
	  
		<strong>Temps d'étude estimé</strong> : 
		
			15 
			jours
		<br>
	<strong>Licence</strong> : <a href="http://creativecommons.org/licenses/by-nc-sa/2.0/fr/"><img src="./cpp2_files/6.png" alt="Creative Commons BY-NC-SA" title="Creative Commons BY-NC-SA"></a><br><br>
      <br>
      <a href="?all=1#tuto_details" onclick="toggle(&#39;infos_detaillees&#39;); return false;">Plus d'informations <img src="./cpp2_files/fleche_bas.png" alt="Plus d&#39;informations" title="Plus d&#39;informations" id="image_detail"></a>

      <div style="display: none;" id="infos_detaillees">
	<br>			
<strong>Créé</strong> : Le 11/06/2008 à 13:11:39<br>
<strong>Modifié</strong> : Le 02/02/2010 à 13:22:15<br>

<strong>Avancement</strong> : 35%<br>

<br>


  <a href="http://www.zcorrecteurs.fr/"><img src="./cpp2_files/zcorrige.png" alt="L&#39;orthographe, la grammaire et la présentation de ce tutoriel ont été vérifiées par les zCorrecteurs." title="L&#39;orthographe, la grammaire et la présentation de ce tutoriel ont été vérifiées par les zCorrecteurs."></a><br>

<a href="http://www.siteduzero.com/tutoriel-50-8965-67287-c-notions-avancees.html#r67287">46 commentaires</a><br>

  <a href="">Revenir au sommaire du tutoriel</a><br>


      </div>

    </td>
  </tr>
</tbody></table>
</div>
</div>


    <div class="infobox">
        <h3 class="special">Popularité</h3>
        <div class="conteneur_infobox">
            <strong>Visualisations</strong> : 10&nbsp;226&nbsp;517<br><br>
            <div style="padding-top: 1px; float: left;"><strong>Appréciation<br>des lecteurs</strong> : </div>
            <div class="tut_appreciation">
                <div class="tut_appreciation_smiley" id="smiley-1-78--735259" style="background-position: -19px 50%;"><img src="./cpp2_files/empty.gif" alt=""></div>
                <span id="eval_nb-1">1</span>
            </div>
            <div class="tut_appreciation">
                <div class="tut_appreciation_smiley" id="smiley-2-78--735259" style="background-position: -57px 50%;"><img src="./cpp2_files/empty.gif" alt=""></div>
                <span id="eval_nb-2">1</span>
            </div>
            <div class="tut_appreciation">
                <div class="tut_appreciation_smiley" id="smiley-3-78--735259" style="background-position: -95px 50%;"><img src="./cpp2_files/empty.gif" alt=""></div>
                <span id="eval_nb-3">3</span>
            </div>
            <div class="tut_appreciation">
                <div class="tut_appreciation_smiley eval_always_color" id="smiley-4-78--735259" style="background-position: -114px 50%;"><img src="./cpp2_files/empty.gif" alt=""></div>
                <span id="eval_nb-4">129</span>
            </div>
            
            <div style="clear: both;"></div>
                
                    <p id="tut_vot_ldz" style="text-align:center;"><img src="./cpp2_files/thb_livre_cours_c.png" id="tut_vot_ldz_img" alt="">
                    
                                <b>152 personnes</b> souhaitent voir ce tutoriel publié en livre ! <br> <a href="http://www.siteduzero.com/vote/ldz/78.html" id="tut_vot_ldz_link">Vous aussi ?</a>
                            
            </p>
        </div>
    </div>


<div class="infobox" id="pave_pub_tuto" style="display: block; ">
<h3 class="special">Publicité</h3>
<div class="conteneur_infobox">
<table style="width: 100%;">
  <tbody><tr>
    <td colspan="2" id="menu_pub_tuto">
    <script type="text/javascript">
            <!--
            ord=Math.random();
            ord=ord*10000000000000000000;
            var test = true;
            document.write('<scr'+'ipt type="text/javascript" src="pub.js.php?cb='+ord+'&amp;l=300&amp;h=250&amp;age=0&amp;afficher_bloc_pub=pave_pub_tuto&amp;cid=261&amp;pays=0"><\/scr'+'ipt>');
            -->
    </script><script type="text/javascript" src="./cpp2_files/pub.js(1).php"></script><iframe src="./cpp2_files/cm.htm" marginwidth="0" marginheight="0" width="300" height="250" border="0" frameborder="0" style="border:none;" scrolling="no"></iframe>
    </td>
  </tr>
</tbody></table>
</div>
</div>

    
	<div class="infobox">
		<h3 class="special">Historique des mises à jour</h3>
		<div class="conteneur_infobox">
			<ul>
				
					<li>
						<em>Le 22/10/2010 à 12:50:27</em><br>
						Correction d'une erreur de syntaxe, alerte #3102
					</li>
			  
					<li>
						<em>Le 16/10/2010 à 10:58:29</em><br>
						Correction d'une coquille (tableau statique &lt;-&gt; tableau à la C)
					</li>
			  
					<li>
						<em>Le 08/10/2010 à 22:51:08</em><br>
						Ajout de tags
					</li>
			  
			</ul>
		</div>
	</div>


    
  </form>
</div>

<div id="btuto_intro">
	Vous avez pu étudier les bases du C++ et peut-être avez vous même essayé de créer quelques programmes avec des fenêtres grâce à la bibliothèque Qt. Maintenant que vous avez goûté aux joies du C++, il est temps de devenir boulimique au point de tout vouloir savoir sur ce langage.<br>
<br>
<div class="centre"><span class="gros"><strong>Ce cours est la suite du tutoriel officiel  «&nbsp;<a href="c.htm">Apprenez à programmer en C++</a>&nbsp;» de M@teo21.</strong></span></div><br>
<div class="centre">Il est indispensable d'avoir lu la première partie de son cours pour suivre celui-ci.</div><br>
<br>
La première partie de ce cours présentera des notions plus avancées de la <strong>programmation orientée objet</strong> ainsi que quelques notions spécifiques au C++.<br>
<br>
Dans un deuxième temps, nous allons nous intéresser aux <strong>templates</strong>, un des mécanismes importants du C++<br>
<br>
Finalement, nous nous intéresserons à la bibliothèque standard du C++, <strong>la SL</strong>. Vous verrez que cette bibliothèque fournit énormément d'outils et que malgré ce que l'on peut lire parfois, elle n'est pas du tout difficile à utiliser.<br>
<br>
Pour progresser en programmation, un des points essentiels est la pratique. Je vous invite donc à faire un maximum d'<strong>exercices</strong> pour compléter ce cours. Celui-ci ne sera pas entrecoupé de <acronym title="Travaux Pratiques">TP</acronym>, mais je vous invite en particulier à essayer <a href="http://www.siteduzero.com/forum-83-257993-p1-exercices-venez-vous-entrainer.html">ces exercices</a> qui sont en rapport avec les différents tutoriels présents sur ce site.<br>
<br>
<div class="rmq information">Prochains chapitres à paraître :<br>
<ul>
<li>Retour sur la surcharge d'opérateurs</li>
<li>TP sur les templates</li>
</ul></div>
</div>

<hr>



<div id="pre_liste_parties">
	Ce cours est composé des parties suivantes :
</div>

<ul id="liste_parties">
	
		<li><a href="?all=1#part_8964">Les concepts avancés du C++</a></li>
	
		<li><a href="?all=1#part_209329">Les templates</a></li>
	
		<li><a href="?all=1#part_8967">Présentation de la bibliothèque standard</a></li>
	
		<li><a href="?all=1#part_8966">Annexes</a></li>
	
</ul>
		<ul class="liste_parties_btut">
		
		<li>
		<hr class="separateur_parties">
		<h2 id="part_8964">Partie 1 : Les concepts avancés du C++</h2>
		<div>
			Cette partie a pour but d'approfondir le domaine de la <acronym title="Programmation Orientée Objet">POO</acronym> en C++. Certains chapitres ne seront pas directement reliés à ce sujet, mais utiles pour votre connaissance générale du langage et pour pouvoir continuer sereinement.
		</div>
			
				<ul class="liste_chapitres_btut">
				
					<li>
						<br><br><a href="./cpp2_files/">1) Les tableaux dynamiques</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/29539.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_8936">Introduction</a></li>
								
									<li><a href="?all=1#ss_part_8935">Créer un std::vector</a></li>
								
									<li><a href="?all=1#ss_part_8934">Quelques fonctions de base</a></li>
								
									<li><a href="?all=1#ss_part_8933">Notions plus avancées</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="?all=1#chap_8943">2) Retour sur l'héritage</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/32110.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_8942">Les différents types d'héritage</a></li>
								
									<li><a href="?all=1#ss_part_8941">Le masquage</a></li>
								
									<li><a href="?all=1#ss_part_214797">Les deux sémantiques</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="?all=1#chap_8951">3) L'amitié</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/32378.jpg" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_8950">Donner l'accès aux attributs</a></li>
								
									<li><a href="?all=1#ss_part_8949">Les fonctions amies</a></li>
								
									<li><a href="?all=1#ss_part_8948">Encore un peu plus d'amitié</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="?all=1#chap_63899">4) Le polymorphisme I</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/44644.gif" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_63898">Définition</a></li>
								
									<li><a href="?all=1#ss_part_63896">La résolution des liens</a></li>
								
									<li><a href="?all=1#ss_part_63895">Les fonctions virtuelles</a></li>
								
									<li><a href="?all=1#ss_part_63894">Un exemple</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="?all=1#chap_63892">5) Le polymorphisme II</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/56432.jpg" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_63900">Les cas particuliers</a></li>
								
									<li><a href="?all=1#ss_part_63891">Quand utiliser le polymorphisme ?</a></li>
								
									<li><a href="?all=1#ss_part_63897">Les fonctions virtuelles pures</a></li>
								
									<li><a href="?all=1#ss_part_63893">Les classes abstraites</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="?all=1#chap_35679">6) La gestion des exceptions</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/26466.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_35678">Un problème bien ennuyeux</a></li>
								
									<li><a href="?all=1#ss_part_35677">La gestion des exceptions</a></li>
								
									<li><a href="?all=1#ss_part_35676">Les exceptions standards</a></li>
								
									<li><a href="?all=1#ss_part_35675">Notions avancées</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="?all=1#chap_178617">7) Les pointeurs sur fonctions</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/177428.jpg" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_178619">Choisir une fonction</a></li>
								
									<li><a href="?all=1#ss_part_178616">Les pointeurs sur fonctions</a></li>
								
									<li><a href="?all=1#ss_part_178618">Le cas particulier des fonctions membres</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="?all=1#chap_110346">8) [TP] Le site du zéro</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/109242.jpg" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_110351">Donnée du problème</a></li>
								
									<li><a href="?all=1#ss_part_110350">Astuces</a></li>
								
									<li><a href="?all=1#ss_part_110349">Correction</a></li>
								
									<li><a href="?all=1#ss_part_110348">Le code complet</a></li>
								
									<li><a href="?all=1#ss_part_110347">Pour aller plus loin</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
				</ul>
				<div>
					<br>
					Cette partie n'est pas <span class="souligne">terminée</span>. D'autres chapitres viendront prochainement s'ajouter à ceux qui existent déjà. En attendant, vous pouvez lire les <a href="http://www.siteduzero.com/tutoriel-3-8926-1-c-notions-avancees.html#part_209308">chapitres sur les templates</a>, les <a href="#part_8966">annexes</a> ou faire quelques exercices sur les <a href="http://www.siteduzero.com/forum-81-237-langage-c.html">forums</a>.
				</div>
			
		</li>
		
		<li>
		<hr class="separateur_parties">
		<h2 id="part_209329">Partie 2 : Les templates</h2>
		<div>
			Le mécanisme des templates est un des outils majeurs du C++ et c'est ce qui différencie ce langage de beaucoup de "concurrents" comme Java. <br>
La syntaxe utilisée n'est par contre pas toujours simple à comprendre et à lire. C'est pour cela que nous allons avancer pas à pas.
		</div>
			
				<ul class="liste_chapitres_btut">
				
					<li>
						<br><br><a href="?all=1#chap_85890">1) La base</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/78191.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_85893">Ce que l'on aimerait faire</a></li>
								
									<li><a href="?all=1#ss_part_85892">Écrire une fonction template</a></li>
								
									<li><a href="?all=1#ss_part_85891">Une fonction plus complexe</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="?all=1#chap_129462">2) L'instanciation</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/128195.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_129461">Instanciation implicite</a></li>
								
									<li><a href="?all=1#ss_part_129460">Instanciation explicite</a></li>
								
									<li><a href="?all=1#ss_part_129459">Retour sur la moyenne</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="?all=1#chap_130739">3) Spécialisation</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/129837.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_130738">Ce que l'on veut faire</a></li>
								
									<li><a href="?all=1#ss_part_130737">La spécialisation</a></li>
								
									<li><a href="?all=1#ss_part_130736">D'autres spécialisations</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="?all=1#chap_135225">4) Les classes</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/132117.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_135226">La base de la classe</a></li>
								
									<li><a href="?all=1#ss_part_135223">Les fonctions membres</a></li>
								
									<li><a href="?all=1#ss_part_135224">L'extérieur de la classe</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
				</ul>
				<div>
					<br>
					Cette partie n'est pas <span class="souligne">terminée</span>. D'autres chapitres viendront prochainement s'ajouter à ceux qui existent déjà. En attendant, vous pouvez lire les <a href="#part_8966">annexes</a> ou faire quelques exercices sur les <a href="http://www.siteduzero.com/forum-81-237-langage-c.html">forums</a>.
				</div>
			
		</li>
		
		<li>
		<hr class="separateur_parties">
		<h2 id="part_8967">Partie 3 : Présentation de la bibliothèque standard</h2>
		<div>
			Dans cette partie, nous allons nous intéresser plus en détail à la bibliothèque standard du C++.
		</div>
			
				<ul class="liste_chapitres_btut">
				
					<li>
						<br><br><a href="?all=1#chap_203146">1) Qu'est-ce que la bibliothèque standard ?</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/202163.png" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_203147">Un peu d'histoire</a></li>
								
									<li><a href="?all=1#ss_part_203145">Le contenu de la SL</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
				</ul>
				<div>
					<br>
					
				</div>
			
		</li>
		
		<li>
		<hr class="separateur_parties">
		<h2 id="part_8966">Partie 4 : Annexes</h2>
		<div>
			Dans cette partie vous trouverez la présentation de différents outils qui peuvent vous être utiles pour programmer en C++.<br>
<br>
Ces chapitres peuvent être lus à n'importe quel moment, ils ne nécessitent aucune connaissance particulière.
		</div>
			
				<ul class="liste_chapitres_btut">
				
					<li>
						<br><br><a href="?all=1#chap_8963">1) Déboguer avec Code::Blocks - Partie I</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/32136.jpg" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_8962">Un programme bien mystérieux</a></li>
								
									<li><a href="?all=1#ss_part_8961">Préparer son code</a></li>
								
									<li><a href="?all=1#ss_part_8960">Trouver la ligne de l'erreur</a></li>
								
									<li><a href="?all=1#ss_part_8959">Connaître les valeurs des variables</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
					<li>
						<br><br><a href="?all=1#chap_54301">2) Trouver des informations sur internet</a>
						<div class="icone_chap">
							
								<img src="./cpp2_files/53985.jpeg" alt="Icône du chapitre" class="icone_chapitre">
							
						</div>
						<div class="droite_chapitre">
						<ul class="liste_btuto_chap">
							
									<li><a href="?all=1#ss_part_54300">Les F.A.Q. et autres références générales</a></li>
								
									<li><a href="?all=1#ss_part_54299">Les documentations</a></li>
								
									<li><a href="?all=1#ss_part_54298">Les forums et newsgroups</a></li>
								
									<li><a href="?all=1#ss_part_54297">D'autres liens concernant le C++</a></li>
								
						</ul>
						</div>
						<div class="clearer"> </div>
					</li>
				
				</ul>
				<div>
					<br>
					
				</div>
			
		</li>
		
		</ul>

<hr>
<h2>Partie 1 : Les concepts avancés du C++</h2>
<div>
Cette partie a pour but d'approfondir le domaine de la <acronym title="Programmation Orientée Objet">POO</acronym> en C++. Certains chapitres ne seront pas directement reliés à ce sujet, mais utiles pour votre connaissance générale du langage et pour pouvoir continuer sereinement.
</div>
	
	<hr>
	<h1 id="chap_8937">Les tableaux dynamiques</h1>
	<div id="chap_intro">
	Avant de se plonger plus en avant dans les notions de programmation orientée objet, il est nécessaire de faire un petit détour par les tableaux. <br>
<br>
Si vous vous rappelez bien, vous avez appris à réaliser des tableaux en C et par conséquent en C++. Mais ces tableaux ne sont pas pratiques et ne sont pas redimensionnables. La bibliothèque standard du C++ fournit une classe spéciale pour gérer les tableaux. Il s'agit des <strong>std::vector</strong>.<br>
<br>
L'utilisation de la bibliothèque standard du C++ fait parfois appel à des notions avancées, telles que les itérateurs ou les templates. Cependant, la plupart du temps, il n'est pas nécessaire de faire appel à ces éléments. C'est pourquoi cette partie n'en parlera pas et se limitera aux fonctions de base des vector. Ces notions dont le nom ne vous dit certainement rien seront présentées plus tard lorsqu'on en aura réellement besoin.<br>
<br>
Je suis prêt à parier que ce sera comme pour les <strong>string</strong> ; une fois que vous aurez essayé les <strong>vector</strong>, vous n'aurez plus jamais envie de faire comme vous le faites jusqu'à présent.  <img src="./cpp2_files/langue.png" alt=":p" class="smilies">
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_8936">Introduction</h2>
		<div class="ss_part_texte">
		<h3>Petit souvenir du C</h3><br>
<br>
En C++ et de manière générale en programmation, il arrive très souvent qu'on ait besoin de tableaux pour stocker plusieurs informations d'un <strong>même type</strong>. <br>
En C et par conséquent en C++, il est possible de créer des tableaux <strong>statiques </strong> (c'est-à-dire dont la taille ne varie pas) en utilisant les <span class="courrier">[]</span>. On peut de cette manière créer un tableau de n'importe quel type de base ou de n'importe quelle classe. La syntaxe est la suivante :<br>
<br>
<span class="code">Code : C++ - Tableau statique de type C - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">monTableau</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>  <span class="c1">// Crée un tableau de 10 entiers</span>
 
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">monTableau2</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span> <span class="c1">// Crée un tableau de 8 strings</span>
 
<span class="n">maClasse</span> <span class="n">monTableau3</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>  <span class="c1">// Crée un tableau de 2 objets de type « maClasse ».</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il est alors possible d'accéder aux éléments du tableau en utilisant à nouveau les <span class="courrier">[]</span>. Il faut pour cela se souvenir que le premier élément d'un tableau est le <strong>0</strong> et pas le <strong>1</strong> comme on pourrait le penser au premier abord. Soit par exemple :<br>
<br>
<span class="code">Code : C++ - Accès aux éléments d'un tableau statique - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">monTableau</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>  <span class="c1">// Crée un tableau de 10 entiers</span>
 
<span class="n">monTableau</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// Met « 1 » dans la première case du tableau</span>
<span class="n">monTableau</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>  <span class="c1">// Met « 5 » dans la 5e case du tableau</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si l'on s'arrête là, il n'y a aucun problème ; tout marche pour le mieux. Cependant, si l'on veut créer des tableaux dont la taille <strong>varie</strong> au cours du programme ou si la taille d'un tableau n'est pas connue lors de la compilation, des problèmes apparaissent. Pour créer des tableaux dont la taille varie, il faut allouer soi-même la mémoire <span class="italique">via</span> l'opérateur <span class="courrier">new</span> et redimensionner « à la main » le tableau à chaque fois que l'on ajoute un élément ou qu'on en supprime. C'est donc très peu pratique et l'on fait souvent des erreurs. <br>
<br>
Je ne vous expliquerai pas comment faire car <span class="gros"><span class="rouge">c'est la mauvaise manière de faire cela en C++</span></span>.<br>
<br>
De plus, le C++ est un langage orienté objet ; il conviendrait donc de placer toute la mécanique interne d'allocation et destruction de mémoire dans une grosse boîte de manière à ce que lorsque l'utilisateur a besoin d'un tableau, il n'ait pas besoin de réfléchir à la manière dont est réalisé le tableau. Et ça tombe bien, parce que ce que je vais vous apprendre aujourd'hui est justement basé sur ce concept. Une grosse boîte qui gère tout le travail pénible pour nous.<br>
<br>
La bonne manière passe toujours (ou presque) par l'utilisation des <span class="vertf"><span class="courrier">std::vector</span></span>.<br>
<br>
<div class="rmq information">Il existe d'autres conteneurs standards dans la STL qui sont adaptés à des utilisations bien précises. Nous les verrons plus tard. La plupart du temps, un <span class="courrier">std::vector</span> est cependant largement suffisant.</div><br>
<br>
<h3>Le template vector</h3><br>
<br>
<h4>Les <span class="courrier">std::vector</span> sont des conteneurs génériques standards implémentés sous forme de séquence et réalisés de telle sorte que toutes les opérations soient effectuées en un temps optimal.</h4>  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> <br>
<br>
Dit comme cela, ça peut faire peur car il y a certainement plusieurs mots dans cette définition dont vous ignorez le sens exact.  Décortiquons ensemble cette phrase.<br>
<br>
<h4>Les <span class="courrier">std::vector</span> sont des conteneurs... </h4><br>
Cela signifie que c'est un objet pouvant en contenir d'autres, tout comme votre boîte de crayons contient des crayons de couleurs différentes.<br>
<br>
<h4> ... génériques... </h4><br>
Cela signifie que vous pouvez réaliser un <span class="courrier">vector</span> qui peut contenir n'importe quel type ou un objet de n'importe quelle classe. Vous pouvez créer une boîte de crayon aussi bien qu'une boîte de stylos, le principe de fonctionnement est le même. En pratique, la généricité est implémentée sous forme de templates.<br>
<br>
<h4>... standards...</h4><br>
Cela signifie qu'ils font partie de la bibliothèque standard du C++ et que par conséquent ils existent quel que soit le compilateur que vous utilisez et quel que soit le système d'exploitation sur lequel vous désirez compiler. Quelle que soit la personne chez qui vous allez, vous trouverez une boîte de crayons qui fonctionne de manière identique ; elle contient des crayons. <img src="./cpp2_files/smile.png" alt=":)" class="smilies"><br>
<br>
<h4>... implémentés sous forme de séquence... </h4><br>
Cela veut dire que les éléments contenus dans le tableau dynamique se trouvent l'un à coté de l'autre dans la mémoire, comme lorsqu'on utilise les tableaux statiques avec []. Tous les crayons se trouvent côte à côte dans la boîte et non éparpillés partout sur votre bureau.<br>
<br>
<h4> ... et réalisés de telle sorte que toutes les opérations soient effectuées en un temps optimal.</h4><br>
Cela signifie que ce sont les meilleurs programmeurs qui ont écrit le code de ces tableaux et qu'ils ont fait cela de manière optimale. Autrement dit, vous ne ferez que du code moins efficace si vous essayez d'implémenter vous-même une classe de ce type. <br>
<br>
<div class="rmq information">En termes plus techniques, l'accès aux éléments se fait en O(1) alors que l'insertion en fin de tableau a une complexité en O(n) amorti.</div><br>
<br>
L'analogie avec les crayons n'est peut-être pas la meilleure mais il faut bien garder ces idées à l'esprit.<br>
<br>
<div class="rmq information">J'ai parlé de template un petit peu plus haut. C'est un aspect avancé du langage C++, cependant il n'est pas nécessaire de savoir écrire des fonctions ou classes templates pour savoir utiliser un <span class="courrier">vector</span>. Vous pourrez toujours revenir plus tard quand vous maîtriserez bien cette notion pour voir ce qu'il y a de template dans cette classe. Je le répète encore une fois, les <span class="courrier">vector</span> sont la bonne manière de réaliser des tableaux dynamiques en C++.</div><br>
<br>
<div class="rmq attention">Cette structure de donnée s'appelle « vector ». Le nom n'est pas forcément bien choisi car il fait penser à la notion mathématique de vecteur. Les std::vector ne sont cependant pas le meilleur moyen de représenter des vecteurs mathématiques. La STL propose pour cela les std::valarray optimisés pour ce genre d'opérations.</div><br>
<br>
<span class="italique">Une question qui se pose souvent est de savoir pourquoi préférer les <span class="courrier">std::vector</span> aux tableaux dynamiques de style C. En effet, il est tout à fait possible de créer du code efficace et sécurisé de cette manière.<br>
Premièrement, il y a les raisons d'efficacité citées plus haut. Il y a aussi le fait que les <span class="courrier">std::vector</span> sont des objets et que par conséquent ils sont détruits à la fin d'une portée même si une exception est levée dans cette même portée (les exceptions seront abordées plus loin). Ce qui ne serait pas le cas si vous utilisez les tableaux tels que présentés dans les cours officiels de C et C++ car il faudrait gérer les <span class="courrier">delete[]</span> nécessaires à la destruction correcte du tableau. En utilisant les <span class="courrier">std::vector</span> vous profitez donc pleinement de l'idiome <acronym title="Resource Acquisition Is Initialisation">RAII</acronym>. Vous n'aurez en aucun cas une fuite de mémoire ; et ça c'est un vrai plus. <br>
Finalement, on peut ajouter que les classes <span class="courrier">std::vector</span> fournies avec les différents compilateurs sont robustes. C'est-à-dire qu'elles ne seront jamais la cause d'un plantage du programme.</span>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_8935">Créer un std::vector</h2>
		<div class="ss_part_texte">
		<h3>Bibliothèque et espace de nom</h3><br>
<br>
Pour utiliser un <span class="courrier">vector</span>, il faut inclure le fichier d'en-tête qui les définit. Il s'agit, comme par hasard, du fichier <span class="vertf">vector</span>. Vous devez l'inclure à chaque utilisation des tableaux dynamiques.<br>
<br>
<span class="code">Code : C++ - Header à inclure - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
J'ai également dit plus haut, que c'était un conteneur standard, il se trouve par conséquent dans l'espace de nom <strong><span class="courrier">std</span></strong>. Il y a alors deux possibilités, ajouter <span class="courrier">std::</span> devant chaque fonction ou utiliser la directive <span class="courrier">using namespace std;</span>. J'utiliserai la deuxième méthode dans ce tutoriel afin de rendre le code le plus clair possible.<br>
<br>
<span class="code">Code : C++ - Espace de nom - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Construction d'un vector</h3><br>
<br>
Cela ne vous a sûrement pas échappé, j'ai plusieurs fois parlé de classe depuis le début. Et en effet, il s'agit d'une classe (template). Pour créer un <span class="courrier">vector</span>, il faut donc passer par son constructeur ou plutôt par un de ses constructeurs. Je vais vous présenter les trois plus importants.<br>
<br>
<span class="code">Code : C++ - Mon premier vector - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;string&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">;</span>  <span class="c">// Crée un vector d'entiers vide.</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">monTableau2</span><span class="p">;</span>  <span class="c">// Crée un vector de strings vide.</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="n">Personnage</span><span class="o">&gt;</span> <span class="n">monTableau3</span><span class="p">;</span> <span class="c">// Crée un vector pouvant contenir des Personnages.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq erreur">Vous êtes obligé d'indiquer un type entre les &lt; &gt;. Il n'est <strong>pas</strong> autorisé de laisser la zone vide.</div><br>
<br>
J'ai utilisé ici le constructeur par défaut. Il crée un tableau dont la taille est 0. <br>
<br>
<div class="rmq question">Mais... quel intérêt y a t-il à créer un tableau sans case ?</div><br>
N'oubliez pas que c'est un tableau dynamique. Sa taille peut varier pendant l'exécution du programme !<br>
<br>
<div class="rmq information">Vous remarquerez que l'indication du type contenu se fait entre deux chevrons &lt; et &gt;. C'est la marque de fabrique des templates. Il faut donc vous souvenir de cette syntaxe un peu particulière.</div><br>
<br>
Bon c'est bien joli tout ça, mais il serait bien plus pratique de pouvoir créer un tableau de taille non nulle. Tout à fait, et les concepteurs de la STL ont pensé à vous ; ils ont créé un constructeur qui fait ça. Quand on utilise ce constructeur, les éléments qui seront créés dans les cases du tableau seront initialisés <span class="italique">via</span> leur <span class="souligne">constructeur par défaut</span>. Pour les types de base, ils seront remplis avec la valeur 0. Donc si vous écrivez une classe et que vous voulez créer un <span class="courrier">std::vector</span> contenant des instances de votre classe, il faudra écrire un constructeur par défaut si vous voulez utiliser cette construction du <span class="courrier">std::vector</span>.<br>
<br>
<span class="code">Code : C++ - Construction d'un tableau de taille donnée - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="c">// Crée un tableau de 10 doubles.</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">monTableau2</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>    <span class="c">// Crée un tableau de 5 entiers.</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="n">Personnage</span><span class="o">&gt;</span> <span class="n">Armee</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>  <span class="c">// Création d'une armée de 10 Personnages en utilisant le constructeur par défaut de Personnage.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et puisque vous êtes gentils, je vous montre même le constructeur permettant de remplir directement le tableau avec une valeur donnée. De cette manière, tous les éléments du tableau ont la même valeur.<br>
<br>
<span class="code">Code : C++ - Constructeur bonus ! - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mf">3.14</span><span class="p">);</span> <span class="c">// Crée un tableau de 10 doubles dont la valeur est 3.14.</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">monTableau2</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span> <span class="c">// Crée un tableau de 5 entiers dont la valeur est 4.</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="n">Personnage</span><span class="o">&gt;</span> <span class="n">Armee</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="n">Personnage</span><span class="p">(</span><span class="s">"Epee"</span><span class="p">,</span><span class="mi">20</span><span class="p">));</span> <span class="c">// Création d'une armée de 10 Personnages en utilisant un des constructeurs surchargés.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Il n'existe pas de moyen simple de construire un <span class="courrier">vector</span> dont les éléments n'ont pas tous la même valeur.</div><br>
<br>
<h3>Accès aux éléments du tableau</h3><br>
<br>
Pour accéder aux éléments du tableau, c'est très simple. Il suffit d'utiliser les [], comme dans le cas des tableaux statiques. Et comme pour les tableaux statiques, le premier élément possède l'indice <strong>0</strong>. Ce qui donne par exemple :<br>
<br>
<span class="code">Code : C++ - Accès aux éléments - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mf">3.14</span><span class="p">);</span> <span class="c">// Crée un tableau de 10 doubles dont la valeur est 3.14.</span>
 
<span class="n">monTableau</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mf">2.718</span><span class="p">;</span> <span class="c">// On met 2.718 dans la 6e case du tableau.</span>
 
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">monTableau</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c">// Affiche la valeur contenue dans la première case du tableau.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Et si j'accède à une case qui n'existe pas ?</div><br>
Mmmh... bonne question. Si vous avez de la chance, votre programme va crasher à cause d'une <strong>« segmentation fault »</strong>. Il peut aussi très bien ne pas crasher et continuer comme s'il ne s'était rien passé et planter un autre jour à cause de cette erreur que vous avez oublié de traiter. C'est donc exactement comme avec les tableaux statiques.<br>
<br>
Si vous n'êtes pas sûrs que la case à laquelle vous souhaitez accéder est valide, il faut utiliser la fonction membre <span class="violet">at()</span>. Cette dernière lève une exception standard si vous accédez à une case interdite. Le mieux est encore de prendre un exemple :<br>
<br>
<span class="code">Code : C++ - Accès sécurisé aux éléments - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mf">3.14</span><span class="p">);</span> <span class="c">// Crée un tableau de 10 doubles dont la valeur est 3.14.</span>
 
<span class="n">monTableau</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="o">=</span> <span class="mf">2.718</span><span class="p">;</span> <span class="c">// On met 2.718 dans la 6e case du tableau.</span>
 
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">monTableau</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c">// Affiche la valeur contenue dans la première case du tableau.</span>
 
<span class="c">// Jusque là le résultat est identique au code précédent.</span>
 
<span class="n">monTableau</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c">// Ceci n'est pas autorisé. La case 10 ne fait pas partie du tableau.</span>
<span class="c">// Il faudra donc récupérer l'exception et la traiter pour continuer le programme</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Dans la plupart des cas l'utilisation de <span class="violet">at()</span> est inutile puisqu'on peut connaître facilement la taille du tableau (voir plus loin). On utilise donc quasiment tout le temps les [], puisqu'ils ont l'avantage d'être plus rapides.</div><br>
<br>
Il existe également deux fonctions membres permettant d'accéder à des cases particulières du tableau. La première, <span class="violet">front()</span>, permet d'accéder au premier élément du tableau. La deuxième, <span class="violet">back()</span>, permet d'accéder au dernier élément sans pour cela avoir besoin de connaître la taille du tableau.<br>
<br>
<span class="code">Code : C++ - front() et back() - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mf">3.14</span><span class="p">);</span> <span class="c">// Crée un tableau de 10 doubles dont la valeur est 3.14.</span>
 
<span class="n">monTableau</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">2.718</span><span class="p">;</span> <span class="c">// On met 2.718 dans la 1ère case du tableau.</span>
 
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">monTableau</span><span class="p">.</span><span class="n">front</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c">// Affiche la valeur contenue dans la première case du tableau.</span>
<span class="c">// Affiche 2.718</span>
 
<span class="n">monTableau</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>  <span class="c">// Met 1.0 dans la dernière case du tableau.</span>
 
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">monTableau</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c">// Affiche la dernière case du tableau.</span>
<span class="c">// Affiche 1.0</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Bon, ok, mais jusque là, on n'a rien appris de nouveau par rapport aux tableaux statiques. Tout à fait mais restez quand même, la suite est bien plus intéressante.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_8934">Quelques fonctions de base</h2>
		<div class="ss_part_texte">
		<h3>Connaître la taille d'un tableau</h3><br>
<br>
Aha ! Voilà quelque chose qu'il était impossible de faire proprement avec les tableaux statiques. Ici, c'est on ne peut plus simple, il suffit d'utiliser la fonction membre <span class="violet">size()</span>.<br>
<br>
<span class="code">Code : C++ - Taille d'un tableau - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mf">3.14</span><span class="p">);</span> <span class="c">// Crée un tableau de 10 doubles dont la valeur est 3.14.</span>
 
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">monTableau</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c">// Affiche la taille du tableau, dans notre cas 10.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
C'est simple non ? Je vous l'avais promis, les <span class="courrier">vector</span> c'est hyper-facile à utiliser. Connaître la taille est très pratique. Cela permet par exemple de parcourir un tableau <span class="italique">via</span> une boucle <span class="courrier">for</span> sans avoir besoin de connaître sa taille par avance.<br>
<br>
<span class="code">Code : C++ - Parcourir un tableau - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mf">3.14</span><span class="p">);</span> <span class="c">// Crée un tableau de 10 doubles dont la valeur est 3.14.</span>
 
<span class="k">for</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">i</span><span class="o">&lt;</span><span class="n">monTableau</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="c">// On parcourt le tableau.</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">monTableau</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>   <span class="c">// Et on affiche chacun des éléments séparés par une espace.</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il existe également une fonction <span class="violet">empty()</span> renvoyant <strong>true</strong> si le tableau est vide et <strong>false</strong> dans le cas contraire.<br>
<br>
<span class="code">Code : C++ - Vide ou non-vide ? - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">;</span>  <span class="c">// Crée un tableau vide pouvant contenir des entiers.</span>
 
<span class="k">if</span><span class="p">(</span><span class="n">monTableau</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>  <span class="c">// Si le tableau est vide.</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Le tableau est vide"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Modifier la taille d'un tableau</h3><br>
<br>
Entrons donc dans le vif du sujet, changer la taille d'un tableau. Il existe plusieurs fonctions permettant de faire cela. Commençons par la plus simple. Il s'agit de <span class="violet">push_back()</span>. Cette fonction <strong>ajoute</strong> une case à la fin du tableau la <strong>remplit</strong> avec la valeur passée en argument.<br>
<br>
<span class="code">Code : C++ - Ajout de cases - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">;</span>  <span class="c">// Crée un tableau vide pouvant contenir des entiers.</span>
 
<span class="n">monTableau</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c">// On ajoute une case à la fin du tableau et on met « 1 » dans cette case.</span>
<span class="c">// À cet endroit du code monTableau.size() vaut 1.</span>
 
<span class="n">monTableau</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c">// On ajoute une case à la fin du tableau et on met « 5 » dans cette case.</span>
<span class="c">// À cet endroit du code monTableau.size() vaut 2.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq erreur">Vous devez remplir la case avec un type compatible. Vous ne pouvez pas faire push_back("Salut") sur un vector&lt;int&gt; !</div><br>
<br>
Cette fonction permet donc d'ajouter des éléments en fin de tableau. Si l'on veut supprimer des éléments, il faut faire appel à la fonction « opposée » <span class="violet">pop_back()</span>, qui, elle, <strong>supprime la dernière case</strong> du tableau.<br>
<br>
<span class="code">Code : C++ - Pop pop pop... - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>  <span class="c">// Crée un tableau de deux entiers dont la valeur est 2.</span>
 
<span class="n">monTableau</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
<span class="n">monTableau</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
 
<span class="c">// À cet endroit du code, monTableau.size() vaut 0.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Super non ? Il n'y a pas besoin de se préoccuper de réallocation de mémoire, de copie et de plein d'autres problèmes qui pourraient survenir. La classe <span class="courrier">vector</span> s'occupe de tout. C'est la magie de la POO !<br>
<br>
<div class="rmq question">Et si je veux modifier plus d'une case à la fois ?</div><br>
<br>
Pfff, vous êtes jamais satisfaits avec ce qu'on vous donne. Bon puisque c'est vous, je vous explique.<br>
Il y a plusieurs manières de faire cela selon ce que vous voulez faire. La fonction <span class="violet">clear()</span> vide entièrement un tableau. Ce qui donne par exemple :<br>
<br>
<span class="code">Code : C++ - Vidange - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>  <span class="c">// Crée un tableau de deux entiers dont la valeur est 2.</span>
 
<span class="n">monTableau</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span> <span class="c">// Vide entièrement le tableau.</span>
 
<span class="c">// À cet endroit du code, monTableau.size() vaut 0.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il existe également la fonction <span class="violet">assign()</span> qui change le contenu du tableau avec ce que vous lui passez en argument.<br>
<br>
<span class="code">Code : C++ - La fonction assign() - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>  <span class="c">// Crée un tableau de deux entiers dont la valeur est 2.</span>
 
<span class="n">monTableau</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span> <span class="c">// Vide entièrement le tableau et remplace son contenu par 5 entiers dont la valeur est 3.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Vous remarquerez que cette fonction change la taille <strong>et</strong> le contenu du <span class="courrier">vector</span>.</div><br>
<br>
Si vous voulez agrandir le tableau tout en conservant ce qu'il y a dedans, vous pouvez utilisez la fonction <span class="violet">resize()</span> :<br>
<br>
<span class="code">Code : C++ - Redimensionnement - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>  <span class="c">// Crée un tableau de deux entiers dont la valeur est 2.</span>
 
<span class="n">monTableau</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span> <span class="c">// Ajoute assez de cases au tableau pour que la taille soit 5.</span>
                                     <span class="c">// Et remplit les cases ajoutées avec la valeur 3.</span>
 
<span class="c">//   À ce moment là, le tableau est donc :</span>
<span class="c">//   |2|2|3|3|3|</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si par contre vous appelez la fonction <span class="violet">resize()</span> avec comme premier argument un nombre plus petit que la taille actuelle de votre tableau, le tableau sera réduit jusqu'à la taille voulue. Le deuxième argument n'est pas utilisé dans ce cas. Il est d'ailleurs inutile :<br>
<br>
<span class="code">Code : C++ - Redimensionnement - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>  <span class="c">// Crée un tableau de 5 entiers dont la valeur est 2.</span>
 
<span class="n">monTableau</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span> <span class="c">// Redimensionne le tableau pour qu'il fasse 4 cases.</span>
 
<span class="c">//   À ce moment là, le tableau est donc :</span>
<span class="c">//   |2|2|2|2|</span>

<span class="n">monTableau</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c">// Redimensionne le tableau pour qu'il fasse 2 cases.</span>

<span class="c">//   À ce moment là, le tableau est donc :</span>
<span class="c">//   |2|2|</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Voilà, vous savez utiliser un <span class="courrier">std::vector</span>. Je ne vous ai pas menti, c'était facile, non ?  <img src="./cpp2_files/langue.png" alt=":p" class="smilies"> <br>
<br>
La dernière partie est consacrée à quelques notions plus avancées.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_8933">Notions plus avancées</h2>
		<div class="ss_part_texte">
		<h3>Passage d'un tableau à une fonction</h3><br>
<br>
Les <span class="courrier">std::vector</span> étant des objets comme les autres, il est possible de les passer en argument à une fonction. Le prototype d'une telle fonction serait par exemple :<br>
<br>
<span class="code">Code : C++ - Recevoir un tableau - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
 
<span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">tableau</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Vous remarquerez que l'on n'a pas besoin de passer la taille comme deuxième argument, comme dans le cas des tableaux statiques, puisqu'on peut accéder à cette information <span class="italique">via</span> la fonction membre <span class="violet">size()</span>.</div><br>
<br>
Cette manière de faire est cependant une mauvaise idée. En effet, en procédant de la sorte, votre tableau est recopié entièrement lors du passage à la fonction. Il y a donc une perte de temps (qui peut être importante si le tableau est grand) et surtout une duplication de l'information inutile. La bonne solution consiste à utiliser une référence ou mieux encore, une référence constante si vous ne comptez pas modifier le tableau dans la fonction.<br>
<br>
<span class="code">Code : C++ - Recevoir un tableau de façon optimale - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
 
<span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">tableau</span><span class="p">);</span>  <span class="c1">// Bien</span>
 
<span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">tableau</span><span class="p">);</span>  <span class="c1">// Encore mieux</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Passer des arguments par référence constante est une bonne habitude à prendre en C++.</div><br>
<br>
Vous remarquerez également qu'on est obligé de spécifier le type contenu dans le <span class="courrier">vector</span>. Comme dans le cas des tableaux statiques en fait.<br>
<br>
<h3>Renvoyer un tableau</h3><br>
<br>
Comme les tableaux dynamiques sont des objets comme les autres, il est tout à fait possible d'écrire une fonction renvoyant un <span class="courrier">vector</span>, chose qui n'est pas faisable proprement avec un tableau statique.<br>
<br>
<span class="code">Code : C++ - Renvoyer un tableau - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
 
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
À nouveau, c'est très simple. Je ne vais donc pas m'éterniser là-dessus.<br>
<br>
<h3>Les types contenus</h3><br>
<br>
J'ai dit plus haut qu'un tableau dynamique pouvait contenir n'importe quel type d'objet. Vous pouvez donc tout à fait créer des <span class="courrier">vector</span> contenant des choses plus complexes telles que :<br>
<br>
<span class="code">Code : C++ - Types autorisés - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
 
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">*&gt;</span> <span class="n">vector1</span><span class="p">;</span>   <span class="c1">// Un tableau de pointeurs sur des entiers.</span>
 
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">**&gt;</span> <span class="n">vector2</span><span class="p">;</span> <span class="c1">// Un tableau de pointeurs sur des pointeurs sur char.</span>
 
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">double</span><span class="o">&gt;</span> <span class="n">vector3</span><span class="p">;</span> <span class="c1">// Un tableau de nombres réels constants.</span>
 
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">*</span> <span class="k">const</span><span class="o">&gt;</span> <span class="n">vector4</span><span class="p">;</span>   <span class="c1">// Un tableau de pointeurs constants sur des entiers.</span>
 
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">int</span><span class="o">*&gt;</span> <span class="n">vector5</span><span class="p">;</span>   <span class="c1">// Un tableau de pointeurs sur des entiers constants.</span>

<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Personnage</span><span class="o">*&gt;</span> <span class="n">Armee</span><span class="p">;</span>   <span class="c1">// Un tableau de pointeur sur des personnages.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il y a cependant une petite contrainte : le type contenu doit être copiable (donc posséder un constructeur de copie), affectable (donc posséder un opérateur =) et comme on l'a vu avant posséder un constructeur par défaut si l'on veut initialiser le tableau en spécifiant uniquement la taille. Il est rare qu'un type ne remplisse pas ces contraintes, il ne faut donc pas réellement s'en préoccuper.<br>
<br>
<div class="rmq attention">Une erreur classique est de vouloir faire un tableau de références sur un type. Ceci n'a pas de sens au vu de la remarque précédente et sera donc équivalent à un tableau sur le type qu'on veut référencer.</div><br>
<br>
<h3>Créer un tableau multi-dimensionnel</h3><br>
<br>
Il arrive souvent qu'on ait besoin de tableaux multi-dimensionnels, par exemple pour représenter une carte dans un jeu ou pour stocker des informations comme dans une base de données. Réaliser cela à l'aide des <span class="courrier">vector</span> est très simple. Je vous ai dit qu'on pouvait mettre n'importe quoi dans ces tableaux ; on peut donc, en particulier, mettre...<strong> un autre <span class="courrier">vector</span></strong> dedans ! La syntaxe est la suivante :<br>
<br>
<span class="code">Code : C++ - Déclaration d'un tableau multi-dimensionnel - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
 
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span> <span class="kt">int</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">monTableau2D</span><span class="p">;</span> <span class="c1">// Déclaration d'un tableau 2D contenant des entiers.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">Vous remarquerez qu'il y a une espace entre les deux &gt;. Elle est importante pour montrer au compilateur qu'il ne s'agit pas de l'opérateur &gt;&gt; !</div><br>
<br>
En utilisant le même principe, vous pouvez créer des tableaux d'autant de dimensions que vous voulez. La première question qu'on se pose est de savoir comment initialiser un tel tableau. La syntaxe est la suivante :<br>
<br>
<span class="code">Code : C++ - Initialisation d'un tableau 2D - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
 
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span> <span class="kt">int</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
<span class="c1">// On construit un tableau de tableau d'entiers dans lequel on met</span>
<span class="c1">// 5 tableaux d'entiers eux-même constitués de 5 entiers dont</span>
<span class="c1">// la valeur est 1.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour accéder aux éléments d'un tel tableau, il faut à nouveau faire appel aux []. Il faut alors penser que les [] appliqués au tableau principal donneront accès au <span class="courrier">vector</span> qu'il contient et pas à un élément. Il faut utiliser deux fois les [] pour accéder à un élément précis.<br>
<br>
<span class="code">Code : C++ - Accès aux éléments d'un tableau 2D - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
 
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span> <span class="kt">int</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
 
<span class="n">monTableau</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">...</span> <span class="p">;</span> <span class="c1">// Modifie la première ligne du tableau.</span>
<span class="n">monTableau</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// Modifie l'élément d'indice (0,0) du tableau.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il y a cependant une chose à laquelle vous devez faire attention. C'est un tableau de tableau et pas un tableau 2D. Cela veut dire que la structure ainsi créée n'est pas forcément rectangulaire. Chacun des <span class="courrier">vector</span> contenus dans le <span class="courrier">vector</span> principal peut avoir une taille différente ! Voyons cela avec un exemple.<br>
<br>
<span class="code">Code : C++ - Tableaux 2D - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span> <span class="kt">int</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">monTableau</span><span class="p">;</span>  <span class="c1">// On créé un vector 2D.</span>
 
  <span class="n">monTableau</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
  <span class="c1">// On redimensionne le tableau pour qu'il ait 5 lignes                         </span>
  <span class="c1">// de 2 colonnes remplies de 1.</span>

  <span class="n">monTableau</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">resize</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
  <span class="c1">// On redimensionne la deuxième ligne du tableau de sorte                      </span>
  <span class="c1">// qu'elle soit de longueur 4 et contienne des 2 dans les                      </span>
  <span class="c1">// nouvelles cases.</span>
 
  <span class="n">monTableau</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">resize</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="c1">// On diminue la taille de la troisième ligne.</span>
 
  <span class="n">monTableau</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="n">clear</span><span class="p">();</span>
  <span class="c1">// On vide la 4e ligne du tableau.</span>
 
  <span class="c1">// On affiche le tableau.</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">i</span><span class="o">&lt;</span><span class="n">monTableau</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="o">++</span><span class="n">i</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">j</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">j</span><span class="o">&lt;</span><span class="n">monTableau</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span><span class="o">++</span><span class="n">j</span><span class="p">)</span>
      <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">monTableau</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" , "</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>
 
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce code produit le résultat suivant :<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>1&nbsp;,&nbsp;1&nbsp;,&nbsp;
1&nbsp;,&nbsp;1&nbsp;,&nbsp;2&nbsp;,&nbsp;2&nbsp;,&nbsp;
1&nbsp;,&nbsp;
&nbsp;
1&nbsp;,&nbsp;1&nbsp;,</pre></div></td></tr></tbody></table></div><br>
<br>
On voit donc clairement que le tableau n'est pas rectangulaire ! <br>
<br>
<div class="rmq question">On a vu comment accéder à une ligne. Mais si je veux accéder à une colonne, je fais comment ?</div><br>
<br>
Ce n'est pas possible de manière simple. Les <span class="courrier">vector</span> ne sont pas faits pour. Il vous faudra donc écrire une fonction qui le fait. C'est d'ailleurs un exercice intéressant. Essayez d'écrire le corps de la fonction suivante :<br>
<br>
<span class="code">Code : C++ - Exercice - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">getColonne</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;&amp;</span> <span class="n">Tableau</span> <span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Renvoie la colonne n du Tableau si elle existe</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Il est facile de créer un tableau multi-dimensionnel. Cependant, ce n'est pas le moyen le plus efficace de créer un type « matrice ». Pour cela, on utilisera plutôt des <span class="courrier">std::valarray</span> ou d'autres structures venant de Boost par exemple.</div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	À partir de maintenant, je ne veux plus voir personne créer des tableaux à partir d'un pointeur en allouant la mémoire avec malloc ou new[].  <img src="./cpp2_files/pirate.png" alt=":pirate:" class="smilies"> <br>
<br>
Bon, il est maintenant temps de refermer la parenthèse pour repartir vers les contrées sauvages de la POO.
	</div>
	
	<hr>
	<h1 id="chap_8943">Retour sur l'héritage</h1>
	<div id="chap_intro">
	Il est temps de reprendre notre exploration du monde à première vue hostile de la programmation orientée objet.<br>
<br>
Un des éléments de base de ce style de programmation est la notion d'héritage que vous connaissez déjà bien. Ce chapitre sera donc un rappel des notions que vous connaissez déjà et il présentera deux points qui vous manquent, les différents types d'héritage et le masquage.<br>
<br>
Le premier des deux points n'est pas très important mais il peut s'avérer utile de temps en temps et le second nous servira de tremplin vers le polymorphisme, le prochain concept clé de la POO en C++.<br>
<br>
La troisième partie est plus théorique et introduit la notion de sémantique de classe. Une notion cruciale en programmation orientée objet.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_8942">Les différents types d'héritage</h2>
		<div class="ss_part_texte">
		<h3>Notre petit RPG</h3><br>
<br>
Si vous vous souvenez bien, nous avions réalisé plusieurs classes pour représenter les différents types de personnages de notre petit jeu. Nous avions, en particulier, parlé de Guerriers et de Magiciens qui <strong>sont</strong> tous deux des Personnages. Nous avions donc choisi le schéma suivant comme architecture de notre programme.<br>
<br>
<div class="centre"><img src="./cpp2_files/120497.png" alt="Image utilisateur"></div><br>
<br>
<br>
Ce qui correspond aux classes suivantes pour Personnage et Magicien :<br>
<br>
<span class="code">Code : C++ - La classe Personnage - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Personnage</span>
<span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
        <span class="n">Personnage</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">nom</span><span class="p">);</span>
        <span class="kt">void</span> <span class="n">recevoirDegats</span><span class="p">(</span><span class="kt">int</span> <span class="n">degats</span><span class="p">);</span>
        <span class="kt">void</span> <span class="n">coupDePoing</span><span class="p">(</span><span class="n">Personnage</span><span class="o">&amp;</span> <span class="n">cible</span><span class="p">);</span>

    <span class="k">protected</span><span class="o">:</span>
        <span class="kt">int</span> <span class="n">m_vie</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_nom</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<span class="code">Code : C++ - La classe Magicien - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Magicien</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Personnage</span>
<span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
        <span class="n">Magicien</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">nom</span><span class="p">);</span>
        <span class="kt">void</span> <span class="n">bouleDeFeu</span><span class="p">();</span>
        <span class="kt">void</span> <span class="n">bouleDeGlace</span><span class="p">();</span>

    <span class="k">protected</span><span class="o">:</span>
        <span class="kt">int</span> <span class="n">mana</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<br>
Voilà pour les souvenirs. Concentrons-nous maintenant sur une ligne en particulier, celle qui déclare notre classe « Magicien » comme héritant de « Personnage ».<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Magicien</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Personnage</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il y a un mot-clé qui devrait vous intriguer. Vous trouvez ?<br>
<br>
<div class="rmq question">Le mot-clé <strong>public</strong> ?</div><br>
<br>
Oui ! Et pourquoi est-ce qu'il vous intrigue ?<br>
<br>
<div class="rmq question">Euh... </div><br>
<br>
Peut-être êtes vous en train de vous dire que si on met <strong>public</strong> ici, on doit certainement pouvoir mettre <strong>private</strong> ou même <strong>protected</strong>, les deux autres mot-clés qui ont un rôle plus ou moins semblable. <br>
<br>
Et vous avez raison, on peut mettre <strong>private</strong> ou <strong>protected</strong> ici.  <img src="./cpp2_files/blink.gif" alt="o_O" class="smilies"> <br>
<br>
<span class="code">Code : C++ - héritage privé - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Magicien</span> <span class="o">:</span> <span class="k">private</span> <span class="n">Personnage</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">On peut également ne mettre aucun mot-clé à cet endroit. Dans ce cas, le compilateur prendra la valeur par défaut qui est <strong>private</strong>.</div><br>
<br>
On parle dans le premier cas d'<span class="souligne"><strong>héritage privé </strong></span> et dans le deuxième d'<strong><span class="souligne">héritage protégé</span></strong>.<br>
<br>
<h3>Les changements que cela implique</h3><br>
<br>
La différence par rapport à l'héritage normal réside dans les droits d'accès des attributs et fonctions membres héritées.  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> <br>
<br>
Souvenez-vous du cas normal : <br>
<ul>
<li>Un attribut <span class="souligne">public</span> sera également <span class="souligne">public</span> dans la classe fille.</li>
<li>Un attribut <span class="souligne">protected</span> sera également <span class="souligne">protected</span> dans la classe fille.</li>
<li>Un attribut <span class="souligne">private</span> sera également <span class="souligne">private</span> dans la classe fille.</li>
</ul><br>
<br>
<strong>Si l'on réalise un héritage protégé, les attributs hérités seront alors au mieux protégés. C'est-à-dire protégés ou privés.<br>
Si l'on réalise un héritage privé, les attributs seront alors forcément privés.</strong>  <img src="./cpp2_files/triste.png" alt=":(" class="smilies"> <br>
<br>
C'est un peu compliqué je sais. Voici un tableau qui résume bien tout ça.<br>
<br>
<div class="centre"><img src="./cpp2_files/120501.png" alt="Image utilisateur"></div><br>
<br>
<strong><span class="rouge">C'est toujours le droit d'accès le plus restrictif qui l'emporte.</span></strong><br>
<br>
Les cases en couleur présentent les droits d'accès qu'auront les attributs hérités dans la classe fille.  <img src="./cpp2_files/mechant.png" alt=":colere2:" class="smilies"> <br>
<br>
Le mieux est encore de prendre un exemple.<br>
<br>
<h3>Exemple</h3><br>
<br>
Modifions donc le type d'héritage du magicien.<br>
<br>
<span class="code">Code : C++ - héritage privé - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Magicien</span> <span class="o">:</span> <span class="k">private</span> <span class="n">Personnage</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et reprenons notre <span class="italique">main</span>.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Magicien</span> <span class="n">merlin</span><span class="p">(</span><span class="s">"Merlin l'enchanteur"</span><span class="p">);</span>
    <span class="n">Guerrier</span> <span class="n">lancelot</span><span class="p">(</span><span class="s">"Lancelot du Lac"</span><span class="p">);</span>

    <span class="n">merlin</span><span class="p">.</span><span class="n">bouleDeFeu</span><span class="p">();</span> 
 
    <span class="c1">// Jusque là, tout ce passe comme avant.</span>

    <span class="n">merlin</span><span class="p">.</span><span class="n">coupDePoing</span><span class="p">(</span><span class="n">lancelot</span><span class="p">);</span>    <span class="c1">// Erreur</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le début de ce programme ne pose pas de problème. Mais la dernière ligne, elle, est illégale. Magicien hérite de manière privée de Personnage donc la fonction <span class="violet">coupDePoing()</span>, qui était publique, devient privée. On ne peut donc pas l'appeler de l'extérieur. Les seules fonctions membres encore appelables (depuis le <span class="italique">main</span>) de Magicien sont <span class="violet">BouleDeFeu()</span> et <span class="violet">BouleDeGlace()</span> puisqu'elles sont déclarées publiques dans la classe fille.  <img src="./cpp2_files/smile.png" alt=":)" class="smilies"> <br>
<br>
<div class="rmq question">Et si on hérite de manière protégée ?</div><br>
<br>
Ce serait la même chose, puisque <span class="violet">coupDePoing()</span> serait alors protégée et donc non utilisable de l'extérieur. La seule différence serait que les classes filles de Magicien, par exemple « MagicienNoir » pourrait utiliser cette fonction.<br>
<br>
<h3>Quel est l'intérêt de ce type d'héritage ?</h3><br>
<br>
Il est vrai que dans l'exemple que je vous ai proposé, cela n'a aucun intérêt. <br>
<br>
En programmation, il arrive parfois qu'on ait besoin d'une structure de donnée appelée « Pile ». Il faut vous imaginer une pile d'assiette comme exemple. Vous ne pouvez prendre que l'assiette qui se trouve sur le dessus ou en ajouter d'autres. <br>
<br>
<div class="rmq information">La STL propose ce type de structure dans l'en-tête <span class="courrier">stack</span>. On y reviendra plus tard.</div><br>
<br>
Il y a plusieurs moyens de réaliser cela. Un des moyens est de réécrire totalement une classe qui fait ça. C'est long et en plus on est sûr de faire plein de fautes.<br>
<br>
Une autre solution est de se dire que cette pile pourrait être implémentée comme un tableau de taille variable dont on ne donnerait l'accès qu'à la dernière case à l'utilisateur. Et ça tombe bien, vous connaissez depuis peu les vector. On va donc pouvoir <span class="souligne">réutiliser</span> le code qui existe déjà.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>

<span class="k">class</span> <span class="nc">Pile</span><span class="o">:</span> <span class="k">private</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span>   <span class="c1">// Héritage privé pour empêcher qu'on utilise les fonctions</span>
<span class="p">{</span>                                                   <span class="c1">// de std::vector&lt;int&gt; depuis l'extérieur de la classe.</span>
   <span class="c1">// Plein de trucs.</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On peut alors donner l'accès aux fonctions qui correspondent à ce qu'on veut fournir comme service.<br>
<br>
<span class="code">Code : C++ - Une pile d'entiers très simple - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>

<span class="k">class</span> <span class="nc">Pile</span><span class="o">:</span> <span class="k">private</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span>
<span class="p">{</span>
   <span class="k">public</span><span class="o">:</span>
   <span class="n">Pile</span><span class="p">(</span><span class="n">size_t</span> <span class="n">taille</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="kt">int</span> <span class="n">element</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
       <span class="o">:</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">taille</span><span class="p">,</span><span class="n">element</span><span class="p">)</span>
   <span class="p">{}</span>
   
   <span class="kt">void</span> <span class="n">ajout</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span>
   <span class="p">{</span>
       <span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>  <span class="c1">// À l'intérieur de la classe on peut appeler les fonctions privées.</span>
   <span class="p">}</span>

   <span class="kt">int</span> <span class="n">acces</span><span class="p">()</span>
   <span class="p">{</span>
       <span class="k">return</span> <span class="n">back</span><span class="p">();</span>
   <span class="p">}</span>

   <span class="kt">void</span> <span class="n">suppression</span><span class="p">();</span>
   <span class="p">{</span>
       <span class="n">pop_back</span><span class="p">();</span>
   <span class="p">}</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On a ainsi en quelques lignes créé une classe qui fait ce que l'on voulait. Ce genre de choses est un des principaux intérêts de l'héritage privé.<br>
<br>
<div class="rmq question">Et pour l'héritage protégé ?</div><br>
Mmmh, à vrai dire, l'héritage protégé n'a que peu d'intérêt. Je n'ai encore jamais vu de programme où cela avait une quelconque utilité.<br>
<br>
<h3>Choisir le type d'héritage</h3><br>
<br>
La question qu'on peut (et même doit) se poser est de savoir quel type d'héritage utiliser dans quel cas. C'est une question <span class="souligne">très importante</span>.<br>
<br>
<h4>L'héritage public</h4><br>
<br>
Il s'utilise quand une classe fille <strong>EST UNE</strong> classe mère. La formulation exacte serait de dire une classe fille hérite d'une classe mère quand une de ses instances <strong>EST SUBSTITUABLE</strong> à une instance de la classe mère. C'est ce qu'on appelle techniquement le <a href="http://fr.wikipedia.org/wiki/Principe_de_substitution_de_Liskov">principe de substitution de Liskov</a>.<br>
Les deux classes doivent avoir un <span class="italique">comportement semblable</span> quelle que soit la situation où on les utilise.<br>
Un Guerrier a un comportement semblable à un Personnage, l'héritage est donc justifié. On peut utiliser un Guerrier dans notre code là où l'on attend normalement un Personnage (par exemple comme argument d'une fonction). <br>
<br>
<div class="rmq erreur">On n'utilise pas l'héritage public si on veut <span class="souligne">uniquement</span> réutiliser le code de la classe mère afin d'en faire autre chose.</div><br>
<br>
Les deux exemples suivants sont des <span class="italique">contre-exemples classiques</span> :<br>
<ul>
<li>Un Carré N'EST PAS UN Rectangle. En effet, un Rectangle a une longueur et une largeur, alors que le carré n'a qu'une seule largeur.</li>
<li>Une ListeTriee N'EST PAS UNE Liste. Le problème se situe au niveau de l'insertion. Dans une liste non triée, on peut insérer ce que l'on veut où l'on veut. Dans une ListeTriee, on ne peut pas. Les deux ne sont donc pas substituables, puisqu'il faudra faire un traitement particulier pour les ListeTriee.</li>
</ul><br>
<br>
<h4>L'héritage privé</h4><br>
<br>
Il s'utilise quand on peut dire que la classe fille <strong>EST IMPLÉMENTÉE SOUS FORME DE</strong> sa classe mère. Cela veut dire que la classe fille utilise une grande partie du comportement et du contenu de la classe mère dans son fonctionnement interne.<br>
Par exemple, la Pile présentée au-dessus utilise un vector pour fonctionner. <br>
<br>
<div class="rmq information">À la place de l'héritage privé, on peut aussi utiliser la délégation. C'est-à-dire mettre la classe mère comme attribut de la classe fille. En utilisant cette approche, on aurait pu mettre le vector comme attribut de la Pile et dire : « La Pile A UN vector dans sa mécanique interne ».</div><br>
<br>
<h4>L'héritage protégé</h4><br>
<br>
En pratique il n'est jamais utilisé, mais il correspond au cas de l'héritage privé quant à son cadre d'utilisation.<br>
<br>
<div class="rmq erreur">Si vous avez deux classes dont la relation n'est ni EST SUBSTITUABLE À, ni EST IMPLÉMENTÉE SOUS FORME DE, vous ne devez pas utiliser l'héritage. Cela veut dire que vos deux classes ne font pas partie de la même hiérarchie.</div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_8941">Le masquage</h2>
		<div class="ss_part_texte">
		<h3>Une fonction de la classe mère</h3><br>
<br>
Intéressons-nous maintenant à l'autre branche de notre hiérarchie de classes. Il serait intéressant pour notre petit RPG que nos personnages aient le moyen de se présenter. Comme c'est une action que devraient pouvoir réaliser tous les personnages quels que soient leurs rôles militaires, la fonction <span class="violet">sePresenter()</span> va dans la classe Personnage.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Personnage</span>
<span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
        <span class="n">Personnage</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">nom</span><span class="p">);</span>
        <span class="kt">void</span> <span class="n">recevoirDegats</span><span class="p">(</span><span class="kt">int</span> <span class="n">degats</span><span class="p">);</span>
        <span class="kt">void</span> <span class="n">coupDePoing</span><span class="p">(</span><span class="n">Personnage</span><span class="o">&amp;</span> <span class="n">cible</span><span class="p">);</span>
        
<span class="ln-xtra">        <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span></span>
 
    <span class="k">protected</span><span class="o">:</span>
        <span class="kt">int</span> <span class="n">m_vie</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_nom</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Remarquez le <strong>const</strong> qui indique que le personnage ne sera pas modifié quand il se présentera.</div><br>
<br>
Et dans le fichier <span class="italique">.cpp</span> :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">Personnage</span><span class="o">::</span><span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Bonjour, je m'appelle "</span> <span class="o">&lt;&lt;</span> <span class="n">m_nom</span> <span class="o">&lt;&lt;</span> <span class="s">"."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"J'ai encore "</span> <span class="o">&lt;&lt;</span> <span class="n">m_vie</span> <span class="o">&lt;&lt;</span> <span class="s">" points de vie."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On peut donc écrire un <span class="italique">main</span> du type :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>

   <span class="n">Personnage</span>  <span class="n">marcel</span><span class="p">(</span><span class="s">"Marcel"</span><span class="p">);</span>
   <span class="n">marcel</span><span class="p">.</span><span class="n">sePresenter</span><span class="p">();</span>

   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce qui nous donne évidemment le résultat suivant :<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Bonjour,&nbsp;je&nbsp;m'appelle&nbsp;Marcel.
J'ai&nbsp;encore&nbsp;100&nbsp;points&nbsp;de&nbsp;vie.</pre></div></td></tr></tbody></table></div><br>
<br>
<h3>La fonction est héritée dans les classes filles</h3><br>
<br>
Vous le savez déjà, un Guerrier <strong>est un</strong> Personnage et par conséquent, il peut également se présenter.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>

   <span class="n">Guerrier</span> <span class="n">lancelot</span><span class="p">(</span><span class="s">"Lancelot du Lac"</span><span class="p">);</span>
   <span class="n">lancelot</span><span class="p">.</span><span class="n">sePresenter</span><span class="p">();</span>

   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Donnera :<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Bonjour,&nbsp;je&nbsp;m'appelle&nbsp;Lancelot&nbsp;du&nbsp;Lac.
J'ai&nbsp;encore&nbsp;100&nbsp;points&nbsp;de&nbsp;vie.</pre></div></td></tr></tbody></table></div><br>
<br>
Jusque là, rien de bien particulier et de difficile.  <img src="./cpp2_files/clin.png" alt=";)" class="smilies"><br>
<br>
<h3>Le masquage</h3><br>
<br>
Imaginons maintenant que les guerriers aient une manière différente de se présenter. Ils doivent en plus dire qu'ils sont guerriers. On pourrait donc écrire une deuxième fonction pour les guerriers qui se présentent.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">Guerrier</span><span class="o">::</span><span class="n">sePresenter2</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Bonjour, je m'appelle "</span> <span class="o">&lt;&lt;</span> <span class="n">m_nom</span> <span class="o">&lt;&lt;</span> <span class="s">"."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"J'ai encore "</span> <span class="o">&lt;&lt;</span> <span class="n">m_vie</span> <span class="o">&lt;&lt;</span> <span class="s">" points de vie."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis un Guerrier redoutable."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ceci fonctionne très bien. <br>
<br>
Ce n'est par contre pas pratique du tout et donc c'est la <span class="souligne">mauvaise manière</span> de faire ça.<br>
On a en fait deux trucs pas pratiques.<br>
<ul>
<li> Il faut se souvenir d'appeler sePresenter<span class="rouge">2</span>() pour que le guerrier se présente de manière correcte.</li>
<li> La classe Guerrier possède une fonction inutile ; la fonction sePresenter() puisque c'est celle avec le « 2 » qu'il faut appeler.</li>
</ul><br>
<br>
La manière correcte est d'écrire la fonction suivante dans la classe Guerrier :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">Guerrier</span><span class="o">::</span><span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Bonjour, je m'appelle "</span> <span class="o">&lt;&lt;</span> <span class="n">m_nom</span> <span class="o">&lt;&lt;</span> <span class="s">"."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"J'ai encore "</span> <span class="o">&lt;&lt;</span> <span class="n">m_vie</span> <span class="o">&lt;&lt;</span> <span class="s">" points de vie."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis un Guerrier redoutable."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
 <img src="./cpp2_files/blink.gif" alt="o_O" class="smilies">  <img src="./cpp2_files/blink.gif" alt="o_O" class="smilies">  <img src="./cpp2_files/blink.gif" alt="o_O" class="smilies">  <img src="./cpp2_files/blink.gif" alt="o_O" class="smilies"> <br>
<br>
<div class="rmq question">Mais, il y aura deux fonctions avec le même nom et les mêmes arguments dans la classe ! C'est interdit !</div><br>
<br>
Vous avez tort et raison. Deux fonctions ne peuvent avoir la même signature. Mais dans le cadre des classes c'est différent. La fonction de la classe Guerrier va <span class="souligne">remplacer</span> celle héritée de la classe Personnage.<br>
<br>
Si l'on exécute le même <span class="italique">main()</span> qu'avant, on obtient cette fois le résultat souhaité.<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Bonjour,&nbsp;je&nbsp;m'appelle&nbsp;Lancelot&nbsp;du&nbsp;Lac.
J'ai&nbsp;encore&nbsp;100&nbsp;points&nbsp;de&nbsp;vie.
Je&nbsp;suis&nbsp;un&nbsp;guerrier&nbsp;redoutable.</pre></div></td></tr></tbody></table></div><br>
<br>
Quand on écrit une fonction qui a le même nom que celle héritée de la classe mère, on parle de <span class="rouge"><strong>masquage</strong></span>. La fonction héritée de Personnage est masquée ; elle est cachée.<br>
<br>
<div class="rmq attention">Pour masquer une fonction, il suffit qu'elle ait le même nom qu'une autre fonction héritée. Le nombre et le type des arguments ne joue aucun rôle.</div><br>
<br>
C'est beaucoup plus simple comme ça, non ?<br>
<br>
<div class="rmq information">En fait, les deux fonctions n'ont pas la même signature malgré les apparences. Il faut savoir qu'une fonction membre d'une classe reçoit implicitement un paramètre supplémentaire, un pointeur this. Donc une fois elle reçoit un Personnage* et dans l'autre cas un Guerrier* qui sont différents. La règle générale est donc respectée.</div><br>
<br>
<h3>Économiser du code</h3><br>
<br>
Ce qu'on a écrit est bien, mais on peut faire encore mieux. Si l'on regarde, la fonction <span class="violet">sePresenter()</span> de la classe Guerrier a deux lignes identiques à ce qu'il y a dans la même fonction de la classe Personnage. On pourrait donc économiser des lignes de code en appelant la fonction masquée.<br>
<br>
<div class="rmq information">Économiser des lignes de code est souvent une bonne attitude à avoir. Le code est ainsi plus facilement maintenable.</div><br>
<br>
On aimerait donc écrire quelque chose du genre :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">Guerrier</span><span class="o">::</span><span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">appel_a_la_fonction_masquee</span><span class="p">();</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis un Guerrier redoutable."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il faudrait donc un moyen d'appeler la fonction de la classe mère.<br>
<br>
<h3>Le démasquage</h3><br>
<br>
On aimerait appeler la fonction dont le nom complet est : <br>
<strong>Personnage::sePresenter()</strong><br>
<br>
Essayons donc.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">Guerrier</span><span class="o">::</span><span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
<span class="ln-xtra">    <span class="n">Personnage</span><span class="o">::</span><span class="n">sePresenter</span><span class="p">();</span></span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis un Guerrier redoutable."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et c'est magique, cela donne exactement ce que l'on espérait. <img src="./cpp2_files/magicien.png" alt=":magicien:" class="smilies"> <br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Bonjour,&nbsp;je&nbsp;m'appelle&nbsp;Lancelot&nbsp;du&nbsp;Lac.
J'ai&nbsp;encore&nbsp;100&nbsp;points&nbsp;de&nbsp;vie.
Je&nbsp;suis&nbsp;un&nbsp;guerrier&nbsp;redoutable.</pre></div></td></tr></tbody></table></div><br>
<br>
On parle dans ce cas de <span class="rouge"><strong>démasquage</strong></span> puisqu'on a pu utiliser une fonction qui était masquée. <br>
<br>
On a utilisé ici <strong>l'opérateur ::</strong> appelé <strong>opérateur de résolution de portée</strong>. Il sert à déterminer quelle fonction (ou variable) utiliser quand il y a ambiguïté ou si il y a plusieurs possibilités.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_214797">Les deux sémantiques</h2>
		<div class="ss_part_texte">
		Dans le <a href="http://www.siteduzero.com/tutoriel-3-11406-apprenez-a-programmer-en-c.html">tuto de M@teo21</a> et dans les premiers chapitres de ce cours vous avez appris à utiliser des objets (<span class="code2 cpp"><span class="n">std</span><span class="o">::</span><span class="n">string</span>
</span> ou  <span class="code2 cpp"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;&gt;</span>
</span> par exemple) et aussi à créer vos propres classes.<br>
<br>
Cependant, savez-vous répondre aux questions suivantes:<br>
<br>
<div class="rmq question">Qu'est-ce qu'une classe ? Et à quoi servent-elles ?</div><br>
<br>
 <img src="./cpp2_files/unsure.gif" alt=":euh:" class="smilies">  <img src="./cpp2_files/unsure.gif" alt=":euh:" class="smilies"> <br>
<br>
Vous ne vous attendiez sûrement pas à ces questions. En avançant dans les tutoriels, vous vous êtes sûrement habitués à la notion de classe mais avez-vous une bonne définition en tête ?<br>
<br>
Les définitions varient selon les auteurs, mais voilà ce que l'on peut dire à ce sujet :<br>
<br>
Une classe est un <span class="italique">plan de construction</span> permettant de créer des <span class="italique">objets</span>. Ce plan de construction indique ce que l'objet contient et les actions qu'il peut effectuer, comment il peut interagir avec le reste du monde. A tout instant, un objet devrait (si l'on a pas fait d'erreurs de conception) se trouver dans un <span class="italique">état</span> bien défini et les fonctions membres qu'il possède décrivent les <span class="italique">comportements</span> que peut avoir cet objet.<br>
<br>
Les classes sont utilisées pour représenter en termes informatiques un <span class="italique">concept</span>, une notion, une abstraction.<br>
<br>
Je ne vais pas vous faire l'affront de vous détailler précisément chaque élément de ma définition, mais je vais attirer votre attention sur la dernière phrase:<br>
<br>
<strong>Les classes sont utilisées pour représenter un concept, une notion, une abstraction</strong>.<br>
<br>
<div class="rmq question">Tu pourrais nous donner un exemple ?</div><br>
<br>
Oui bien sûr. La classe <span class="code2 cpp"><span class="n">std</span><span class="o">::</span><span class="n">string</span>
</span> est utilisée pour représenter le concept de chaîne de caractère, la classe <a href="http://qt.nokia.com/doc/4.6/qpushbutton.html">QPushButton</a> représente la notion de bouton cliquable dans la bibliothèque Qt ou encore la classe <a href="http://www.siteduzero.com/tutoriel-3-11167-les-classes-partie-1-2.html#ss_part_1">Personnage</a> est là pour figurer la notion d'un personnage dans un jeu de rôle. <br>
<br>
Or, il se trouve que l'on peut ranger presque toutes les classes possibles et imaginables dans <strong>deux</strong> catégories bien définies.  <img src="./cpp2_files/magicien.png" alt=":magicien:" class="smilies"> <br>
<br>
<div class="rmq attention">C'est une simplification. Certaines classes (souvent des outils pour nos programmes) ont d'autres sémantiques comme la sémantique de pointeurs ou les foncteurs. Mais il se trouve que pour les éléments principaux de nos programmes les deux catégories présentées ci-dessous prennent beaucoup de sens.</div><br>
<br>
<h4>Les classes à sémantique de valeur</h4><br>
<br>
On dit qu'une classe à une <span class="rouge"><strong>sémantique de valeur</strong></span> si deux objets différents mais avec les mêmes attributs sont considérés comme égaux. Plus de détails sur la <a href="http://cpp.developpez.com/faq/cpp/?page=classes#CLASS_valeur">FAQ de developpez.com</a>.<br>
<br>
Par exemple, si dans le cadre du petit jeu de rôle, je définis une classe <strong>Argent</strong> pour pouvoir acheter et vendre des objets, je peux considérer que si deux joueurs ont une somme identique d'argent en leur possesion alors leurs objets <strong>Argent</strong>s respecitfs seront égaux. 14 pièces d'or sera toujours équivalent à 14 pièces d'or même si un des joueurs possède cette somme sous forme de diamants et l'autre sous forme de piècettes de cuivre. L'essentiel est que la <span class="rouge"><strong>valeur</strong></span> est identique.<br>
<br>
Ce sont en gros des "variables améliorées" que l'on va manipuler dans notre programme. Voici d'autres exemples de classe à sémantique de valeur:<br>
<br>
<ul>
<li>La classe <a href="http://www.siteduzero.com/tutoriel-3-11199-0-la-surcharge-d-operateurs.html#ss_part_1">Duree</a>.</li>
<li>Une classe de <a href="http://fr.wikipedia.org/wiki/Vecteur">vecteur</a>.</li>
<li>Une classe de <a href="http://fr.wikipedia.org/wiki/Matrice">matrice</a>.</li>
<li>La classe <a href="http://www.siteduzero.com/forum-83-257993-2447257-exercices-venez-vous-entrainer.html#r2447257">BigInt</a>.</li>
<li>Les <a href="http://fr.wikipedia.org/wiki/Nombre_complexe">nombres complexes</a> de la bibliothèque standard.</li>
<li>La classe <a href="http://www.siteduzero.com/tutoriel-3-11159-la-magie-de-la-poo-par-l-exemple-string.html">string</a> que vous connaissez bien.</li>
<li>...</li>
</ul><br>
<br>
<div class="rmq information">Vous remarquerez qu'il y a pas mal d'objets mathématiques dans cette liste. </div><br>
<br>
<h4>Les classes à sémantique d'entités</h4><br>
<br>
On dit qu'une classe a une <span class="rouge"><strong>sémantique d'entité</strong></span> si deux objets de cette classe sont toujours considérés comme différents. Chaque objet représente une entité unique.  Plus de détails à nouveau sur la <a href="http://cpp.developpez.com/faq/cpp/?page=classes#CLASS_entite">FAQ de developpez.com</a>.<br>
<br>
En reprenant l'exemple du <acronym title="Role Playing Game = Jeu de rôle">RPG</acronym>, si les deux joueurs possèdent chacun une sacoche contenant les mêmes armes et autres items alors, on ne va quand même pas dire que les deux sacs sont égaux. Chaque sac a une <strong><span class="rouge">identité</span></strong> unique, il appartient à un joueur bien précis.<br>
<br>
Voici quelques exemples de classes à sémantique d'entité:<br>
<br>
<br>
<ul>
<li>La classe Personnage qu'on manipule depuis le début.</li>
<li>La classe <a href="http://doc.trolltech.com/4.4/qpushbutton.html">QPushButton</a> dans la bibliothèque Qt.</li>
<li>Une classe Voiture dans un jeu vidéo de Formule 1.</li>
<li>Une classe Arme dans un FPS.</li>
<li>Une classe Document dans une programme de gestion de bibliothèque.</li>
<li>...</li>
</ul><br>
<br>
<div class="rmq question">Ok. Mais, à quoi ça va nous servir tout ça ?</div><br>
<br>
C'est vrai qu'à priori, cela ne semble pas très utile à part peut-être pour briller lors des soirées entre informaticiens  <img src="./cpp2_files/rire.gif" alt=":lol:" class="smilies"> . L'intérêt principal est que cette catégorisation va nous permettre d'appliquer des recettes toutes prêtes afin de nous aider lors de l'écriture de classes.<br>
<br>
Si je reprends l'exemple des pièces d'or, vous remarquerez que dans ce cas définir des opérateurs mathématiques a vraiment du sens. Additionner, soustraire ou multiplier des pièces d'or fait partie des actions que l'on aimerait effectuer avec ces objets. Avec les sacs, c'est tout l'opposé. Aucune opération mathématique n'a de sens sur un sac. Et ceci est vrai pour toutes les classes à sémantique de valeur et d'entité. Pour vous en convaincre, prenez les exemples que j'ai donné et regardez si définir des opérateurs a du sens ou non.<br>
<br>
De manière identique, créer une copie d'une pièce d'or a du sens alors que créer une copie d'un sac n'en a pas puisque on en veut pas avoir deux sacs identiques ! Créer un constructeur de copie pour les classes de valeurs et interdire la copie pour les entités semble donc être un bon choix.<br>
<br>
<div class="rmq information">Si vous vous souvenez bien, le compilateur créera automatiquement un constructeur de copie et un <span class="code2 cpp"><span class="k">operator</span><span class="o">=</span>
</span>. Pour empêcher la copie, il faut donc mettre le constructeur de copie et l'opérateur d'affectation (=) dans la partie privée de la classe. Plus de détails <a href="http://cpp.developpez.com/faq/cpp/?page=copiables#CLASSES_copiables_syntaxe">ici</a>. </div><br>
<br>
Dans le même genre d'idées, comparer de l'argent a du sens alors que comparer des sacs n'en a pas vraiment puisqu'ils sont tous différents ! Donc si l'on écrit une classe à sémantique de valeur, on redéfinira les opérateurs de comparaison (==, &lt;, &gt;, ...) mais on ne le fera pas pour une classe à sémantique d'entité.<br>
<br>
Finalement, vous remarquerez que faire de l'héritage (public) avec les classes à sémantique de valeur a très peu d'intérêt. Un objet <strong>Argent</strong> n'a pas vraiment de classe mère ou classe fille possible. C'est tout le contraire avec les classes à sémantique d'entité. Un <strong>Sac</strong><br>
 peut très bien avoir des enfants de type <strong>SacADos</strong>, <strong>Sacoche</strong> ou <strong>Valise</strong> ayant pour point commun qu'ils sont tous des <strong>Sac</strong>s.<br>
<br>
<h4>La recette</h4><br>
<br>
On peut donc, une fois que l'on a déterminé quelle type de classe on a, appliquer la recette suivante:<br>
<br>
<table class="tab_user">	        					
<caption>La recette</caption>






<thead><tr><th> </th><th>Classe à sémantique de <strong>valeur</strong></th><th>Classe à sémantique d'<strong>entité</strong></th></tr></thead><tbody><tr>		
<td>Définir les opérateurs arithmétiques (+,-,...)</td>		
<td><div class="centre"><img src="./cpp2_files/qcm_vrai.png" alt="Image utilisateur"> </div></td>		
<td><div class="centre"><img src="./cpp2_files/qcm_faux.png" alt="Image utilisateur"> </div></td>	
</tr><tr>		
<td>Créer un constructeur de copie</td>		
<td><div class="centre"><img src="./cpp2_files/qcm_vrai.png" alt="Image utilisateur"></div> </td>		
<td><div class="centre"><img src="./cpp2_files/qcm_faux.png" alt="Image utilisateur"></div></td>	
</tr><tr>		
<td>Créer un opérateur d'affectation (=)</td>		
<td><div class="centre"><img src="./cpp2_files/qcm_vrai.png" alt="Image utilisateur"></div></td>		
<td><div class="centre"><img src="./cpp2_files/qcm_faux.png" alt="Image utilisateur"></div></td>	
</tr><tr>		
<td>Définir les opérateurs de comparaison (==,&lt;,&gt;,..)</td>		
<td><div class="centre"><img src="./cpp2_files/qcm_vrai.png" alt="Image utilisateur"> </div></td>		
<td><div class="centre"><img src="./cpp2_files/qcm_faux.png" alt="Image utilisateur"></div></td>	
</tr><tr>		
<td>Cette classe peut faire partie d'une hiérarchie</td>		
<td><div class="centre"><img src="./cpp2_files/qcm_faux.png" alt="Image utilisateur"> </div></td>		
<td><div class="centre"><img src="./cpp2_files/qcm_vrai.png" alt="Image utilisateur"></div></td>	
</tr></tbody></table><br>
<br>
Ce tableau indique ce que vous êtes <strong>autorisé</strong> à faire pas ce qui est obligatoire. Il faut quand même réfléchir si cela a du sens. <br>
Et ceci fonctionne toujours. Se poser la question de la catégorie de la classe que l'on écrit permet ensuite de s'éviter beaucoup d'ennuis. Une faute que l'on voit souvent sur le <a href="http://www.siteduzero.com/forum-81-237-langage-c.html">forum</a> est le fait de mettre des opérateurs à une classe de type Personnage par exemple ou de définir un constructeur de copie pour la classe Arme. Alors que cela n'a pas de sens et cela n'apporte que des ennuis pour la suite.<br>
<br>
<div class="rmq information">Il se trouve que pour les classes à sémantique d'entité, on a parfois besoin de faire des copies. On parle dans ce cas de <a href="http://cpp.developpez.com/faq/cpp/?page=classes#CLASS_clone">clonage</a>.  </div><br>
<br>
De plus, appliquer cette recette permet de ne pas réfléchir et donc d'utiliser la qualité principale de l'informaticien, la fainéantise.  <img src="./cpp2_files/rire.gif" alt=":lol:" class="smilies"> <br>

		</div>
		<hr>
		
	<div id="chap_conclusion">
	On a ainsi fait le tour des principales propriétés de l'héritage simple.<br>
<br>
Je vous propose comme exercice d'essayer d'ajouter les fonctions <span class="violet">sePresenter()</span> de la classe Magicien. Vous pouvez également ajouter une classe MagicienNoir qui hérite de Magicien et le faire également se présenter, ceci en dupliquant le moins de code possible.<br>
<br>
Dans le prochain chapitre, nous nous intéresserons à la notion d'amitié.
	</div>
	
	<hr>
	<h1 id="chap_8951">L'amitié</h1>
	<div id="chap_intro">
	Nous avons vu récemment que les classes pouvaient s'arranger entre elles comme dans une famille. Il y a les classes parents et les enfants qui en héritent. <br>
<br>
Dans la vie, vous avez votre famille avec laquelle vous avez des points communs, mais vous avez aussi des amis avec lesquels vous partagez tout. Nous allons découvrir dans ce chapitre que pour les classes c'est identique, elles peuvent aussi avoir des amies.  <img src="./cpp2_files/clin.png" alt=";)" class="smilies"> <br>
<br>
La notion d'amitié entre les classes s'avère parfois très pratique mais il ne faut pas en abuser car si elle est mal utilisée, elle brise un des concepts fondamentaux de la POO, l'encapsulation. Dans certains autres cas, comme celui que je vais vous présenter, elle est même nécessaire et renforce l'encapsulation.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_8950">Donner l'accès aux attributs</h2>
		<div class="ss_part_texte">
		<h3>La fonction membre sePresenter()</h3><br>
<br>
Dans le chapitre précédent, nous avions écrit une fonction membre <span class="violet">sePresenter()</span> qui permettait aux Personnages de se présenter.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">Personnage</span><span class="o">::</span><span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Bonjour, je m'appelle "</span> <span class="o">&lt;&lt;</span> <span class="n">m_nom</span> <span class="o">&lt;&lt;</span> <span class="s">"."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"J'ai encore "</span> <span class="o">&lt;&lt;</span> <span class="n">m_vie</span> <span class="o">&lt;&lt;</span> <span class="s">" points de vie."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cette fonction avait pour rôle d'écrire dans la console les principales caractéristiques du Personnage. <br>
<br>
Mais pour faire cela, on aurait également pu utiliser la surcharge d'opérateur de telle sorte à pouvoir écrire ce genre de choses :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;iostream&gt;</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="n">Personnage</span> <span class="n">Gerard</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">Gerard</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si vous revenez quelques chapitres en arrière, vous trouverez comment surcharger l'opérateur &lt;&lt; pour écrire dans les flux.<br>
<br>
<div class="rmq information">Le terme flux est le terme générique qui correspond à tous les endroits dans lesquels vous pouvez écrire tels que la console, les fichiers...</div><br>
<br>
La syntaxe à adopter était la suivante :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;ostream&gt;</span>
<span class="k">using</span> <span class="n">namesace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">flux</span><span class="p">,</span> <span class="k">const</span> <span class="n">Personnage</span><span class="o">&amp;</span> <span class="n">perso</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c">// On écrit ce qu'on veut dans le flux.</span>
    <span class="k">return</span> <span class="n">flux</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Alors allons-y, écrivons le texte de présentation du Personnage dans le flux.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">flux</span><span class="p">,</span> <span class="k">const</span> <span class="n">Personnage</span><span class="o">&amp;</span> <span class="n">perso</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">flux</span> <span class="o">&lt;&lt;</span> <span class="s">"Bonjour, je m'appelle "</span> <span class="o">&lt;&lt;</span> <span class="n">perso</span><span class="p">.</span><span class="n">m_nom</span> <span class="o">&lt;&lt;</span> <span class="s">"."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">flux</span> <span class="o">&lt;&lt;</span> <span class="s">"J'ai encore "</span> <span class="o">&lt;&lt;</span> <span class="n">perso</span><span class="p">.</span><span class="n">m_vie</span> <span class="o">&lt;&lt;</span> <span class="s">" points de vie."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">flux</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Mais, on peut pas faire ça ! m_nom et m_vie ne sont pas publics !</div><br>
<br>
Bien vu ! Vous avez tout à fait raison, on ne peut pas écrire ce code tel quel. Il faut que l'on donne un moyen à l'opérateur &lt;&lt; d'accéder aux attributs de la classe Personnage. C'est exactement le rôle de l'amitié.<br>
<br>
<div class="rmq information">On aurait également pu écrire des accesseurs getNom(), getVie() dans la classe Personnage. Ceci a par contre le défaut que <span class="souligne">tout le monde</span> et pas seulement l'opérateur &lt;&lt; aurait accès à ces informations.</div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_8949">Les fonctions amies</h2>
		<div class="ss_part_texte">
		<h3>Qu'est-ce que l'amitié ?</h3><br>
<br>
<strong>L'amitié dans les langages orientés objet est le fait de donner un accès complet aux éléments d'une classe.</strong><br>
<br>
Donc si je déclare une fonction f amie de la classe A, la fonction f pourra modifier les attributs de la classe A <span class="souligne">même si les attributs sont privés ou protégés</span>. La fonction f pourra également utiliser les fonctions privées et protégées de la classe A.<br>
<br>
<strong>On dit alors que la fonction f est amie de la classe A.</strong><br>
<br>
En déclarant une fonction amie d'une classe, on casse complètement l'encapsulation de la classe puisqu'un être externe à la classe pourra modifier ce qu'il y a dedans. <span class="rouge"><strong>Il ne faut donc pas abuser de l'amitié</strong></span>.<br>
<br>
C'est parfait, cette définition correspond exactement à ce dont on avait besoin pour notre opérateur &lt;&lt;.<br>
<br>
<h3>Déclarer une fonction amie d'une classe</h3><br>
<br>
<div class="rmq question">Interro surprise d'anglais. Comment dit-on « ami » en anglais ?</div><br>
<br>
<strong><span class="rouge">Friend</span></strong>, exactement ! Et comme les créateurs du C++ ne voulaient pas se casser la tête avec les noms compliqués, ils ont pris <span class="rouge">friend</span> comme mot-clé pour l'amitié. D'ailleurs si vous tapez ce mot dans votre IDE, il devrait s'écrire d'une couleur différente.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="k">friend</span>
</pre></div>
</td></tr></tbody></table></div><br>
Et ça marche même sur le SdZ.  <img src="./cpp2_files/langue.png" alt=":p" class="smilies"> <br>
<br>
Pour déclarer une fonction amie d'une classe, on utilise la syntaxe suivante :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Personnage</span>
<span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
        <span class="n">Personnage</span><span class="p">();</span>
        <span class="n">Personnage</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">nom</span><span class="p">);</span>
        <span class="kt">void</span> <span class="n">recevoirDegats</span><span class="p">(</span><span class="kt">int</span> <span class="n">degats</span><span class="p">);</span>
        <span class="kt">void</span> <span class="n">coupDePoing</span><span class="p">(</span><span class="n">Personnage</span> <span class="o">&amp;</span><span class="n">cible</span><span class="p">);</span>

<span class="ln-xtra">    <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">flux</span><span class="p">,</span><span class="k">const</span> <span class="n">Personnage</span><span class="o">&amp;</span> <span class="n">perso</span><span class="p">);</span></span>

    <span class="k">protected</span><span class="o">:</span>
        <span class="kt">int</span> <span class="n">m_vie</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_nom</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il suffit simplement d'écrire le prototype de la fonction avec le mot-clé <span class="rouge">friend</span> devant. L'opérateur &lt;&lt; est dès maintenant ami de la classe Personnage.<br>
<br>
<div class="rmq information">Vous pouvez mettre le prototype de la fonction dans la partie publique, protégée ou privée de la classe, cela n'a aucune importance.</div><br>
<br>
On peut donc maintenant écrire l'opérateur &lt;&lt; comme précédemment. <br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">flux</span><span class="p">,</span> <span class="k">const</span> <span class="n">Personnage</span><span class="o">&amp;</span> <span class="n">perso</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">flux</span> <span class="o">&lt;&lt;</span> <span class="s">"Bonjour, je m'appelle "</span> <span class="o">&lt;&lt;</span> <span class="n">perso</span><span class="p">.</span><span class="n">m_nom</span> <span class="o">&lt;&lt;</span> <span class="s">"."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">flux</span> <span class="o">&lt;&lt;</span> <span class="s">"J'ai encore "</span> <span class="o">&lt;&lt;</span> <span class="n">perso</span><span class="p">.</span><span class="n">m_vie</span> <span class="o">&lt;&lt;</span> <span class="s">" points de vie."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">flux</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cette fois, on n'a plus de problème puisque operator &lt;&lt; a tous les droits sur la classe Personnage.<br>
<br>
<h3>L'amitié et la responsabilité</h3><br>
<br>
Être l'ami de quelqu'un a certaines conséquences en matière de savoir-vivre. Je présume que vous n'allez pas chez vos amis à 3h du matin pour saccager leur jardin pendant leur sommeil.<br>
<br>
En C++, l'amitié implique également que la fonction amie ne viendra pas détruire la classe et ne viendra pas non plus saccager les attributs de la classe. Si vous avez besoin d'une fonction qui doit modifier grandement le contenu d'une classe, alors faites plutôt une fonction membre de la classe. <br>
<br>
Vos programmes devraient respecter les deux règles suivantes :<br>
<br>
<span class="rouge">Une fonction amie ne devrait, en principe, pas modifier l'instance de la classe.</span><br>
<br>
<span class="rouge">Utilisez les fonctions amies que si vous ne pouvez pas faire autrement.</span>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_8948">Encore un peu plus d'amitié</h2>
		<div class="ss_part_texte">
		<h3>Une fonction membre comme amie</h3><br>
<br>
Dans la partie précédente, nous avons vu comment déclarer une fonction amie d'une classe. Pour aller plus loin, il faudrait savoir comment déclarer une fonction membre d'une classe comme amie d'une autre classe.  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> <br>
<br>
Prenons comme exemple le code suivant :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">A</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">f</span><span class="p">();</span>

<span class="k">private</span><span class="o">:</span>
    
    <span class="kt">int</span> <span class="n">element</span><span class="p">;</span>  
<span class="p">};</span>

<span class="k">class</span> <span class="nc">B</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">g</span><span class="p">();</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce que l'on aimerait faire c'est donner à la fonction <span class="violet">g()</span> de la classe <strong>B</strong> l'accès à la variable <span class="vertf">element</span> de la classe <strong>A</strong>.<br>
<br>
C'est donc bien l'amitié qu'il faut utiliser ici.<br>
<br>
<div class="rmq question">Mais comment faire pour indiquer au compilateur que c'est la fonction g() de la classe B qui est amie et pas une autre fonction g() ?</div><br>
<br>
C'est bien là le problème ! Pour le résoudre, il faut se souvenir du nom complet de la fonction g() de B. Le nom complet, c'est le nom que vous utilisez pour la définition de la fonction dans un <span class="italique">.cpp</span>. Ici, il s'agit évidemment de :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">B</span><span class="o">::</span><span class="n">g</span><span class="p">()</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
avec le fameux opérateur de résolution de portée « :: » que nous avons déjà rencontré dans le chapitre précédent.<br>
<br>
Avec cette information, il est aisé de résoudre notre petit problème. L'amitié sera donc donnée <span class="italique">via</span> l'ajout de la ligne<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="k">friend</span> <span class="kt">void</span> <span class="n">B</span><span class="o">::</span><span class="n">g</span><span class="p">();</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
dans la classe <strong>A</strong>.<br>
<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">A</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">f</span><span class="p">();</span>

    <span class="k">friend</span> <span class="kt">void</span> <span class="n">B</span><span class="o">::</span><span class="n">g</span><span class="p">();</span>

<span class="k">private</span><span class="o">:</span>
    
    <span class="kt">int</span> <span class="n">element</span><span class="p">;</span>  
<span class="p">};</span>

<span class="k">class</span> <span class="nc">B</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">g</span><span class="p">();</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">Ce n'est que la fonction <span class="violet">g()</span> de <strong>B</strong> qui est amie de la classe <strong>A</strong>. Les autres fonctions de <strong>B</strong> se comportent normalement.</div><br>
<br>
Il y aurait encore beaucoup à dire sur l'amitié, principalement entre deux classes. Cette notion n'est pourtant utile que dans des cas très spécifiques et souvent complexes ; nous y reviendrons donc plus tard.
		</div>
		<hr>
		
	<div id="chap_conclusion">
	N'oubliez jamais la règle suivante :<br>
<br>
<span class="rouge">On utilise l'amitié que lorsqu'on ne peut pas faire autrement.</span>  <img src="./cpp2_files/pirate.png" alt=":pirate:" class="smilies"> <br>
<br>
C'est le point clé. Si vous ne la respectez pas, alors autant arrêter la POO, car le concept de classe perd tout son sens.<br>
<br>
Si vous ne deviez vous souvenir que d'une seule chose à ce sujet, alors souvenez-vous de citation suivante de <a href="http://www.siteduzero.com/membres-294-1608.html">Davidbrcz</a> :<br>
<br>
<span class="citation">Citation : Davidbrcz</span><div class="citation2">Un ami c'est quelqu'un qui a le droit de toucher vos parties privées.  <img src="./cpp2_files/heureux.png" alt=":D" class="smilies"> </div><br>
<br>
Voilà, vous connaissez tout des liens qui permettent d'organiser les classes entre elles. Vous êtes donc parés pour aller plus loin, vers le monde du polymorphisme.
	</div>
	
	<hr>
	<h1 id="chap_63899">Le polymorphisme I</h1>
	<div id="chap_intro">
	Le polymorphisme... vaste sujet...<br>
<br>
Vous en avez peut-être entendu parler sur le forum et beaucoup disent qu'il s'agit d'un sujet difficile. Vous verrez cependant que ce n'est pas vrai  <img src="./cpp2_files/clin.png" alt=";)" class="smilies"> et que c'est en réalité quelque chose de très utile pour vos programmes.<br>
<br>
Comme il y a beaucoup à dire, j'ai séparé la matière en deux chapitres qui vont ensemble avec un seul QCM à la fin.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_63898">Définition</h2>
		<div class="ss_part_texte">
		<h3>Petit tour en Grèce</h3><br>
<br>
Aujourd'hui n'est pas coutume, nous allons commencer par un petit cours de grec.<br>
<br>
<div class="rmq question">Sauriez-vous me dire ce que signifie « polymorphe » ?  <img src="./cpp2_files/blink.gif" alt="o_O" class="smilies"> </div>  <br>
<br>
Si vous connaissiez vos racines, vous reconnaitriez peut-être les mots « poly » et « morphe » et peut-être vous souvenez-vous de leur signification. « <span class="italique">Poly</span> » signifie « <span class="italique">plusieurs</span> » comme dans polygone ou polytechnique et « <span class="italique">morphe</span> » signifie « <span class="italique">forme</span> » comme... euh... polymorphe ou métamorphe. <img src="./cpp2_files/smile.png" alt=":)" class="smilies"><br>
<br>
<br>
<div class="rmq question">Ok... Mais en C++, ça veut dire quoi ?</div><br>
<br>
Eh bien, la même chose ! Un code (ou bout de code) <a href="http://fr.wiktionary.org/wiki/polymorphe">polymorphe</a> est donc un code qui peut fonctionner de manière différente selon le type qui l'utilise.<br>
D'ailleurs, il existe même quatre sortes de polymorphismes en C++.  <img src="./cpp2_files/pleure.png" alt=":&#39;(" class="smilies"><br>
<br>
<h3>Les quatre polymorphismes</h3><br>
<br>
Je sens que je vous fais de plus en plus peur. Mais ne partez pas tout de suite, vous allez voir que vous savez déjà bien des choses.<br>
<br>
<h4>La surcharge de fonctions</h4><br>
<br>
Celui-là, vous le connaissez déjà ! Dans votre code, vous pouvez avoir deux fonctions qui ont le même nom :<br>
<br>
<span class="code">Code : C++ - Surcharge de fonction - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="kt">double</span> <span class="n">puissance</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">exposant</span><span class="p">);</span>
<span class="kt">double</span> <span class="n">puissance</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="kt">double</span> <span class="n">exposant</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ceci est tout à fait légal puisque le deuxième argument n'est pas le même. Elles n'ont pas la même signature. Selon le type du deuxième argument, ce sera la première ou la deuxième fonction qui sera appelée. C'est donc bien du polymorphisme. On parle parfois de polymorphisme <span class="italique">ad hoc</span>.<br>
<br>
<h4>Les conversions implicites</h4><br>
<br>
Celui-là, vous le connaissez aussi. <img src="./cpp2_files/smile.png" alt=":)" class="smilies"> Quand vous écrivez une fonction comme ceci :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="kt">double</span> <span class="n">sqrt</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous pouvez également l'utiliser de la manière suivante :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="syntax"><pre><span class="kt">float</span> <span class="n">a</span><span class="o">=</span><span class="mf">2.</span><span class="p">;</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le float sera automatiquement converti double. La même fonction agit sur un double ou sur un float, c'est donc du polymorphisme. On parle également de polymorphisme <span class="italique">ad hoc</span> dans ce cas.<br>
<br>
<h4>Le polymorphisme paramétrique</h4><br>
<br>
Il s'agit des modèles ou <span class="italique">template</span>. On y reviendra plus tard. Le but ici est de créer des bouts de codes ou des classes qui peuvent travailler avec n'importe quel type de donnée. On parle aussi de programmation générique.<br>
<br>
<h4>Le polymorphisme d'inclusion (ou polymorphisme universel)</h4><br>
<br>
Il s'agit de ce qui va nous intéresser directement dans la suite. Le code n'agit pas de la même manière pour des objets différents quand ceux-ci sont dans la même hiérarchie (deux classes « soeurs » par exemple). Comment cela ? Nous allons le découvrir.<br>
<br>
<div class="rmq information">Il n'est pas nécessaire de connaître ces définitions. Elles sont là pour replacer ce que vous apprenez dans un contexte plus large. Elles sont principalement utiles pour ceux qui tiennent à comparer des langages.</div><br>
<br>
Sachez également qu'un langage de programmation n'est réellement orienté objet que s'il possède le polymorphisme. Les classes et l'héritage peuvent très bien être « simulés » en C (par exemple) qui n'est pas un langage orienté objet. Le polymorphisme est un mécanisme essentiel du paradigme objet.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_63896">La résolution des liens</h2>
		<div class="ss_part_texte">
		Prenons les classes suivantes comme exemple :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Forme</span><span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis une Forme."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Cercle</span><span class="o">:</span> <span class="k">public</span> <span class="n">Forme</span>
<span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
       <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis un Cercle."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">private</span><span class="o">:</span>
    <span class="kt">double</span> <span class="n">m_rayon</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Carre</span><span class="o">:</span> <span class="k">public</span> <span class="n">Forme</span>
<span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
       <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis un Carre."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">private</span><span class="o">:</span>
    <span class="kt">double</span> <span class="n">m_cote</span><span class="p">;</span>
<span class="p">};</span>
<span class="c">// ...</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous reconnaîtrez un héritage simple avec un masquage de fonction. Le bout de code suivant ne devrait pas vous poser de problème :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="syntax"><pre><span class="n">Forme</span> <span class="n">a</span><span class="p">;</span>
<span class="n">a</span><span class="p">.</span><span class="n">sePresenter</span><span class="p">();</span>   <span class="c">// Affiche "Je suis une Forme."</span>
<span class="n">Cercle</span> <span class="n">b</span><span class="p">;</span>
<span class="n">b</span><span class="p">.</span><span class="n">sePresenter</span><span class="p">();</span>   <span class="c">// Affiche "Je suis un Cercle."</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>La résolution statique des liens</h3><br>
<br>
Jusque là, rien d'inhabituel. Mais que se passe-t-il si on crée une nouvelle fonction recevant en paramètre une Forme :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">affichage</span><span class="p">(</span><span class="n">Forme</span> <span class="n">x</span><span class="p">)</span>
<span class="p">{</span>
<span class="ln-xtra">    <span class="n">x</span><span class="p">.</span><span class="n">sePresenter</span><span class="p">();</span></span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et maintenant, écrivons donc un <span class="italique">main()</span> qui utilise cette fonction.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Forme</span> <span class="n">a</span><span class="p">;</span>
    <span class="n">Cercle</span> <span class="n">b</span><span class="p">;</span>
<span class="ln-xtra">    <span class="n">affichage</span><span class="p">(</span><span class="n">a</span><span class="p">);</span></span>
<span class="ln-xtra">    <span class="n">affichage</span><span class="p">(</span><span class="n">b</span><span class="p">);</span></span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cela ne pose pas de problème puisque un Cercle EST UNE Forme. On peut donc sans problème passer un Cercle en argument à la fonction <span class="violet">affichage()</span> qui attend en réalité une Forme.<br>
<br>
Le résultat de ce programme sera donc...<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Je&nbsp;suis&nbsp;une&nbsp;Forme.
Je&nbsp;suis&nbsp;une&nbsp;Forme.</pre></div></td></tr></tbody></table></div><br>
<br>
 <img src="./cpp2_files/triste.png" alt=":(" class="smilies">  <img src="./cpp2_files/triste.png" alt=":(" class="smilies"> On a perdu la vraie nature du Cercle quand on l'a passé à la fonction. <br>
<br>
<div class="rmq question">Comment le Cercle s'est-il « changé » en Forme ?</div><br>
<br>
Il faut voir la classe Cercle comme une sorte de poupée russe. La classe Cercle contient d'une certaine manière une instance d'une Forme.<br>
<br>
<div class="centre"><img src="./cpp2_files/135628.png" alt="Image utilisateur"></div><br>
<br>
Un Cercle EST UNE Forme « améliorée » avec des éléments supplémentaires (l'attribut m_rayon et la nouvelle version de <span class="violet">sePresenter()</span>). <br>
<br>
La fonction <span class="violet">affichage()</span>, elle, attend une Forme. Au moment où l'on passe le Cercle à la fonction, ce dernier perd sa partie « améliorée » et ne garde que sa partie héritée.<br>
<br>
<div class="centre"><img src="./cpp2_files/135629.png" alt="Image utilisateur"></div><br>
<br>
Et c'est donc la seule fonction <span class="violet">sePresenter()</span> qui reste qui est appelée, celle qui affiche « Je suis une forme. ».<br>
<br>
On parle dans ce cas de <span class="rouge">résolution statique des liens</span>. Le mot statique veut dire « connu à la compilation ». Lors de la compilation de la fonction <span class="violet">affichage()</span>, on n'a aucun moyen de savoir que plus tard on va lui passer non pas une Forme mais une « Forme améliorée » en l'occurrence un Cercle.<br>
<br>
<strong>C'est le type de la variable qui détermine quelle fonction membre appeler et pas sa vraie nature.</strong><br>
<br>
<h3>La résolution dynamique des liens</h3><br>
<br>
Ce qu'on aimerait nous, c'est que le Cercle se présente comme tel dans la fonction <span class="violet">affichage()</span>. On parle alors de <span class="rouge">résolution dynamique des liens</span>. Le dynamique signifiant « connu lors de l'exécution ». <br>
Quand on lance le programme, on sait que c'est un Cercle que l'on passe à la fonction <span class="violet">affichage()</span> et pas une Forme, il faudrait que le programme en tienne compte. C'est justement ce que nous allons apprendre à faire.<br>
<br>
Pour faire cela, il faut deux « ingrédients » :<br>
<br>
<ul>
<li>Une <strong>référence</strong> ou un <strong>pointeur</strong> sur l'objet.</li>
<li>Des fonctions membres <strong>virtuelles.</strong></li>
</ul><br>
<br>
<div class="rmq erreur">Si vous n'avez pas ces deux choses, vous retombez dans le cas « normal » et le polymorphisme ne se fera pas.</div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_63895">Les fonctions virtuelles</h2>
		<div class="ss_part_texte">
		<h3>Déclarer une fonction virtuelle</h3><br>
<br>
Pour cela, rien de plus simple. Il suffit de mettre le mot-clé <strong>virtual</strong> devant la fonction.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Forme</span><span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
<span class="ln-xtra">    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span></span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis une Forme."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Cercle</span><span class="o">:</span> <span class="k">public</span> <span class="n">Forme</span>
<span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
<span class="ln-xtra">    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span></span>
    <span class="p">{</span>
       <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis un Cercle."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">private</span><span class="o">:</span>
    <span class="kt">double</span> <span class="n">m_rayon</span><span class="p">;</span>
<span class="p">};</span>
<span class="c">// ...</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Il n'est pas nécessaire de remettre le <strong>virtual</strong> dans la classe Fille. La fonction est automatiquement virtuelle par héritage. </div><br>
<br>
<div class="rmq attention">Les fonctions <span class="courrier">static</span> ne peuvent pas être virtuelles ! Les fonctions <span class="courrier">inline</span> par contre le peuvent sans problème.</div><br>
<br>
Le deuxième ingrédient est un pointeur (ou une référence) sur l'objet. Il nous faut donc récrire la fonction en conséquence.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">affichage</span><span class="p">(</span><span class="k">const</span> <span class="n">Forme</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span>  <span class="c">// On utilise une référence plutôt qu'une copie</span>
<span class="p">{</span>
    <span class="n">x</span><span class="p">.</span><span class="n">sePresenter</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On peut maintenant réutiliser le même <span class="italique">main()</span> que précédemment, ce qui nous donne :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Forme</span> <span class="n">a</span><span class="p">;</span>
    <span class="n">Cercle</span> <span class="n">b</span><span class="p">;</span>
    <span class="n">affichage</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
    <span class="n">affichage</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div> <br>
<br>
Et cette fois, on a bien le résultat voulu :<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Je&nbsp;suis&nbsp;une&nbsp;Forme.
Je&nbsp;suis&nbsp;un&nbsp;Cercle.</pre></div></td></tr></tbody></table></div><br>
<br>
Ce n'est donc pas très difficile à utiliser comme concept, mais voyons ce à quoi ça peut servir sur un exemple concret.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_63894">Un exemple</h2>
		<div class="ss_part_texte">
		Reprenons notre petit RPG comme exemple de l'utilité du polymorphisme.<br>
<br>
<h3>Attaquer son ennemi</h3><br>
<br>
Nous avions trois classes. Personnage ainsi que Magicien et Guerrier qui héritaient de la première. <br>
<br>
<div class="centre"><img src="./cpp2_files/120497.png" alt="Image utilisateur"></div><br>
<br>
Ce que nous aimerions, c'est ajouter une fonction membre <span class="violet">attaquer(const Personnage&amp; autre)</span> qui ait un comportement différent selon que l'on a affaire à un magicien ou à un Guerrier, le premier utilisera une attaque magique et le second sa force brutale.<br>
<br>
Rien de plus simple. Ajoutons donc les fonctions nécessaires.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">Personnage</span><span class="o">::</span><span class="n">attaquer</span><span class="p">(</span><span class="k">const</span> <span class="n">Personnage</span><span class="o">&amp;</span> <span class="n">ennemi</span><span class="p">)</span> <span class="k">const</span>
<span class="p">{</span>
   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_nom</span> <span class="o">&lt;&lt;</span> <span class="s">" attaque "</span> <span class="o">&lt;&lt;</span> <span class="n">ennemi</span><span class="p">.</span><span class="n">getNom</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">Guerrier</span><span class="o">::</span><span class="n">attaquer</span><span class="p">(</span><span class="k">const</span> <span class="n">Personnage</span><span class="o">&amp;</span> <span class="n">ennemi</span><span class="p">)</span> <span class="k">const</span>
<span class="p">{</span>
   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_nom</span> <span class="o">&lt;&lt;</span> <span class="s">" tranche violemment le bras de "</span> <span class="o">&lt;&lt;</span> <span class="n">ennemi</span><span class="p">.</span><span class="n">getNom</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">Magicien</span><span class="o">::</span><span class="n">attaquer</span><span class="p">(</span><span class="k">const</span> <span class="n">Personnage</span><span class="o">&amp;</span> <span class="n">ennemi</span><span class="p">)</span> <span class="k">const</span>
<span class="p">{</span>
   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_nom</span> <span class="o">&lt;&lt;</span> <span class="s">" jette un sort à "</span> <span class="o">&lt;&lt;</span> <span class="n">ennemi</span><span class="p">.</span><span class="n">getNom</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Il faut également ajouter les prototypes dans les fichiers .h et la fonction <span class="courrier">getNom()</span> dans la classe personnage, mais ça, vous savez le faire.</div><br>
<br>
<h3>Une armée de Personnages</h3><br>
<br>
Pour mener la guerre, tout le monde sait qu'un soldat seul n'est pas suffisant. Il nous faut donc une armée, autrement dit un groupe de Guerriers et Magiciens. Une solution pourrait par exemple être de faire deux armées séparées, une pour chaque type de soldats.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="n">Guerrier</span><span class="o">&gt;</span> <span class="n">armeeLourde</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">Magicien</span><span class="o">&gt;</span> <span class="n">armeeMagique</span><span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ceci fonctionne très bien, mais cette méthode souffre quand même de quelques défauts.<br>
<br>
<ul>
<li>Ce code n'est pas très générique. Le jour où l'on voudra ajouter un nouveau type de soldats, il faudra créer un nouveau <strong>vector</strong> et réaménager tout le code en conséquence.</li>
<li>On a créé deux tableaux alors qu'en réalité les deux sortes de soldats sont des Personnages. On pourrait donc en créer un seul.</li>
</ul><br>
<br>
Si l'on tient compte de ces deux remarques, on serait alors tenté de faire quelque chose de ce type:<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">Personnage</span><span class="o">&gt;</span> <span class="n">armee</span><span class="p">;</span>
    <span class="n">Magicien</span> <span class="n">merlin</span><span class="p">(</span><span class="s">"Merlin"</span><span class="p">);</span>
    <span class="n">Guerrier</span> <span class="n">lancelot</span><span class="p">(</span><span class="s">"Lancelot"</span><span class="p">);</span>
    
    <span class="n">armee</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">merlin</span><span class="p">);</span>   <span class="c">// Un Magicien EST UN Personnage.</span>
    <span class="n">armee</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">lancelot</span><span class="p">);</span>
 
    <span class="c">// Jusque-là, tout va pour le mieux. Passons donc à l'attaque...</span>
   
    <span class="n">Personnage</span> <span class="n">goliath</span><span class="p">(</span><span class="s">"Goliath le tenebreux"</span><span class="p">);</span>

    <span class="n">armee</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">attaquer</span><span class="p">(</span><span class="n">goliath</span><span class="p">);</span>  <span class="c">// Une attaque de magicien.</span>
    <span class="n">armee</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">attaquer</span><span class="p">(</span><span class="n">goliath</span><span class="p">);</span>  <span class="c">// Et un bon coup de hache.</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Si vous avez bien suivi la théorie, vous devriez être capable de dire ce que donne ce code.</div><br>
<span class="spoiler_hidden">Secret <a href="?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden"><span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Merlin&nbsp;attaque&nbsp;Goliath&nbsp;le&nbsp;tenebreux
Lancelot&nbsp;attaque&nbsp;Goliath&nbsp;le&nbsp;tenebreux</pre></div></td></tr></tbody></table></div></div></div><br>
<br>
Eh oui ! En mettant notre Guerrier et notre Magicien dans notre armee, nous avons perdu les informations qui précisaient leur vraie nature. Et c'est là tout l'intérêt du polymorphisme, traiter de manière identique des types différents.<br>
<br>
Ajoutons donc les deux ingrédients. <br>
<br>
1) Le mot-clé <strong>virtual</strong> devant le nom de la fonction.<br>
<br>
<span class="code">Code : C++ - Personnage.h - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">Personnage</span><span class="p">{</span>
<span class="c">// Reste de la classe</span>

<span class="k">public</span><span class="o">:</span>
<span class="ln-xtra">   <span class="k">virtual</span> <span class="kt">void</span> <span class="n">attaquer</span><span class="p">(</span><span class="k">const</span> <span class="n">Personnage</span><span class="o">&amp;</span> <span class="n">autre</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span></span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">Pas de <strong>virtual</strong> dans le .cpp ! Il vient seulement et uniquement dans le .h</div><br>
<br>
2) Et les pointeurs sur les différentes instances. Modifions donc le <span class="italique">main()</span> pour utiliser des pointeurs.<br>
<br>
<div class="rmq information">Ici, on est obligé d'utiliser des pointeurs puisqu'on ne peut mettre des références dans un vector.</div><br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
<span class="ln-xtra">    <span class="n">vector</span><span class="o">&lt;</span><span class="n">Personnage</span><span class="o">*&gt;</span> <span class="n">armee</span><span class="p">;</span>   <span class="c">// Notez le caractère « * » ici.</span></span>
    <span class="n">Magicien</span> <span class="n">merlin</span><span class="p">(</span><span class="s">"Merlin"</span><span class="p">);</span>
    <span class="n">Guerrier</span> <span class="n">lancelot</span><span class="p">(</span><span class="s">"Lancelot"</span><span class="p">);</span>
    
<span class="ln-xtra">    <span class="n">armee</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">&amp;</span><span class="n">merlin</span><span class="p">);</span>   <span class="c">// Il faut donc passer l'adresse ici.</span></span>
<span class="ln-xtra">    <span class="n">armee</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lancelot</span><span class="p">);</span></span>
 
    <span class="n">Personnage</span> <span class="n">goliath</span><span class="p">(</span><span class="s">"Goliath le tenebreux"</span><span class="p">);</span>

<span class="ln-xtra">    <span class="n">armee</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">attaquer</span><span class="p">(</span><span class="n">goliath</span><span class="p">);</span>  <span class="c">// Et utiliser -&gt; plutôt que le . pour accéder aux fonctions.</span></span>
<span class="ln-xtra">    <span class="n">armee</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">attaquer</span><span class="p">(</span><span class="n">goliath</span><span class="p">);</span></span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">On appelle un tableau de ce type une <strong>collection hétérogène</strong>, puisqu'elle contient différents types de variables.</div><br>
<br>
Cette fois, on obtient ce que l'on veut.<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Merlin&nbsp;lance&nbsp;un&nbsp;sort&nbsp;à&nbsp;Goliath&nbsp;le&nbsp;tenebreux
Lancelot&nbsp;tranche&nbsp;le&nbsp;bras&nbsp;de&nbsp;Goliath&nbsp;le&nbsp;tenebreux</pre></div></td></tr></tbody></table></div><br>
<br>
C'est là toute la magie du polymorphisme.<br>
<br>
<h3>Un petit exercice</h3><br>
<br>
Pour vous exercer un peu, vous pourriez :<br>
<ul>
<li>Ajouter d'autres fonctions virtuelles aux Personnages.</li>
<li>Créer un nouveau type de Personnages, par exemple des Chasseurs qui attaquent à distance avec un arc.</li>
<li>Créer une classe Armée qui permettrait de gérer l'ajout de soldats, la suppression de soldats... </li>
</ul>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Il faut vous souvenir de la règle suivante :<br>
<br>
<strong>Lorsque une fonction membre virtuelle est appelée à partir d'un pointeur ou d'une référence sur un objet, c'est la fonction membre associée au vrai type de l'instance qui va s'exécuter.</strong><br>
<br>
Si vous avez compris cela, vous avez déjà fait un bon bout du chemin.
	</div>
	
	<hr>
	<h1 id="chap_63892">Le polymorphisme II</h1>
	<div id="chap_intro">
	Il est maintenant temps d'aller un peu plus loin avec le polymorphisme et de voir tout ce que l'on peut retirer de ce concept.<br>
<br>
Pour suivre ce chapitre, il est important d'avoir bien saisi tout ce qui se trouvait dans le chapitre précédent. Ce qui est présenté dans ce chapitre est assez théorique, mais un petit Q.C.M. à la fin devrait vous permettre de vérifier si vous avez bien assimilé la théorie de ces deux derniers chapitres.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_63900">Les cas particuliers</h2>
		<div class="ss_part_texte">
		<h3>Les fonctions membres spéciales</h3><br>
<br>
Commençons par une petite question de théorie :<br>
<br>
<div class="rmq question">Quelles sont les fonctions membres d'une classe qui ne sont jamais héritées ?</div><br>
<span class="spoiler_hidden">Secret <a href="?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden"><ul>
<li>Tous les constructeurs.</li>
<li>Le destructeur.</li>
</ul></div></div><br>
<br>
Vous avez trouvé ? C'est bien. Toutes les autres fonctions peuvent être héritées et peuvent avoir un comportement polymorphique si on le souhaite. Qu'en est-il pour ces fonctions spéciales ?<br>
<br>
<h3>Le cas des constructeurs</h3><br>
<br>
Un constructeur virtuel a-t-il du sens ? Non ! Quand je veux construire une forme quelconque, je sais laquelle je veux construire. Je peux donc à la compilation déjà savoir quelle forme construire. Je n'ai pas besoin de résolution dynamique des liens et par conséquence pas besoin de virtualité.<br>
<br>
<span class="rouge"><strong>Un constructeur ne peut pas être virtuel.</strong></span><br>
<br>
Et cela va même plus loin. Quand je suis dans le constructeur, je sais quel type je construis, je n'ai donc à nouveau pas besoin de résolution dynamique des liens. D'où la règle suivante :<br>
<br>
<span class="rouge"><strong>On ne peut pas appeler de fonctions virtuelles dans un constructeur. Si on le fait, le polymorphisme ne se fera pas.</strong></span><br>
<br>
Un petit exemple permet de mieux comprendre. Reprenons le code des Formes avec cette fois des constructeurs. Le constructeur de Forme appelle la fonction virtuelle <span class="violet">sePresenter()</span>.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Forme</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">Forme</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">sePresenter</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis une Forme."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Cercle</span><span class="o">:</span> <span class="k">public</span> <span class="n">Forme</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">Cercle</span><span class="p">()</span><span class="o">:</span><span class="n">Forme</span><span class="p">()</span>
    <span class="p">{}</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis un Cercle."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

<span class="k">private</span><span class="o">:</span>
    <span class="kt">double</span> <span class="n">m_rayon</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Prenons le <span class="italique">main</span> suivant :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Cercle</span><span class="o">*</span> <span class="n">rond</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cercle</span><span class="p">;</span>   <span class="c">// Le new n'est là que pour avoir un pointeur</span>

    <span class="k">delete</span> <span class="n">rond</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le résultat obtenu par ce programme passionnant est :<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Je&nbsp;suis&nbsp;une&nbsp;Forme.</pre></div></td></tr></tbody></table></div><br>
<br>
Le constructeur a appelé la fonction <span class="violet">Forme::sePresenter()</span> et pas <span class="violet">Cercle::sePresenter()</span> comme on pouvait s'y attendre puisque la fonction est virtuelle. Donc n'oubliez pas, la résolution dynamique des liens ne se fait pas dans un constructeur.<br>
<br>
<h3>Le cas du destructeur</h3><br>
<br>
Ce cas est un petit peu plus complexe. Reprenons le code des formes et ajoutons-y des destructeurs affichant un message.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Forme</span><span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis une Forme."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="o">~</span><span class="n">Forme</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Destructeur de Forme."</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Cercle</span><span class="o">:</span> <span class="k">public</span> <span class="n">Forme</span>
<span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
       <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis un Cercle."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="o">~</span><span class="n">Cercle</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Destructeur de Cercle."</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">private</span><span class="o">:</span>
    <span class="kt">double</span> <span class="n">m_rayon</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et prenons le <span class="violet">main()</span> suivant :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Forme</span><span class="o">*</span> <span class="n">forme</span><span class="p">(</span><span class="k">new</span> <span class="n">Cercle</span><span class="p">);</span>   <span class="c">// Appel au constructeur de Cercle.</span>

    <span class="n">forme</span><span class="o">-&gt;</span><span class="n">sePresenter</span><span class="p">();</span>         <span class="c">// On vérifie qu'on a bien affaire à un cercle.</span>

    <span class="k">delete</span> <span class="n">forme</span><span class="p">;</span>                      <span class="c">// Destruction de la forme.</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce qui nous donne le résultat suivant :<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Je&nbsp;suis&nbsp;un&nbsp;Cercle.
Destructeur&nbsp;de&nbsp;Forme.</pre></div></td></tr></tbody></table></div><br>
<br>
Et c'est là que le problème se situe. Nous avons créé un Cercle mais c'est une Forme qui a été détruite. C'est le mauvais destructeur qui a été appelé ! <br>
<br>
<div class="rmq information">Cela peut dépendre de votre compilateur. Certains compilateurs appelleront quand même le bon destructeur.</div><br>
<br>
Pour pallier ce problème, une seule solution : rendre le destructeur virtuel. Ce qui nous permet de formuler une nouvelle règle importante :<br>
<br>
<span class="rouge"><strong>Un destructeur doit toujours être virtuel si on utilise le polymorphisme.</strong></span><br>
<br>
Si l'on fait cela, on obtient le résultat souhaité :<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Je&nbsp;suis&nbsp;un&nbsp;Cercle.
Destructeur&nbsp;de&nbsp;Cercle.
Destructeur&nbsp;de&nbsp;Forme.</pre></div></td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Dans notre exemple, cela n'aurait pas de grandes conséquences, mais si le destructeur doit faire quelque chose d'important (vider la mémoire, fermer une connexion web, éteindre un moteur électrique...), un oubli peut devenir catastrophique.</div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_63891">Quand utiliser le polymorphisme ?</h2>
		<div class="ss_part_texte">
		<h3>Les différentes sémantiques</h3><br>
<br>
Peut-être que vous vous rappelez de la fin du <a href="http://www.siteduzero.com/tutoriel-3-8943-retour-sur-l-heritage.html">chapitre 2</a>. Je vous présentais alors la notion assez abstraite de sémantique de classe et vous donnais une <span class="italique">recette</span> à appliquer pour créer correctement vos classes.<br>
<br>
Tout ceci était résumé sous forme d'un tableau qui autorisait ou interdisait certaines choses pour les classes.<br>
<br>
<table class="tab_user">	        					
<caption>La recette</caption>






<thead><tr><th> </th><th>Classe à sémantique de <strong>valeur</strong></th><th>Classe à sémantique d'<strong>entité</strong></th></tr></thead><tbody><tr>		
<td>Définir les opérateurs arithmétiques (+,-,...)</td>		
<td><div class="centre"><img src="./cpp2_files/qcm_vrai.png" alt="Image utilisateur"> </div></td>		
<td><div class="centre"><img src="./cpp2_files/qcm_faux.png" alt="Image utilisateur"> </div></td>	
</tr><tr>		
<td>Créer un constructeur de copie</td>		
<td><div class="centre"><img src="./cpp2_files/qcm_vrai.png" alt="Image utilisateur"></div> </td>		
<td><div class="centre"><img src="./cpp2_files/qcm_faux.png" alt="Image utilisateur"></div></td>	
</tr><tr>		
<td>Créer un opérateur d'affectation (=)</td>		
<td><div class="centre"><img src="./cpp2_files/qcm_vrai.png" alt="Image utilisateur"></div></td>		
<td><div class="centre"><img src="./cpp2_files/qcm_faux.png" alt="Image utilisateur"></div></td>	
</tr><tr>		
<td>Définir les opérateurs de comparaison (==,&lt;,&gt;,..)</td>		
<td><div class="centre"><img src="./cpp2_files/qcm_vrai.png" alt="Image utilisateur"> </div></td>		
<td><div class="centre"><img src="./cpp2_files/qcm_faux.png" alt="Image utilisateur"></div></td>	
</tr><tr>		
<td>Cette classe peut faire partie d'une hiérarchie</td>		
<td><div class="centre"><img src="./cpp2_files/qcm_faux.png" alt="Image utilisateur"> </div></td>		
<td><div class="centre"><img src="./cpp2_files/qcm_vrai.png" alt="Image utilisateur"></div></td>	
</tr></tbody></table><br>
<br>
Ce qui va nous intéresser ici, c'est la dernière ligne. Comme une classe à sémantique de valeur ne devrait pas faire partie d'un hiérarchie, on ne pourra pas utiliser le polymorphisme pour ces classes.<br>
<br>
Dans le même ordre d'idée, puisque une classe à sémantique d'entité pourra potentiellement faire partie d'une hiérarchie et donc peut-être tirer profit du polymorphisme, on va déclarer son destructeur comme étant virtuel. Cela permet de préparer le polymorphisme qui pourrait être utilisé par un autre programmeur qui réutiliserait votre code ou par vous-même dans un futur lointain qui vous aura fait oublier le fonctionnement exact de la classe.<br>
<br>
On peut donc ajouter la ligne suivante à notre <span class="italique">recette</span>:<br>
<br>
<table class="tab_user">



<thead><tr><th> </th><th>Classe à sémantique de <strong>valeur</strong></th><th>Classe à sémantique d'<strong>entité</strong></th></tr></thead><tbody><tr>		
<td>Utilisation du polymorphisme</td>		
<td><div class="centre"><img src="./cpp2_files/qcm_faux.png" alt="Image utilisateur"> </div></td>		
<td><div class="centre"><img src="./cpp2_files/qcm_vrai.png" alt="Image utilisateur"></div></td>	
</tr><tr>		
<td>Déclarer le destructeur comme étant virtuel</td>		
<td><div class="centre"><img src="./cpp2_files/qcm_faux.png" alt="Image utilisateur"> </div></td>		
<td><div class="centre"><img src="./cpp2_files/qcm_vrai.png" alt="Image utilisateur"></div></td>	
</tr></tbody></table><br>
<br>
<div class="rmq attention">Comme je l'ai déjà dit dans le chapitre dédié à ces concepts, ceci reste très théorique et il faut quand même bien réfléchir au cas d'application dans lequel on se trouve.</div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_63897">Les fonctions virtuelles pures</h2>
		<div class="ss_part_texte">
		<h3>Une fonction surface()</h3><br>
<br>
Une propriété intéressante des formes est leur surface. Il serait donc intéressant de profiter d'une fonction nous renvoyant la surface de la figure. Écrivons donc les fonctions nécessaires sans oublier l'aspect virtuel.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;cmath&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Forme</span><span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
       <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis une Forme."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">virtual</span> <span class="kt">double</span> <span class="n">surface</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
<span class="ln-xtra">       <span class="k">return</span> <span class="c1">// ?????  </span></span>
    <span class="p">}</span>

    <span class="k">virtual</span> <span class="o">~</span><span class="n">Forme</span><span class="p">()</span>
    <span class="p">{}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Cercle</span><span class="o">:</span> <span class="k">public</span> <span class="n">Forme</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
       <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis un Cercle."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">virtual</span> <span class="kt">double</span> <span class="n">surface</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
       <span class="k">return</span> <span class="n">M_PI</span> <span class="o">*</span> <span class="n">m_rayon</span> <span class="o">*</span> <span class="n">m_rayon</span><span class="p">;</span>  <span class="c1">// Ici, pas de problème.</span>
    <span class="p">}</span>

    <span class="k">virtual</span> <span class="o">~</span><span class="n">Cercle</span><span class="p">()</span>
    <span class="p">{}</span>

<span class="k">private</span><span class="o">:</span>
    <span class="kt">double</span> <span class="n">m_rayon</span><span class="p">;</span>    <span class="c1">// Le rayon du cercle.</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Carre</span><span class="o">:</span> <span class="k">public</span> <span class="n">Forme</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
       <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis un Carre."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">virtual</span> <span class="kt">double</span> <span class="n">surface</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
       <span class="k">return</span> <span class="n">m_cote</span><span class="o">*</span><span class="n">m_cote</span><span class="p">;</span>    <span class="c1">// Ici, non plus.</span>
    <span class="p">}</span>

    <span class="k">virtual</span> <span class="o">~</span><span class="n">Carre</span><span class="p">()</span>
    <span class="p">{}</span>

<span class="k">private</span><span class="o">:</span>
    <span class="kt">double</span> <span class="n">m_cote</span><span class="p">;</span>     <span class="c1">// Le coté du carré.</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et c'est là qu'apparaît le problème.  <img src="./cpp2_files/triste.png" alt=":(" class="smilies">  Que mettre à la ligne 14 ?  Pour les fonctions des classes Carre et Cercle, nous n'avons pas eu de problème, mais là...<br>
<br>
Une mauvaise solution consisterait à renvoyer un code d'erreur et afficher un message. Par exemple :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">double</span> <span class="n">Forme</span><span class="o">::</span><span class="n">surface</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"ERREUR : Vous ne pouvez pas connaitre la surface d'une forme non-spécialisée !"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>  
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ceci n'est pas terrible, car le programme pourra quand même continuer et l'erreur va se propager. La bonne solution serait de pouvoir dire au compilateur quelque chose comme :<br>
<br>
<strong>« Dans toutes les <span class="souligne">classes filles</span> de Forme il y aura une fonction nommée surface() qui renvoie un double et qui ne prend aucun argument, mais dans la classe Forme, cette fonction n'existe pas. »</strong><br>
<br>
C'est ce qu'on appelle une <span class="rouge"><strong>fonction virtuelle pure</strong></span>.<br>
<br>
La syntaxe est très simple, il faut ajouter un <span class="courrier">= 0</span> à la fin du prototype.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;cmath&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Forme</span><span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">sePresenter</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Je suis une Forme."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

<span class="ln-xtra">    <span class="k">virtual</span> <span class="kt">double</span> <span class="n">surface</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></span>

    <span class="k">virtual</span> <span class="o">~</span><span class="n">Forme</span><span class="p">()</span>
    <span class="p">{}</span>
<span class="p">};</span>

<span class="c1">// Le reste est inchangé.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et évidemment, on n'est pas obligé de (mais on peut) mettre un corps à la fonction dans le <span class="italique">.cpp</span> puisque justement on ne sait pas quoi y mettre. <img src="./cpp2_files/smile.png" alt=":)" class="smilies"> <br>
<br>
<div class="rmq information">Rappelez-vous, si on crée un <span class="courrier">vector&lt;Forme*&gt;</span>, on peut y mettre toutes les sortes de formes que l'on veut. On ne pourra, cependant, appeler uniquement les fonctions qui sont définies dans la classe Forme. C'est pour cela qu'on doit mettre le prototype de la fonction <span class="violet">surface()</span> virtuelle pure dans la classe Forme. Sinon, on ne pourrait pas connaître la surface des Formes contenues dans notre vector.</div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_63893">Les classes abstraites</h2>
		<div class="ss_part_texte">
		<h3>Définition</h3><br>
<br>
La définition est très simple, une <strong><span class="rouge">classe abstraite</span></strong> est une classe qui possède <span class="souligne">au moins une fonction virtuelle pure</span>.<br>
<br>
La classe Forme de la partie précédente est donc une classe abstraite.<br>
<br>
<span class="rouge"><strong>On ne peut pas créer d'objet à partir d'une classe abstraite.</strong></span><br>
<br>
Le code suivant ne compilera donc pas :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="c">// Définition des classes comme avant...</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
<span class="ln-xtra">    <span class="n">Forme</span> <span class="n">formeInconnue</span><span class="p">;</span>  <span class="c">// Ceci est interdit !</span></span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La raison est simple. Si je peux créer une Forme, alors je pourrais essayer d'appeler la fonction <span class="violet">surface()</span> qui n'a pas de corps et ceci n'est pas possible. Je peux par contre tout à fait écrire le code suivant :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="syntax"><pre><span class="c">// Définition des classes comme avant...</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Forme</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>    <span class="c">// Un pointeur sur une forme.</span>
    
    <span class="n">Cercle</span> <span class="n">rond</span><span class="p">;</span>         <span class="c">// On crée un Cercle, ceci est autorisé puisque toutes les fonctions ont un corps.</span>
    
    <span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">rond</span><span class="p">;</span>        <span class="c">// On fait pointer le pointeur sur le Cercle.</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ptr</span><span class="o">-&gt;</span><span class="n">surface</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c">// Dans la classe fille surface() existe donc ceci est autorisé.</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si l'on veut créer une nouvelle sorte de Forme, on sera obligé de redéfinir la fonction <span class="violet">surface()</span>, sinon cette dernière sera virtuelle pure par héritage et par conséquent la classe abstraite aussi. <br>
<br>
On peut résumer les fonctions virtuelles de la manière suivante :<br>
<br>
<ul>
<li>Une <span class="rouge">fonction virtuelle</span> <span class="souligne">peut</span> être redéfinie dans une classe fille.</li>
<li>Une <span class="rouge">fonction virtuelle pure</span> <span class="souligne">doit</span> être redéfinie dans une classe fille.</li>
</ul><br>
<br>
La classe <a href="http://doc.trolltech.com/4.4/qabstractbutton.html">QAbstractButton</a> de Qt est un exemple de classe abstraite. Elle regroupe les propriétés communes des boutons. Les classes qui en héritent (QCheckBox, QPushButton, QRadioButton...) représentent des types de boutons spécialisés. La classe est abstraite pour empêcher que l'on mette un QAbstractButton dans nos fenêtres, on est obligé d'utiliser un type dérivé. C'est là l'intérêt des classes abstraites, <span class="italique">représenter une abstraction</span>...  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies">
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Maintenant que nous avons terminé avec ce gros sujet, il est temps de lâcher un peu la POO pour passer à une notion plus simple mais très utile et nécessaire dans les programmes conséquents. Je vous parle bien sûr de la <span class="italique">gestion des exceptions</span>.
	</div>
	
	<hr>
	<h1 id="chap_35679">La gestion des exceptions</h1>
	<div id="chap_intro">
	Les cours de C++ que l'on trouve sur internet ou les livres de programmation sur ce langage présentent la gestion des exceptions tout à la fin ou en annexe comme s'il s'agissait d'un outil très complexe ou peu utilisé. <br>
Or ce n'est pas le cas, et je vais vous le démontrer.<br>
<br>
La gestion des exceptions est un moyen de gérer les erreurs qui pourraient survenir dans votre programme ; on peut alors traiter ces erreurs et reprendre l'exécution du programme là où elle s'était arrêtée.<br>
<br>
Dans ce tutoriel, je vais vous apprendre à créer des exceptions, à les traiter et à sécuriser vos programmes en les rendant plus robustes.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_35678">Un problème bien ennuyeux</h2>
		<div class="ss_part_texte">
		En programmation, quel que soit le langage utilisé (et donc en C++ <img src="./cpp2_files/langue.png" alt=":p" class="smilies"> ), il existe plusieurs types d'erreurs qui peuvent survenir. Parmi les erreurs possibles, on connait déjà les erreurs de syntaxe qui surviennent lorsque l'on fait une faute dans le code source, par exemple si l'on oublie un point-virgule à la fin d'une ligne.<br>
Ces erreurs sont facilement corrigées car le compilateur peut les signaler.<br>
<br>
Un autre type de problèmes peut survenir si le programme est écrit correctement mais qu'il exécute une action interdite. On peut citer comme exemple les cas où l'on essaye de lire la 10ème case d'un tableau de 8 éléments ou encore le calcul de la racine carrée d'un nombre négatif. <br>
On appelle ces erreurs les <strong>erreurs d'implémentation</strong>.<br>
<br>
La gestion des exceptions permet, si elle est réalisée correctement, de corriger les erreurs d'implémentation en les prévoyant à l'avance. Ceci n'est pas toujours réalisable, car il faudrait penser à toutes les erreurs qui pourraient survenir, mais on peut facilement en éviter une grande partie.<br>
Le plus simple pour comprendre le but de la gestion des exceptions est de prendre un exemple concret.<br>
<br>
<h3>Exemple d'erreur d'implémentation</h3><br>
<br>
Cet exemple n'est pas très original (on le trouve dans presque tous les livres), mais c'est certainement parce que c'est un des cas les plus simples.<br>
<br>
Imaginons que vous ayez décidé de réaliser une calculatrice. Vous auriez par exemple pu coder la division de deux nombres entiers de cette manière :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">division</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="c1">// Calcule a divisé par b.</span>
<span class="p">{</span>
   <span class="k">return</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Valeur pour a : "</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">flush</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Valeur pour b : "</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">flush</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
 
   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="s">" / "</span><span class="o">&lt;&lt;</span><span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="s">" = "</span> <span class="o">&lt;&lt;</span> <span class="n">division</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
   
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce code est tout à fait correct et fonctionne parfaitement. Sauf dans un cas : si b vaut 0. En effet la division par 0 n'est pas une opération arithmétique valide. Si on lance le programme avec b=0, on obtient une erreur et le message suivant s'affiche :<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Valeur&nbsp;pour&nbsp;a&nbsp;:&nbsp;3
Valeur&nbsp;pour&nbsp;b&nbsp;:&nbsp;0
Exception&nbsp;en&nbsp;point&nbsp;flottant&nbsp;(core&nbsp;dumped)</pre></div></td></tr></tbody></table></div><br>
<br>
Il faudrait donc ne pas réaliser le calcul si b vaut 0, mais que faire à la place ?<br>
<br>
<h3>Quelques mauvaises solutions</h3><br>
<br>
Une première possibilité serait de renvoyer un nombre prédéfini à la place du résultat. Ce qui donnerait par exemple :<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">division</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="c1">// Calcule a divisé par b.</span>
<span class="p">{</span>
   <span class="k">if</span><span class="p">(</span> <span class="n">b</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// Si b ne vaut pas 0.</span>
      <span class="k">return</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>
   <span class="k">else</span>         <span class="c1">// Sinon.</span>
      <span class="k">return</span> <span class="n">ERREUR</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
En spécifiant une valeur précise pour ERREUR. Mais cela pose un nouveau problème, quelle valeur choisir pour ERREUR ? On ne peut pas renvoyer un nombre puisque tous les nombres pourraient être renvoyés par la fonction dans un cas normal. Ce n'est donc pas une bonne solution. <br>
<br>
Une autre idée que l'on rencontre souvent, c'est d'afficher un message d'erreur, ce qui donnerait quelque chose comme :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">division</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="c1">// Calcule a divisé par b.</span>
<span class="p">{</span>
   <span class="k">if</span><span class="p">(</span> <span class="n">b</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// Si b ne vaut pas 0.</span>
      <span class="k">return</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>
   <span class="k">else</span>         <span class="c1">// Sinon.</span>
      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"ERREUR: Division par 0 !"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Mais cela pose deux nouveaux problèmes, la fonction ne renvoie aucune valeur en cas d'erreur et un effet de bord se produit ; en effet la fonction division n'est pas forcément censée utiliser cout surtout si par exemple, on a réalisé un programme avec une <acronym title="Graphical User Interface">GUI</acronym> comme Qt par exemple.<br>
<br>
La 3<sup>e</sup> et dernière solution, que l'on rencontre parfois dans certaines bibliothèques (SDL par exemple), est de modifier la signature et le type de retour de la fonction de la manière suivante :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">bool</span> <span class="n">division</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">resultat</span><span class="p">)</span>
<span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>     <span class="c1">// Si b est différent de 0.</span>
   <span class="p">{</span>
       <span class="n">resultat</span> <span class="o">=</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>   <span class="c1">// On effectue le calcul et on met le résultat dans la variable passée en argument.</span>
       <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>        <span class="c1">// On renvoie vrai pour montrer que tout s'est bien passé.</span>
   <span class="p">}</span>
   <span class="k">else</span>        <span class="c1">// Sinon</span>
       <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>       <span class="c1">// On renvoie false pour montrer qu'une erreur s'est produite.</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cette solution est la meilleure des 3 proposées (c'est celle qu'on utiliserait en C), mais elle souffre d'un gros problème, elle n'est pas du tout intuitive à utiliser. Il est en particulier impossible de réaliser le calcul <img src="./cpp2_files/mimetex.cgi" alt="{a}/(b / c)"> de manière simple et intuitive.<br>
<br>
<div class="rmq attention">Ces 3 solutions proposées sont là à titre d'illustration de ce qu'il ne faut pas faire. La bonne solution est présentée dans la suite.</div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_35677">La gestion des exceptions</h2>
		<div class="ss_part_texte">
		<h3>Principe général</h3><br>
<br>
Le principe général des exceptions est le suivant :<br>
<ul>
<li>On crée des zones où l'ordinateur va <span class="rouge"><strong>essayer</strong></span> le code en sachant qu'une erreur peut survenir.</li>
<li>Si une erreur survient, on la signale en <span class="rouge"><strong>lançant</strong></span> un <strong>objet</strong> qui contient des informations sur l'erreur. </li>
<li>À l'endroit où l'on souhaite gérer les erreurs survenues, on <span class="rouge"><strong>attrape</strong></span> l'objet et on gère l'erreur.</li>
</ul><br>
<br>
C'est un peu comme si vous étiez coincé sur une île déserte. Vous lanceriez une bouteille à la mer avec des informations dedans permettant de vous retrouver. Il n'y aurait alors plus qu'à espérer que quelqu'un attrape votre bouteille. Sinon vous mourrez de faim.<br>
C'est la même chose ici, on lance un objet en espérant qu'un autre bout de code le rattrapera, sinon le programme plantera.<br>
<br>
Dans le principe général, j'ai volontairement mis 3 mots en rouge. Ces 3 mots correspondent aux 3 <a href="http://www.siteduzero.com/forum-83-175473-p1-les-mots-clefs.html">mots-clés du C++</a> qui sont utilisés par le mécanisme des exceptions.<br>
<br>
<ul>
<li><span class="rouge"><strong>try{ ... }</strong></span>(<span class="italique">essaye</span> en français) permet de signaler une portion de code où une erreur peut survenir.</li>
<li><span class="rouge"><strong>throw</strong></span>(<span class="italique">lance</span> en français) permet de signaler l'erreur en lançant un objet.</li>
<li><span class="rouge"><strong>catch(...){...}</strong></span>(<span class="italique">attrape</span> en français) permet d'introduire la portion de code qui va récupérer l'objet et s'occuper de gérer l'erreur.</li>
</ul><br>
<br>
Voyons cela plus en détail.<br>
<br>
<h3>Les 3 mots-clés en détail</h3><br>
<br>
Commençons par <strong>try</strong>, il est très simple d'utilisation. Il permet d'introduire un bloc sensible aux exceptions. C'est-à-dire qu'on indique au compilateur qu'une certaine portion du code source pourrait lancer un objet (la bouteille à la mer). <br>
<br>
On l'utilise comme ceci :<br>
<span class="code">Code : C++ - Le mot-clé try - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="syntax"><pre><span class="c">// Du code sans risque.</span>
<span class="k">try</span><span class="p">{</span>
   <span class="c">// Du code qui pourrait créer une erreur.</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Entre les crochets du bloc try peut se trouver n'importe quelle instruction C++, notamment un autre bloc <strong>try</strong>.<br>
<br>
Le mot-clé <strong>throw</strong> est lui aussi très simple d'utilisation. C'est grâce à lui qu'on lance notre bouteille. La syntaxe est la suivante :<br>
<br>
<span class="courrier">throw expression</span><br>
<br>
On peut lancer n'importe quoi comme objet, par exemple un entier qui correspond au numéro de l'erreur ou une string contenant le texte de l'erreur. On verra plus loin un type d'objet particulièrement utile pour les erreurs. <br>
<br>
<span class="code">Code : C++ - Le mot-clé throw - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5</pre></td><td class="code"><div class="syntax"><pre><span class="k">throw</span> <span class="mi">123</span><span class="p">;</span>   <span class="c">// On lance l'entier 123, par exemple si l'erreur 123 est survenue.</span>
 
<span class="k">throw</span> <span class="n">string</span><span class="p">(</span><span class="s">"Erreur fatale. Contactez un administrateur"</span><span class="p">);</span> <span class="c">// On peut lancer une string.</span>
 
<span class="k">throw</span> <span class="n">Personnage</span><span class="p">;</span> <span class="c">// On peut tout à fait lancer une instance d'une classe.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information"><span class="courrier">throw</span> peut se trouver n'importe où dans le code, mais s'il n'est pas dans un bloc <span class="courrier">try</span>, l'erreur ne pourra pas être rattrapée et le programme plantera.</div><br>
<br>
Terminons avec le mot-clé <strong>catch</strong>. Il permet de créer un bloc de gestion d'une exception survenue. Il faut créer un bloc <strong>catch</strong> par type d'exception. Chaque bloc <strong>try</strong> doit obligatoirement être suivi d'un bloc <strong>catch</strong>. De manière réciproque, tout bloc catch doit être précédé d'un bloc <strong>try</strong> ou d'un autre bloc <strong>catch</strong>.<br>
<br>
La syntaxe est la suivante :<br>
<br>
<span class="courrier">catch (const type&amp; e){}</span><br>
<br>
<div class="rmq attention">On attrape les exceptions par référence constante (d'où la présence du &amp;) et pas par valeur, ceci afin d'éviter une copie et de conserver le polymorphisme de l'objet reçu. Souvenez-vous des ingrédients nécessaires au polymorphisme, une référence ou un pointeur sont nécessaires. Comme l'objet lancé pourrait avoir des fonctions virtuelles, on l'attrape <span class="italique">via</span> une référence de sorte que les deux ingrédients soient réunis.</div><br>
<br>
Ce qui donne par exemple :<br>
<br>
<span class="code">Code : C++ - Le mot-clé catch - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></td><td class="code"><div class="syntax"><pre><span class="k">try</span><span class="p">{</span>
    <span class="c">// Le bloc sensible aux erreurs.</span>
<span class="p">}</span>
<span class="k">catch</span><span class="p">(</span><span class="kt">int</span> <span class="n">e</span><span class="p">)</span>  <span class="c">// On rattrape les entiers lancés (pour les entiers, une référence n'a pas de sens).</span>
<span class="p">{</span>
   <span class="c">// On gère l'erreur.</span>
<span class="p">}</span>
<span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>  <span class="c">// On rattrape les strings lancés.</span>
<span class="p">{</span>
   <span class="c">// On gère l'erreur.</span>
<span class="p">}</span>
<span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">Personnage</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="c">// On rattrape les personnages.</span>
<span class="p">{</span>
   <span class="c">// On gère l'erreur.</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Vous pouvez mettre autant de blocs <span class="courrier">catch</span> que vous voulez. Il en faut au moins un par type d'exception pouvant être lancée.</div><br>
<br>
<div class="rmq question">Qu'est-ce que ça va changer durant l'exécution du programme ?</div><br>
<br>
À l'exécution, le programme va se dérouler normalement comme si les instructions <strong>try</strong> et les blocs <strong>catch</strong> n'étaient pas là. <br>
Par contre, au moment où l'ordinateur arrive sur une instruction <strong>throw</strong>, il va sauter toutes les instructions suivantes, appeler le destructeur de tous les objets déclarés à l'intérieur des fonctions appelées dans le bloc <strong>try</strong>. Il va chercher le bloc <strong>catch</strong> qui correspond à l'objet qui a été lancé.<br>
Arrivé au bloc <strong>catch</strong>, il va exécuter ce qui se trouve dans le bloc et reprendre l'exécution du programme <span class="souligne">après le bloc catch</span>.<br>
<br>
<div class="rmq attention">Je me répète, mais c'est une erreur courante. L'exécution reprend <span class="souligne">après le bloc catch</span> et pas à l'endroit où se trouve le throw.</div><br>
<br>
Le mieux pour comprendre le fonctionnement, est encore de reprendre l'exemple de la calculatrice et de la division par 0.<br>
<br>
<h3>La bonne solution</h3><br>
<br>
Reprenons donc notre fonction de calculatrice.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">division</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous savons qu'une erreur peut survenir si b vaut 0, il faut donc lancer une exception dans ce cas. J'ai choisi, arbitrairement, de lancer une chaîne de caractères. C'est un choix intéressant, puisque l'on peut ainsi décrire le problème survenu.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;string&gt;</span>

<span class="kt">int</span> <span class="n">division</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
<span class="ln-xtra"><span class="p">{</span></span>
    <span class="k">if</span><span class="p">(</span><span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
       <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">"ERREUR : Division par zéro !"</span><span class="p">);</span>
    <span class="k">else</span>
       <span class="k">return</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Souvenez-vous, un throw doit toujours se trouver dans un bloc try qui doit lui-même être suivi d'un bloc catch. Ce qui donne la structure suivante :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">division</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
<span class="ln-xtra">    <span class="k">try</span><span class="p">{</span></span>
        <span class="k">if</span><span class="p">(</span><span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
           <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">"Division par zéro !"</span><span class="p">);</span>
        <span class="k">else</span>
           <span class="k">return</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>
   <span class="p">}</span>
<span class="ln-xtra">   <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">chaine</span><span class="p">)</span></span>
   <span class="p">{</span>
       <span class="c">// On gère l'exception.</span>
   <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il ne reste plus alors qu'à gérer l'erreur, c'est-à-dire par exemple, afficher un message d'erreur.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">division</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">try</span><span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
           <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">"Division par zéro !"</span><span class="p">);</span>
        <span class="k">else</span>
           <span class="k">return</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">chaine</span><span class="p">)</span>
   <span class="p">{</span>
<span class="ln-xtra">       <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">chaine</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span></span>
   <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce qui donne le résultat suivant :<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Valeur&nbsp;pour&nbsp;a&nbsp;:&nbsp;3
Valeur&nbsp;pour&nbsp;b&nbsp;:&nbsp;0
ERREUR&nbsp;:&nbsp;Division&nbsp;par&nbsp;zéro&nbsp;!</pre></div></td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Plutôt que <strong>cout</strong>, on utilise dans le cas des erreurs le flux standard <strong>cerr</strong>. Il s'utilise exactement de la même manière que <strong>cout</strong>. On peut ainsi séparer les informations qui doivent s'afficher dans la console et les informations qui sont dues à des erreurs.</div><br>
<br>
Cette manière de faire est correcte. Cependant, cela ressemble un peu au mauvais exemple numéro 2 ci-dessus. En effet, la fonction peut potentiellement écrire dans la console alors que ce n'est pas son rôle. De plus le programme continue, alors qu'une erreur est survenue. Le mieux à faire serait alors de lancer l'exception dans la fonction et de récupérer l'erreur, si elle se produit, dans le main. De cette manière, celui qui appelle la fonction a conscience qu'une erreur s'est produite.<br>
<br>
<span class="code">Code : C++ - La meilleure solution - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">division</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="c">// Calcule a divisé par b.</span>
<span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
      <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">"ERREUR : Division par zéro !"</span><span class="p">);</span>
   <span class="k">else</span>
      <span class="k">return</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Valeur pour a : "</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">flush</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Valeur pour b : "</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">flush</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
 
   <span class="k">try</span><span class="p">{</span>
       <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="s">" / "</span><span class="o">&lt;&lt;</span><span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="s">" = "</span> <span class="o">&lt;&lt;</span> <span class="n">division</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">chaine</span><span class="p">)</span>
   <span class="p">{</span>
       <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">chaine</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
   <span class="p">}</span>
 
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous pouvez remarquer que le <span class="courrier">throw</span> ne se trouve pas directement à l'intérieur du bloc <span class="courrier">try{}</span>, mais qu'il se trouve à l'intérieur d'une fonction qui est appelée, elle, dans un bloc <span class="courrier">try{}</span>.<br>
<br>
<div class="rmq information">Le <span class="courrier">else</span> dans la fonction division n'est pas nécessaire puisque si l'exception est levée, le reste du code jusqu'au catch n'est pas exécuté.</div><br>
<br>
Cette fois, le programme ne plante plus et la fonction n'a plus d'effet de bord. C'est la meilleure solution.<br>
<br>
<div class="rmq information">Dans le cas d'une calculatrice, le fait de lever une exception peut se justifier, parce qu'il s'agit réellement d'une erreur de l'utilisateur. Mais ceci n'est pas toujours le cas. Imaginons par exemple que vous ayez créé une fonction calculant l'inverse d'une matrice en effectuant (entre autres) une division par le déterminant. Si le déterminant est nul, on aura donc une erreur. Cependant, une matrice dont le déterminant est nul n'est pas inversible. C'est donc une erreur d'algorithme et pas de « calcul », puisque le calcul de l'inverse de la matrice n'aurait pas dû être commencé. L'utilisation d'une exception dans ce cas ne serait donc pas justifiée. On préférerait une assertion.  </div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_35676">Les exceptions standards</h2>
		<div class="ss_part_texte">
		Maintenant que l'on sait gérer les exceptions, la question principale est de savoir quel type d'objet lancer.<br>
<br>
Je vous ai présenté avant la possibilité de lancer des exceptions de type entier ou string. Il est également possible de lancer une structure par exemple qui contiendrait plusieurs informations comme :<br>
<br>
<ul>
<li>Une phrase décrivant l'erreur.</li>
<li>Le numéro de l'erreur.</li>
<li>Le niveau de l'erreur (erreur fatale, erreur mineure...).</li>
<li>L'heure à laquelle l'erreur est survenue.</li>
<li>...</li>
</ul><br>
<br>
Un bon moyen de réaliser ceci est de dériver la classe <span class="courrier">exception</span> de la bibliothèque standard du C++. <br>
<br>
<div class="rmq information">On parle d'exception et pas d'erreur, puisque si on la traite, ce n'est plus une erreur. <img src="./cpp2_files/smile.png" alt=":)" class="smilies"></div><br>
<br>
<h3>La classe std::exception</h3><br>
<br>
La classe <span class="courrier">exception</span> est la classe de base de toutes les exceptions lancées par la bibliothèque standard. Elle est aussi spécialement pensée pour qu'on puisse la dériver afin de réaliser notre propre type d'exception. La définition de cette classe est :<br>
<br>
<span class="code">Code : C++ - La classe std::exception - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">exception</span> 
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">exception</span><span class="p">()</span> <span class="k">throw</span><span class="p">(){</span> <span class="p">}</span>            <span class="c">// Constructeur.</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">exception</span><span class="p">()</span> <span class="k">throw</span><span class="p">();</span>     <span class="c">// Destructeur.</span>
 
    <span class="k">virtual</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">what</span><span class="p">()</span> <span class="k">const</span> <span class="k">throw</span><span class="p">();</span>  <span class="c">// Renvoie une chaîne "à la C" contenant des infos sur l'erreur.</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour l'utiliser, il faut inclure le header correspondant, soit ici le fichier exception. Comme tous les autres composants de la bibliothèque standard, cette classe se trouve dans l'espace de nom <span class="courrier">std</span>. <br>
<br>
<div class="rmq information">Vous pouvez remarquer que la classe possède des fonctions virtuelles et donc également un destructeur virtuel. C'est un bon exemple de polymorphisme.</div><br>
<br>
<div class="rmq information">La signification des throw() à la fin des prototypes des fonctions membres sera expliquée plus loin. Sachez simplement pour l'instant qu'il faut les mettre quand vous écrivez une classe fille. </div><br>
<br>
On peut alors créer sa propre classe d'exception en la dérivant. Ce qui donnerait par exemple :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;exception&gt;</span>
 
<span class="k">class</span> <span class="nc">Erreur</span><span class="o">:</span> <span class="k">public</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">Erreur</span><span class="p">(</span><span class="kt">int</span> <span class="n">numero</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">phrase</span><span class="o">=</span><span class="s">""</span><span class="p">,</span> <span class="kt">int</span> <span class="n">niveau</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span>
         <span class="o">:</span><span class="n">m_numero</span><span class="p">(</span><span class="n">numero</span><span class="p">),</span><span class="n">m_phrase</span><span class="p">(</span><span class="n">phrase</span><span class="p">),</span><span class="n">m_niveau</span><span class="p">(</span><span class="n">niveau</span><span class="p">)</span>
    <span class="p">{}</span>
 
     <span class="k">virtual</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">what</span><span class="p">()</span> <span class="k">const</span> <span class="k">throw</span><span class="p">()</span>
     <span class="p">{</span>
         <span class="k">return</span> <span class="n">m_phrase</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
     <span class="p">}</span>
     
     <span class="kt">int</span> <span class="n">getNiveau</span><span class="p">()</span> <span class="k">const</span> <span class="k">throw</span><span class="p">()</span>
     <span class="p">{</span>
          <span class="k">return</span> <span class="n">m_niveau</span><span class="p">;</span>
     <span class="p">}</span>
    
    <span class="k">virtual</span> <span class="o">~</span><span class="n">Erreur</span><span class="p">()</span> <span class="k">throw</span><span class="p">()</span>
    <span class="p">{}</span>
 
<span class="k">private</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">m_numero</span><span class="p">;</span>               <span class="c">// Numéro de l'erreur.</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_phrase</span><span class="p">;</span>       <span class="c">// Description de l'erreur.</span>
    <span class="kt">int</span> <span class="n">m_niveau</span><span class="p">;</span>               <span class="c">// Niveau de l'erreur.</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On pourrait alors réécrire notre fonction de division de 2 entiers de la manière suivante :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">division</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="c">// Calcule a divisé par b.</span>
<span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
<span class="ln-xtra">      <span class="k">throw</span> <span class="n">Erreur</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s">"Division par zéro"</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span></span>
   <span class="k">else</span>
      <span class="k">return</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Valeur pour a : "</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">flush</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Valeur pour b : "</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">flush</span><span class="p">;</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
 
   <span class="k">try</span><span class="p">{</span>
       <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="s">" / "</span> <span class="o">&lt;&lt;</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="s">" = "</span> <span class="o">&lt;&lt;</span> <span class="n">division</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
   <span class="p">}</span>
<span class="ln-xtra">   <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span></span>
   <span class="p">{</span>
<span class="ln-xtra">       <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"ERREUR : "</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span></span>
   <span class="p">}</span>
 
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce qui donne à l'exécution :<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Valeur&nbsp;pour&nbsp;a&nbsp;:&nbsp;3
Valeur&nbsp;pour&nbsp;b&nbsp;:&nbsp;0
ERREUR&nbsp;:&nbsp;Division&nbsp;par&nbsp;zéro</pre></div></td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Quel est l'intérêt de dériver la classe std::exception, alors qu'on pourrait faire sa propre classe sans aucun héritage ?</div><br>
Excellente question. Il faut savoir que vous n'êtes pas le seul à lancer des exceptions. Certaines fonctions standards lancent elles aussi des exceptions. Toutes les exceptions lancées par les fonctions standards dérivent de la classe <span class="courrier">exception</span>, ce qui permet avec un code générique de rattraper toutes les erreurs qui pourraient potentiellement arriver. Ce code générique est le suivant :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="syntax"><pre><span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"ERREUR : "</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div> <br>
<br>
Ceci est possible grâce au polymorphisme. On attrape un objet de type <span class="courrier">std::exception</span>, mais grâce aux fonctions virtuelles et à la référence (les deux ingrédients), c'est la fonction <span class="violet">what()</span> de la classe fille qui sera appelée, ce qui est justement ce que l'on souhaite. <img src="./cpp2_files/smile.png" alt=":)" class="smilies"> <br>
<br>
La bibliothèque standard peut lancer 5 types d'exceptions différents résumés dans le tableau suivant :<br>
<br>
<table class="tab_user">    






<thead><tr><th>Nom de la classe</th><th>Description</th></tr></thead><tbody><tr>        
<td><span class="courrier">bad_alloc</span></td>        
<td>Lancée s'il se produit une erreur lors d'un <strong>new</strong>.</td>    
</tr><tr>        
<td><span class="courrier">bad_cast</span></td>        
<td>Lancée s'il se produit une erreur lors d'un <strong>dynamic_cast</strong>. (On verra plus tard ce que c'est)</td>    
</tr><tr>        
<td><span class="courrier">bad_exception</span></td>        
<td>Lancée si aucun catch ne correspond à un objet lancé.</td>    
</tr><tr>        
<td><span class="courrier">bad_typeid</span></td>        
<td>Lancée s'il se produit une erreur lors d'un <strong>typeid</strong>. (On verra plus tard ce que c'est)</td>    
</tr><tr>        
<td><span class="courrier">ios_base::failure</span></td>        
<td>Lancée s'il se produit une erreur avec un flux.</td>    
</tr></tbody></table><br>
<br>
On peut par exemple observer un exemple de<span class="courrier"> bad_alloc</span> avec le code suivant :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;iostream&gt;</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="k">try</span><span class="p">{</span>
    <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">1000000000</span><span class="p">];</span>   <span class="c">// On alloue un tableau bien trop grand ce qui va causer une erreur.</span>
  <span class="p">}</span>
  <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>          <span class="c">// On rattrape les exceptions standards de tous types.</span>
    <span class="p">{</span>
      <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"ERREUR : "</span><span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>   <span class="c">// On affiche la description de l'erreur.</span>
    <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce qui donne le résultat suivant dans la console :<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>ERREUR&nbsp;:&nbsp;std::bad_alloc</pre></div></td></tr></tbody></table></div><br>
<br>
Qui montre bien qu'une exception de type bad_alloc a eu lieu.<br>
<br>
<div class="rmq information">Si l'on avait attrapé l'exception par valeur et pas par référence (c'est-à-dire sans le &amp;), le message aurait été « std::exception », car le polymorphisme n'est pas conservé. C'est pour cela que l'on attrape toujours les exceptions par référence. C'est fort quand même ce polymorphisme !  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> </div><br>
<br>
<h3>Le travail prémâché</h3><br>
<br>
Si comme moi (et beaucoup de programmeurs  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> ) vous êtes un fainéant et que vous n'avez pas envie de créer votre propre classe d'exception, sachez qu'il existe un fichier standard qui contient des classes d'exception pour les cas les plus courants.<br>
Le fichier <span class="code2 cpp"><span class="n">stdexcept</span>
</span> contient 9 classes d'exceptions séparées en 2 catégories, les exceptions « logiques » (<span class="italique">logic errors</span> en anglais) et les exceptions « d'exécution » (<span class="italique">runtime errors </span>en anglais).<br>
<br>
Toutes les exceptions présentées dérivent de la classe std::exception et possèdent un constructeur prenant en argument une chaîne de caractère permettant de décrire le problème.<br>
<br>
<table class="tab_user">    










<thead><tr><th>Nom de la classe</th><th>Catégorie</th><th>Description</th></tr></thead><tbody><tr>        
<td><span class="courrier">domain_error</span></td>        
<td>logique</td>
<td>Lancée s'il se produit une erreur de domaine mathématique.</td>    
</tr><tr>        
<td><span class="courrier">invalid_argument</span></td>        
<td>logique</td>
<td>Lancée si un des arguments d'une fonction est invalide.</td>    
</tr><tr>        
<td><span class="courrier">length_error</span></td>        
<td>logique</td>
<td>Lancée si un objet aura une taille invalide. Par exemple si la classe Pile vue précédemment a une taille dépassant la taille de la mémoire.</td>    
</tr><tr>        
<td><span class="courrier">out_of_range</span></td>    
<td>logique</td>    
<td>Lancée s'il y a une erreur avec un indice. Par exemple si on essaye d'accéder à une case inexistante d'un tableau.</td>    
</tr><tr>        
<td><span class="courrier">logic_error</span></td>    
<td>logique</td>    
<td>Lancée lors de n'importe quel autre problème de logique du programme.</td>    
</tr><tr>        
<td><span class="courrier">range_error</span></td>    
<td>exécution</td>    
<td>Lancée lors d'une erreur de domaine à l'exécution.</td>    
</tr><tr>        
<td><span class="courrier">overflow_error</span></td>    
<td>exécution</td>    
<td>Lancée s'il y a une erreur d'<a href="http://fr.wikipedia.org/wiki/Integer_overflow">overflow</a>.</td>    
</tr><tr>        
<td><span class="courrier">underflow_error</span></td>    
<td>exécution</td>    
<td>Lancée s'il y a une erreur d'underflow.</td>    
</tr><tr>        
<td><span class="courrier">runtime_error</span></td>    
<td>exécution</td>    
<td>Lancée pour tout autre type d'erreur non-prévue survenant à l'exécution.</td>    
</tr></tbody></table><br>
<br>
Si vous ne savez pas quoi choisir, prenez simplement <span class="courrier">runtime_error</span>, cela n'a de toute façon que peu d'importance.<br>
<br>
<div class="rmq question">Et comment on les utilise ?</div><br>
<br>
Reprenons une dernière fois notre exemple de division. Nous avons une erreur de domaine mathématique si l'argument <strong>b</strong> est nul. Choisissons donc de lancer une <span class="courrier">domain_error</span>.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">division</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="c">// Calcule a divisé par b.</span>
<span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
      <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">domain_error</span><span class="p">(</span><span class="s">"Division par zéro"</span><span class="p">);</span>
   <span class="k">else</span>
      <span class="k">return</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">On aurait très bien pu choisir une <span class="courrier">argument_error</span> ou encore une <span class="courrier">runtime_error</span>. Cela n'a que peu d'importance puisqu'en général on attrape toujours les exceptions par la méthode indiquée plus haut.</div><br>
<br>
J'en ai terminé ici avec la présentation générale des exceptions. La dernière sous-partie présente quelques notions plus avancées sur celles-ci.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_35675">Notions avancées</h2>
		<div class="ss_part_texte">
		Le but de cette 4<sup>e</sup> partie est de présenter quelques notions plus avancées sur le sujet.<br>
<br>
<h3>Rattraper plusieurs types d'exceptions dans un seul catch</h3><br>
<br>
Il est possible de rattraper plusieurs types d'exceptions avec un seul catch en utilisant les ... comme argument du catch. <br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">catch</span><span class="p">(...)</span> <span class="c1">// Rattrape toutes les exceptions</span>
<span class="p">{</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On peut ainsi rattraper toutes les exceptions lancées quel que soit le type de l'objet lancé. On n'a par contre aucun moyen de les distinguer, c'est pour cela qu'on préfère utiliser des exceptions dérivées de std::exception qui auront au moins un point commun, la fonction membre what().<br>
<br>
<div class="rmq attention">On ne devrait jamais avoir recours à ce genre de choses en C++.</div><br>
<br>
Il n'existe pas en C++ d'équivalent exact à l'instruction <span class="courrier">finally</span> qui existe dans d'autres langages comme JAVA, par exemple. Le <span class="courrier">catch(...)</span> est celui qui s'en approche le plus. <span class="courrier">finally</span> n'est pas un concept du langage, il vaudrait donc mieux utiliser des concepts C++ plutôt que vouloir à tout prix traduire un programme d'un langage dans un autre. En C++, on a l'idiome <acronym title="Resource Acquisition Is Initialisation">RAII</acronym> (quelques explications <a href="http://arb.developpez.com/c%2B%2B/raii/shared_ptr/#LIV">ici</a>) qui permet d'éviter de recourir à l'instruction <span class="courrier">finally</span>. C'est la bonne manière de faire en C++. Ceci étant un vaste sujet, pouvant devenir rapidement complexe, je vous propose de consulter <a href="http://cpp.developpez.com/faq/cpp/?page=pointeurs#POINTEURS_raii">ce lien</a> pour plus de détails.<br>
<br>
<h3>Relancer une exception</h3><br>
<br>
Il est possible de relancer une exception reçue par un bloc catch afin de la retraiter une deuxième fois plus loin dans le code. Pour ce faire, il faut utiliser le mot-clé throw sans expression derrière.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="c1">// Rattrape toutes les exceptions</span>
<span class="p">{</span>
   <span class="c1">//On traite une première fois l'exception</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"ERREUR: "</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
 
   <span class="k">throw</span><span class="p">;</span> <span class="c1">// Et on relance l'exception reçue pour la retraiter </span>
          <span class="c1">// dans un autre bloc catch plus loin dans le code.</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Indiquer qu'une fonction peut lancer une exception</h3><br>
<br>
Dans l'exemple de la fonction division, il y a un throw dans la fonction mais pas de try. Or, tous les throw doivent toujours se trouver dans un bloc try. <br>
Il faudrait donc un moyen d'indiquer à l'utilisateur d'une classe ou d'une fonction que la fonction qu'il désire utiliser pourrait potentiellement lancer une exception. Il pourra ainsi mettre en place les blocs try et catch nécessaires. <br>
<br>
Cela se fait en ajoutant un suffixe au prototype de la fonction.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">fonction1</span><span class="p">()</span> <span class="k">throw</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>  <span class="c1">// Une fonction qui pourrait lancer un int et uniquement un int.</span>
 
<span class="kt">void</span> <span class="n">fonction2</span><span class="p">()</span> <span class="k">throw</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span><span class="kt">double</span><span class="p">);</span>  <span class="c1">// Une fonction qui pourrait lancer un int</span>
                                     <span class="c1">// ou un double et rien d'autre.</span>
 
<span class="kt">void</span> <span class="n">fonction3</span><span class="p">()</span> <span class="k">throw</span><span class="p">();</span>  <span class="c1">// Une fonction qui ne lance rien.</span>
 
<span class="kt">void</span> <span class="n">fonction4</span><span class="p">();</span>      <span class="c1">// Une fonction qui peut lancer n'importe quel type d'exception..</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous comprenez maintenant ce qu'étaient les <strong>throw()</strong> qui se trouvaient dans la classe <strong>std::exception</strong>. Il est en effet bien qu'une classe d'exception ne cause pas elle-même d'erreur...  <img src="./cpp2_files/clin.png" alt=";)" class="smilies"> <br>
<br>
Les spécifications d'exception sont cependant rarement utilisées. En effet, les tests pour vérifier quel type d'exception est lancé sont faits lors de l'exécution et <span class="souligne">pas</span> à la compilation (le langage est trop complexe pour que le compilateur puisse faire ces vérifications). Ce qui veut dire qu'il y a une (très légère) perte de performance. De plus cela fera planter le programme si le mauvais type d'exception est tout de même levé.<br>
Puisque le seul but est donc d'indiquer aux utilisateurs des fonctions qu'elles peuvent lancer des exceptions, les programmeurs ont l'habitude de mettre un commentaire à la place ainsi qu'une explication dans la documentation à la place.<br>
<br>
<div class="rmq information">Si votre fonction est également constante (dans le cas d'une classe), le suffixe throw(..) se place après le mot-clé const. <br>
<span class="courrier">void MaClasse::fonction() const throw();</span><br>
Si en plus elle est virtuelle pure  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> , la syntaxe est :<br>
<span class="courrier">virtual void MaClasse::fonction() const throw() = 0;</span></div><br>
<br>
<h3>Gérer une exception dans un constructeur</h3><br>
<br>
C'est la seule manière d'indiquer que la construction de l'objet a échoué. Si une exception est levée dans un constructeur, le destructeur n'est pas appelé (puisque l'objet n'est pas construit, on ne peut pas le détruire  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> ), il faut donc libérer la mémoire allouée <span class="italique">via</span> des <span class="courrier">delete</span> dans le catch. <br>
Cela donne par exemple :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">MaClasse</span><span class="p">{</span>
 
<span class="k">private</span><span class="o">:</span>
 
   <span class="kt">int</span><span class="o">*</span> <span class="n">m_tableau1</span><span class="p">;</span>   <span class="c1">// MaClasse possède deux tableaux dynamiques alloués via new.</span>
   <span class="kt">int</span><span class="o">*</span> <span class="n">m_tableau2</span><span class="p">;</span>
 
<span class="k">public</span><span class="o">:</span>
 
   <span class="n">MaClasse</span><span class="p">()</span>
    <span class="o">:</span><span class="n">m_tableau1</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="n">m_tableau2</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
   <span class="p">{</span>
       <span class="k">try</span><span class="p">{</span>
           <span class="n">m_tableau1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>   <span class="c1">// On alloue le tableau, mais cela peut échouer.</span>
           <span class="n">m_tableau2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>   <span class="c1">// Idem.</span>
       <span class="p">}</span>
       <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>  
       <span class="p">{</span>
           <span class="c1">// Si on arrive ici c'est qu'il y a une erreur d'allocation.</span>
           <span class="c1">// On doit donc libérer la mémoire.</span>
           <span class="k">delete</span><span class="p">[]</span> <span class="n">m_tableau1</span><span class="p">;</span>
 
           <span class="c1">// On relance alors l'exception pour indiquer qu'une erreur est survenue.</span>
           <span class="k">throw</span><span class="p">;</span>
       <span class="p">}</span>
    <span class="p">}</span>
 
    <span class="o">~</span><span class="n">MaClasse</span><span class="p">()</span>
    <span class="p">{</span>
       <span class="k">delete</span><span class="p">[]</span> <span class="n">m_tableau1</span><span class="p">;</span>
       <span class="k">delete</span><span class="p">[]</span> <span class="n">m_tableau2</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
S'il n'y a pas d'allocation dynamique dans un constructeur, il n'y a pas besoin d'attraper l'exception à l'intérieur même du constructeur. <br>
<br>
<div class="rmq information">Si on avait utilisé un vector&lt;int&gt; ici, on n'aurait pas eu ce problème, puisque le vector s'ocuppe tout seul de la mémoire dont il a besoin. C'est un argument important en faveur de l'utilisation des vector.</div><br>
<br>
Vous remarquerez que seul le premier tableau est détruit dans le catch. En effet, si une exception a été levée, c'est que soit le premier soit le deuxième tableau n'a pu être créé. Dans ces deux cas, le deuxième tableau n'est pas construit, il ne sert donc à rien de le détruire.<br>
<br>
<div class="rmq erreur">Il ne faut jamais lever d'exception dans un destructeur. Une des raisons est la suivante : que faire si la destruction d'un objet rate ? Reconstruire l'objet ? Ça n'a pas de sens puisqu'on veut le détruire. Cette question n'a pas de réponse satisfaisante.</div><br>
<br>
<h3>Les exceptions non rattrapées</h3><br>
<br>
Si une exception n'a pas de catch correspondant, le programme va remonter toutes les fonctions appelées jusqu'à arriver à la fonction main. Si à ce moment-là, il n'y a toujours pas de bloc catch, l'ordinateur va appeler la fonction std::terminate().<br>
Cette fonction crée un arrêt brutal du programme. On peut l'essayer avec le code suivant :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;exception&gt;</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">terminate</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce code produit l'affichage suivant (sous Linux avec GCC 4.1.3) :<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>terminate&nbsp;called&nbsp;without&nbsp;an&nbsp;active&nbsp;exception
Abandon&nbsp;(core&nbsp;dumped)</pre></div></td></tr></tbody></table></div><br>
<br>
Si vous voulez changer la fonction appelée en cas d'exception non attrapée, vous pouvez utilisez la fonction <span class="courrier">set_terminate</span> définie dans le fichier exception. Par exemple :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;exception&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
 
<span class="kt">void</span> <span class="n">fin</span><span class="p">()</span>
<span class="p">{</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Erreur fatale. Contactez un administrateur."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="n">std</span><span class="o">::</span><span class="n">set_terminate</span><span class="p">(</span><span class="n">fin</span><span class="p">);</span>   <span class="c1">// On change la fonction de terminaison.</span>
   <span class="n">std</span><span class="o">::</span><span class="n">terminate</span><span class="p">();</span>          <span class="c1">// Et on termine le programme.</span>
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce qui produit le résultat suivant (sous Linux avec GCC 4.1.3) :<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Erreur&nbsp;fatale.&nbsp;Contactez&nbsp;un&nbsp;administrateur.
Abandon&nbsp;(core&nbsp;dumped)</pre></div></td></tr></tbody></table></div><br>
<br>
<div class="rmq erreur">On ne devrait jamais appeler explicitement la fonction terminate. Je l'ai fait ici pour vous montrer ce qui se passe.</div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Armés de ces nouveaux outils, vous êtes maintenant aptes à créer des projets plus robustes et à gérer les évènements inattendus qui pourraient surgir durant l'exécution de vos futurs programmes.<br>
<br>
Le prochain chapitre fera un petit (très petit  <img src="./cpp2_files/clin.png" alt=";)" class="smilies"> ) détour par le C pour vous apprendre la notion de <span class="italique">pointeur de fonctions</span>.
	</div>
	
	<hr>
	<h1 id="chap_178617">Les pointeurs sur fonctions</h1>
	<div id="chap_intro">
	Si vous vous souvenez de votre début en C, un des premiers passages délicats a sûrement été celui de l'utilisation des pointeurs. Car la notion n'est pas toujours très intuitive. En C++, les pointeurs ont perdu un peu de leur utilité suite à l'introduction des références. Cependant, il est un domaine où les pointeurs sont irremplaçables, ce sont les pointeurs sur des fonctions.<br>
<br>
Dans ce chapitre, je vais vous apprendre à créer et à utiliser des pointeurs sur des fonctions. Dans une deuxième partie, je vous montrerai quelles difficultés apparaissent quand on utilise des classes.  <img src="./cpp2_files/triste.png" alt=":(" class="smilies"> <br>
<br>
Dans le C++ moderne, les pointeurs de fonctions sont de moins en moins utilisés au profit des <span class="italique">foncteurs</span> (que nous verrons plus tard) mais comme de nombreuses bibliothèques venues du C utilisent des pointeurs de fonctions, il est nécessaire de savoir les utiliser.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_178619">Choisir une fonction</h2>
		<div class="ss_part_texte">
		Pour vous présenter concrètement l'utilité des pointeurs sur fonctions, je vais passer par un exemple.<br>
<br>
<h3>Le minimum d'une fonction</h3><br>
<br>
Imaginons que vous ayez envie d'écrire une fonction (informatique) permettant de calculer le minimum d'une fonction (mathématique) <img src="./cpp2_files/mimetex(1).cgi" alt="f(x)"> donnée sur un intervalle <img src="./cpp2_files/mimetex(2).cgi" alt="[a;b]">. C'est une fonctionnalité proposée par les calculatrices scientifiques un peu avancées, il est donc tout à fait légitime d'essayer d'implémenter ce genre de choses. Si l'on ne connaît pas les pointeurs sur une fonction, on serait tenté d'écrire quelque chose comme ceci:<br>
<br>
<span class="code">Code : C++ - Minimum d'une fonction - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;cmath&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="c1">//Liste des fonctions "calculables"</span>
 
<span class="c1">//double f(double x) { return x*x;}  </span>
<span class="kt">double</span> <span class="n">f</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="o">/</span><span class="n">x</span><span class="p">;}</span>
<span class="c1">//double f(double x) { return sqrt(x);}</span>
<span class="c1">//double f(double x) { return exp(x);}</span>
<span class="c1">//...</span>
 
 
<span class="kt">double</span> <span class="n">minimum</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span><span class="kt">double</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
   <span class="kt">double</span> <span class="n">min</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span>
 
   <span class="k">for</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="o">=</span><span class="n">a</span><span class="p">;</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">b</span><span class="p">;</span> <span class="n">x</span><span class="o">+=</span> <span class="mf">0.01</span><span class="p">)</span>  <span class="c1">//On parcourt l'intervalle</span>
     <span class="n">min</span> <span class="o">=</span> <span class="n">min</span><span class="o">&lt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">?</span> <span class="n">min</span> <span class="o">:</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>  <span class="c1">//Et si la nouvelle valeur est plus petite que l'ancienne</span>
                                   <span class="c1">//On la garde</span>
   <span class="k">return</span> <span class="n">min</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="c1">//..</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">L'algorithme de calcul du minimum n'est pas bien malin, mais ce n'est pas ce qui nous préoccupe ici.</div><br>
<br>
Chaque fois que l'on voudrait calculer le minimum d'une autre fonction, il faudrait dé-commenter la ligne concernée et recompiler le programme. Ceci n'est évidemment pas satisfaisant, il serait beaucoup mieux de pouvoir passer un argument à la fonction permettant de savoir de quelle fonction <img src="./cpp2_files/mimetex(1).cgi" alt="f(x)">, elle doit chercher le minimum.<br>
<br>
<h3>Utiliser un type énuméré ?</h3><br>
<br>
Il faudrait donc transmettre un élément supplémentaire à la fonction <span class="courrier">minimum</span>. La meilleure chose à transmettre serait donc une sorte d'indice unique et la fonction pourra ainsi savoir quelle fonction mathématique utiliser. Une solution intelligente consisterait à utiliser un type énuméré et à placer un switch dans la fonction <span class="courrier">minimum</span>, par exemple:<br>
<br>
<span class="code">Code : C++ - Type énuméré - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></div></td><td class="code"><div class="syntax"><pre><span class="c1">//Type énuméré représentant les fonctions calculables</span>
<span class="ln-xtra"><span class="k">enum</span> <span class="n">Fonctions</span><span class="p">{</span><span class="n">CARRE</span><span class="p">,</span><span class="n">INVERSE</span><span class="p">,</span><span class="n">RACINE</span><span class="p">,</span><span class="n">EXPONENTIELLE</span><span class="p">};</span></span>
 
<span class="c1">//Liste des fonctions "calculables"</span>
 
<span class="kt">double</span> <span class="n">carre</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="p">;}</span>  
<span class="kt">double</span> <span class="n">inverse</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="o">/</span><span class="n">x</span><span class="p">;}</span>
<span class="kt">double</span> <span class="n">racine</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="p">);}</span>
<span class="kt">double</span> <span class="n">exponentielle</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);}</span>
 
<span class="ln-xtra"><span class="kt">double</span> <span class="n">minimum</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span><span class="kt">double</span> <span class="n">b</span><span class="p">,</span><span class="n">Fonctions</span> <span class="n">fonction_choisie</span><span class="p">)</span></span>
<span class="p">{</span>
<span class="ln-xtra">   <span class="kt">double</span> <span class="n">min</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span></span>
 
    <span class="k">switch</span><span class="p">(</span><span class="n">fonction_choisie</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="k">case</span> <span class="nl">CARRE:</span>
          <span class="k">for</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="o">=</span><span class="n">a</span><span class="p">;</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">b</span><span class="p">;</span> <span class="n">x</span><span class="o">+=</span> <span class="mf">0.01</span><span class="p">)</span>  <span class="c1">//On parcourt l'intervalle</span>
             <span class="n">min</span> <span class="o">=</span> <span class="n">min</span><span class="o">&lt;</span> <span class="n">carre</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">?</span> <span class="n">min</span> <span class="o">:</span> <span class="n">carre</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
          <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="nl">INVERSE:</span>
         <span class="k">for</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="o">=</span><span class="n">a</span><span class="p">;</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">b</span><span class="p">;</span> <span class="n">x</span><span class="o">+=</span> <span class="mf">0.01</span><span class="p">)</span>  <span class="c1">//On parcourt l'intervalle</span>
             <span class="n">min</span> <span class="o">=</span> <span class="n">min</span><span class="o">&lt;</span> <span class="n">inverse</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">?</span> <span class="n">min</span> <span class="o">:</span> <span class="n">inverse</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
         <span class="k">break</span><span class="p">;</span>
    <span class="c1">//...</span>
    <span class="p">};</span>
 
    <span class="k">return</span> <span class="n">min</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="c1">//..</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce code est mieux que le précédent, il n'y a plus besoin de recompiler à chaque fois que l'on veut changer la fonction à évaluer. Cependant, ce n'est toujours pas très pratique. Si l'on veut ajouter une nouvelle fonction, il faut modifier l'<span class="courrier">enum</span> et surtout, il faut modifier le code de la fonction <span class="courrier">minimum</span>, ce qui évidemment une très mauvaise chose. On ne devrait pas avoir à modifier la fonction <span class="courrier">minimum</span> à chaque fois qu'on ajoute une nouvelle fonction mathématique.<br>
<br>
La meilleure chose serait de pouvoir donner directement à <span class="courrier">minimum</span>, la fonction que l'on souhaite évaluer. Et si je vous en parle, c'est que c'est faisable (vous en doutiez ?  <img src="./cpp2_files/clin.png" alt=";)" class="smilies"> ) et même de manière élégante.<br>

		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_178616">Les pointeurs sur fonctions</h2>
		<div class="ss_part_texte">
		Comme une fonction n'est pas un objet ou une variable, il n'est pas possible de passer une fonction directement en argument à notre fonction <span class="courrier">minimum</span>. Par contre, comme toutes les choses présentes dans un programme C++, les fonctions ont une adresse. Il est donc possible de déclarer un pointeur vers cette adresse et de passer ce pointeur à la fonction <span class="courrier">minimum</span>.<br>
<br>
<h3>Déclarer un pointeur sur fonction</h3><br>
<br>
Bon puisque vous êtes encore là, allons-y, déclarons un pointeur sur une fonction. La syntaxe est la suivante:<br>
<br>
<span class="courrier"><span class="rouge">type_de_retour</span> (*<span class="vertf">monPointeur</span>) (<span class="bleu">type_argument_1,type_argument_2,...</span>)</span> <br>
<br>
Décortiquons les 3 parties de la déclaration:<br>
<br>
La première partie (<span class="rouge">en rouge</span>) indique le type de retour de la fonction pointée, cet élément fait donc partie du "type" d'une fonction. Le "type" d'une fonction n'est donc pas uniquement constitué de la signature de la fonction.<br>
<br>
La deuxième partie (<span class="vertf">en vert</span>) est le nom que vous souhaitez donner à votre pointeur. Les parenthèses sont nécessaires afin que le compilateur sache que l'étoile est liée au nom et pas au type de retour.<br>
<br>
La troisième partie (<span class="bleu">en bleu</span>) consiste en une liste des types des arguments que la fonction pointée doit recevoir.<br>
<br>
Maintenant que nous somme munis de ces quelques notions, déclarons quelques pointeurs:<br>
<br>
<span class="code">Code : C++ - Quelques pointeurs sur fonctions - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">pointeur_1</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
<span class="c1">// Déclaration d'un pointeur nommé "pointeur_1" qui pourra pointer</span>
<span class="c1">// sur des fonctions recevant un int et renvoyant un int.</span>
 
<span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">pointeur_2</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">double</span><span class="p">);</span>
<span class="c1">// Déclaration d'un pointeur nommé "pointeur_2" qui pourra pointer</span>
<span class="c1">// sur des fonctions recevant un int et un double et renvoyant un int.</span>
 
<span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">pointeur_3</span><span class="p">)(</span><span class="kt">double</span><span class="p">);</span>
<span class="c1">// Déclaration d'un pointeur nommé "pointeur_3" qui pourra pointer</span>
<span class="c1">// sur des fonctions recevant un double et ne renvoyant rien.</span>
 
<span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">pointeur_4</span><span class="p">)();</span>
<span class="c1">// Déclaration d'un pointeur nommé "pointeur_4" qui pourra pointer</span>
<span class="c1">// sur des fonctions ne recevant rien et ne renvoyant rien non plus.</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention"><span class="courrier">int (*ptr)(int,double)</span> n'est pas équivalent à <span class="courrier">int (*ptr)(double,int)</span>, l'ordre des arguments joue un rôle. De même <span class="courrier">void (*ptr)(double)</span> n'est pas équivalent à <span class="courrier">void (*ptr)(int)</span>, même si les transformations de <span class="courrier">int</span> en <span class="courrier">double</span> sont automatiques.</div><br>
<br>
<div class="rmq information">Un pointeur sur fonction est un type comme un autre. Vous pouvez donc tout à fait créer un tableau de pointeurs sur fonctions, un std::vector&lt;&gt; de pointeurs sur fonctions ou même un pointeur sur pointeur de fonction.</div><br>
<br>
Bon c'est bien joli tout ça, mais notre pointeur pour le moment ne pointe sur rien (ou en tout cas pas sur une fonction que vous avez créée), voyons donc comment l'affecter.<br>
<br>
<h3>Affecter un pointeur sur fonction</h3><br>
<br>
Comme on parle de <span class="souligne">pointeurs</span> sur fonctions, vous pourriez tout à fait vous dire que c'est très facile de l'affecter, il suffit de récupérer l'adresse mémoire d'une fonction et de la mettre dans le pointeur. Et vous auriez tout à fait raison ! Il est tout à fait possible d'utiliser l'opérateur <span class="rouge"><strong>&amp;</strong></span> pour récupérer l'adresse d'une fonction. Par exemple :<br>
<br>
<span class="code">Code : C++ - Affectation d'un pointeur - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;string&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="kt">int</span> <span class="n">fonction</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span><span class="n">string</span> <span class="n">phrase</span><span class="p">)</span>  <span class="c1">//Une jolie fonction</span>
<span class="p">{</span> 
    <span class="c1">//blablabla</span>
<span class="p">}</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">monPointeur</span><span class="p">)(</span><span class="kt">double</span><span class="p">,</span><span class="n">string</span><span class="p">);</span>   <span class="c1">//On déclare un pointeur sur fonction</span>
 
   <span class="n">monPointeur</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">fonction</span><span class="p">;</span>   <span class="c1">//Et on le fait pointer sur "fonction"</span>
 
   <span class="c1">//...</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce code est tout à fait correct, cependant les créateurs du C++ ont voulu simplifier ceci et ont décidé qu'il n'était pas nécessaire d'utiliser l'opérateur <span class="rouge"><strong>&amp;</strong></span>. Le code suivant revient donc au même:<br>
<br>
<span class="code">Code : C++ - Affectation d'un pointeur par la bonne méthode - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;string&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="kt">int</span> <span class="n">fonction</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span><span class="n">string</span> <span class="n">phrase</span><span class="p">)</span>  <span class="c1">//Une jolie fonction</span>
<span class="p">{</span> 
    <span class="c1">//blablabla</span>
<span class="p">}</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">monPointeur</span><span class="p">)(</span><span class="kt">double</span><span class="p">,</span><span class="n">string</span><span class="p">);</span>   <span class="c1">//On déclare un pointeur sur fonction</span>
 
   <span class="n">monPointeur</span> <span class="o">=</span> <span class="n">fonction</span><span class="p">;</span>   <span class="c1">//Et on le fait pointer sur "fonction"</span>
   <span class="c1">// Notez l'absence du '&amp;' !!</span>
 
   <span class="c1">//...</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et c'est cette dernière méthode qui est utilisée par tous les programmeurs. Il n'est pas faux d'utiliser le <span class="rouge"><strong>&amp;</strong></span>, mais personne ne le fait. Puisque la notation est assez explicite sans, il n'est pas nécessaire pour le compilateur et pour les programmeurs d'ajouter le &amp;.<br>
<br>
<div class="rmq information">Il est tout à fait possible d'affecter un pointeur directement à l'initialisation. Le code serait alors: <br>
<span class="courrier">void (*pointeur)(int) = fonction;</span></div><br>
<br>
<h3>Utiliser la fonction pointée</h3><br>
<br>
A nouveau, comme l'on parle de <span class="souligne">pointeurs</span>, vous pouvez vous douter que l'on va utiliser l'opérateur <span class="rouge"><strong>*</strong></span>. Et puisque vous êtes des lecteurs attentifs, vous pourriez penser qu'il existe à nouveau une convention permettant d'omettre le <span class="rouge"><strong>*</strong></span>. Et je ne pourrais que vous donner raison. Voyons cela sur un exemple:<br>
<br>
<span class="code">Code : C++ - Utiliser une fonction pointée - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">maximum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span>  <span class="c1">//Retourne le plus grand de deux entiers</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span><span class="o">&gt;</span><span class="n">b</span> <span class="o">?</span> <span class="n">a</span> <span class="o">:</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">);</span> <span class="c1">//Un joli pointeur</span>
   
   <span class="n">ptr</span> <span class="o">=</span> <span class="n">maximum</span><span class="p">;</span>  <span class="c1">//que l'on affecte à la fonction "maximum" </span>
 
   <span class="kt">int</span> <span class="n">resultat</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">)(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//On calcule le maximum de 1 et 2 via la fonction pointée</span>
   <span class="c1">//Notez l'utilisation obligatoire des ()</span>
 
   <span class="kt">int</span> <span class="n">resultat_2</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span> <span class="c1">//Et on fait la même chose pour 3 et 4</span>
   <span class="c1">//Notez l'absence de *</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Les lignes 12 et 15 sont tout à fait équivalentes au niveau du programme généré. Mais comme précédemment, personne n'utilise la version avec <span class="rouge"><strong>*</strong></span>. On peut donc déduire la règle suivante:<br>
<br>
<span class="rouge"><strong>On utilise un pointeur sur fonction de la même manière qu'on utilise la fonction pointée.</strong></span><br>
<br>
<h3>Récrire le code de l'exemple initial</h3><br>
<br>
Maintenant que nous maitrisons un nouvel outil, nous pouvons récrire le code du premier exemple de la manière suivante:<br>
<br>
<span class="code">Code : C++ - La bonne manière de faire - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;cmath&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="c1">//Un petit typedef pour simplifier la notation</span>
<span class="k">typedef</span> <span class="kt">double</span><span class="p">(</span><span class="o">*</span><span class="n">Fonction</span><span class="p">)(</span><span class="kt">double</span><span class="p">);</span>
 
<span class="c1">//Liste des fonctions "calculables"</span>
<span class="kt">double</span> <span class="n">carre</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="p">;}</span>  
<span class="kt">double</span> <span class="n">inverse</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="o">/</span><span class="n">x</span><span class="p">;}</span>
<span class="kt">double</span> <span class="n">racine</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="p">);}</span>
<span class="kt">double</span> <span class="n">exponentielle</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);}</span>
 
<span class="kt">double</span> <span class="n">minimum</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span><span class="kt">double</span> <span class="n">b</span><span class="p">,</span><span class="n">Fonction</span> <span class="n">f</span><span class="p">)</span>  <span class="c1">//On passe le pointeur en argument</span>
<span class="p">{</span>
   <span class="c1">//Et on reprend le code du tout premier exemple</span>
   <span class="kt">double</span> <span class="n">min</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span>
 
   <span class="k">for</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="o">=</span><span class="n">a</span><span class="p">;</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">b</span> <span class="p">;</span> <span class="n">x</span><span class="o">+=</span> <span class="mf">0.01</span><span class="p">)</span>
     <span class="n">min</span> <span class="o">=</span> <span class="n">min</span><span class="o">&lt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">?</span> <span class="n">min</span> <span class="o">:</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> 
   <span class="c1">//Mais cette fois c'est la fonction pointée qui est utilisée</span>
   
   <span class="k">return</span> <span class="n">min</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"De quelle fonction voulez-vous chercher le minimum ?"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"1  --  x^2"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"2  --  1/x"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"3  --  racine de x"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"4  --  exponentielle de x"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"5  --  sinus de x"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
 
   <span class="kt">int</span> <span class="n">reponse</span><span class="p">;</span>
   <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">reponse</span><span class="p">;</span>
 
   <span class="n">Fonction</span> <span class="n">monPointeur</span><span class="p">;</span> <span class="c1">//On declare un pointeur sur fonction</span>
 
   <span class="k">switch</span><span class="p">(</span><span class="n">reponse</span><span class="p">){</span>  <span class="c1">//Et on déplace le pointeur sur la fonction choisie</span>
      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>  <span class="n">monPointeur</span> <span class="o">=</span> <span class="n">carre</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>  <span class="n">monPointeur</span> <span class="o">=</span> <span class="n">inverse</span><span class="p">;</span>  <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>  <span class="n">monPointeur</span> <span class="o">=</span> <span class="n">racine</span><span class="p">;</span>  <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>  <span class="n">monPointeur</span> <span class="o">=</span> <span class="n">exponentielle</span><span class="p">;</span>  <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>  <span class="n">monPointeur</span> <span class="o">=</span> <span class="n">sin</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span> <span class="c1">//On peut même utiliser les fonctions de cmath !</span>
   <span class="p">}</span>
 
   <span class="c1">//Finalement on affiche le résultat de l'appel de la fonction via le pointeur</span>
   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Le minimum de la fonction entre 3 et 4 est: "</span> <span class="o">&lt;&lt;</span> <span class="n">minimum</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="n">monPointeur</span><span class="p">)</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
 
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
C'est certainement la meilleure manière de réaliser ce que l'on voulait faire.<br>
<br>
<div class="rmq information">La fonction main n'est pas du tout sécurisée au niveau des entrées et du switch, mais ce n'est pas le but ici.</div><br>

		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_178618">Le cas particulier des fonctions membres</h2>
		<div class="ss_part_texte">
		Bon maintenant que nous avons vu la base, il faut quand même que je vous parle d'une erreur classique dans ce domaine. Imaginons que vous ayez écrit une classe et que vous aimeriez déclarer un pointeur sur une de ses fonctions membres.<br>
<br>
Prenons donc un code classique (modifié) venant du forum:<br>
<br>
<span class="code">Code : C++ - L'erreur classique - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
       <span class="kt">int</span> <span class="n">fonction</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">);</span>
    <span class="c1">//...</span>
<span class="p">};</span>  
 
<span class="kt">int</span> <span class="n">A</span><span class="o">::</span><span class="n">fonction</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">){</span><span class="k">return</span> <span class="n">a</span><span class="o">*</span><span class="n">a</span><span class="p">;}</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="kt">int</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">)(</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="n">fonction</span><span class="p">;</span>     <span class="c1">//aïe</span>
 
   <span class="kt">int</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">)(</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="n">A</span><span class="o">::</span><span class="n">fonction</span><span class="p">;</span>  <span class="c1">//re-aïe mais déjà mieux</span>
 
   <span class="kt">int</span> <span class="p">(</span><span class="n">A</span><span class="o">::*</span><span class="n">ptr</span><span class="p">)(</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">A</span><span class="o">::</span><span class="n">fonction</span><span class="p">;</span>  <span class="c1">//Cette fois c'est bon !</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il y a deux erreurs possibles. La première consiste à se tromper dans le nom de la fonction. Elle ne se nomme pas <span class="courrier">fonction</span> mais <span class="courrier">A::fonction</span>, car elle fait partie de la classe A. <br>
<br>
La deuxième erreur est beaucoup plus subtile. En effet une fonction membre reçoit en réalité implicitement un argument supplémentaire, une sorte de pointeur <span class="courrier">this</span> sur l'objet qui appelle la fonction ! Il faut donc d'une certaine manière en tenir compte lors de la déclaration du pointeur, c'est pour cela qu'il faut mettre <span class="courrier">A::</span> devant le nom du pointeur lors de sa déclaration. La dernière ligne du code est donc correcte. Remarquez qu'il est nécessaire dans ce cas d'utiliser l'opérateur <span class="rouge"><strong>&amp;</strong></span>.<br>
<br>
<div class="rmq information">S'il s'agit d'une fonction membre <span class="courrier">static</span>, cette deuxième règle ne s'applique pas. En effet une fonction statique ne reçoit pas de pointeur sur un objet en argument "caché" puisqu'elle peut être appelée sans objet.</div><br>
<br>
Cependant, un autre problème survient rapidement. Comment utiliser le pointeur puisqu'il nécessite un objet ? <br>
<br>
Cela se fait de la manière suivante:<br>
<br>
<span class="code">Code : C++ - Utilisation d'un pointeur sur fonction membre - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
       <span class="kt">int</span> <span class="n">fonction</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">);</span>
    <span class="c1">//...</span>
<span class="p">};</span>  
 
<span class="kt">int</span> <span class="n">A</span><span class="o">::</span><span class="n">fonction</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">){</span><span class="k">return</span> <span class="n">a</span><span class="o">*</span><span class="n">a</span><span class="p">;}</span>
 
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="kt">int</span> <span class="p">(</span><span class="n">A</span><span class="o">::*</span><span class="n">ptr</span><span class="p">)(</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">A</span><span class="o">::</span><span class="n">fonction</span><span class="p">;</span>  <span class="c1">//On déclare un pointeur sur la fonction membre</span>
   
   <span class="n">A</span> <span class="n">instance</span><span class="p">;</span>  <span class="c1">//On crée une instance de la classe A</span>
 
   <span class="kt">int</span> <span class="n">resultat</span> <span class="o">=</span> <span class="p">(</span><span class="n">instance</span><span class="p">.</span><span class="o">*</span><span class="n">ptr</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span>
   <span class="c1">//On calcule le résultat de la fonction pointée par "ptr" appliquée à</span>
   <span class="c1">//l'objet "instance" avec comme argument "2"</span>

   <span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="n">resultat</span>  <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  
   <span class="c1">//Et on affiche.</span>

   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pfffou...  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> <br>
En effet, les pointeurs sur fonctions membres ne sont pas très digestes à utiliser. <br>
Vous remarquerez quand même l'utilisation obligatoire de l' opérateur<span class="rouge"><strong>*</strong></span> et la présence indispensable des parenthèses.<br>
<br>
<h3>Simplifier les choses</h3><br>
<br>
Pour se simplifier la vie, il existe une solution que l'on rencontre parfois. Elle consiste à utiliser une macro. Normalement, les macros sont à éviter en C++ parce qu'on peut presque toujours s'en sortir sans. Ici, le but n'est pas d'utiliser une macro comme une fonction, mais plutôt comme moyen de simplifier drastiquement la notation.<br>
<br>
Une des premières choses à faire est d'utiliser un <span class="code2 cpp"><span class="k">typedef</span>
</span>.<br>
<br>
<span class="code">Code : C++ - Un typedef simplificateur - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
       <span class="kt">int</span> <span class="n">fonction</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
       <span class="p">{</span>
           <span class="k">return</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="p">;</span>
       <span class="p">}</span>
    <span class="c1">//...</span>
<span class="p">};</span>  

<span class="k">typedef</span> <span class="kt">int</span> <span class="p">(</span><span class="n">A</span><span class="o">::*</span><span class="n">APointeurFonction</span><span class="p">)(</span><span class="kt">int</span><span class="p">)</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
En faisant ça, on peut utiliser <span class="courrier">ApointeurFonction</span> à la place de la déclaration habituelle présente dans l'exemple précédent, ce qui donne:<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="n">APointeurFonction</span> <span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">A</span><span class="o">::</span><span class="n">fonction</span><span class="p">;</span>  <span class="c1">//On utilise le typedef ce qui simplifie la notation</span>
   
   <span class="n">A</span> <span class="n">instance</span><span class="p">;</span>  <span class="c1">//On crée une instance de la classe A</span>
 
   <span class="kt">int</span> <span class="n">resultat</span> <span class="o">=</span> <span class="p">(</span><span class="n">instance</span><span class="p">.</span><span class="o">*</span><span class="n">ptr</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span>

   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">resultat</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
L'appel à la fonction reste malgré tout fastidieux. C'est là qu'intervient la macro.<br>
<br>
<span class="code">Code : C++ - La macro - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#define appelleFonctionMembre(objet,pointeur)  ((objet).*(pointeur))</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
L'appel à la fonction membre sera alors:<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="n">APointeurFonction</span> <span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">A</span><span class="o">::</span><span class="n">fonction</span><span class="p">;</span> 
   
   <span class="n">A</span> <span class="n">instance</span><span class="p">;</span>
 
   <span class="kt">int</span> <span class="n">resultat</span> <span class="o">=</span> <span class="n">appelleFonctionMembre</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span><span class="n">ptr</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span>
   <span class="c1">//Avec la macro, c'est plus simple !</span>

   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">resultat</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
L'utilisation de la macro simplifie donc grandement le travail puisqu'on a eu besoin de réfléchir qu'une seule fois à la position des * et des parenthèses. <br>
<br>
<div class="rmq attention">Je me répète, mais c'est important. Les macros sont généralement à éviter en C++. Ici, c'est un des rares cas où leur emploi se justifie.</div><br>
<br>
Voilà, c'est tout ce qu'il y avait à dire sur ce petit sujet. Mais je ne pense pas que vous aurez besoin souvent des pointeurs de fonctions membres.  <img src="./cpp2_files/clin.png" alt=";)" class="smilies">
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Comme déjà dit dans l'introduction, nous verrons plus loin comment utiliser des <span class="italique">foncteurs</span>, la "version C++" du pointeur de fonction qui permet de faire les choses plus facilement.<br>
<br>
Merci à <a href="http://www.siteduzero.com/membres-294-43221.html">Chlab_lak</a> pour avoir proposé l'utilisation de la macro.<br>
<br>
Après ce chapitre un peu plus simple et moins fondamental que le reste, il est temps de passer à un TP pour mettre en pratique les notions apprises.
	</div>
	
	<hr>
	<h1 id="chap_110346">[TP] Le site du zéro</h1>
	<div id="chap_intro">
	Après tous ces chapitres de théorie, il est temps de passer un peu à la pratique. <br>
<br>
Ce premier TP devrait vous emmener vers l'exploration du polymorphisme et de l'héritage. La difficulté ne se situe nullement dans le choix des algorithmes à utiliser mais plutôt dans le choix de la représentation des différentes classes. <br>
Vous devriez être amené à vous poser des questions du type :<br>
<ul>
<li>Cette classe doit-elle hériter de celle-ci ?</li>
<li>L'héritage est-il privé ou public ?</li>
<li>Cette fonction doit-elle être virtuelle ou pas ?</li>
<li>Dois-je déclarer cette variable comme constante ?</li>
</ul><br>
Ce sont des questions importantes que l'on devrait se poser lors de la création de chaque programme. Cependant, il arrive souvent qu'on les omette car il y a d'autres choses plus complexes auxquelles on doit penser. <br>
L'exercice est là pour vous aider à prendre les bonnes habitudes.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_110351">Donnée du problème</h2>
		<div class="ss_part_texte">
		<h3>Contexte</h3><br>
<br>
Bravo ! Le site du zéro vient de vous engager pour un stage. Vos compétences en programmation ont séduit le jury de sélection et c'est avec une fierté non dissimulée que vous arrivez dans les bureaux pour votre première journée de travail.<br>
<br>
Après plusieurs années à se développer sur le web, le site du zéro a décidé de s'orienter vers les logiciels pour pouvoir fournir ses services aux gens qui n'ont pas accès à Internet en permanence. C'est pour développer ce côté-ci de l'entreprise que vous avez été engagé. <br>
<br>
La première partie du travail consiste à développer une interface de gestion des différents tutoriels du site pour permettre aux administrateurs de modifier et organiser les cours. Ceci devra être fait en C++ afin de pouvoir être utilisé sur tous les systèmes d'exploitation imaginables. Dans un premier temps, tout se fera en console. <br>
<br>
<span class="ttpetit">Toute ressemblance avec des faits réels n'est que fortuite.  <img src="./cpp2_files/smile.png" alt=":)" class="smilies"> </span><br>
<br>
Voici le cahier des charges que l'on vous a fourni.<br>
<br>
<h3>Cahier des charges</h3><br>
<br>
Sur le site du zéro, on trouve <strong>3</strong> types de <strong>tutoriels</strong> :<br>
<ul>
<li>les <strong>Articles</strong> ;</li>
<li>les <strong>Mini-tutos</strong> ;</li>
<li>les <strong>Big-tutos</strong>.</li>
</ul><br>
<br>
Les <strong>Articles</strong> contiennent un <strong>lien</strong> vers le site qu'ils décrivent.<br>
<br>
Les <strong>Mini-tutos</strong> contiennent un certain <strong>nombre</strong> (entier) de parties.<br>
<br>
Les <strong>Big-tutos</strong> sont composés de <strong>plusieurs Mini-tutos</strong>.<br>
<br>
Tous les tutoriels contiennent un <strong>titre</strong>.<br>
<br>
Le programme doit fournir un moyen d'<strong>afficher</strong> les informations de chaque tutoriel (de quelque sorte qu'il soit). Les big-tutos doivent également fournir un moyen d'ajouter des chapitres.<br>
<br>
Voilà pour les tutoriels. Pour ranger et classifier ceux-ci, le site du zéro possède une interface appelée « <strong>Vos Tutos</strong> » qui se comporte globalement comme une liste de tutoriels (de toutes les sortes) et qui a les fonctionnalités suivantes :<br>
<br>
<ul>
<li>Afficher le nombre total de tutos.</li>
<li>Afficher tous les tutoriels.</li>
<li>Ajouter un tutoriel à la liste.</li>
<li>Supprimer un tutoriel.</li>
</ul><br>
<br>
Chaque tutoriel se voit attribuer un numéro (sa position dans la liste) et la suppression d'un tutoriel passe par ce numéro.<br>
<br>
<h3>L'exercice</h3><br>
<br>
<div class="rmq question">Ok, mais on doit faire quoi ?</div><br>
<br>
Eh bien, c'est simple. Vous devez écrire un ensemble de classes et de fonctions qui reproduisent la description donnée ci-dessus.<br>
Il n'y a pas plus d'indications puisque le but de l'exercice est justement la modélisation d'un problème donné.<br>
<br>
Pour vérifier que votre programme fonctionne, le main suivant devra compiler :<br>
<br>
<span class="code">Code : C++ - Main imposé - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include "Tutos.hpp"</span>
<span class="cp">#include "VosTutos.hpp"</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
<span class="c">// Création du module VosTutos.</span>

    <span class="n">VosTutos</span> <span class="n">SdZ</span><span class="p">;</span>

<span class="c">// Création d'un big tuto.</span>

    <span class="n">MiniTuto</span> <span class="n">chap1</span><span class="p">(</span><span class="s">"Les bases du C++"</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
    <span class="n">MiniTuto</span> <span class="n">chap2</span><span class="p">(</span><span class="s">"La métaprogrammation récursivement polymorphique appliquée au RAII"</span><span class="p">,</span><span class="mi">12</span><span class="p">);</span>
    <span class="n">MiniTuto</span> <span class="n">chap3</span><span class="p">(</span><span class="s">"Un TP bien trop dur"</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>

    <span class="n">BigTuto</span> <span class="n">tuto1</span><span class="p">(</span><span class="s">"[C++] C++ roxx"</span><span class="p">);</span>
    <span class="n">tuto1</span><span class="p">.</span><span class="n">ajouteChapitre</span><span class="p">(</span><span class="o">&amp;</span><span class="n">chap1</span><span class="p">);</span>
    <span class="n">tuto1</span><span class="p">.</span><span class="n">ajouteChapitre</span><span class="p">(</span><span class="o">&amp;</span><span class="n">chap2</span><span class="p">);</span>
    <span class="n">tuto1</span><span class="p">.</span><span class="n">ajouteChapitre</span><span class="p">(</span><span class="o">&amp;</span><span class="n">chap3</span><span class="p">);</span>

<span class="c">// Création d'un mini-tuto.</span>

    <span class="n">MiniTuto</span> <span class="n">tuto2</span><span class="p">(</span><span class="s">"[C++] Les namespaces"</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>

<span class="c">// Création d'un article.</span>

    <span class="n">Article</span> <span class="n">tuto3</span><span class="p">(</span><span class="s">"La librairie Boost"</span><span class="p">,</span> <span class="s">"www.boost.org"</span><span class="p">);</span>

<span class="c">// Ajout des tutos au "site".</span>

    <span class="n">SdZ</span><span class="p">.</span><span class="n">ajouteTuto</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tuto1</span><span class="p">);</span>
    <span class="n">SdZ</span><span class="p">.</span><span class="n">ajouteTuto</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tuto2</span><span class="p">);</span>
    <span class="n">SdZ</span><span class="p">.</span><span class="n">ajouteTuto</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tuto3</span><span class="p">);</span>

<span class="c">// Affichage de l'ensemble des tutoriels du "site".</span>

    <span class="n">SdZ</span><span class="p">.</span><span class="n">affiche</span><span class="p">();</span>

<span class="c">// Suppression du mini-tuto.</span>

    <span class="n">SdZ</span><span class="p">.</span><span class="n">supprimeTuto</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

<span class="c">// Fin du programme.</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce programme devra afficher le résultat suivant:<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Le&nbsp;tutoriel&nbsp;'Les&nbsp;bases&nbsp;du&nbsp;C++'&nbsp;a&nbsp;bien&nbsp;été&nbsp;créé.
Le&nbsp;tutoriel&nbsp;'La&nbsp;métaprogrammation&nbsp;récursivement&nbsp;polymorphique&nbsp;appliquée&nbsp;au&nbsp;RAII'&nbsp;a&nbsp;bien&nbsp;été&nbsp;créé.
Le&nbsp;tutoriel&nbsp;'Un&nbsp;TP&nbsp;bien&nbsp;trop&nbsp;dur'&nbsp;a&nbsp;bien&nbsp;été&nbsp;créé.
Le&nbsp;tutoriel&nbsp;'[C++]&nbsp;C++&nbsp;roxx'&nbsp;a&nbsp;bien&nbsp;été&nbsp;créé.
Le&nbsp;tutoriel&nbsp;'[C++]&nbsp;Les&nbsp;namespaces'&nbsp;a&nbsp;bien&nbsp;été&nbsp;créé.
Le&nbsp;tutoriel&nbsp;'La&nbsp;librairie&nbsp;Boost'&nbsp;a&nbsp;bien&nbsp;été&nbsp;créé.
Votre&nbsp;tutoriel&nbsp;a&nbsp;bien&nbsp;été&nbsp;ajouté.
Votre&nbsp;tutoriel&nbsp;a&nbsp;bien&nbsp;été&nbsp;ajouté.
Votre&nbsp;tutoriel&nbsp;a&nbsp;bien&nbsp;été&nbsp;ajouté.

Le&nbsp;Site&nbsp;du&nbsp;zéro&nbsp;contient&nbsp;les&nbsp;tutoriels&nbsp;suivants&nbsp;:

0)&nbsp;BIG-TUTO
Titre&nbsp;:&nbsp;[C++]&nbsp;C++&nbsp;roxx
Nombre&nbsp;de&nbsp;chapitres&nbsp;:&nbsp;3
Sommaire&nbsp;:&nbsp;
MINI-TUTO
Titre&nbsp;:&nbsp;Les&nbsp;bases&nbsp;du&nbsp;C++
Nombre&nbsp;de&nbsp;sous-parties&nbsp;:&nbsp;4
MINI-TUTO
Titre&nbsp;:&nbsp;La&nbsp;métaprogrammation&nbsp;récursivement&nbsp;polymorphique&nbsp;appliquée&nbsp;au&nbsp;RAII
Nombre&nbsp;de&nbsp;sous-parties&nbsp;:&nbsp;12
MINI-TUTO
Titre&nbsp;:&nbsp;Un&nbsp;TP&nbsp;bien&nbsp;trop&nbsp;dur
Nombre&nbsp;de&nbsp;sous-parties&nbsp;:&nbsp;5

1)&nbsp;MINI-TUTO
Titre&nbsp;:&nbsp;[C++]&nbsp;Les&nbsp;namespaces
Nombre&nbsp;de&nbsp;sous-parties&nbsp;:&nbsp;3

2)&nbsp;ARTICLE
Titre:&nbsp;La&nbsp;librairie&nbsp;Boost
Lien&nbsp;:&nbsp;www.boost.org

Votre&nbsp;tutoriel&nbsp;a&nbsp;été&nbsp;supprimé&nbsp;correctement&nbsp;du&nbsp;site.
Le&nbsp;tutoriel&nbsp;'La&nbsp;librairie&nbsp;Boost'&nbsp;a&nbsp;été&nbsp;correctement&nbsp;détruit.
Le&nbsp;tutoriel&nbsp;'[C++]&nbsp;Les&nbsp;namespaces'&nbsp;a&nbsp;été&nbsp;correctement&nbsp;détruit.
Le&nbsp;tutoriel&nbsp;'[C++]&nbsp;C++&nbsp;roxx'&nbsp;a&nbsp;été&nbsp;correctement&nbsp;détruit.
Le&nbsp;tutoriel&nbsp;'Un&nbsp;TP&nbsp;bien&nbsp;trop&nbsp;dur'&nbsp;a&nbsp;été&nbsp;correctement&nbsp;détruit.
Le&nbsp;tutoriel&nbsp;'La&nbsp;métaprogrammation&nbsp;récursivement&nbsp;polymorphique&nbsp;appliquée&nbsp;au&nbsp;RAII'&nbsp;a&nbsp;été&nbsp;correctement&nbsp;détruit.
Le&nbsp;tutoriel&nbsp;'Les&nbsp;bases&nbsp;du&nbsp;C++'&nbsp;a&nbsp;été&nbsp;correctement&nbsp;détruit.</pre></div></td></tr></tbody></table></div><br>
<br>
<span class="rouge"><strong>Bon, assez parlé. À vous de travailler un peu !</strong></span>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_110350">Astuces</h2>
		<div class="ss_part_texte">
		Si vous ne savez pas comment commencer ou comment continuer, cette section est faite pour vous aider. Il n'y a rien de nouveau par rapport aux chapitres précédents, c'est seulement une liste des questions que vous devriez vous poser.<br>
<br>
Le mieux serait que vous n'utilisiez pas du tout cette partie.  <img src="./cpp2_files/clin.png" alt=";)" class="smilies"> <br>
<br>
<div class="rmq question">Par quoi dois-je commencer ?</div><br>
<span class="spoiler_hidden">Secret <a href="?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden">Lisez plusieurs fois la description du problème et essayez de la reformuler de sorte qu'elle soit claire pour vous. <br>
Essayez de faire un « dessin » de ce que vous allez devoir programmer.<br>
Ensuite, aidez-vous du <strong>main()</strong> pour mettre des noms et des concepts C++ sur votre dessin.</div></div><br>
<br>
<div class="rmq question">Quelles classes dois-je créer ?</div><br>
<span class="spoiler_hidden">Secret <a href="?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden">Combien « d'entités » différentes pouvez-vous voir dans la description donnée ? <br>
Essayez de mettre un nom sur chacune de ces entités. </div></div><br>
<br>
<div class="rmq question">Entre quelles classes dois-je créer un héritage ?</div><br>
<span class="spoiler_hidden">Secret <a href="?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden">Pouvez-vous dire qu'une classe EST UNE autre ou EST IMPLÉMENTÉE SOUS FORME DE une autre ? <br>
Si oui, alors l'héritage se justifie. Sinon, alors il n'y a pas de lien (de ce type) entre les deux classes.</div></div><br>
<br>
<div class="rmq question">Dois-je utiliser l'héritage public ou privé ?</div><br>
<span class="spoiler_hidden">Secret <a href="?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden">Tout dépend si la classe fille EST UNE classe mère ou si elle EST IMPLÉMENTÉE SOUS FORME DE classe mère.</div></div><br>
<br>
<div class="rmq question">Quelles fonctions doivent être virtuelles ?</div><br>
<span class="spoiler_hidden">Secret <a href="?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden">Si votre fonction doit avoir un comportement différent dans différentes classes filles, alors elle doit être <strong>virtuelle</strong>.<br>
Si la fonction ne doit pas être appelée depuis la classe mère, alors elle doit être <strong>virtuelle pure</strong>.</div></div><br>
<br>
<div class="rmq question">Mes fonctions doivent-elles être const ?</div><br>
<span class="spoiler_hidden">Secret <a href="?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden">Si votre fonction membre ne modifie pas l'objet, alors elle doit être const.</div></div><br>
<br>
Si vous vous posez d'autres questions, faites-nous en part sur le <a href="http://www.siteduzero.com/forum-81-237-langage-c.html">forum</a>. Ainsi cette liste pourra s'agrandir pour mieux aider les suivants.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_110349">Correction</h2>
		<div class="ss_part_texte">
		Bon ! Vous avez terminé ? Il est temps de dévoiler une solution à ce problème.<br>
<br>
<h3>Partie « Papier - Crayon »</h3><br>
<br>
Dans un premier temps, il faut commencer par réfléchir à l'architecture avant de programmer, sinon c'est l'échec quasiment assuré.  <img src="./cpp2_files/pirate.png" alt=":pirate:" class="smilies"><br>
<br>
<h4>Les tutos</h4><br>
<br>
Nous avons trois types de tutoriels différents ayant chacun un point commun. Cela suggère donc une relation d'héritage. <br>
<strong>Est-elle justifiée ?</strong> <br>
La question que l'on doit se poser est de savoir si un article EST UN tutoriel ou pas. La réponse est assez facile à trouver ici. C'est oui. Et cela est aussi valable pour les mini-tutos et les big-tutos.<br>
<br>
<strong><a href="http://www.siteduzero.com/tutoriel-3-8938-1-retour-sur-l-heritage.html#ss_part_1">Quel type d'héritage choisir ?</a></strong><br>
L'héritage public se justifie ici puisque un article EST UN tutoriel. <br>
<br>
<strong>Que mettre dans la classe mère (Tuto) ?</strong><br>
On va regrouper les points communs des trois types dans la classe mère. En l'occurrence, une chaîne de caractère pour l'attribut <span class="courrier">titre</span> et une fonction <span class="courrier">affiche()</span>.<br>
<br>
Cela suggère donc une architecture de ce genre :<br>
<br>
<div class="centre"><img src="./cpp2_files/163222.png" alt="Image utilisateur"></div><br>
<br>
<strong><a href="http://www.siteduzero.com/tutoriel-3-56432-1-le-polymorphisme-ii.html#ss_part_2">Sont-ce des classes concrètes ou des classes d'entités ?</a></strong><br>
Ici, il s'agit clairement de classes d'entités. Nous pourrons donc directement appliquer la « recette » qui consiste à mettre les constructeurs de copies et opérateurs = dans la partie privée de la classe. Nous pourrons aussi écrire un destructeur virtuel.<br>
<br>
<strong>La fonction <span class="courrier">affiche()</span> doit-elle être déclarée <span class="code2 cpp"><span class="k">const</span>
</span> ?</strong><br>
Cette fonction ne doit pas modifier les attributs (puisqu'elle doit juste les afficher). On peut (et on doit  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> ) donc la déclarer const.<br>
<br>
<strong>Quelles fonctions doivent-être virtuelles ?</strong><br>
La fonction affiche() doit avoir un comportement différent pour les différentes classes filles. Nous devons donc la déclarer virtuelle. De plus, nous ne voulons pas que l'on puisse créer de Tuto, mais seulement des BigTuto, MiniTuto ou Articles. Il nous faut donc déclarer la fonction affiche() comme virtuelle pure dans la classe Tuto.<br>
<br>
<h4>Le module VosTutos</h4><br>
<br>
L'autre partie du problème est le module VosTutos. Nous voulons pouvoir utiliser le polymorphisme pour avoir un comportement spécifique de la fonction « afficher » des différents tutos. Il nous faut donc utiliser un tableau de <strong>pointeurs</strong> vers des Tutos. Cela peut se faire de deux manières différentes :<br>
<br>
<ul>
<li>Mettre un attribut <span class="code2 cpp"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Tuto</span><span class="o">*&gt;</span>
</span> dans la classe.</li>
<li>Hériter de <span class="code2 cpp"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Tuto</span><span class="o">*&gt;</span>
</span> car VosTutos EST IMPLÉMENTÉE sous forme de <span class="code2 cpp"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Tuto</span><span class="o">*&gt;</span>
</span></li>
</ul><br>
<br>
J'ai choisi la deuxième manière puisque la première manière est déjà présente dans la classe <strong>BigTuto</strong>. Ce qui nous donne le diagramme suivant :<br>
<br>
<div class="centre"><img src="./cpp2_files/163224.png" alt="Image utilisateur"></div><br>
<br>
<h3>Les headers</h3><br>
<br>
Cette discussion n'a pas été entièrement inutile, puisque nous pouvons directement traduire le diagramme en code C++.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#ifndef TUTOS_HPP_INCLUDED</span>
<span class="cp">#define TUTOS_HPP_INCLUDED</span>

<span class="cp">#include &lt;string&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>

<span class="k">class</span> <span class="nc">Tuto</span><span class="p">{</span>

<span class="k">public</span><span class="o">:</span>

    <span class="n">Tuto</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">titre</span><span class="p">);</span>  <span class="c1">// Construit un tutoriel avec un titre donné.</span>

    <span class="k">virtual</span> <span class="o">~</span><span class="n">Tuto</span><span class="p">();</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">affiche</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">private</span><span class="o">:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_titre</span><span class="p">;</span>

    <span class="n">Tuto</span><span class="p">(</span><span class="k">const</span> <span class="n">Tuto</span><span class="o">&amp;</span><span class="p">);</span>
    <span class="n">Tuto</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Tuto</span><span class="o">&amp;</span><span class="p">);</span>
<span class="p">};</span>

<span class="c1">// ################################################################################</span>

<span class="k">class</span> <span class="nc">Article</span><span class="o">:</span> <span class="k">public</span> <span class="n">Tuto</span><span class="p">{</span>

<span class="k">public</span><span class="o">:</span>

    <span class="n">Article</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">titre</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">lien</span><span class="p">);</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">affiche</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>

    <span class="k">virtual</span> <span class="o">~</span><span class="n">Article</span><span class="p">();</span>

<span class="k">private</span><span class="o">:</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_lien</span><span class="p">;</span>

    <span class="n">Article</span><span class="p">(</span><span class="k">const</span> <span class="n">Article</span><span class="o">&amp;</span><span class="p">);</span>
    <span class="n">Article</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Article</span><span class="o">&amp;</span><span class="p">);</span>
<span class="p">};</span>

<span class="c1">// ################################################################################</span>

<span class="k">class</span> <span class="nc">MiniTuto</span><span class="o">:</span> <span class="k">public</span> <span class="n">Tuto</span><span class="p">{</span>

<span class="k">public</span><span class="o">:</span>

    <span class="n">MiniTuto</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">titre</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">nbParties</span><span class="p">);</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">affiche</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>

    <span class="k">virtual</span> <span class="o">~</span><span class="n">MiniTuto</span><span class="p">();</span>

<span class="k">private</span><span class="o">:</span>

    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">m_nbParties</span><span class="p">;</span>

    <span class="n">MiniTuto</span><span class="p">(</span><span class="k">const</span> <span class="n">MiniTuto</span><span class="o">&amp;</span><span class="p">);</span>
    <span class="n">MiniTuto</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">MiniTuto</span><span class="o">&amp;</span><span class="p">);</span>
<span class="p">};</span>

<span class="c1">// ################################################################################</span>

<span class="k">class</span> <span class="nc">BigTuto</span><span class="o">:</span> <span class="k">public</span> <span class="n">Tuto</span><span class="p">{</span>

<span class="k">public</span><span class="o">:</span>

    <span class="n">BigTuto</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">titre</span><span class="p">);</span>

    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">affiche</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>

    <span class="kt">void</span> <span class="n">ajouteChapitre</span><span class="p">(</span><span class="n">MiniTuto</span><span class="o">*</span> <span class="n">tuto</span><span class="p">);</span>

    <span class="k">virtual</span> <span class="o">~</span><span class="n">BigTuto</span><span class="p">();</span>

<span class="k">private</span><span class="o">:</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">MiniTuto</span><span class="o">*&gt;</span> <span class="n">m_chapitres</span><span class="p">;</span>

    <span class="n">BigTuto</span><span class="p">(</span><span class="k">const</span> <span class="n">BigTuto</span><span class="o">&amp;</span><span class="p">);</span>
    <span class="n">BigTuto</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">BigTuto</span><span class="o">&amp;</span><span class="p">);</span>
<span class="p">};</span>

<span class="cp">#endif </span><span class="c1">// TUTOS_HPP_INCLUDED</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></div></td><td class="code"><div class="syntax"><pre><span class="cp">#ifndef VOSTUTOS_HPP_INCLUDED</span>
<span class="cp">#define VOSTUTOS_HPP_INCLUDED</span>

<span class="cp">#include "Tutos.hpp"</span>

<span class="k">class</span> <span class="nc">VosTutos</span><span class="o">:</span> <span class="k">private</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Tuto</span><span class="o">*&gt;</span><span class="p">{</span>

    <span class="k">static</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">version</span><span class="p">;</span> <span class="c1">// La version actuelle du module.</span>

<span class="k">public</span><span class="o">:</span>

    <span class="n">VosTutos</span><span class="p">();</span>

    <span class="kt">void</span> <span class="n">affiche</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>

    <span class="n">size_t</span> <span class="n">nbTutos</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>

    <span class="kt">void</span> <span class="n">ajouteTuto</span><span class="p">(</span><span class="n">Tuto</span><span class="o">*</span> <span class="n">tuto</span><span class="p">);</span>

    <span class="kt">void</span> <span class="n">supprimeTuto</span><span class="p">(</span><span class="n">size_t</span> <span class="n">index</span><span class="p">);</span>

    <span class="k">virtual</span> <span class="o">~</span><span class="n">VosTutos</span><span class="p">();</span>

<span class="k">private</span><span class="o">:</span>

    <span class="n">VosTutos</span><span class="p">(</span><span class="k">const</span> <span class="n">VosTutos</span><span class="o">&amp;</span><span class="p">);</span>
    <span class="n">VosTutos</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">VosTutos</span><span class="o">&amp;</span><span class="p">);</span>
 <span class="p">};</span>


<span class="cp">#endif </span><span class="c1">//VOSTUTOS_HPP_INCLUDED</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Je n'ai ici que retranscrit en C++ ce que nous avions écrit sur papier précédemment.<br>
<br>
<h3>Le corps des fonctions</h3><br>
<br>
Passons donc au « remplissage » du corps des fonctions. Pour cela, il faut s'aider du <span class="italique">main()</span> fourni et surtout du résultat affiché.<br>
<br>
<h4>Les Tutos</h4><br>
Quel que soit le type de tutoriel construit, un message s'affiche. On peut donc mettre ce message dans le constructeur de Tuto. Et de même pour le destructeur.<br>
<br>
<span class="code">Code : C++ - Constructeur et destructeur de Tuto - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">Tuto</span><span class="o">::</span><span class="n">Tuto</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">titre</span><span class="p">)</span>
    <span class="o">:</span><span class="n">m_titre</span><span class="p">(</span><span class="n">titre</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Le tutoriel '"</span> <span class="o">&lt;&lt;</span> <span class="n">m_titre</span> <span class="o">&lt;&lt;</span> <span class="s">"' a bien été créé."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">Tuto</span><span class="o">::~</span><span class="n">Tuto</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Le tutoriel '"</span> <span class="o">&lt;&lt;</span> <span class="n">m_titre</span> <span class="o">&lt;&lt;</span> <span class="s">"' a été correctement détruit."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On peut alors définir les constructeurs des classes filles en appelant le constructeur de Tuto :<br>
<br>
<span class="code">Code : C++ - Constructeur d'Article - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">Article</span><span class="o">::</span><span class="n">Article</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">titre</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">lien</span><span class="p">)</span>
    <span class="o">:</span><span class="n">Tuto</span><span class="p">(</span><span class="n">titre</span><span class="p">),</span>
    <span class="n">m_lien</span><span class="p">(</span><span class="n">lien</span><span class="p">)</span>
<span class="p">{}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Qu'en est-il de la fonction d'affichage ? Elle contient une partie commune (l'affichage du titre) et une partie qui diffère pour chaque classe fille. On peut donc mettre la partie commune dans la classe Tuto et utiliser le <strong>démasquage</strong> dans les classes filles.<br>
<br>
<span class="code">Code : C++ - L'affichage - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">Tuto</span><span class="o">::</span><span class="n">affiche</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Titre : "</span> <span class="o">&lt;&lt;</span> <span class="n">m_titre</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">Article</span><span class="o">::</span><span class="n">affiche</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"ARTICLE"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">Tuto</span><span class="o">::</span><span class="n">affiche</span><span class="p">();</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Lien : "</span> <span class="o">&lt;&lt;</span> <span class="n">m_lien</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cela permet de créer un code facilement maintenable et générique.<br>
<br>
Il ne nous reste plus que la fonction <strong>ajouteChapitre()</strong> à écrire. Pour cela, rien de plus facile. Il suffit d'utiliser la fonction <span class="courrier">push_back()</span> des <span class="courrier">std::vector</span>.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">BigTuto</span><span class="o">::</span><span class="n">ajouteChapitre</span><span class="p">(</span><span class="n">MiniTuto</span><span class="o">*</span> <span class="n">tuto</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">m_chapitres</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tuto</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Avec cela, nous avons terminé le code des différents tutoriels. Passons donc au module VosTutos.<br>
<br>
<h4>VosTutos</h4><br>
<br>
Les constructeurs et destructeurs n'ont rien de particulier à faire, on peut donc les écrire comme suit :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">VosTutos</span><span class="o">::</span><span class="n">VosTutos</span><span class="p">()</span>
    <span class="o">:</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Tuto</span><span class="o">*&gt;</span><span class="p">()</span>
<span class="p">{}</span>

<span class="n">VosTutos</span><span class="o">::~</span><span class="n">VosTutos</span><span class="p">()</span>
<span class="p">{}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">On aurait aussi pu ne pas écrire de constructeur. Celui fourni par le compilateur étant identique à celui que nous avons écrit.</div><br>
<br>
Afficher le nombre de tutoriels ne devrait pas être un problème, puisque cela consiste à appeler la fonction <span class="courrier">size()</span> de la classe mère (<span class="courrier">std::vector</span>).<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">size_t</span> <span class="n">VosTutos</span><span class="o">::</span><span class="n">nbTutos</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">size</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
De même pour la fonction <span class="courrier">ajouteTuto()</span>.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">VosTutos</span><span class="o">::</span><span class="n">ajouteTuto</span><span class="p">(</span><span class="n">Tuto</span><span class="o">*</span> <span class="n">tuto</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">push_back</span><span class="p">(</span><span class="n">tuto</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Votre tutoriel a bien été ajouté."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La fonction affiche se complique un peu, car nous allons avoir besoin d'utiliser l'opérateur [] de std::vector. Pour ce faire, on ne peut pas simplement écrire <span class="code2 cpp"><span class="p">[]</span><span class="o">-&gt;</span><span class="n">affiche</span><span class="p">()</span>
</span>. Il faut passer par l'opérateur de résolution de portée et utiliser le nom complet de l'opérateur : <span class="code2 cpp"><span class="k">operator</span><span class="p">[]</span><span class="o">-&gt;</span><span class="n">affiche</span><span class="p">()</span>
</span>.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">VosTutos</span><span class="o">::</span><span class="n">affiche</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">Le Site du zéro contient les tutoriels suivants :</span><span class="se">\n</span><span class="s">"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">size_t</span> <span class="n">i</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">") "</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Tuto</span><span class="o">*&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">i</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">affiche</span><span class="p">();</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Finalement, pour supprimer un tutoriel, le plus simple et d'utiliser la procédure suivante :<br>
<ol class="liste_1">
<li>Inverser le tutoriel à supprimer avec le dernier du <span class="courrier">vector</span>.</li>
<li>Utiliser <span class="courrier">pop_back()</span> sur le <span class="courrier">vector</span>.</li></ol><br>
<br>
Il faut aussi penser à vérifier que le tutoriel existe bien avant de le supprimer. Pour cela, rien de tel qu'une exception.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">void</span> <span class="n">VosTutos</span><span class="o">::</span><span class="n">supprimeTuto</span><span class="p">(</span><span class="n">size_t</span> <span class="n">index</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">index</span> <span class="o">&gt;</span> <span class="n">size</span><span class="p">())</span>
        <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">"ERREUR : VosTutos::supprimeTuto() : index trop grand."</span><span class="p">);</span>

    <span class="k">operator</span><span class="p">[](</span><span class="n">index</span><span class="p">)</span> <span class="o">=</span> <span class="n">back</span><span class="p">();</span>
    <span class="n">pop_back</span><span class="p">();</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Votre tutoriel a été supprimé correctement du site"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">On aurait aussi pu utiliser at() au lieu de l'opérateur [] et ainsi laisser le vector lancer lui-même l'exception le cas échéant.</div><br>
<br>
Voilà. Je crois bien qu'on a terminé. <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies">
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_110348">Le code complet</h2>
		<div class="ss_part_texte">
		Vous avez déjà les headers complets ainsi que la fonction <span class="italique">main()</span>. Voici donc les 2 autres fichiers <span class="italique">.cpp</span>.<br>
<br>
<h3>Les tutos</h3><br>
<br>
<span class="code">Code : C++ - Tutos.cpp - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include "Tutos.hpp"</span>

<span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c">// ################################################################################</span>

<span class="n">Tuto</span><span class="o">::</span><span class="n">Tuto</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">titre</span><span class="p">)</span>
    <span class="o">:</span><span class="n">m_titre</span><span class="p">(</span><span class="n">titre</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Le tutoriel '"</span> <span class="o">&lt;&lt;</span> <span class="n">m_titre</span> <span class="o">&lt;&lt;</span> <span class="s">"' a bien été créé."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">Tuto</span><span class="o">::</span><span class="n">affiche</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Titre : "</span> <span class="o">&lt;&lt;</span> <span class="n">m_titre</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">Tuto</span><span class="o">::~</span><span class="n">Tuto</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Le tutoriel '"</span> <span class="o">&lt;&lt;</span> <span class="n">m_titre</span> <span class="o">&lt;&lt;</span> <span class="s">"' a été correctement détruit."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">// ################################################################################</span>

<span class="n">Article</span><span class="o">::</span><span class="n">Article</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">titre</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">lien</span><span class="p">)</span>
    <span class="o">:</span><span class="n">Tuto</span><span class="p">(</span><span class="n">titre</span><span class="p">),</span>
    <span class="n">m_lien</span><span class="p">(</span><span class="n">lien</span><span class="p">)</span>
<span class="p">{}</span>

<span class="kt">void</span> <span class="n">Article</span><span class="o">::</span><span class="n">affiche</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"ARTICLE"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">Tuto</span><span class="o">::</span><span class="n">affiche</span><span class="p">();</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Lien : "</span> <span class="o">&lt;&lt;</span> <span class="n">m_lien</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">Article</span><span class="o">::~</span><span class="n">Article</span><span class="p">()</span>
<span class="p">{}</span>

<span class="c">// ################################################################################</span>

<span class="n">MiniTuto</span><span class="o">::</span><span class="n">MiniTuto</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">titre</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">nbParties</span><span class="p">)</span>
    <span class="o">:</span><span class="n">Tuto</span><span class="p">(</span><span class="n">titre</span><span class="p">),</span>
    <span class="n">m_nbParties</span><span class="p">(</span><span class="n">nbParties</span><span class="p">)</span>
<span class="p">{}</span>

<span class="kt">void</span> <span class="n">MiniTuto</span><span class="o">::</span><span class="n">affiche</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"MINI-TUTO"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">Tuto</span><span class="o">::</span><span class="n">affiche</span><span class="p">();</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Nombre de sous-parties : "</span> <span class="o">&lt;&lt;</span> <span class="n">m_nbParties</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">MiniTuto</span><span class="o">::~</span><span class="n">MiniTuto</span><span class="p">()</span>
<span class="p">{}</span>

<span class="c">// ################################################################################</span>

<span class="n">BigTuto</span><span class="o">::</span><span class="n">BigTuto</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">titre</span><span class="p">)</span>
    <span class="o">:</span><span class="n">Tuto</span><span class="p">(</span><span class="n">titre</span><span class="p">),</span>
    <span class="n">m_chapitres</span><span class="p">()</span>
<span class="p">{}</span>

<span class="kt">void</span> <span class="n">BigTuto</span><span class="o">::</span><span class="n">affiche</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"BIG-TUTO"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">Tuto</span><span class="o">::</span><span class="n">affiche</span><span class="p">();</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Nombre de chapitres : "</span> <span class="o">&lt;&lt;</span> <span class="n">m_chapitres</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Sommaire : "</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="n">size_t</span> <span class="n">i</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">m_chapitres</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="n">m_chapitres</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">affiche</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">BigTuto</span><span class="o">::</span><span class="n">ajouteChapitre</span><span class="p">(</span><span class="n">MiniTuto</span><span class="o">*</span> <span class="n">tuto</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">m_chapitres</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tuto</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">BigTuto</span><span class="o">::~</span><span class="n">BigTuto</span><span class="p">()</span>
<span class="p">{}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<h3>Le module Vos Tutos</h3><br>
<br>
<span class="code">Code : C++ - VosTutos.cpp - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include "VosTutos.hpp"</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;stdexcept&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">double</span> <span class="n">VosTutos</span><span class="o">::</span><span class="n">version</span> <span class="o">=</span> <span class="mf">3.5</span><span class="p">;</span>

<span class="n">VosTutos</span><span class="o">::</span><span class="n">VosTutos</span><span class="p">()</span>
    <span class="o">:</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Tuto</span><span class="o">*&gt;</span><span class="p">()</span>
<span class="p">{}</span>

<span class="n">VosTutos</span><span class="o">::~</span><span class="n">VosTutos</span><span class="p">()</span>
<span class="p">{}</span>

<span class="kt">void</span> <span class="n">VosTutos</span><span class="o">::</span><span class="n">affiche</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">Le Site du zéro contient les tutoriels suivants :</span><span class="se">\n</span><span class="s">"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">size_t</span> <span class="n">i</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">") "</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Tuto</span><span class="o">*&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">i</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">affiche</span><span class="p">();</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">VosTutos</span><span class="o">::</span><span class="n">ajouteTuto</span><span class="p">(</span><span class="n">Tuto</span><span class="o">*</span> <span class="n">tuto</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">push_back</span><span class="p">(</span><span class="n">tuto</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Votre tutoriel a bien été ajouté."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">VosTutos</span><span class="o">::</span><span class="n">supprimeTuto</span><span class="p">(</span><span class="n">size_t</span> <span class="n">index</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">index</span> <span class="o">&gt;</span> <span class="n">size</span><span class="p">())</span>
        <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">"ERREUR : VosTutos::supprimeTuto() : index trop grand."</span><span class="p">);</span>

    <span class="k">operator</span><span class="p">[](</span><span class="n">index</span><span class="p">)</span> <span class="o">=</span> <span class="n">back</span><span class="p">();</span>
    <span class="n">pop_back</span><span class="p">();</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Votre tutoriel a été supprimé correctement du site."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">size_t</span> <span class="n">VosTutos</span><span class="o">::</span><span class="n">nbTutos</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">size</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_110347">Pour aller plus loin</h2>
		<div class="ss_part_texte">
		Voici quelques idées :<br>
<br>
<ul>
<li>Améliorer les tutos en leur donnant plus d'attributs (Auteur, Texte...).</li>
<li>Proposer des fonctions pour modifier le contenu des tutos.</li>
<li>Proposer des fonctions pour changer l'ordre des tutos dans le module VosTutos.</li>
<li>Afficher le nombre de tutoriels de chaque type depuis le module VosTutos.</li>
<li>Afficher un tutoriel donné du module VosTutos plutôt que la liste complète.</li>
<li>Ajouter un attribut « Date » en utilisant une classe de votre propre cru.</li>
</ul><br>
Et bien sûr, tout ce que votre imagination fertile vous suggèrera.  <img src="./cpp2_files/heureux.png" alt=":D" class="smilies"> <br>
<br>
Amusez-vous bien !
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Cette mise en pratique a certainement dû vous aider à bien assimiler toutes les notions du polymorphisme. Je vous invite à faire d'autres exercices du même type de sorte que cela devienne naturel pour vous de raisonner de cette manière.<br>
<br>
Les prochains chapitres retournent vers la théorie et seront un peu plus complexes, puisque nous aborderons la programmation générique, les <span class="italique">templates</span>.
	</div>
	
<div>
<br>
Cette partie n'est pas <span class="souligne">terminée</span>. D'autres chapitres viendront prochainement s'ajouter à ceux qui existent déjà. En attendant, vous pouvez lire les <a href="http://www.siteduzero.com/tutoriel-3-8926-1-c-notions-avancees.html#part_209308">chapitres sur les templates</a>, les <a href="#part_8966">annexes</a> ou faire quelques exercices sur les <a href="http://www.siteduzero.com/forum-81-237-langage-c.html">forums</a>.
</div>

<hr>
<h2>Partie 2 : Les templates</h2>
<div>
Le mécanisme des templates est un des outils majeurs du C++ et c'est ce qui différencie ce langage de beaucoup de "concurrents" comme Java. <br>
La syntaxe utilisée n'est par contre pas toujours simple à comprendre et à lire. C'est pour cela que nous allons avancer pas à pas.
</div>
	
	<hr>
	<h1 id="chap_85890">La base</h1>
	<div id="chap_intro">
	Vous êtes toujours là ? <br>
<br>
Parfait ! Nous allons donc pouvoir attaquer une nouvelle partie du cours : la programmation générique.<br>
<br>
Le but de la programmation, en tout cas à l'origine, est de simplifier les tâches répétitives en les faisant s'exécuter sur votre ordinateur plutôt que devoir faire tous les calculs à la main. <br>
Dans les chapitres sur le polymorphisme, nous avons vu un moyen d'exécuter un code différent pour deux types semblables. Cette fois, nous allons voir comment faire s'exécuter un même code pour différents types de variables ou classes. Cela nous permettra d'éviter la tâche répétitive de réécriture de portions de code semblables pour différents types.<br>
<br>
Dans ce premier chapitre, nous allons mettre en place la base des templates en travaillant avec des fonctions. Plus tard, nous apprendrons comment appliquer cela à des classes.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_85893">Ce que l'on aimerait faire</h2>
		<div class="ss_part_texte">
		<h3>Une fonction mathématique toute simple</h3><br>
<br>
Il arrive souvent qu'on ait besoin d'opérations mathématiques dans nos programmes. Une opération toute simple est celle qui consiste à trouver le plus grand de deux nombres. Dans le cas des nombres entiers, on pourrait écrire une fonction comme suit :<br>
<br>
<span class="code">Code : C++ - La fonction max - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">max</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">b</span><span class="p">)</span>
      	<span class="k">return</span> <span class="n">a</span><span class="p">;</span>
   <span class="k">else</span>
	<span class="k">return</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Si vous connaissez l'opérateur ternaire « ?: » vous auriez aussi pu écrire <span class="code2 cpp"><span class="k">return</span> <span class="n">a</span><span class="o">&gt;</span><span class="n">b</span> <span class="o">?</span> <span class="nl">a:</span><span class="n">b</span><span class="p">;</span>
</span> dans le corps de la fonction. </div><br>
<br>
Cette fonction est très bien et elle n'a pas de problème. Cependant, si un utilisateur de votre fonction aimerait utiliser des double à la place des int, il risque d'avoir un problème. Il faudrait donc fournir également une version de cette fonction utilisant des nombres réels.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="syntax"><pre><span class="kt">double</span> <span class="n">max</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span><span class="kt">double</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">b</span><span class="p">)</span>
      	<span class="k">return</span> <span class="n">a</span><span class="p">;</span>
   <span class="k">else</span>
	<span class="k">return</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour être rigoureux, il faudrait également fournir une fonction de ce type pour les <span class="courrier">unsigned int</span>, les <span class="courrier">float</span>, les <span class="impact">long</span>, les <span class="courrier">unsigned long</span>, les <span class="courrier">long long</span>, les nombres rationnels, etc. On se rend vite compte que la tâche est très répétitive. <br>
Cependant, il y a un point commun à toutes ces fonctions, le <span class="rouge"><strong>corps de la fonction est strictement identique</strong></span>. Quel que soit le type, le traitement que l'on effectue est le même. On se rend compte que l'algorithme utilisé dans la fonction est <span class="italique">générique</span>.<br>
<br>
Il serait donc intéressant de pouvoir écrire une seule fois la fonction en disant au compilateur : « Cette fonction est la même pour tous les types, fais le sale boulot de recopie du code toi-même. » Eh bien, ça tombe bien parce que c'est ce que permettent les <span class="italique">templates</span> en C++ et c'est ce que nous allons apprendre à utiliser dans la suite.<br>
<br>
Le terme français pour <span class="italique">template</span> est <span class="rouge"><strong>modèle</strong></span>. Le nom est bien choisi car il décrit précisément ce que nous allons faire. Nous allons écrire un modèle de fonction et le compilateur va utiliser ce modèle dans les différents cas qui nous intéressent.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_85892">Écrire une fonction template</h2>
		<div class="ss_part_texte">
		<h3>Écrire la fonction</h3><br>
<br>
Pour indiquer au compilateur que l'on veut faire une fonction générique, on va déclarer un « type variable » qui peut représenter n'importe quel autre type. On parle de type générique. Cela se fait de la manière suivante :<br>
<br>
<span class="code">Code : C++ - Déclaration d'un type générique - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous pouvez remarquer quatre choses importantes. <br>
<ol class="liste_1">
<li>Premièrement le mot-clé <span class="courrier">template</span> qui prévient le compilateur que la prochaine chose dont on va lui parler sera générique.</li>
<li>Deuxièmement, les symboles "<strong>&lt;</strong>" et "<strong>&gt;</strong>" que vous avez certainement déjà aperçus dans le chapitre sur les vectors. C'est la marque de fabrique des templates.</li>
<li>Troisièmement, le mot-clé <span class="code2 cpp"><span class="k">typename</span>
</span> qui indique au compilateur que T sera le nom que l'on va utiliser pour notre « type spécial » qui remplace n'importe quoi.</li>
<li>Finalement, il n'y a <strong>PAS</strong> de point-virgule à la fin de la ligne.</li></ol><br>
<div class="rmq information"><br>
On peut également utiliser le mot-clé <span class="courrier">class</span> à la place de <span class="courrier">typename</span> dans ce contexte. Il n'y a aucune différence. Cela donne : <span class="code2 cpp"><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span>. J'utiliserai <span class="impact">typename</span> dans la suite pour éviter les confusions. </div><br>
<br>
<span class="spoiler_hidden">Secret <a href="?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden">Beaucoup de programmeurs utilisent class à la place de typename en invoquant la raison que cela fait 3 caractères de moins à taper...  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> </div></div><br>
<br>
La ligne de code précédente indique au compilateur que dans la suite, <strong>T</strong> sera un type générique pouvant représenter n'importe quel autre type. On pourra donc utiliser ce <strong>T</strong> dans notre fonction comme type pour les arguments et pour le type de retour.<br>
<br>
<span class="code">Code : C++ - Ma première fonction template - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">max</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">b</span><span class="p">)</span>
      	<span class="k">return</span> <span class="n">a</span><span class="p">;</span>
   <span class="k">else</span>
	<span class="k">return</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Quand il va voir cela, le compilateur va automatiquement générer une série de fonctions max() pour tous les types dont vous avez besoin. Cela veut dire que si vous avez besoin de cette fonction pour des entiers, le compilateur va créer la fonction : <br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">max</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">b</span><span class="p">)</span>
      	<span class="k">return</span> <span class="n">a</span><span class="p">;</span>
   <span class="k">else</span>
	<span class="k">return</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
et de même pour les double, float, etc.<br>
<br>
On peut donc par exemple écrire le petit programme suivant :<br>
<br>
<span class="code">Code : C++ - Test de la fonction max - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">max</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">b</span><span class="p">)</span>
      	<span class="k">return</span> <span class="n">a</span><span class="p">;</span>
   <span class="k">else</span>
	<span class="k">return</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
     <span class="kt">double</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
     <span class="kt">double</span> <span class="n">e</span> <span class="o">=</span> <span class="mf">2.71</span><span class="p">;</span>

     <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="p">(</span><span class="n">pi</span><span class="p">,</span><span class="n">e</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  <span class="c">// Utilise la "version double" de la fonction.</span>

     <span class="kt">int</span> <span class="n">cave</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
     <span class="kt">int</span> <span class="n">dernierEtage</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>

     <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="p">(</span><span class="n">cave</span><span class="p">,</span><span class="n">dernierEtage</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>   <span class="c">// Utilise la "version int" de la fonction.</span>

     <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a</span><span class="p">(</span><span class="mi">43</span><span class="p">);</span>
     <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">b</span><span class="p">(</span><span class="mi">87</span><span class="p">);</span>

     <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>   <span class="c">// Utilise la "version unsigned int" de la fonction.</span>

     <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Nous verrons plus en détails ce qui se passe réellement lors de la compilation plus tard. Le point crucial est de comprendre comment le compilateur sait quelle « version » (double, int...) de la fonction utiliser.</div><br>
<br>
Et tout cela se passe sans que l'on ait besoin d'écrire plus de code. On n'a nulle part besoin d'indiquer quelque chose de spécial dans notre <span class="italique">main()</span> pour utiliser la fonction.<br>
<br>
Si vous êtes attentifs, vous avez peut-être remarqué que j'ai remplacé le passage par valeur pour les arguments par des références constantes. En effet, on ne sait pas quel type l'utilisateur va utiliser avec notre fonction max(). La taille de ce type sera peut-être très grande ; on passe donc une référence constante pour éviter une copie inutile.<br>
<br>
<h3>Où mettre la fonction ?</h3><br>
<br>
Habituellement, un programme est subdivisé en plusieurs fichiers que l'on classe en deux catégories. Les fichiers de code (les <span class="italique">.cpp</span>) et les fichiers d'en-tête (les <span class="italique">.h</span>). Généralement, on met le prototype de la fonction dans un <span class="italique">.h</span> et la définition dans le <span class="italique">.cpp</span> comme M@teo21 vous l'a expliqué. <br>
Pour les fonctions templates, c'est différent. TOUT doit obligatoirement se trouver dans le fichier <span class="italique">.h</span>, sinon votre programme ne pourra pas compiler.<br>
<br>
Je le répète encore une fois, car c'est une erreur classique, <strong><span class="rouge">le prototype ET la définition d'une fonction template doivent obligatoirement se trouver dans un fichier d'en-tête</span></strong>.<br>
<br>
Certaines personnes utilisent une <span class="italique">astuce</span> pour <span class="italique">simuler</span> la séparation <span class="italique">.cpp</span>/<span class="italique">.h</span> habituelle. Ils écrivent les fichiers <span class="italique">.h</span> et <span class="italique">.cpp</span> comme toujours. On inclut ensuite le fichier <span class="italique">.cpp</span> <span class="souligne">à la fin</span> du fichier <span class="italique">.h</span>. <br>
Pour bien montrer que les fonctions sont templates, le fichier <span class="italique">.cpp</span> a souvent l'extension <span class="italique">.tpp</span> (ou <span class="italique">.tpl</span>) à la place de <span class="italique">.cpp</span>. Le "t" étant là pour dire « template ».<br>
<br>
<div class="rmq information">Il existe en C++ un mot-clé spécial « <strong>export</strong> », permettant d'écrire la définition d'une fonction dans un <span class="italique">.cpp</span>. Ce mot-clé n'est PAS supporté par la plupart des compilateurs. En particulier les compilateurs Visual C++ ainsi que G++ (MinGW sous windows) ne permettent PAS d'utiliser ce mot-clé. </div><br>
<br>
<h3>Tous les types sont-ils utilisables ?</h3><br>
<br>
J'ai dit plus haut que le compilateur allait générer toutes les fonctions nécessaires. Cependant, il y a quand même une <span class="rouge"><span class="italique">contrainte</span></span> : le type que l'on passe à la fonction doit posséder un <strong>operator&gt;</strong>. <br>
On impose donc un certain comportement aux « choses » que l'on passe à la fonction. <br>
Cela permet donc d'interdire certains types. Par exemple, on ne peut pas utiliser cette fonction avec un « Personnage » des chapitres précédents. Et cela est bien, puisque prendre le maximum de deux Personnages n'a pas de sens. <br>
Les contraintes sont donc une limitation des types qui peuvent être passés en argument à la fonction. Les contraintes sont intimement liées à la notion de <span class="italique">template</span>.<br>
<br>
On retrouve la notion de contraintes partout. Par exemple, vous vous souvenez (j'espère  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> ) que certaines fonctions de std::vector ne sont disponibles que si cet objet possède un <strong>operator= </strong>et un contructeur de copie.<br>
<br>
Cela permet de limiter notre fonction qu'à certains types qui ont un <span class="rouge"><span class="italique">comportement </span></span> bien défini. Nous reviendrons plus en détails là-dessus plus tard.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_85891">Une fonction plus complexe</h2>
		<div class="ss_part_texte">
		Maintenant que nous avons vu la base, nous pouvons écrire une autre fonction plus compliquée.<br>
<br>
Vous vous souvenez peut-être d'un des premiers programmes que vous avez écrits en C dans le cours de M@teo21, il s'agissait de calculer la moyenne des valeurs contenues dans un tableau. Nous allons faire de même mais de manière à gérer des tableaux contenant un type quelconque. <br>
<br>
Premièrement, il nous faut prévenir le compilateur que nous allons utiliser un type générique.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Nous pouvons maintenant écrire le prototype de la fonction. Nous avons besoin de deux arguments, un tableau de T ainsi que de la taille de ce tableau. La taille n'est pas template puisqu'il s'agit toujours d'un entier positif. Le type de retour sera également un T puisque la moyenne doit être du même type que les choses contenues dans le tableau.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">moyenne</span><span class="p">(</span><span class="n">T</span> <span class="n">tableau</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">taille</span><span class="p">)</span>
<span class="p">{</span> 
   <span class="c">// ...</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq attention">Bien que la fonction possède un paramètre template, il n'est pas nécessaire que tous les paramètres soient templates.</div><br>
<br>
La moyenne se calcule en créant une variable contenant la somme des éléments dans le tableau. On divise ensuite cette variable par la taille du tableau. Commençons par créer cette variable. De quel type doit-elle être ? T bien sûr ! Elle doit être du même type que ce qui est dans le tableau pour que les additions puissent se faire.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">moyenne</span><span class="p">(</span><span class="n">T</span> <span class="n">tableau</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">taille</span><span class="p">)</span>
<span class="p">{</span> 
   <span class="n">T</span> <span class="n">somme</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>   <span class="c">// La somme des éléments du tableau.</span>
   <span class="c">// ...</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il nous faut ensuite additionner tous les éléments contenus dans le tableau. Cela se fait évidemment via une boucle.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">moyenne</span><span class="p">(</span><span class="n">T</span> <span class="n">tableau</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">taille</span><span class="p">)</span>
<span class="p">{</span> 
   <span class="n">T</span> <span class="n">somme</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>   <span class="c">// La somme des éléments du tableau.</span>
   <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">taille</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
      <span class="n">somme</span> <span class="o">+=</span> <span class="n">tableau</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
   <span class="c">// ...</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et finalement, on divise par le nombre d'éléments contenus dans le tableau.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">moyenne</span><span class="p">(</span><span class="n">T</span> <span class="n">tableau</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">taille</span><span class="p">)</span>
<span class="p">{</span> 
   <span class="n">T</span> <span class="n">somme</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>   <span class="c">// La somme des éléments du tableau.</span>
   <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">taille</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
      <span class="n">somme</span> <span class="o">+=</span> <span class="n">tableau</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

   <span class="k">return</span> <span class="n">somme</span><span class="o">/</span><span class="n">taille</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et voilà. <img src="./cpp2_files/magicien.png" alt=":magicien:" class="smilies"> On est arrivé au bout. Ce n'était pas bien difficile.<br>
<br>
<div class="rmq information"> Vous remarquerez qu'il y a quand même un problème si on utilise cette fonction avec un tableau d'entiers. En effet, la moyenne se calcule grâce à une division. Si on utilise la fonction avec des entiers, on aura donc une division entière et donc pas forcément le résultat attendu.<br>
On verra dans le chapitre suivant comment résoudre ce problème.</div><br>
<br>
<div class="rmq question">Euh... Les vector c'est pas mieux que les tableaux ?</div><br>
Mmmh... Vous en voulez encore. Bon. Il n'y a en fait pas grand chose à changer. On n'a plus besoin du paramètre <span class="impact">taille</span> et ce n'est plus un tableau de T mais un vector&lt;T&gt; que l'on reçoit en argument. Essayez de faire les modifications par vous-même. <br>
<br>
C'est bon ? Voici la solution :<br>
<br>
<span class="spoiler_hidden">Secret <a href="?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden"> <span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;vector&gt;</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">moyenne</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">tableau</span><span class="p">)</span>
<span class="p">{</span>
   <span class="n">T</span> <span class="n">somme</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
   <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">tableau</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="n">somme</span> <span class="o">+=</span> <span class="n">tableau</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

   <span class="k">return</span> <span class="n">somme</span><span class="o">/</span><span class="n">tableau</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div></div></div><br>
<br>
Bon. J'ai assez travaillé. Il est temps que vous écriviez vous-même vos propres fonctions templates. Voici une liste d'idées que vous pourriez (devriez  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> ) programmer :<br>
<br>
<ul>
<li>une fonction renvoyant le plus petit de deux éléments,</li>
<li>une fonction renvoyant le plus petit élément d'un tableau,</li>
<li>une fonction qui trie un tableau d'éléments quelconques.</li>
</ul><br>
<br>
<span class="italique">Happy coding!</span>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Le prochain chapitre nous mènera plus en avant dans la découverte des templates. Essayez de faire les exercices proposés avant de lire la suite, cela vous permettra de bien assimiler les informations nécessaires à la bonne compréhension de la suite.
	</div>
	
	<hr>
	<h1 id="chap_129462">L'instanciation</h1>
	<div id="chap_intro">
	Dans le chapitre précédent, nous avons vu comment écrire des fonctions templates et comment les utiliser dans nos programmes.<br>
Il est maintenant temps d'aller plus loin en se demandant comment fait le compilateur pour générer le code correspondant à nos fonctions génériques. Nous verrons également comment lui forcer la main pour lui faire choisir le bon type lorsque cela devient ambigu.<br>
<br>
<div class="rmq information">Ce chapitre est plus technique que le précédent et vous aurez certainement l'impression de ne pas apprendre beaucoup de choses. Ce sont cependant des points essentiels.</div>
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_129461">Instanciation implicite</h2>
		<div class="ss_part_texte">
		<h3>Retour sur le maximum</h3><br>
<br>
Dans le chapitre précédent, nous avons écrit une fonction permettant de calculer le maximum de deux éléments.<br>
<br>
<span class="code">Code : C++ - Le maximum - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">max</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">b</span><span class="p">)</span>
      	<span class="k">return</span> <span class="n">a</span><span class="p">;</span>
   <span class="k">else</span>
	<span class="k">return</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Puis, nous avons utilisé notre fonction de la manière suivante:<br>
<br>
<span class="code">Code : C++ - Utilisation du maximum - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
     <span class="kt">double</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
     <span class="kt">double</span> <span class="n">e</span> <span class="o">=</span> <span class="mf">2.71</span><span class="p">;</span>

     <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="p">(</span><span class="n">pi</span><span class="p">,</span><span class="n">e</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  <span class="c">//Utilise la "version double" de la fonction</span>

     <span class="kt">int</span> <span class="n">cave</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
     <span class="kt">int</span> <span class="n">dernierEtage</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>

     <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="p">(</span><span class="n">cave</span><span class="p">,</span><span class="n">dernierEtage</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>   <span class="c">//Utilise la "version int" de la fonction</span>

     <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a</span><span class="p">(</span><span class="mi">43</span><span class="p">);</span>
     <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">b</span><span class="p">(</span><span class="mi">87</span><span class="p">);</span>

     <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>   <span class="c">//Utilise la "version unsigned int" de la fonction</span>

     <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous pouvez le remarquer, nous n'avons indiqué nulle part quelle "version" de la fonction le programme doit utiliser. Le compilateur a décidé en se basant sur le <span class="italique">contexte</span> ce qu'il devait faire. On parle dans ce cas d'<strong><span class="rouge">instanciation implicite</span></strong> de la fonction.<br>
Lors du 3ème appel de fonction, le compilateur a compris tout seul qu'il fallait utiliser une "version <span class="code2 cpp"><span class="kt">unsigned</span> <span class="kt">int</span>
</span>" de la fonction. Il a utilisé ce qu'on appelle la <span class="rouge"><strong>détection automatique des types</strong></span>.<br>
<br>
Imaginons maintenant que l'on veuille comparer <span class="courrier">dernierEtage</span> à <span class="courrier">pi</span>. Nous serions tenté d'écrire quelque chose comme:<br>
<br>
<span class="code">Code : C++ - Erreur - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
     <span class="kt">double</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
     <span class="kt">int</span> <span class="n">dernierEtage</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>

     <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="p">(</span><span class="n">pi</span><span class="p">,</span><span class="n">dernierEtage</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

     <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et là, c'est le drame. On obtient une erreur de la part du compilateur.<br>
<span class="code">Code : Console - Erreur sous GCC 4.2.4 - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>error:&nbsp;no&nbsp;matching&nbsp;function&nbsp;for&nbsp;call&nbsp;to&nbsp;`max(unsigned&nbsp;int&amp;,&nbsp;double&amp;)'</pre></div></td></tr></tbody></table></div><br>
<div class="rmq information">Le message d'erreur sera différent selon le compilateur que vous utilisez.</div><br>
<br>
C'est pourtant bien normal. Vous auriez pu vous y attendre et me prévenir ! En effet, nous avons écrits une fonction qui prenaient deux T comme arguments. Mais ce doit être le même T. On ne peut pas avoir un <span class="code2 cpp"><span class="kt">double</span>
</span> et un <span class="code2 cpp"><span class="kt">unsigned</span> <span class="kt">int</span>
</span>. Ce sont deux types différents. Et comme on ne peut pas comparer les pommes et les oranges (ou en tout cas, votre ordinateur ne sait pas le faire  <img src="./cpp2_files/rire.gif" alt=":lol:" class="smilies"> ), le compilateur vous informe qu'il ne trouve aucune fonction correspondant à ce que vous avez demandé.<br>
<br>
A ce moment là, il y a 3 solutions qui s'offrent à nous. <br>
<ol class="liste_1">
<li>Transformer <span class="courrier">dernierEtage</span> en <span class="code2 cpp"><span class="kt">double</span>
</span>. </li>
<li>Ecrire une fonction spécifique pour le couple <span class="code2 cpp"><span class="kt">double</span>
</span> - <span class="code2 cpp"><span class="kt">unsigned</span> <span class="kt">int</span>
</span>.</li>
<li>Forcer le compilateur à utiliser l'une ou l'autre des versions disponibles.</li></ol><br>
<br>
Vous savez déjà comment réaliser la première solution, mais vous conviendrez que ce n'est pas très pratique en général. Si il y a des types différents c'est justement pour qu'on les utilise. Sinon, on utiliserait <span class="code2 cpp"><span class="kt">double</span>
</span> pour tout.<br>
<br>
La deuxième solution est plus intéressante puisqu'elle ne demande pas de modifier les variables, mais plutôt de créer du code dédié à ce cas spécial. C'est assez fastidieux de devoir réaliser cela pour tous les couples qui posent problème. <br>
<br>
La troisième solution est celle qui va nous intéresser dans la suite. Nous allons "forcer" le compilateur à utiliser une des deux versions disponibles (<span class="code2 cpp"><span class="kt">double</span>
</span> ou <span class="code2 cpp"><span class="kt">unsigned</span> <span class="kt">int</span>
</span>). Cela se fait sans avoir besoin de changer le type des variables et sans écrire de code supplémentaire.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_129460">Instanciation explicite</h2>
		<div class="ss_part_texte">
		<h3>Forcer la main</h3><br>
<br>
Comme <span class="code2 cpp"><span class="kt">double</span>
</span> peut représenter plus de valeurs que <span class="code2 cpp"><span class="kt">unsigned</span> <span class="kt">int</span>
</span>, on est tenté d'utiliser la version <span class="code2 cpp"><span class="kt">double</span>
</span> de la fonction. Je vous ai fait patienter assez, voici la syntaxe :<br>
<br>
<span class="code">Code : C++ - Plus d'erreur - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
     <span class="kt">double</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
     <span class="kt">int</span> <span class="n">dernierEtage</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>

<span class="ln-xtra">     <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">pi</span><span class="p">,</span><span class="n">dernierEtage</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span></span>

     <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et cette fois, ça marche.  <img src="./cpp2_files/magicien.png" alt=":magicien:" class="smilies"> <br>
<br>
Il suffit donc d'expliciter la "version" de la fonction que l'on veut utiliser dans son nom. On appelle cela l'<strong><span class="rouge">instanciation explicite</span></strong>.<br>
<br>
Cela va plus loin, nous aurions très bien pu utiliser une autre version de la fonction. Par exemple, <span class="code2 cpp"><span class="kt">int</span>
</span>, <span class="code2 cpp"><span class="kt">float</span>
</span> ou même <span class="code2 cpp"><span class="kt">bool</span>
</span>. Du moment qu'il existe un moyen pour le compilateur de convertir les deux variables dans le type choisi et que l'opérateur de comparaison existe.<br>
<br>
Les appels <br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">pi</span><span class="p">,</span><span class="n">dernierEtage</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">(</span><span class="n">pi</span><span class="p">,</span><span class="n">dernierEtage</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
sont donc des appels de fonctions valides puisque le compilateur sait comment convertir automatiquement un <span class="code2 cpp"><span class="kt">double</span>
</span> et un <span class="code2 cpp"><span class="kt">unsigned</span> <span class="kt">int</span>
</span> dans les types correspondants (<span class="code2 cpp"><span class="kt">char</span>
</span> et <span class="code2 cpp"><span class="kt">bool</span>
</span>). Même si ça n'a pas vraiment de sens de faire ça.<br>
<br>
<div class="rmq question">Mais... N'est-ce pas une erreur de conception d'avoir à forcer la main au compilateur ?</div><br>
<br>
Oui cela peut-être le cas. Mais il est des cas plus complexes où le compilateur n'est pas assez intelligent pour déterminer ce que vous voulez faire. Si cela se produit, l'instanciation explicite est la seule solution.<br>
<br>
L'autre cas où cela se produit est celui où le type de retour de la fonction est template. Prenons le cas de la fonction suivante, sensée renvoyer 0 dans un type voulu.<br>
<br>
<span class="code">Code : C++ - La fonction du zéro - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">zero</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le problème est d'appeler cette fonction. Comme il n'y a pas de paramètre (template), le compilateur ne sait pas quelle "version" utiliser. Il faut donc le lui indiquer à chaque fois que l'on veut l'utiliser.<br>
<br>
<span class="code">Code : C++ - Utilisation de zero() - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">zero</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">();</span>
    <span class="kt">double</span> <span class="n">b</span> <span class="o">=</span> <span class="n">zero</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">();</span>
 
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le mieux est encore de voir ça sur un exemple plus utile.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_129459">Retour sur la moyenne</h2>
		<div class="ss_part_texte">
		Si vous vous souvenez bien, nous avions écrit la fonction suivante pour calculer la moyenne d'un tableau.<br>
<br>
<span class="code">Code : C++ - Moyenne. Un nouvel espoir - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">moyenne</span><span class="p">(</span><span class="n">T</span> <span class="n">tableau</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">taille</span><span class="p">)</span>
<span class="p">{</span> 
   <span class="n">T</span> <span class="n">somme</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>   <span class="c">//La somme des elements du tableau</span>
   <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">taille</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
      <span class="n">somme</span> <span class="o">+=</span> <span class="n">tableau</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

   <span class="k">return</span> <span class="n">somme</span><span class="o">/</span><span class="n">taille</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le problème que nous avions était que pour le type <span class="code2 cpp"><span class="kt">int</span>
</span>, on se retrouvait avec une division entière qui posait problème (Les moyennes étaient arrondies vers le bas). Ce problème serait résolu si l'on pouvait utiliser un type différent de <span class="code2 cpp"><span class="kt">int</span>
</span> pour la somme et donc la moyenne.<br>
<br>
Pas de problème. Ajoutons donc un deuxième paramètre template pour le type de retour et utilisons le.<br>
<br>
<span class="code">Code : C++ - Moyenne 2. Le template contre-attaque - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
<span class="n">S</span> <span class="n">moyenne</span><span class="p">(</span><span class="n">T</span> <span class="n">tableau</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">taille</span><span class="p">)</span>
<span class="p">{</span> 
   <span class="n">S</span> <span class="n">somme</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>   <span class="c">//La somme des elements du tableau</span>
   <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">taille</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
      <span class="n">somme</span> <span class="o">+=</span> <span class="n">tableau</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

   <span class="k">return</span> <span class="n">somme</span><span class="o">/</span><span class="n">taille</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Avec cela, il est enfin possible de calculer la moyenne correctement. Cela a seulement un petit coût pour le programmeur, il faut écrire les types voulus lors de l'appel de la fonction.<br>
<br>
<span class="code">Code : C++ - Moyenne 3. Le retour du main - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include&lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
<span class="n">S</span> <span class="n">moyenne</span><span class="p">(</span><span class="n">T</span> <span class="n">tableau</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">taille</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">S</span> <span class="n">somme</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>   <span class="c">//La somme des elements du tableau                              </span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">taille</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="n">somme</span> <span class="o">+=</span> <span class="n">tableau</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

  <span class="k">return</span> <span class="n">somme</span><span class="o">/</span><span class="n">taille</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">tab</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">};</span>

  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Moyenne : "</span> <span class="o">&lt;&lt;</span> <span class="n">moyenne</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">tab</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Le résultat est cette fois bien celui qu'on attend.<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Moyenne&nbsp;:&nbsp;1.6</pre></div></td></tr></tbody></table></div><br>
<br>
Voilà, vous savez tout sur l'instanciation des fonctions templates. Pour bien assimiler le tout, je ne peux que vous inviter à faire quelques exercices, par exemple:<br>
<br>
<ul>
<li>Récrire la fonction moyenne() pour qu'elle reçoive en argument un <span class="code2 cpp"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span> à la place d'un tableau normal.</li>
<li>Ecrire une fonction template renvoyant un nombre aléatoire d'un type donné.</li>
</ul><br>
<br>
Amusez-vous bien !
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Le prochain chapitre va nous amener plus loin dans la découverte des templates, puisque nous parlerons de la spécialisation.
	</div>
	
	<hr>
	<h1 id="chap_130739">Spécialisation</h1>
	<div id="chap_intro">
	Jusqu'à maintenant, nous avons vu comment écrire des fonctions génériques qui avaient le même comportement quelque soit le type utilisé. Il y a souvent des cas où l'on a besoin d'avoir un comportement particulier pour certains types. On parle alors de <strong>spécialisation</strong>.<br>
<br>
Nous allons voir dans ce chapitre comment spécialiser nos fonctions templates pour leur donner un comportement différent.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_130738">Ce que l'on veut faire</h2>
		<div class="ss_part_texte">
		<h3>Notre vieil exemple</h3><br>
<br>
Vous souvenez-vous de notre exemple précédent ? J'espère que oui, parce qu'on ne va pas changer tout de suite. Revoilà donc la fonction max.<br>
<br>
<span class="code">Code : C++ - Le maximum - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">max</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
   <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">b</span><span class="p">)</span>
      	<span class="k">return</span> <span class="n">a</span><span class="p">;</span>
   <span class="k">else</span>
	<span class="k">return</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour l'instant, nous ne l'avons essayé qu'avec des types de base. Essayons-là donc avec une chaîne de caractères.<br>
<br>
<span class="code">Code : C++ - Comparaison de chaînes - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;string&gt;</span>

<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">max</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">b</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
  <span class="k">else</span>
    <span class="k">return</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Le plus grand est: "</span> <span class="o">&lt;&lt;</span><span class="n">max</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"elephant"</span><span class="p">,</span><span class="s">"souris"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Vous remarquerez que l'on utilise une instanciation explicite. Pourquoi cela ? Tout simplement parce que le compilateur ne sait pas que l'on a affaire à des string et pas des char*. Si l'on compare des char*, ce n'est pas les chaînes qui sont comparées, mais l'adresse des pointeurs.</div><br>
<br>
La question que vous pouvez vous poser est de savoir pourquoi cela fonctionne. En effet, notre fonction a besoin de l'opérateur &lt; pour le type utilisé. Un petit tour dans une documentation (<a href="http://cplusplus.com/reference/string/operators/">ici</a> ou <a href="http://www.sgi.com/tech/stl/basic_string.html">ici</a>) vous montrera que les string possèdent effectivement un opérateur &lt;. La comparaison se fait selon l'ordre lexicographique, c'est-à-dire que les chaînes sont comparées par rapport à la position qu'elles auraient dans un dictionnaire.<br>
<br>
Le résultat du programme précédent est donc:<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Le&nbsp;plus&nbsp;grand&nbsp;est:&nbsp;souris</pre></div></td></tr></tbody></table></div><br>
<br>
Imaginons que ce critère de comparaison ne nous intéresse pas et que ce soit plutôt la longueur de la chaîne qui nous préoccupe. <br>
<br>
<h3>Une mauvaise solution</h3><br>
<br>
La première idée que l'on pourrait avoir serait d'écrire une autre fonction max spécialement pour ce cas. <br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="syntax"><pre><span class="ln-xtra"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">max</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span></span>
<span class="p">{</span>
<span class="ln-xtra">  <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">())</span></span>
    <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
  <span class="k">else</span>
    <span class="k">return</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cela marche très bien et l'on a bien la comparaison voulue. Le seul problème est que l'utilisateur doit savoir qu'il faut utiliser la fonction <span class="italique">spéciale</span>. Si l'on appelle <span class="code2 cpp"><span class="n">max</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"elephant"</span><span class="p">,</span><span class="s">"souris"</span><span class="p">)</span>
</span>, ce sera toujours la fonction template normale qui sera appelée avec le résultat que l'on connait.<br>
<br>
Ce que nous voulons c'est spécialiser la fonction template.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_130737">La spécialisation</h2>
		<div class="ss_part_texte">
		<h3>La spécialisation totale</h3><br>
<br>
La spécialisation se fait en utilisant la syntaxe suivante :<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="ln-xtra"><span class="k">template</span> <span class="o">&lt;&gt;</span></span>
<span class="ln-xtra"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">max</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span></span>
<span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">&gt;</span><span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
  <span class="k">else</span>
    <span class="k">return</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous remarquerez la première ligne qui ne comporte aucun type entre &lt; et &gt;. La deuxième chose à relever est le prototype de la fonction qui comporte cette fois le type que l'on veut et plus le type générique <strong>T</strong>.<br>
<br>
Cette fois un appel à la fonction template avec une instanciation explicite fonctionne parfaitement.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Le plus grand est: "</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"elephant"</span><span class="p">,</span><span class="s">"souris"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Le&nbsp;plus&nbsp;grand&nbsp;est:&nbsp;elephant</pre></div></td></tr></tbody></table></div><br>
<br>
La seule difficulté de la spécialisation est la syntaxe qui commence par la ligne <span class="code2 cpp"><span class="k">template</span><span class="o">&lt;&gt;</span>
</span>. Si vous vous souvenez de ça, vous savez tout.<br>
<br>
<div class="rmq information">Vous pouvez évidemment spécialiser la fonction pour plusieurs types différents. Il vous faudra alors créer une spécialisation pour chaque type.</div><br>
<br>
<h3>L'ordre des fonctions</h3><br>
<br>
Pour pouvoir compiler et avoir le comportement voulu, votre programme devra être organisé de la manière suivante :<br>
<br>
<ol class="liste_1">
<li>La fonction générique</li>
<li>Les fonctions spécialisées</li></ol><br>
<br>
L'ordre est essentiel.<br>
Lors de la compilation, le compilateur cherche une fonction spécialisée. S'il n'en trouve pas, alors il utilise la fonction générique déclarée au-dessus.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_130736">D'autres spécialisations</h2>
		<div class="ss_part_texte">
		<h3>Le problème des pointeurs</h3><br>
<br>
La spécialisation va plus loin. Nous avons vu comment l'utiliser pour un type particulier, mais on peut aussi le faire pour une "catégorie" de types. Par exemple les pointeurs.<br>
<br>
Prenons le code suivant comme exemple.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
   <span class="kt">int</span><span class="o">*</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>

  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Le plus grand est: "</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
 
  <span class="k">delete</span> <span class="n">a</span><span class="p">;</span>
  <span class="k">delete</span> <span class="n">b</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">L'utilisation de new et delete ici n'est justifiée que par le fait que je veux mettre les pointeurs en évidence. Il n'y a aucune raison d'utiliser les new et delete dans un cas de ce genre.</div><br>
<br>
L'exécution donnera un résultat pour le moins étrange.  <img src="./cpp2_files/unsure.gif" alt=":euh:" class="smilies"> <br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Le&nbsp;plus&nbsp;grand&nbsp;est:&nbsp;0x804a018</pre></div></td></tr></tbody></table></div><br>
<br>
Que s'est-il passé ? Et bien, le compilateur a pris la fonction générique et l'a instanciée (implicitement) avec le type <strong>int*</strong>. L'ordinateur compare donc deux adresses dans la mémoire et nous renvoit la plus grande. <br>
<br>
La solution serait donc de créer une spécialisation pour les pointeurs en général de sorte que la fonction générique ait un comportement particulier. Et vous vous doutez bien que si je vous en parle c'est que ça existe.  <img src="./cpp2_files/soleil.png" alt=":soleil:" class="smilies"> <br>
<br>
<h3>La spécialisation</h3><br>
<br>
La syntaxe est presque celle de la fonction générique. On déclare à nouveau un type générique <strong>T</strong>, mais cette fois on met en argument de la fonction un <strong>T*</strong>.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="ln-xtra"><span class="n">T</span> <span class="n">max</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="n">T</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span></span>
<span class="p">{</span>
    <span class="c1">// A venir...</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Que mettre dans le corps ?</div><br>
<br>
Comme la meilleure qualité du programmeur est la fainéantise, nous allons ré-utiliser la fonction générique de base pour éviter de récrire du code inutile. Il nous suffit de donner en argument à la fonction template les deux pointeurs déréférencés.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">max</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="n">T</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">max</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">);</span>  <span class="c1">// Appel a la fonction generique de base</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous remarquerez l'appel explicite qui permet d'éviter un comportement bizarre au cas où le compilateur choisirait le mauvais type.<br>
<br>
<div class="rmq information">Le compilateur ne devrait pas choisir le mauvais type puisqu'il a toutes les cartes en main pour déterminer que est le type exact de T. Mettre <span class="courrier">max&lt;T&gt;</span> ici est plutôt utile pour le programmeur.</div><br>
<br>
En ajoutant cette fonction, on a bien le résultat escompté.<br>
<br>
<span class="code">Code : Console - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 console"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre></pre></td><td class="code"><div class="syntax"><pre>Le&nbsp;plus&nbsp;grand&nbsp;est:&nbsp;3</pre></div></td></tr></tbody></table></div><br>
<br>
<h3>Quelques remarques</h3><br>
<br>
<h4>Ordre des fonctions</h4><br>
<br>
Dans la partie précédente, je vous ai indiqué qu'il fallait mettre la fonction générique au-dessus des fonctions spécialisées dans vos fichiers. Où faut-il donc placer cette fonction "à moitié spécialisée" ?<br>
<br>
Je pense que vous avez trouvé la réponse tout seul, il faut la mettre entre les 2 autres. On a donc l'ordre suivant:<br>
<br>
<ol class="liste_1">
<li>La fonction générique</li>
<li>La fonction spécialisée pour les pointeurs</li>
<li>Les fonctions spécialisées</li></ol><br>
<br>
<h4>D'autres spécialisations</h4><br>
<br>
Ce type de demi-spécialisation n'est pas limité aux pointeurs. On retrouve le même concept pour les types constants ou les références par exemple. La syntaxe est toujours la même.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">max</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="n">T</span><span class="o">*</span> <span class="n">b</span><span class="p">);</span>  <span class="c1">//Specialisation pour les pointeurs</span>

<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">max</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span> <span class="n">b</span><span class="p">);</span>  <span class="c1">//Specialisation pour les types constants</span>

<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">max</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">);</span>  <span class="c1">//Specialisation pour les references</span>

<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">T</span> <span class="n">max</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">);</span>  <span class="c1">//Specialisation pour les references constantes</span>

<span class="c1">//...</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Si l'on a plusieurs paramètres template, on peut faire des mélanges un petit peu plus complexe. Prenons la fonction suivante.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
<span class="kt">void</span> <span class="n">fonction</span><span class="p">(</span><span class="n">T</span> <span class="n">a</span><span class="p">,</span> <span class="n">S</span> <span class="n">b</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
On peut la spécialiser par exemple pour le cas où S est un pointeur de T.  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> <br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="kt">void</span> <span class="n">fonction</span><span class="p">(</span><span class="n">T</span> <span class="n">a</span><span class="p">,</span> <span class="n">T</span><span class="o">*</span> <span class="n">b</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Pour cela on doit toujours déclarer un type template, mais on l'utilise deux fois dans le prototype de la fonction. On peut aussi spécialiser pour un seul des types. Ce qui peut donner par exemple:<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
<span class="kt">void</span> <span class="n">fonction</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">S</span> <span class="n">b</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Tout cela donne un grand nombre de combinaisons. Habituellement, on utilise pas ou peu ce genre de combinaisons mais comme cela, vous savez tout.<br>
<br>
<h4>Est-ce bien pertinent ?</h4><br>
<br>
Attention tout de même à ce que vous faites. Avec la spécialisation pour les pointeurs, nous avons touché un point sensible. Il devient apparemment impossible de comparer deux adresses mémoire puisque le compilateur va automatiquement instancier la fonction semi-spécialisée. Est-ce vraiment ce que l'on veut ?<br>
<br>
Il faut donc vous poser la question quand vous écrivez vos fonctions. Voulez-vous un comportement en apparence simple qui permet à l'utilisateur de ne pas se soucier des pointeurs ou préférez-vous un comportement plus standard même si cela implique que l'utilisateur de la fonction risque d'être surpris par le résultat ? Cela n'a peut-être que peu d'importance sur une fonction comme celle-ci, mais cela peut avoir de réelles implications sur des projets plus importants et vous devrez y réfléchir ou au moins y penser quand le cas se présentera.<br>
<br>
Personnellement, je préfère ne pas mettre de spécialisation en laissant à l'utilisateur la liberté d'utiliser la fonction comme il le souhaite.<br>
<br>
<div class="rmq question">Mais, ne peut-on vraiment pas appeler la version de la fonction qui compare deux adresses ?</div><br>
<br>
Si, on peut. Mais je vous laisse chercher comment faire. Vous avez appris précédemment comment forcer la main au compilateur.  <img src="./cpp2_files/unsure.gif" alt=":euh:" class="smilies"> <br>
<br>
Si vous ne trouvez vraiment pas, voici la solution :<br>
<br>
<span class="spoiler_hidden">Secret <a href="?all=1#" onclick="switch_spoiler_hidden(this); return false;">(cliquez pour afficher)</a></span><div class="spoiler2_hidden"><div class="spoiler3_hidden"><br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="n">max</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span> <span class="c1">//Appel de la version qui compare les adresses</span>
</pre></div>
</td></tr></tbody></table></div><br>
</div></div>
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Avec ce troisième chapitre, nous avons terminé d'explorer les bases des templates. Il est maintenant temps d'appliquer tout ce que vous avez appris aux classes.
	</div>
	
	<hr>
	<h1 id="chap_135225">Les classes</h1>
	<div id="chap_intro">
	Vous êtes toujours là ?<br>
<br>
Après trois chapitres sur les templates, je pense qu'il est bientôt temps de passer à l'application de ces nouveaux concepts aux classes. Vous verrez que les deux derniers chapitres plutôt techniques nous aideront bien ici et cela ne devrait pas être trop difficile à suivre.<br>
<br>
Dans ce chapitre, nous allons voir comment créer une classe template et vous pourrez mettre cela en pratique dans le chapitre suivant avec un premier TP sur les templates. Des notions plus avancées seront présentées plus loin dans le cours. <br>
<br>
Ce chapitre sera basé sur un exemple classique que l'on trouve dans la plupart des bibliothèques graphiques.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_135226">La base de la classe</h2>
		<div class="ss_part_texte">
		<h3>La classe d'exemple</h3><br>
<br>
Lorsque l'on veut dessiner des choses à l'écran, on utilise quelques formes de base qui servent à décomposer les objets plus complexes. L'une de ces formes est le rectangle qui comme vous l'aurez certainement remarqué est la forme des fenêtres ou des boutons entre autres.   <img src="./cpp2_files/huh.png" alt=":o" class="smilies"> <br>
<br>
Quelles sont les propriétés d'un rectangle ?<br>
<br>
Un rectangle a quatre côtés, une surface et un périmètre. Les deux derniers éléments peuvent être calculés si l'on connait les quatre arêtes. Voilà pour les attributs.<br>
<br>
<div class="centre"><img src="./cpp2_files/174984.png" alt="Image utilisateur"></div><br>
<br>
Quelles sont les actions qu'un rectangle peut effectuer ?<br>
<br>
Ici, il y a beaucoup de choix. Nous choisirons donc les actions suivantes : vérifier si un point est contenu dans le rectangle et déplacer le rectangle.<br>
<br>
Nous pourrions donc modéliser notre classe de la sorte :<br>
<br>
<div class="centre"><img src="./cpp2_files/174985.png" alt="Image utilisateur"></div><br>
<br>
<div class="rmq information">On considère ici un rectangle parallèle aux bords de l'écran ce qui permet de simplifier les positions en utilisant un seul et unique nombre par côté.</div><br>
<br>
<br>
<h3>Le type des attributs</h3><br>
<br>
Maintenant que nous avons modélisé la classe, il est temps de réfléchir aux types des attributs, en l'occurence la position des côtés. <br>
<br>
Si l'on veut avoir une bonne précision, alors il nous faut utiliser des <span class="code2 cpp"><span class="kt">double</span>
</span> ou des <span class="code2 cpp"><span class="kt">float</span>
</span>. Si par contre on considère que de toute façon l'écran est composé de pixels, on peut se dire que l'utilisation d'<span class="code2 cpp"><span class="kt">int</span>
</span> est largement suffisante.<br>
<br>
Les deux options sont possibles et on peut très bien avoir besoin des deux approches dans un seul et même programme. Et c'est là que vous devriez tous me dire : "Mais alors, utilisons donc des templates !". Vous avez bien raison. Nous allons écrire une seule classe qui pourra être instanciées avec différents types par le compilateur. <br>
<br>
<h3>Création de la classe</h3><br>
<br>
Je suis sûr que vous connaissez la syntaxe même si je ne vous l'ai pas encore donnée. Comme d'habitude, on déclare un type générique <strong>T</strong>. Puis on déclare notre classe.<br>
<br>
<span class="code">Code : C++ - La syntaxe - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Rectangle</span><span class="p">{</span>
    <span class="c">//...</span>
<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Notre type générique est reconnu par le compilateur à l'intérieur de la classe. Utilisons-le donc pour déclarer nos quatre attributs.<br>
<br>
<span class="code">Code : C++ - Les attributs - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Rectangle</span><span class="p">{</span>
 
   <span class="c">//...</span>

<span class="k">private</span><span class="o">:</span>
   
   <span class="c">//Les cotes du Rectangle</span>
   <span class="n">T</span> <span class="n">m_gauche</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_droite</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_haut</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_bas</span><span class="p">;</span>

<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Voilà. Jusque-là, ce n'était pas bien difficile. Il ne nous reste plus qu'à écrire les fonctions membres.  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies">
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_135223">Les fonctions membres</h2>
		<div class="ss_part_texte">
		<h3>Fonction dans la classe</h3><br>
<br>
Les fonctions les plus simples à écrire sont certainement les accesseurs qui permettent de connaître la valeur des attributs. La hauteur d'un rectangle est évidemment la différence entre la position du haut et la position du bas. Comme vous vous en doutez, cette fonction est template puisque le type de retour de la fonction sera un <strong>T</strong>.<br>
<br>
Nous pouvons donc écrire la fonction suivante :<br>
<br>
<span class="code">Code : C++ - Première fonction membre - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Rectangle</span><span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
 
   <span class="c">//...</span>

<span class="ln-xtra">   <span class="n">T</span> <span class="n">hauteur</span><span class="p">()</span> <span class="k">const</span></span>
<span class="ln-xtra">   <span class="p">{</span></span>
<span class="ln-xtra">      <span class="k">return</span> <span class="n">m_haut</span><span class="o">-</span><span class="n">m_bas</span><span class="p">;</span></span>
<span class="ln-xtra">   <span class="p">}</span></span>

<span class="k">private</span><span class="o">:</span>
   
   <span class="c">//Les cotes du Rectangle</span>
   <span class="n">T</span> <span class="n">m_gauche</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_droite</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_haut</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_bas</span><span class="p">;</span>

<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous remarquerez qu'il n'y a pas besoin de redéclarer le type template <strong>T</strong> juste avant la fonction membre puisque celui que nous avons déclaré avant la classe reste valable pour tout ce qui se trouve à l'intérieur.<br>
<br>
<div class="rmq question">Et si je veux mettre le corps de ma fonction à l'extérieur de ma classe ?</div><br>
<br>
Bonne question. On prend souvent l'habitude de séparer le prototype de la définition. Et cela peut se faire aussi ici. Pour faire cela, on mettra le prototype dans la classe et la définition à l'extérieur mais il faut ré-indiquer qu'on utilise un type variable <strong>T</strong> :<br>
<br>
<span class="code">Code : C++ - Fonction membre à l'extérieur - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Rectangle</span><span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
 
   <span class="c">//...</span>

<span class="ln-xtra">   <span class="n">T</span> <span class="n">hauteur</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span> </span>

<span class="k">private</span><span class="o">:</span>
   
   <span class="c">//Les cotes du Rectangle</span>
   <span class="n">T</span> <span class="n">m_gauche</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_droite</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_haut</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_bas</span><span class="p">;</span>

<span class="p">};</span>

<span class="ln-xtra"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span></span>
<span class="ln-xtra"><span class="n">T</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">hauteur</span><span class="p">()</span> <span class="k">const</span></span>
<span class="ln-xtra"><span class="p">{</span></span>
<span class="ln-xtra">   <span class="k">return</span> <span class="n">m_haut</span><span class="o">-</span><span class="n">m_bas</span><span class="p">;</span></span>
<span class="ln-xtra"><span class="p">}</span></span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous remarquerez aussi l'utilisation du type template dans le nom de la classe puisque cette fonction sera instanciée de manière différente pour chaque <strong>T</strong>.<br>
<br>
<div class="rmq attention">Vous avez peut-être pris l'habitude de mettre les prototypes de la classe dans le fichier .h et les définitions dans le .cpp. On ne peut pas faire ça ici car comme spécifié dans le premier chapitre sur les templates, tout doit se trouver dans le fichier .h. C'est une erreur usuelle.</div><br>
<br>
<br>
<h3>Une fonction un peu plus complexe</h3><br>
<br>
Une des fonctions que nous voulions écrire est celle permettant de vérifier si un point est contenu dans le rectangle ou pas. Pour cela, on doit passer un point <img src="./cpp2_files/mimetex(3).cgi" alt="(x;y)"> en argument à la fonction. Le type de ces arguments doit évidemment être <strong>T</strong>, de sorte que l'on puisse comparer les coordonnées sans avoir de conversions.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Rectangle</span><span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
 
   <span class="c">//...</span>

<span class="ln-xtra">   <span class="kt">bool</span> <span class="n">estContenu</span><span class="p">(</span><span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="n">y</span><span class="p">)</span> <span class="k">const</span></span>
   <span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="n">m_gauche</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="n">m_droite</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="n">m_bas</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">y</span> <span class="o">&lt;=</span> <span class="n">m_haut</span><span class="p">);</span>
   <span class="p">}</span>

<span class="k">private</span><span class="o">:</span>
   
   <span class="c">//Les cotes du Rectangle</span>
   <span class="n">T</span> <span class="n">m_gauche</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_droite</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_haut</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_bas</span><span class="p">;</span>

<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Vous remarquerez à nouveau l'absence de redéfintion du type <strong>T</strong>.<br>
<br>
<h3>Constructeur</h3><br>
<br>
Il ne nous reste plus qu'à traîter le cas du constructeur. A nouveau, rien de bien compliqué, on utilise simplement le type <strong>T</strong> défini avant la classe.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Rectangle</span><span class="p">{</span>
<span class="k">public</span><span class="o">:</span>

<span class="ln-xtra">   <span class="n">Rectangle</span><span class="p">(</span><span class="n">T</span> <span class="n">gauche</span><span class="p">,</span> <span class="n">T</span> <span class="n">droite</span><span class="p">,</span> <span class="n">T</span> <span class="n">haut</span><span class="p">,</span> <span class="n">T</span> <span class="n">bas</span><span class="p">)</span></span>
        <span class="o">:</span><span class="n">m_gauche</span><span class="p">(</span><span class="n">gauche</span><span class="p">),</span>
         <span class="n">m_droite</span><span class="p">(</span><span class="n">droite</span><span class="p">),</span>
         <span class="n">m_haut</span><span class="p">(</span><span class="n">haut</span><span class="p">),</span>
         <span class="n">m_bas</span><span class="p">(</span><span class="n">bas</span><span class="p">)</span>
   <span class="p">{}</span>

<span class="k">private</span><span class="o">:</span>
   
   <span class="c">//Les cotes du Rectangle</span>
   <span class="n">T</span> <span class="n">m_gauche</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_droite</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_haut</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_bas</span><span class="p">;</span>

<span class="p">};</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et comme pour les fonctions membres usuelles, on peut définir le constructeur à l'extérieur.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></td><td class="code"><div class="syntax"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Rectangle</span><span class="p">{</span>
<span class="k">public</span><span class="o">:</span>

<span class="ln-xtra">   <span class="n">Rectangle</span><span class="p">(</span><span class="n">T</span> <span class="n">gauche</span><span class="p">,</span> <span class="n">T</span> <span class="n">droite</span><span class="p">,</span> <span class="n">T</span> <span class="n">haut</span><span class="p">,</span> <span class="n">T</span> <span class="n">bas</span><span class="p">);</span></span>

<span class="k">private</span><span class="o">:</span>
   
   <span class="c">//Les cotes du Rectangle</span>
   <span class="n">T</span> <span class="n">m_gauche</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_droite</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_haut</span><span class="p">;</span>
   <span class="n">T</span> <span class="n">m_bas</span><span class="p">;</span>

<span class="p">};</span>

<span class="ln-xtra"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span></span>
<span class="ln-xtra"><span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">Rectangle</span><span class="p">(</span><span class="n">T</span> <span class="n">gauche</span><span class="p">,</span> <span class="n">T</span> <span class="n">droite</span><span class="p">,</span> <span class="n">T</span> <span class="n">haut</span><span class="p">,</span> <span class="n">T</span> <span class="n">bas</span><span class="p">)</span></span>
   <span class="o">:</span><span class="n">m_gauche</span><span class="p">(</span><span class="n">gauche</span><span class="p">),</span>
    <span class="n">m_droite</span><span class="p">(</span><span class="n">droite</span><span class="p">),</span>
    <span class="n">m_haut</span><span class="p">(</span><span class="n">haut</span><span class="p">),</span>
    <span class="n">m_bas</span><span class="p">(</span><span class="n">bas</span><span class="p">)</span>
<span class="p">{}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">On pourrait ajouter une fonction appelée dans le constructeur qui vérifie que le haut se trouve bien au-dessus du bas et de même pour droite et gauche.</div><br>
<br>
Il ne nous reste donc plus qu'à voir comment utiliser cette classe.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_135224">L'extérieur de la classe</h2>
		<div class="ss_part_texte">
		<h3>Instanciation</h3><br>
<br>
Il fallait bien y arriver un jour ! Comment crée-t-on un objet d'une classe template et en particulier de notre classe Rectangle ?<br>
<br>
En fait, je suis sûr que vous le savez déjà. <img src="./cpp2_files/unsure.gif" alt=":euh:" class="smilies">  Dans le cas d'une classe, il n'y a <strong>pas d'instanciation implicite</strong>, on doit donc explicitement indiquer les types. Si l'on veut un Rectangle composé de double, on devra donc écrire :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="n">Rectangle</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">monRectangle</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">4.5</span><span class="p">,</span> <span class="mf">3.1</span><span class="p">,</span> <span class="mf">5.2</span><span class="p">);</span>
  
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Cela doit certainement vous rappeler la classe vector que nous avons abordée dans le premier chapitre de ce tutoriel. <br>
<br>
L'utilisation des fonctions se fait ensuite comme d'habitude.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="n">Rectangle</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">monRectangle</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">4.5</span><span class="p">,</span> <span class="mf">3.1</span><span class="p">,</span> <span class="mf">5.2</span><span class="p">);</span>

   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">monRectangle</span><span class="p">.</span><span class="n">hauteur</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Comme vous le voyez, il n'y a ici rien de bien compliqué.  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> <br>
<br>
<h3>Les opérateurs externes</h3><br>
<br>
Il arrive souvent que nos classes aient des opérateurs définis à l'extérieur de la classe. Le cas le plus courant est certainement celui de l'opérateur de comparaison == que l'on retrouve presque partout. <br>
<div class="rmq question">Comment écrire un tel opérateur pour une classe template ?</div><br>
Là non plus, rien de bien compliqué. On écrit notre fonction comme d'habitude et on ajoute la déclaration <span class="code2 cpp"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span> juste avant, histoire de prévenir le compilateur que nous allons utiliser un type générique.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="kt">bool</span> <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">b</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
La seule subtilité ici étant que les arguments sont des <strong>Rectangle&lt;T&gt;</strong> et pas des <strong>T</strong> comme dans les chapitres précédents.<br>
<br>
Le corps de l'opérateur est tout aussi simple et vous devriez être capable de l'écrire vous-même à ce stade.<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="kt">bool</span> <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">m_haut</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">m_haut</span><span class="p">)</span> <span class="o">&amp;&amp;</span>  <span class="c1">//On verifie juste que les attributs soient les memes</span>
           <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">m_bas</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">m_bas</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
           <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">m_gauche</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">m_gauche</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
           <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">m_droite</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">m_droite</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Il ne reste plus alors qu'à déclarer cet opérateur comme amis de la classe comme vous l'avez vu dans le <a href="http://www.siteduzero.com/tutoriel-3-8951-l-amitie.html">chapitre 3</a>. La fonction est par contre template. Il faut donc l'indiquer au compilateur. Cela se fait en ajoutant <span class="code2 cpp"><span class="o">&lt;&gt;</span>
</span> après le nom de la fonction. Soit:<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">friend</span> <span class="kt">bool</span> <span class="k">operator</span><span class="o">==&lt;&gt;</span><span class="p">(</span><span class="k">const</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">b</span><span class="p">);</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Notez également qu'il faut alors prototyper la fonction <span class="italique">avant</span> la définition de la classe. Ce qui donne:<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Rectangle</span><span class="p">;</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="kt">bool</span> <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">b</span><span class="p">);</span>

<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Rectangle</span><span class="p">{</span>
<span class="k">public</span><span class="o">:</span>

  <span class="n">Rectangle</span><span class="p">(</span><span class="n">T</span> <span class="n">gauche</span><span class="p">,</span> <span class="n">T</span> <span class="n">droite</span><span class="p">,</span> <span class="n">T</span> <span class="n">haut</span><span class="p">,</span> <span class="n">T</span> <span class="n">bas</span><span class="p">);</span>

  <span class="n">T</span> <span class="n">hauteur</span><span class="p">()</span> <span class="k">const</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="n">m_haut</span><span class="o">-</span><span class="n">m_bas</span><span class="p">;</span>
  <span class="p">}</span>

<span class="k">private</span><span class="o">:</span>

  <span class="c1">//Les cotes du Rectangle                                                      </span>
  <span class="n">T</span> <span class="n">m_gauche</span><span class="p">;</span>
  <span class="n">T</span> <span class="n">m_droite</span><span class="p">;</span>
  <span class="n">T</span> <span class="n">m_haut</span><span class="p">;</span>
  <span class="n">T</span> <span class="n">m_bas</span><span class="p">;</span>

  <span class="k">friend</span> <span class="kt">bool</span> <span class="k">operator</span><span class="o">==&lt;&gt;</span><span class="p">(</span><span class="k">const</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">b</span><span class="p">);</span>

<span class="p">};</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="kt">bool</span> <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">m_haut</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">m_haut</span><span class="p">)</span> <span class="o">&amp;&amp;</span>  <span class="c1">//On verifie juste que les attributs soient les memes                                                                      </span>
    <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">m_bas</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">m_bas</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
    <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">m_gauche</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">m_gauche</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
    <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">m_droite</span> <span class="o">==</span> <span class="n">b</span><span class="p">.</span><span class="n">m_droite</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq information">Ceci n'est valable que si vous avez besoin de l'amitié. Si votre opérateur n'a pas besoin d'utiliser les parties privées de la classe.</div><br>
<br>
Comme ça, vous savez comment avoir des amis génériques.  <img src="./cpp2_files/rire.gif" alt=":lol:" class="smilies"> <br>
<br>
<h3>Typedefs</h3><br>
<br>
Les programmeurs sont souvent paresseux et il arrive qu'ils n'aient pas envie d'écrire plusieurs fois "Rectangle&lt;double&gt;". Ils auront donc envie d'utiliser un alias pour ce type particulier.<br>
Cela se fait de la manière suivante :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">typedef</span> <span class="n">Rectangle</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">Rectd</span><span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
<div class="rmq question">Cela a-t-il vraiment un intérêt ?</div><br>
<br>
Oui. Cela simplifie beaucoup la notation et permet de se concentrer sur des choses plus importantes. Vous voulez un exemple ? Eh bien, sachez que la classe <span class="code2 cpp"><span class="n">string</span>
</span> est une classe template. Le fichier &lt;string&gt; ne contient grosso-modo que la ligne suivante :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="syntax"><pre><span class="k">typedef</span> <span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">string</span><span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Et cela permet à tout le monde d'utiliser la classe string sans avoir besoin de réfléchir à des questions de template.
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Vous avez tout compris ?  <img src="./cpp2_files/pirate.png" alt=":pirate:" class="smilies"> <br>
<br>
J'espère, parce qu'il est temps de mettre tout ça en pratique dans un TP.
	</div>
	
<div>
<br>
Cette partie n'est pas <span class="souligne">terminée</span>. D'autres chapitres viendront prochainement s'ajouter à ceux qui existent déjà. En attendant, vous pouvez lire les <a href="#part_8966">annexes</a> ou faire quelques exercices sur les <a href="http://www.siteduzero.com/forum-81-237-langage-c.html">forums</a>.
</div>

<hr>
<h2>Partie 3 : Présentation de la bibliothèque standard</h2>
<div>
Dans cette partie, nous allons nous intéresser plus en détail à la bibliothèque standard du C++.
</div>
	
	<hr>
	<h1 id="chap_203146">Qu'est-ce que la bibliothèque standard ?</h1>
	<div id="chap_intro">
	Vous êtes toujours là ?  <img src="./cpp2_files/smile.png" alt=":)" class="smilies"> <br>
<br>
C'est bien. Plus on est de fous, plus on rit. <br>
<br>
Ce chapitre d'introduction à la bibliothèque standard (la <acronym title="Standard Library">SL</acronym>) ne devrait pas vous poser de problèmes de compréhension. Pour la suite, je vous conseille quand même de lire les chapitres sur les <a href="http://www.siteduzero.com/tutoriel-3-8937-les-tableaux-dynamiques.html">vectors</a> et les <a href="http://www.siteduzero.com/tutoriel-3-85890-les-templates-i---la-base.html">templates</a> de la première partie de ce cours.<br>
<br>
Avant de se plonger dans la programmation, il est bon de se cultiver un peu en regardant de quoi est faite la bibliothèque standard du C++. Par qui elle a été écrite, dans quel but et surtout ce qu'elle contient. <br>
<br>
Cette première introduction devrait vous mettre dans le bain et vous permettre de mieux appréhender la suite.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_203147">Un peu d'histoire</h2>
		<div class="ss_part_texte">
		Prenons notre machine à remonter le temps et retournons à l'époque de l'informatique où le CD n'existait pas, où la souris n'existait pas, où les ordinateurs étaient moins puissants que les processeurs de votre lave-linge ou de votre four micro-ondes... <br>
<br>
<div class="flot_droite"><img src="./cpp2_files/195578.jpg" alt="B. Stroustrup en 2007 (http://en.wikipedia.org/wiki/File:Stroustrup_kent_state.jpg)"></div><br>
Nous sommes en 1979, Bjarne Stroustrup un informaticien de chez AT&amp;T développe le "C with classes" à partir du C et en s'inspirant des langages plus modernes et innovants de l'époque comme le <a href="http://en.wikipedia.org/wiki/Simula">Simula</a>. Il écrit le premier compilateur de son nouveau langage.<br>
<br>
1983 est l'année d'une première révolution pour le C++. Les références, surcharges d'opérateurs et fonctions virtuelles sont ajoutées et le langage reçoit son nom actuel. <br>
<br>
En 1985, Stroustrup publie la première version commerciale de son langage et à partir de là, le succès du langage grandit.<br>
<br>
En 1989, la version 2.0 du C++ sort. Elle apporte en particulier l'héritage multiple, les classes abstraites et d'autres nouveautés au niveau des classes. Plus tard, les templates et les exceptions seront ajoutés au langage qui ressemble alors beaucoup à ce que l'on connait aujourd'hui. En parallèle à cette évolution, une bibliothèque plus ou moins standard se crée, dans un premier temps pour remplacer les "printf" et autres choses peu pratiques du C par les "cout" nettement plus faciles à utiliser. Cette partie de la SL, appelée <span class="italique">iostream</span> existe toujours et vous l'avez surement déjà utilisée.  <img src="./cpp2_files/clin.png" alt=";)" class="smilies"> <br>
<br>
Plus tard d'autres éléments seront ajoutés à la bibliothèque standard, comme par exemple la <acronym title="Standard Template Library">STL</acronym> reprise de travaux plus anciens d'Alexander Stepanov notamment, et "traduits" de l'<a href="http://fr.wikipedia.org/wiki/Ada_%28langage%29">Ada</a> vers le C++.<br>
<br>
En 1998, un comité de normalisation se forme et décide de standardiser au niveau international le langage. C'est-à-dire que chaque implémentation du C++ devra fournir un certain nombres de fonctionnalités minimales. C'est là qu'est fixé le C++ actuel. C'est aussi à ce moment-là que la bibliothèque standard est figée et inscrite dans la norme. <span class="souligne">Cela veut dire que l'on devrait retrouver obligatoirement la bibliothèque standard avec n'importe quel compilateur</span>. <br>
<br>
En 2003, quelques modifications mineures ont été apportées au C++ ainsi qu'à sa bibliothèque standard.<br>
<br>
Actuellement, le C++ est le 3ème langage le plus utilisé au monde si l'on en croit les <a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">statistiques</a> de TIOBE (une entreprise spécialisée dans les statistiques de ce genre).<br>
<br>
Finalement, en 2010 (voire 2011), le C++ devrait subir une révision majeure qui devrait lui apporter de nombreuses fonctionnalités attendues depuis longtemps. Parmi ces changements, on citera l'ajout de nouveaux mot-clés, la simplification des templates et l'ajout de nombreuses choses à la bibliothèque standard (notamment des fonctionnalités venant de la célèbre bibliothèque <a href="http://www.boost.org/">boost</a>).<br>
Si la future norme, qu'on appelle C++1x, vous intéresse, je vous renvois vers l'encyclopédie wikipédia: <a href="http://en.wikipedia.org/wiki/C%2B%2B1x">C++1x sur Wikipédia</a>.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_203145">Le contenu de la SL</h2>
		<div class="ss_part_texte">
		La bibliothèque standard est grosso-modo composée de trois grandes parties que nous allons explorer plus ou moins en détail dans ce cours. Comme vous allez le voir, il y a des morceaux que vous connaissez déjà bien. (Ou que vous devriez connaître.  <img src="./cpp2_files/pirate.png" alt=":pirate:" class="smilies"> )<br>
<br>
<div class="rmq information">Cette classification est assez arbitraire et selon les sources que l'on consulte on trouve jusqu'à 5 parties ou aucune séparation.</div><br>
<br>
<h3>L'héritage du C</h3><br>
<br>
L'ensemble de la bibliothèque standard du C est présente dans la SL. Les 15 fichiers d'en-tête du C (norme de 1990) sont disponibles quasiment à l'identique en C++. <br>
<br>
Il y a deux différences importantes à ce stade:<br>
<br>
<ul>
<li>Les fichiers perdent leur extension "<span class="vertf">.h</span>" et gagnent un "<span class="vertf">c</span>" à l'avant de leur nom </li>
<li>L'ensemble des fonctions et constantes est placé dans l'espace de nom <span class="code2 cpp"><span class="n">std</span>
</span>.</li>
</ul><br>
Par exemple, le fichier <span class="orange">math.h</span> du C s'appelle <span class="orange">cmath</span> en C++. Et la fonction <span class="code2 cpp"><span class="n">sqrt</span><span class="p">()</span>
</span> présente dans ce fichier devient <span class="code2 cpp"><span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">()</span>
</span>.<br>
<br>
Mais là, je pense que je ne vous apprends rien de nouveau. La fonction <span class="code2 cpp"><span class="n">sqrt</span><span class="p">()</span>
</span>, vous la connaissez depuis bien longtemps. <img src="./cpp2_files/smile.png" alt=":)" class="smilies"> <br>
<br>
Il y a quelques légères différences, mais rien de vraiment fondamental.<br>
<br>
<h3>Les flux</h3><br>
<br>
Une deuxième partie de la bibliothèque standard contient tout ce qui a trait aux flux. C'est-à-dire, l'ensemble des outils permettant de faire communiquer les programmes avec l'extérieur. Donc les outils permettant d'afficher des messages dans la console, écrire du texte dans la console et effectuer des opérations sur les fichiers. <br>
<br>
Cette partie sera brièvement abordée dans la suite de ce tutoriel, mais comme vous connaissez déjà une grande partie de ces choses, il ne sera pas nécessaire de détailler tout ce qu'on trouve dans cette partie. <br>
<br>
Concernant la lecture et l'écriture dans les fichiers, je ne peux que vous conseiller la lecture de l'excellent tutoriel de <a href="http://www.siteduzero.com/membres-294-51570.html">Xavinou</a> intitulé <a href="http://www.siteduzero.com/tutoriel-3-36367-lecture-et-ecriture-dans-les-fichiers-en-c.html">Lecture et écriture dans les fichiers en C++</a>.<br>
<br>
<h3>La STL</h3><br>
<br>
La <span class="italique">standard template library</span> (STL) est certainement la partie la plus intéressante. On y trouve des conteneurs, tels que les vectors, permettant de stocker des objets selon différents critères. On y trouve également quelques algorithmes standards comme la recherche d'éléments dans un conteneur ou le tri d'éléments. On y trouve des itérateurs, des foncteurs, des prédicats, des pointeurs intelligents et encore plein d'autre choses que nous allons découvrir en détail.<br>
<br>
Ce tutoriel sera consacré principalement à la description de la STL.<br>
<br>
<h3>Le reste</h3><br>
<br>
Je vous avais dit qu'il y avait trois parties...  <img src="./cpp2_files/blink.gif" alt="o_O" class="smilies"> <br>
<br>
Mais comme souvent, les classifications ne sont pas réellement utilisables dans la réalité. Il y a donc quelques éléments de la SL qui sont inclassables. En particulier la classe <span class="code2 cpp"><span class="n">string</span>
</span> qui est à la frontière entre la STL et les flux. De même certains outils concernant la gestion fine de la mémoire, les <a href="http://fr.wikipedia.org/wiki/Param%C3%A8tres_r%C3%A9gionaux">paramètres régionaux</a> ou encore les <a href="http://fr.wikipedia.org/wiki/Nombre_complexe">nombres complexes</a> ne rentrent dans aucune des trois parties principales.
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Bon, bon, bon, c'est bien joli tout ça, mais c'est quand qu'on programme ?<br>
<br>
On y vient ne vous en faites pas <img src="./cpp2_files/smile.png" alt=":)" class="smilies"><br>
<br>
Il est temps d'explorer tout ça !
	</div>
	
<div>
<br>

</div>

<hr>
<h2>Partie 4 : Annexes</h2>
<div>
Dans cette partie vous trouverez la présentation de différents outils qui peuvent vous être utiles pour programmer en C++.<br>
<br>
Ces chapitres peuvent être lus à n'importe quel moment, ils ne nécessitent aucune connaissance particulière.
</div>
	
	<hr>
	<h1 id="chap_8963">Déboguer avec Code::Blocks - Partie I</h1>
	<div id="chap_intro">
	Dans ce chapitre, vous allez apprendre à déboguer un programme. On parle de bogue (ou bug) dans un programme quand ce dernier compile mais plante lors de son exécution.<br>
<br>
Ces bogues sont souvent difficiles à détecter rien qu'en lisant le code, car d'une part on ne sait pas quelle ligne cause l'erreur et on ne connaît souvent pas non plus la valeur des différentes variables au moment du plantage. <br>
<br>
Heureusement, il existe des programmes appelés débogueurs, ou dévermineurs ( <img src="./cpp2_files/smile.png" alt=":)" class="smilies"> ) si on francise, qui permettent de nous aider dans nos recherches d'erreurs. <br>
<br>
Dans ce chapitre, je vais vous présenter à l'aide d'un exemple simple le débogueur qui est inclus dans Code::Blocks.
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_8962">Un programme bien mystérieux</h2>
		<div class="ss_part_texte">
		<h3>Un programme en apparence inoffensif...</h3><br>
<br>
Pour comprendre l'utilité de cet outil merveilleux qu'est le débugueur, je vous propose de passer par un exemple.<br>
<br>
Prenons par exemple le code suivant :<br>
<br>
<span class="code">Code : C++ - Oh le vilain bug ! - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="syntax"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">);</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">f</span><span class="p">(</span><span class="mi">512</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">int</span> <span class="n">donnee</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">resultat</span><span class="p">,</span><span class="n">temp</span><span class="p">;</span>

  <span class="n">resultat</span> <span class="o">=</span> <span class="mi">8</span><span class="o">*</span><span class="n">donnee</span><span class="o">*</span><span class="n">donnee</span><span class="o">*</span><span class="n">donnee</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="n">temp</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">resultat</span><span class="p">;</span>
  <span class="n">resultat</span> <span class="o">=</span> <span class="n">temp</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
  <span class="n">temp</span> <span class="o">=</span> <span class="n">resultat</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
  <span class="n">resultat</span> <span class="o">*=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="n">temp</span> <span class="o">*=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="n">resultat</span><span class="o">/=</span><span class="n">temp</span><span class="p">;</span>

  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">resultat</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Ce code n'est pas écrit dans un très bon style, mais il semble apparemment tout à fait inoffensif.<br>
<br>
<h3>... mais qui cache bien son jeu.</h3><br>
<br>
Pourtant, si vous le compilez et le lancez, vous obtiendrez un message d'erreur. Sous Vista, vous pourriez par exemple obtenir la fenêtre suivante :<br>
<br>
<div class="centre"><img src="./cpp2_files/120341.png" alt="Image utilisateur"></div><br>
<br>
<div class="rmq information">Le message d'erreur peut être très différent selon votre système d'exploitation. Sous UNIX, vous aurez plutôt un message dans votre console.</div><br>
<br>
Pour le moment, cliquez simplement sur "Fermer le programme". <br>
<br>
Je vous mets au défi de trouver l'erreur dans ce programme rien qu'en lisant le code. <img src="./cpp2_files/soleil.png" alt=":soleil:" class="smilies"> Les plus malins se douteront peut-être que l'erreur a lieu au moment de la division puisque c'est la seule opération potentiellement à risque si le diviseur vaut 0.<br>
<br>
<h3>Une mauvaise solution</h3><br>
<br>
Une idée que l'on voit parfois parmi les programmeurs débutants est d'essayer de repérer l'erreur en plaçant une ligne du type :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Ligne 22"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
entre chaque instruction du code source. Ceci permet effectivement de trouver la ligne où se situe l'erreur et permet aussi d'afficher la valeur des variables en faisant des lignes du type :<br>
<br>
<span class="code">Code : C++ - <a href="?all=1#" class="select_code">Sélectionner</a></span><div class="code2 cpp"><table class="syntaxtable"><tbody><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="syntax"><pre><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Ligne 187, La variable a vaut : "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</pre></div>
</td></tr></tbody></table></div><br>
<br>
Mais si vous avez énormément de lignes de code et en plus un grand nombre de variables, vous perdrez énormément de temps à faire cela. De plus si l'erreur provient d'une mauvaise manipulation de pointeurs, vous aurez beaucoup de peine à la trouver.<br>
<br>
<strong>Le moyen le plus efficace passe par le débogage de son programme à l'aide d'un outil approprié.</strong>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_8961">Préparer son code</h2>
		<div class="ss_part_texte">
		<h3>Changer le programme</h3><br>
<br>
Pour déboguer un programme, il faut tout d'abord le préparer pour cela. Quand vous lancez votre programme, il n'y a aucun moyen de connaître depuis l'extérieur la valeur des variables qui sont utilisées par ce dernier. Il faut donc modifier le programme pour que le débogueur puisse avoir accès à ces valeurs.<br>
<br>
<div class="rmq question">Mais si on doit modifier le code source, alors autant faire des std::cout partout, ça ira plus vite ! </div><br>
<br>
Attention ! J'ai dit qu'il fallait modifier le programme, pas le code source. Rappelez-vous les premiers chapitres, quelle est la chose qui écrit le programme en langage machine ?  <img src="./cpp2_files/diable.png" alt=":diable:" class="smilies"> <br>
<br>
<strong>Le compilateur !</strong><br>
<br>
Il faut donc dire au compilateur que l'on voudra déboguer le programme qu'il compile. Il faut pour cela modifier les options de compilation.<br>
<br>
<h3>Modifier les options de compilation</h3><br>
<br>
Sous Code::Blocks c'est très simple, il suffit de changer la cible de compilation pour passer en mode <span class="italique"><span class="rouge">Debug</span></span>. Cela se fait au moyen du petit menu déroulant suivant :<br>
<br>
<div class="centre"><img src="./cpp2_files/120348.png" alt="Image utilisateur"></div><br>
<br>
Vous pouvez alors vérifier que le compilateur va bien ajouter les symboles nécessaires au déboguage en ouvrant la fenêtre <span class="italique">Project -&gt; Build Options...</span><br>
<br>
Vous devriez avoir une fenêtre de ce type qui s'ouvre devant vous :<br>
<br>
<div class="centre"><img src="./cpp2_files/120346.png" alt="Image utilisateur"></div><br>
<br>
L'important est que la ligne "<strong>Produce debugging symbols [-g]</strong>" soit cochée et que la ligne "<strong>Strip all symbols from binary (minimizes size) [-s]</strong>" ne soit <strong>pas</strong> cochée.<br>
<br>
<h3>Recompiler son code</h3><br>
<br>
Il faut alors recompiler son programme pour prendre en compte les modifications faites.<br>
<br>
Je vous conseille de faire "<span class="italique">Rebuild</span>" (Ctrl-F11) et pas simplement "<span class="italique">Build</span>" pour être sûr que tous les fichiers seront bien recompilés avec les nouvelles options.<br>
<br>
Tout est maintenant prêt pour passer aux choses sérieuses.  <img src="./cpp2_files/zorro.png" alt=":zorro:" class="smilies">
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_8960">Trouver la ligne de l'erreur</h2>
		<div class="ss_part_texte">
		<h3>Présentation des boutons liés au débogueur</h3><br>
<br>
Sous Code::Blocks, vous devriez avoir une petite barre d'outils que vous n'avez jamais utilisée. Il s'agit de la barre suivante :<br>
<br>
<div class="centre"><img src="./cpp2_files/120340.png" alt="Image utilisateur"></div><br>
<br>
Si vous ne l'avez pas, vous pouvez l'ajouter en faisant <span class="italique">View -&gt; Toolbars -&gt; Debugger </span>.<br>
<br>
Cette barre est composée de 9 boutons. Je vous les présente en vitesse, nous les verrons en détails plus loin dans ce chapitre et dans le suivant.<br>
<ul>
<li><strong>Debug/Continue</strong> (F8) -  Exécute le programme jusqu'au point d'arrêt suivant ou jusqu'à la prochaine erreur.</li>
<li><strong>Run to cursor </strong> (F4) -  Exécute le programme jusqu'à la ligne du code où se trouve la souris.</li>
<li><strong>Next line </strong> (F7) -  Passe à la ligne de code suivante.</li>
<li><strong>Next instruction </strong> (Alt-F7) -  Passe à l'instruction suivante.</li>
<li><strong>Step into </strong> (Ctrl-F7) -  Entre dans la portée.</li>
<li><strong>Step out </strong> (Ctrl-Alt-F7) -  Sort de la portée.</li>
<li><strong>Stop debugger </strong> (-) - Arrête le programme.</li>
</ul><br>
<br>
Les deux derniers servent à choisir quelles informations vous voulez afficher.<br>
<br>
<h3>Trouver une erreur</h3><br>
<br>
Pour trouver l'erreur, il va falloir exécuter le programme et comme on ne sait pas encore à quelle ligne se trouve le problème, nous allons lancer l'exécution jusqu'à ce qu'on arrive à une erreur. Il faut donc cliquer sur "<strong>Debug/Continue</strong>".<br>
<br>
Comme précédemment, le programme va planter. <img src="./cpp2_files/langue.png" alt=":p" class="smilies">  Sous windows, j'obtiens la fenêtre suivante :<br>
<br>
<div class="centre"><img src="./cpp2_files/120349.png" alt="Image utilisateur"></div><br>
<br>
<div class="rmq information">À nouveau, la fenêtre sera différente selon votre OS.</div><br>
<br>
Cette fenêtre me donne déjà plusieurs informations malgré son caractère un peu hostile. Premièrement, je vois que l'erreur qui a causé le plantage est une <span class="rouge"><span class="italique">Arithmetic exception</span></span>. Cela veut dire que c'est une erreur de calcul qui s'est produite. <br>
La deuxième information importante est que le débogueur a pu garder une trace de l'erreur. De plus il nous propose de voir cette trace. <br>
Je vous invite donc à cliquer sur « Oui ».  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> <br>
<br>
À ce moment là apparaît une nouvelle fenêtre.<br>
<br>
<div class="centre"><img src="./cpp2_files/120350.png" alt="Image utilisateur"></div><br>
<br>
Elle présente un tableau de toutes les fonctions qui sont en cours d'exécution. On parle de « pile d'appel » des fonctions.<br>
<br>
Par défaut les fonctions sont classées selon leur position sur la pile. La plus haute étant la fonction dans laquelle s'est produit le plantage. La fonction directement en-dessous étant la fonction qui a appelé la fonction qui a planté.  <img src="./cpp2_files/siffle.png" alt=":-°" class="smilies"> Et ainsi de suite...<br>
On trouvera donc, dans les cas normaux, la fonction main à la dernière ligne du tableau, puisque c'est elle qui réalise les premiers appels de fonctions.<br>
<br>
<div class="rmq attention">La pile d'appel peut être assez grande selon ce que vous avez fait dans votre programme. Ne soyez pas surpris s'il semble qu'il y a plus de fonctions que ce que vous avez écrit.</div><br>
<br>
La 3<sup>e</sup> colonne nous donne le nom de la fonction avec la valeur des arguments qu'elle a reçus. On voit par exemple ici que la variable qu'a reçue la fonction f est bien 512, comme on l'attendait.<br>
<br>
La 4<sup>e</sup> colonne nous donne une information précieuse, le fichier dans lequel s'est produit l'erreur. Cela semble stupide ici, mais si vous avez des dizaines de fichiers, ce n'est pas si anodin que ça.<br>
<br>
Et enfin la dernière colonne nous donne la ligne où se trouvait l'ordinateur dans chacune des fonctions au moment du plantage.<br>
<br>
<div class="rmq question">Comment se fait-il que l'ordinateur se trouve à deux endroits différents du code ?</div><br>
<br>
Il ne se situe en réalité qu'à un seul endroit. Si vous regardez le fichier source, vous verrez que la ligne 8 correspond à la ligne d'appel de la fonction f. Le programme s'est donc arrêté à la ligne 8 du main pendant l'appel à la fonction f. Et plus précisément, à la ligne 23 de cette fonction.<br>
<br>
La ligne 23 correspond à la ligne où se situe la division. Il nous faudrait cependant plus d'informations sur les valeurs des variables pour détecter ce qui cause l'erreur.
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_8959">Connaître les valeurs des variables</h2>
		<div class="ss_part_texte">
		<h3>Placer un point d'arrêt</h3><br>
<br>
La première chose à faire est de définir un point jusqu'au quel le programme devra s'exécuter. Le mieux dans notre cas serait d'exécuter le programme jusqu'au début de la fonction f.<br>
<br>
Pour placer un point d'arrêt (<span class="italique">breakpoint</span>), c'est très simple. Il suffit de cliquer sur la bande grise à côté du code à l'endroit où l'on souhaite le placer. Un rond rouge devrait apparaître.<br>
<br>
<div class="centre"><img src="./cpp2_files/120356.png" alt="Image utilisateur"></div><br>
<br>
<div class="rmq information">On peut placer autant de points d'arrêts que l'on veut.</div><br>
<br>
Vous pouvez connaître la liste de tous les points d'arrêts de votre code source en affichant la liste des points d'arrêts. Elle se trouve dans le menu <span class="italique">Debug -&gt; Debugging windows -&gt; Breakpoints</span>.<br>
<br>
On peut alors exécuter à nouveau le programme en cliquant sur "<strong>Debug/Continue</strong>" (F8). Le programme s'exécute alors jusqu'à la ligne où se situe le point rouge puis il attend.<br>
<br>
<div class="rmq information">On aurait également pu placer le curseur à cette ligne et cliquer sur "Run to cursor". Le résultat aurait été le même.</div><br>
<br>
Vous pouvez en tout temps connaître le point où se situe l'ordinateur en cherchant la petite flèche jaune dans la bande grise. <br>
<br>
<div class="centre"><img src="./cpp2_files/120339.png" alt="Image utilisateur"></div><br>
<br>
<h3>Avancer d'un pas</h3><br>
<br>
On peut ensuite avancer d'un pas en appuyant sur "<strong>Next line</strong>" (F7) ou "<strong>Next instruction</strong>" si vous avez plusieurs instructions sur la même ligne.<br>
<br>
Vous devriez voir la petite flèche jaune avancer dans le code source et le programme s'exécuter. <br>
<br>
<div class="centre"><img src="./cpp2_files/120357.png" alt="Image utilisateur"></div><br>
<br>
Si vous allez assez loin, vous allez arriver à la ligne 23 et faire à nouveau planter le programme.<br>
<br>
<div class="rmq attention">Il n'y a aucun moyen de reculer, vous ne pouvez qu'avancer dans le code source.</div><br>
<br>
Revenons donc à notre point d'arrêt. Pour ce faire, il faut arrêter le débogueur et le relancer.<br>
<br>
<h3>Afficher la valeur des variables</h3><br>
<br>
On peut connaître la valeur de toutes les variables présentes dans une portée en ouvrant la fenêtre "Watches". Elle se trouve dans le menu <span class="italique">Debug-&gt;Debugging windows-&gt;Watches</span>.<br>
<br>
Si vous vous situez au point d'arrêt, la fenêtre devrait afficher ceci :<br>
<br>
<div class="centre"><img src="./cpp2_files/120358.png" alt="Image utilisateur"></div><br>
<br>
Vous avez en premier les deux variables déclarées dans la fonction avec leurs valeurs à ce moment-là et ensuite la valeur des arguments que la fonction a reçus.<br>
<br>
Si vous avancez dans le programme, toujours avec F7, vous verrez les valeurs des deux variables changer. La dernière modification s'affiche en plus en rouge de sorte que l'on puisse bien suivre ce qui se passe.<br>
<br>
<div class="centre"><img src="./cpp2_files/120359.png" alt="Image utilisateur"></div><br>
<br>
Si vous continuez comme ça jusqu'à la ligne qui cause le plantage, vous verrez que la variable temp prend la valeur 0 et que par conséquent la division par temp est une opération illégale.<br>
<br>
<div class="rmq question">Comment temp peut-il valoir 0 ?</div><br>
Cette question n'a rien à voir avec le chapitre, mais la raison est assez simple. Un char ne peut contenir que des valeurs comprises entre -128 et 127. Si vous faites 127 + 1, vous obtiendrez -128. Par conséquent, en jouant astucieusement avec les additions et les multiplications, on arrive à retrouver la valeur 0.<br>
Pour les entiers c'est la même chose, les bornes sont juste plus grande que -128 et 127.<br>
<br>
Nous avons donc pu grâce, au débogueur, repérer l'erreur et voir quelle en a été la cause. On peut donc déduire de ces informations que c'est la valeur 512 passée à la fonction f qui cause l'erreur. Il faudrait donc corriger et mettre une valeur différente, par exemple 511. Le programme ne plante alors plus. <br>
<br>
<div class="rmq attention">Si vous modifiez le code source, vous devez recompiler le programme.</div><br>
<br>
Notre objectif est donc atteint, nous avons pu repérer la ligne qui cause un crash du programme, trouver les causes de ce plantage en observant la valeur des variables et finalement corriger cette erreur.
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Dans le prochain chapitre, nous verrons comment déboguer des programmes un peu plus complexes faisant intervenir des pointeurs.
	</div>
	
	<hr>
	<h1 id="chap_54301">Trouver des informations sur internet</h1>
	<div id="chap_intro">
	Un cours de C++ ne pourra jamais être complet. Premièrement, un auteur ne peut pas connaître complètement le langage. Deuxièmement, il est inutile de dupliquer plusieurs fois des informations qui sont déjà présentes autre part, surtout si elles sont de bonne qualité.<br>
<br>
Il est également important pour un programmeur de savoir chercher des informations car il ne peut pas tout apprendre et doit se limiter à la base plus les domaines spécifiques dont il a besoin pour ses projets. Ces besoins sont très différents si vous souhaitez réaliser des jeux vidéo, un système d'exploitation, manipuler un micro-contrôleur ou encore faire de la simulation numérique. Il est donc essentiel de trouver des sources d'informations auxquelles vous abreuver.<br>
<br>
Pour vous aider dans la jungle du net, je vous propose ici un ensemble de liens qui couvrent différents domaines. Vous trouverez certainement votre bonheur sur un de ces sites web. <br>
<br>
<div class="rmq information">Beaucoup de sites web sur le C++ et la programmation en général sont en anglais. Les liens dans la langue de Shakespeare sont précédés du tag [ENG].</div>
	</div>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_54300">Les F.A.Q. et autres références générales</h2>
		<div class="ss_part_texte">
		<h3>Les FAQ</h3><br>
<br>
Les <acronym title="Foire aux questions">FAQ</acronym> sont des listes de questions que des utilisateurs ont posées à des spécialistes et qui sont répertoriées de sorte que la réponse puisse servir à d'autres utilisateurs. Les FAQ répondent souvent à des questions générales que beaucoup de monde se pose et sont donc de très bonnes sources d'apprentissage. <br>
<br>
Parmi les FAQ consacrées au C++, on peut citer en particulier :<br>
<br>
<ul>
<li><a href="http://cpp.developpez.com/faq/cpp/?filtre=OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO">La FAQ de developpez.com</a>. Une excellente source d'information en français. Elle couvre les domaines principaux du C++ ainsi que l'utilisation de la bibliothèque standard. <br>
<br>
</li>
<li>[ENG] <a href="http://www.comeaucomputing.com/techtalk/">La FAQ de Comeau</a>. Une liste de questions avec des réponses complètes et assez pointues couvrant l'essentiel du C++ « procédural », c'est-à-dire sans la partie orientée objet du langage. Certaines questions portent uniquement sur le compilateur Comeau. <br>
<br>
</li>
<li>[ENG] <a href="http://parashift.com/c%2B%2B-faq-lite/">La FAQ de C++-lite</a>. Certainement la plus complète des FAQ. Elle comporte des questions dans tous les domaines du C++. Un must.<br>
<br>
</li>
<li> <a href="http://jlecomte.ifrance.com/c%2B%2B/c%2B%2B-faq-lite/index-fr.html">La FAQ de C++-lite en français</a>. La même qu'au-dessus, mais toutes les questions ne sont pas traduites.<br>
<br>
</li>
<li><a href="http://www.decima.org/c%2B%2B/faq-fclc%2B%2B.txt">La FAQ de fr.comp.lang.c++</a>. Contenant des questions posées à un groupe de discussion, elle couvre quelques sujets de base mais n'est pas très complète.<br>
<br>
</li>
<li>[ENG] <a href="http://www.research.att.com/~bs/bs_faq.html">La FAQ personnelle de B. Stroustrup</a>. Pour ceux qui sont intéressés par l'aspect historique du C++ et par les comparatifs avec d'autres langages. Permet également de mieux connaître le créateur de votre langage préféré.</li>
</ul><br>
<br>
<h3>Les sites qui présentent les concepts</h3><br>
<br>
Il existe de nombreux sites présentant des cours de C++ ou des conseils ou d'autres informations. Parmi ceux-ci, on peut citer :<br>
<br>
<ul>
<li>[ENG] <a href="http://www.gotw.ca/gotw/">GOTW</a>. Le site de Guru Of The Week. Une liste de 88 problèmes de C++ proposés par Herb Sutter, un des meilleurs connaisseurs du langage. Chaque problème a une description complète de sa solution. En lisant les problèmes et surtout les réponses, on apprend énormément sur le C++. Probablement un des meilleurs liens sur la bonne manière de programmer. <br>
<br>
</li>
<li><a href="http://h-deb.clg.qc.ca/Sujets/Divers--cplusplus/index.html">h-deb</a>. Le site d'un enseignant canadien qui présente de nombreuses solutions à des problèmes récurrents du C++. Il présente également certains design-patterns et des trucs utilisés dans des bibliothèques modernes comme Boost. Très intéressant à lire pour progresser dans sa manière de programmer.<br>
<br>
</li>
<li><a href="http://blog.emmanueldeloget.com/">Architecture logicielle &amp; Développement</a>. Un très bon blog qui présente des articles sur la conception OO et également sur la création d'applications. Il y a également pas mal d'articles sur la prochaine norme du C++.<br>
<br>
</li>
</ul>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_54299">Les documentations</h2>
		<div class="ss_part_texte">
		Sur le net, on trouve de nombreuses documentations de la bibliothèque standard du C++. Elles ne sont pas toutes complètes ni de bonne qualité. Dans ce joyeux mélange, on peut citer en particulier :<br>
<br>
<ul>
<li>[ENG] <a href="http://www.sgi.com/tech/stl/">sgi</a>. Une documentation très complète de la STL. La description n'est pas toujours aisée à lire pour un débutant et certaines choses présentées ne font pas partie de la STL standard mais seulement d'une version proposée par SGI. Présente uniquement la STL.<br>
<br>
</li>
<li>[ENG] <a href="http://www.cplusplus.com/reference/">cplusplus.com</a>. Une documentation plus simple qui présente l'ensemble de la SL. Les explications ne sont pas toujours complètes, mais elles sont accompagnées d'exemples simples qui permettent de bien comprendre l'intérêt de chaque fonction et classe.<br>
<br>
</li>
<li>[ENG] <a href="http://stdcxx.apache.org/doc/stdlibref/noframes.html">Apache C++</a> Une bonne documentation de la SL en général. Les fonctions sont accompagnées d'exemples simples permettant de comprendre le fonctionnement de chacune d'elles. Elle est surtout intéressante pour sa partie sur les flux.<br>
<br>
</li>
<li>[ENG] <a href="http://www.cppreference.com/">cppreference.com</a>. Un site qui présente de manière (trop) simple la SL. Il est néanmoins intéressant pour les autres informations qu'il propose comme l'ordre de préséance des opérateurs ou les différentes séquences d'échappement.<br>
<br>
</li>
<li>[ENG] <a href="http://www.dinkumware.com/manuals/#Standard%20C%2B%2B%20Library">dinkumware.com</a>. Une référence très complète et très bien faite sur la SL au complet. Le site présente également de la documentation sur TR1, la future bibliothèque standard du C++ qui devrait devenir officielle en 2009. Probablement la meilleure documentation sur la SL.<br>
<br>
</li>
</ul>
		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_54298">Les forums et newsgroups</h2>
		<div class="ss_part_texte">
		<h3>Les forums</h3><br>
<br>
Tout programmeur qui cherche des informations passe du temps sur des forums dans le but d'aider les autres ou de se faire aider. Encore faut-il trouver la bonne adresse.<br>
<br>
<ul>
<li><a href="http://www.developpez.net/forums/f19/c-cpp/cpp/">developpez.net</a>. Le forum de référence en français dans le domaine. Vous trouverez quelqu'un qui saura répondre à votre question quelle qu'elle soit. Le forum est divisé en catégories selon que vous êtes débutant ou non ou si vous utilisez une bibliothèque particulière. <br>
<br>
</li>
<li><a href="http://www.siteduzero.com/forum-81-237-langage-c.html">siteduzero.com</a>. Le forum du site sur lequel vous vous trouvez présentement. Vous pouvez y poser des questions de tout type. Si personne ne connaît la réponse, vous serez redirigé vers un endroit plus approprié. Ce forum convient particulièrement aux débutants.<br>
<br>
</li>
</ul><br>
<br>
<h3>Les newsgroups</h3><br>
Les newsgroups sont un peu les ancêtres des forums. Le mode d'utilisation est certainement un peu déroutant, mais les newsgroups sont encore très utilisés et c'est souvent là que l'on peut rencontrer les spécialistes du langage.<br>
<br>
<br>
<ul>
<li>[ENG] <a href="http://groups.google.com/group/comp.lang.c%2B%2B.moderated/topics?lnk=rgh">comp.lang.c++</a>. Le newsgroup de référence pour le C++. A réserver principalement pour les questions techniques. <br>
<br>
</li>
<li><a href="http://groups.google.com/group/fr.comp.lang.c%2B%2B/topics?lnk">fr.comp.lang.c++</a>. L'équivalent du précédent en français. Lire les réponses est souvent très instructif et permet de progresser en apprenant de nouveaux concepts.<br>
<br>
</li>
</ul><br>

		</div>
		<hr>
		
		<hr class="separateur_parties">
		<h2 id="ss_part_54297">D'autres liens concernant le C++</h2>
		<div class="ss_part_texte">
		Pour finir, je termine avec les inclassables.<br>
<br>
Si vous cherchez un livre sur le C++, je ne peux que vous conseiller de jeter un œil <a href="http://cpp.developpez.com/livres/">ici</a>. C'est une liste de livres sur le C++. À chaque livre est associé une critique et une note données par des professionnels du C++. Vous pouvez également consulter la <a href="http://books.google.fr/books?as_labels=c%2B%2B&uid=6418400394158455302">liste</a> de livres sélectionnés par <a href="http://www.siteduzero.com/membres-294-45328.html">lmghs</a>, un membre de plusieurs forums C++ importants.<br>
<br>
Des questions qui reviennent souvent sur le forum sont les recherches de bibliothèques adaptées à une tâche particulière. Pour faire son choix, je ne peux que vous conseiller la <a href="http://cpp.developpez.com/bibliotheques/">liste</a> de developpez.com. Les bibliothèques les plus courantes sont classées par catégorie et des petits commentaires permettent de se faire une idée avant d'arrêter son choix.<br>
<br>
Si c'est plutôt l'actualité du C++ qui vous intéresse, alors rendez vous sur ce <a href="http://blog.developpez.com/recap/cpp">blog</a>. Les nouveautés du C++ y sont présentées dès leur sortie et sont commentées par des gens compétents. On y apprend plein de choses sur l'évolution du langage.
		</div>
		<hr>
		
	<div id="chap_conclusion">
	Cette liste n'est en aucun cas complète et ne le sera probablement jamais. Si vous avez des suggestions de liens <strong><span class="souligne">concernant le C++ en général</span></strong> à ajouter, envoyez-moi un <a href="http://www.siteduzero.com/membres-294-49110.html">MP</a>.
	</div>
	
<div>
<br>

</div>


<hr>

<div id="btuto_conclusion">
	Ce tutoriel n'est <span class="souligne"> pas terminé</span>. De nouveaux chapitres viendront petit à petit s'ajouter à ceux déjà existant.<br>
<br>
Je vous invite à faire un tour sur le <a href="http://www.siteduzero.com/forum-81-237-langage-c.html">forum C++</a> pour faire plus ample connaissance et poser des questions si mes explications ne sont pas assez claires. <br>
<br>
Merci à <a href="http://www.siteduzero.com/membres-294-45328.html">lmghs</a>, <a href="http://www.siteduzero.com/membres-294-1608.html">Davidbrcz</a> et <a href="http://www.siteduzero.com/membres-294-19108.html">Alp</a> pour leur relecture attentive et leurs remarques toujours pertinentes.<br>
Merci à <a href="http://www.siteduzero.com/membres-294-38654.html">Xeroth</a> et à <a href="http://www.siteduzero.com/membres-294-72795.html">Fihld</a> pour la <a href="http://www.zcorrecteurs.fr/">zCorrection</a>.<br>
<br>
<span class="tpetit"><br>
Ce tutoriel est placé sous licence Creative Commons BY-SA-NC par Nanoc</span><br>
<br>
<a href="http://creativecommons.org/licenses/by-nc-sa/2.0/fr/"><img src="./cpp2_files/6.png" alt="Image utilisateur"></a>
</div>


<div class="infobox cadre_auteur_date" id="tuto_details">
  <form action="http://www.siteduzero.com/tutoriel-54-8965.html" method="post">
    <div class="dnone"><input type="hidden" value="abfda77e3dd1909dd157b2cde15a2bbb105518e0" name="challenge"></div>

    <h3 class="special">Informations sur le tutoriel</h3>
   
    <div class="conteneur_infobox">
	<a href="?all=1#onglets_tutos">Retour en haut <img src="./cpp2_files/fleche_haut.png" alt="Retour en haut" title="Retour en haut"></a>
	<br>
   	<br>			
<strong>Créé</strong> : Le 11/06/2008 à 13:11:39<br>
<strong>Modifié</strong> : Le 02/02/2010 à 13:22:15<br>

<strong>Avancement</strong> : 35%<br>

<br>


  <a href="http://www.zcorrecteurs.fr/"><img src="./cpp2_files/zcorrige.png" alt="L&#39;orthographe, la grammaire et la présentation de ce tutoriel ont été vérifiées par les zCorrecteurs." title="L&#39;orthographe, la grammaire et la présentation de ce tutoriel ont été vérifiées par les zCorrecteurs."></a><br>

<a href="http://www.siteduzero.com/tutoriel-50-8965-67287-c-notions-avancees.html#r67287">46 commentaires</a><br>

  <a href="">Revenir au sommaire du tutoriel</a><br>


    </div>
  </form>
</div>

<div class="clearer"></div>

                </div>
            </div>

            <div id="footer">
                <ul>
                    <li>
                        Le Site du Zéro
                        <ul>
                            <li><a href="http://www.siteduzero.com/plan.html">Plan du site</a></li>
                            <li><a href="http://www.siteduzero.com/membres-304.html">L'équipe</a></li>
                            <li><a href="http://www.siteduzero.com/mentions.html">Mentions légales</a></li>
                            <li><a href="http://www.siteduzero.com/accessibilite.html" accesskey="0">Accessibilité</a></li>
                            <li><a href="http://www.siteduzero.com/livreor.html">Livre d'or</a></li>
                            <li><a href="http://suggestions.siteduzero.com/">Suggestions <sup style="color:green;">Nouveau !</sup></a></li>
                        </ul>
                    </li>
                    <li>
                        Simple IT
                        <ul>
                            <li><a href="http://www.siteduzero.com/simpleit.html">Qui sommes-nous ? </a></li>
                            
                                <li><a href="http://www.siteduzero.com/formations.html">Formation professionnelle</a></li>
                                <li><a href="http://www.siteduzero.com/recrutement.html">Recrutement</a></li>
                            
                            <li><a href="http://www.simple-it.fr/blog/">Notre blog</a></li>
                        </ul>
                    </li>
                    <li>
                        Contacts
                        <ul>
                            <li><a href="http://www.siteduzero.com/publicite-440.html">Espace annonceurs</a></li>
                            <li><a href="http://www.siteduzero.com/presse.html">Espace presse</a></li>
                            <li><strong><a href="http://www.siteduzero.com/contact.html" accesskey="7">Nous contacter</a></strong></li>
                            <li><a href="http://www.siteduzero.com/promouvoir.html">Promouvoir le site</a></li>
                            <li><a href="http://bugs.siteduzero.com/">Signaler un bug</a></li>
                        </ul>
                    </li>
                    
                        <li>
                            Partenaires 
                            <ul>
                                <li><a href="http://www.planethoster.net/?a_aid=SiteDuZero&a_bid=bf0ae269">Hébergement web</a></li>
                                <li><a href="http://www.zcorrecteurs.fr/">Correction tutoriels</a></li>
                            </ul>
                        </li>
                    
                    <li>
                        Suivez-nous
                        <ul class="dernier">
                            <li><a href="http://www.siteduzero.com/Templates/xml/news_fr.xml"><img src="./cpp2_files/rss_mini.png" alt="Flux RSS"> Flux RSS News</a>, <a href="http://www.siteduzero.com/Templates/xml/tutoriels_fr.xml">Cours</a>, <a href="http://www.simple-it.fr/blog/index.php?feed/atom">Blog</a></li>
                            <li><a href="http://www.siteduzero.com/twitter.html"><img src="./cpp2_files/twitter_mini.png" alt="Twitter"> Twitter</a></li>
                            <li><a href="http://www.facebook.com/siteduzero"><img src="./cpp2_files/fb_mini.png" alt="Facebook"> Facebook</a></li>
                        </ul>
                    </li>
                </ul>

                
            </div>

            


            
            <script type="text/javascript" src="./cpp2_files/scripts_lang.min.js"></script>
            <script type="text/javascript" src="./cpp2_files/scripts.min.js"></script>
            <script type="text/javascript" src="./cpp2_files/lib.min.js"></script>

            
                <script type="text/javascript">
    var addthis_config = {  ui_508_compliant: true,
                            ui_cobrand: "Site du Zéro",
                            ui_header_color: "#ffffff",
                            ui_header_background: "#7AB7FC",
                            username: "simpleit",
                            services_exclude: 'print,pdfonline,email,twitter,facebook,myspace,googlebuzz,blogger,buzz,live',
                            data_track_clickback: true  };
                        
    var addthis_share = {templates: { twitter:'{{title}} {{url}} #SdZ' } };

    $('div.slidable').hide();
    $('a.expend').show();
    $('a.expend').removeAttr('style');
    
    $('.expend').click(function(e)
    {
        e.preventDefault();
        $(this).hide('fast');
        $(this).next('div.slidable').slideToggle('fast');
    });
   
</script>
<script type="text/javascript" src="./cpp2_files/addthis_widget.js"></script>
            

            <div class="droite printnone">
                <a href="http://www.xiti.com/xiti.asp?s=129196" title="WebAnalytics">
                    <script type="text/javascript">
                        <!--
                        Xt_param = 's=129196&p=%2Ftutoriel-3-8965-c-notions-avancees.html%3Fall%3D1';
                        try {Xt_r = top.document.referrer;}
                        catch(e) {Xt_r = document.referrer; }
                        Xt_h = new Date();
                        Xt_i = '<img width="80" height="15" border="0" ';
                        Xt_i += 'src="http://logv23.xiti.com/g.xiti?'+Xt_param;
                        Xt_i += '&hl='+Xt_h.getHours()+'x'+Xt_h.getMinutes()+'x'+Xt_h.getSeconds();
                        if(parseFloat(navigator.appVersion)>=4)
                        {
                        Xt_s=screen;Xt_i+='&r='+Xt_s.width+'x'+Xt_s.height+'x'+Xt_s.pixelDepth+'x'+Xt_s.colorDepth;
                        }
                        document.write(Xt_i+'&ref='+Xt_r.replace(/[<>"]/g, '').replace(/&/g, '$')+'">');
                        //-->
                    </script><img width="80" height="15" border="0" src="./cpp2_files/g.xiti">
                    <object>
                        <noscript>
                            &lt;p&gt;&lt;img width="80" height="15" src="http://logv23.xiti.com/g.xiti?s=129196&amp;amp;p=&amp;amp;" alt="WebAnalytics" /&gt;&lt;/p&gt;
                        </noscript>
                    </object>
                </a>
                <script type="text/javascript">
                    var _gaq = _gaq || [];
                    _gaq.push(['_setAccount', 'UA-19807070-2']);
                    _gaq.push(['_trackPageview']);

                    (function() {
                    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
                    })();
                </script>
            </div>

            <!-- /#3 685/#2.3095/#2.1944/# -->
	
    


<div style="display: none; position: absolute; overflow-x: hidden; overflow-y: hidden; z-index: 1000; outline-width: 0px; outline-style: initial; outline-color: initial; " class="ui-dialog ui-widget ui-widget-content ui-corner-all " tabindex="-1" role="dialog" aria-labelledby="ui-dialog-title-dialog_bientot"><div class="ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix" unselectable="on"><span class="ui-dialog-title" id="ui-dialog-title-dialog_bientot" unselectable="on">Bientôt sur le Site du Zéro.</span><a href="?all=1#" class="ui-dialog-titlebar-close ui-corner-all" role="button" unselectable="on"><span class="ui-icon ui-icon-closethick" unselectable="on">close</span></a></div><div id="dialog_bientot" style="" class="ui-dialog-content ui-widget-content">
                <p>Le Site du Zéro vous proposera bientôt de nouveaux cours partant de Zéro dans d'autres domaines que l'informatique ! </p>
                 <a style="color:#2677C9;text-decoration:none;" href="http://www.siteduzero.com/tutoriel-1-433-sciences.html">Découvrir les cours scientifiques</a>
            </div><div class="ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"><button type="button" class="ui-state-default ui-corner-all">Ok</button></div></div><div id="tooltip" style="display: none; "><h3></h3><div class="body"></div><div class="url"></div></div></body></html>